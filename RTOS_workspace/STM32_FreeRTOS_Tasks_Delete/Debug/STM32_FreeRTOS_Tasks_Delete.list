
STM32_FreeRTOS_Tasks_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004948  08004948  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004948  08004948  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004948  08004948  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174d8  2000008c  080049dc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20017564  080049dc  00027564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eec7  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002002  00000000  00000000  0002ef83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00030f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  00031b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032d4  00000000  00000000  000325b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0f1  00000000  00000000  00035884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007726d  00000000  00000000  00041975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8be2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  000b8c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800478c 	.word	0x0800478c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800478c 	.word	0x0800478c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	460b      	mov	r3, r1
 80003e8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003ea:	2300      	movs	r3, #0
 80003ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	691a      	ldr	r2, [r3, #16]
 80003f2:	887b      	ldrh	r3, [r7, #2]
 80003f4:	4013      	ands	r3, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003fa:	2301      	movs	r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
 80003fe:	e001      	b.n	8000404 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000404:	7bfb      	ldrb	r3, [r7, #15]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	460b      	mov	r3, r1
 800041c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	887b      	ldrh	r3, [r7, #2]
 8000424:	405a      	eors	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	615a      	str	r2, [r3, #20]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000436:	b480      	push	{r7}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	807b      	strh	r3, [r7, #2]
 8000442:	4613      	mov	r3, r2
 8000444:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800044e:	787a      	ldrb	r2, [r7, #1]
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	f003 0307 	and.w	r3, r3, #7
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800045e:	887b      	ldrh	r3, [r7, #2]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b29b      	uxth	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3208      	adds	r2, #8
 800046a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046e:	887b      	ldrh	r3, [r7, #2]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	210f      	movs	r1, #15
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	8879      	ldrh	r1, [r7, #2]
 8000480:	08c9      	lsrs	r1, r1, #3
 8000482:	b289      	uxth	r1, r1
 8000484:	4608      	mov	r0, r1
 8000486:	ea02 0103 	and.w	r1, r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f100 0208 	add.w	r2, r0, #8
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000494:	887b      	ldrh	r3, [r7, #2]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b29b      	uxth	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3208      	adds	r2, #8
 80004a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004aa:	887b      	ldrh	r3, [r7, #2]
 80004ac:	08db      	lsrs	r3, r3, #3
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3208      	adds	r2, #8
 80004b6:	68b9      	ldr	r1, [r7, #8]
 80004b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <RCC_DeInit+0x60>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <RCC_DeInit+0x60>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <RCC_DeInit+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <RCC_DeInit+0x60>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <RCC_DeInit+0x60>)
 80004e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004ec:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <RCC_DeInit+0x60>)
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <RCC_DeInit+0x64>)
 80004f2:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <RCC_DeInit+0x60>)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <RCC_DeInit+0x68>)
 80004f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <RCC_DeInit+0x60>)
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <RCC_DeInit+0x6c>)
 8000500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <RCC_DeInit+0x60>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <RCC_DeInit+0x60>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <RCC_DeInit+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <RCC_DeInit+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023800 	.word	0x40023800
 800052c:	24003010 	.word	0x24003010
 8000530:	20003000 	.word	0x20003000
 8000534:	24003000 	.word	0x24003000

08000538 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	2302      	movs	r3, #2
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	2302      	movs	r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000558:	4b4a      	ldr	r3, [pc, #296]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f003 030c 	and.w	r3, r3, #12
 8000560:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2b08      	cmp	r3, #8
 8000566:	d011      	beq.n	800058c <RCC_GetClocksFreq+0x54>
 8000568:	69bb      	ldr	r3, [r7, #24]
 800056a:	2b08      	cmp	r3, #8
 800056c:	d844      	bhi.n	80005f8 <RCC_GetClocksFreq+0xc0>
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <RCC_GetClocksFreq+0x44>
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d004      	beq.n	8000584 <RCC_GetClocksFreq+0x4c>
 800057a:	e03d      	b.n	80005f8 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a42      	ldr	r2, [pc, #264]	; (8000688 <RCC_GetClocksFreq+0x150>)
 8000580:	601a      	str	r2, [r3, #0]
    break;
 8000582:	e03d      	b.n	8000600 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a41      	ldr	r2, [pc, #260]	; (800068c <RCC_GetClocksFreq+0x154>)
 8000588:	601a      	str	r2, [r3, #0]
    break;
 800058a:	e039      	b.n	8000600 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800058c:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0d9b      	lsrs	r3, r3, #22
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005a0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00c      	beq.n	80005c2 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005a8:	4a38      	ldr	r2, [pc, #224]	; (800068c <RCC_GetClocksFreq+0x154>)
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b0:	4a34      	ldr	r2, [pc, #208]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 80005b2:	6852      	ldr	r2, [r2, #4]
 80005b4:	0992      	lsrs	r2, r2, #6
 80005b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	e00b      	b.n	80005da <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005c2:	4a31      	ldr	r2, [pc, #196]	; (8000688 <RCC_GetClocksFreq+0x150>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 80005cc:	6852      	ldr	r2, [r2, #4]
 80005ce:	0992      	lsrs	r2, r2, #6
 80005d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005d4:	fb02 f303 	mul.w	r3, r2, r3
 80005d8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	0c1b      	lsrs	r3, r3, #16
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	3301      	adds	r3, #1
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
    break;
 80005f6:	e003      	b.n	8000600 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a23      	ldr	r2, [pc, #140]	; (8000688 <RCC_GetClocksFreq+0x150>)
 80005fc:	601a      	str	r2, [r3, #0]
    break;
 80005fe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000608:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <RCC_GetClocksFreq+0x158>)
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	40da      	lsrs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000630:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	0a9b      	lsrs	r3, r3, #10
 8000636:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000638:	4a15      	ldr	r2, [pc, #84]	; (8000690 <RCC_GetClocksFreq+0x158>)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	40da      	lsrs	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000658:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	0b5b      	lsrs	r3, r3, #13
 800065e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <RCC_GetClocksFreq+0x158>)
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	40da      	lsrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]
}
 8000678:	bf00      	nop
 800067a:	3724      	adds	r7, #36	; 0x24
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40023800 	.word	0x40023800
 8000688:	00f42400 	.word	0x00f42400
 800068c:	017d7840 	.word	0x017d7840
 8000690:	20000000 	.word	0x20000000

08000694 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	4909      	ldr	r1, [pc, #36]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006b2:	e006      	b.n	80006c2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4904      	ldr	r1, [pc, #16]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006be:	4013      	ands	r3, r2
 80006c0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ea:	4909      	ldr	r1, [pc, #36]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006f2:	e006      	b.n	8000702 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006fe:	4013      	ands	r3, r2
 8000700:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 8000728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4313      	orrs	r3, r2
 8000730:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000732:	e006      	b.n	8000742 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 8000736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	43db      	mvns	r3, r3
 800073c:	4904      	ldr	r1, [pc, #16]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 800073e:	4013      	ands	r3, r2
 8000740:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	8a1b      	ldrh	r3, [r3, #16]
 8000772:	b29b      	uxth	r3, r3
 8000774:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	88db      	ldrh	r3, [r3, #6]
 8000782:	461a      	mov	r2, r3
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	4313      	orrs	r3, r2
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	b29a      	uxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	899b      	ldrh	r3, [r3, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80007a0:	f023 030c 	bic.w	r3, r3, #12
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	889a      	ldrh	r2, [r3, #4]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	891b      	ldrh	r3, [r3, #8]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	4313      	orrs	r3, r2
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	8a9b      	ldrh	r3, [r3, #20]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	461a      	mov	r2, r3
 80007e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e2:	4313      	orrs	r3, r2
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fea0 	bl	8000538 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a30      	ldr	r2, [pc, #192]	; (80008bc <USART_Init+0x168>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d003      	beq.n	8000808 <USART_Init+0xb4>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <USART_Init+0x16c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d102      	bne.n	800080e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	e001      	b.n	8000812 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	899b      	ldrh	r3, [r3, #12]
 8000816:	b29b      	uxth	r3, r3
 8000818:	b21b      	sxth	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	da0c      	bge.n	8000838 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800081e:	6a3a      	ldr	r2, [r7, #32]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	009a      	lsls	r2, r3, #2
 8000828:	441a      	add	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fbb2 f3f3 	udiv	r3, r2, r3
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e00b      	b.n	8000850 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000838:	6a3a      	ldr	r2, [r7, #32]
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	009a      	lsls	r2, r3, #2
 8000842:	441a      	add	r2, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <USART_Init+0x170>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	095b      	lsrs	r3, r3, #5
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	2264      	movs	r2, #100	; 0x64
 8000864:	fb02 f303 	mul.w	r3, r2, r3
 8000868:	69fa      	ldr	r2, [r7, #28]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	899b      	ldrh	r3, [r3, #12]
 8000872:	b29b      	uxth	r3, r3
 8000874:	b21b      	sxth	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	da0c      	bge.n	8000894 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	3332      	adds	r3, #50	; 0x32
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <USART_Init+0x170>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800088e:	4313      	orrs	r3, r2
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
 8000892:	e00b      	b.n	80008ac <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	3332      	adds	r3, #50	; 0x32
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <USART_Init+0x170>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	095b      	lsrs	r3, r3, #5
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a8:	4313      	orrs	r3, r2
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	811a      	strh	r2, [r3, #8]
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40011000 	.word	0x40011000
 80008c0:	40011400 	.word	0x40011400
 80008c4:	51eb851f 	.word	0x51eb851f

080008c8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d008      	beq.n	80008ec <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	899b      	ldrh	r3, [r3, #12]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008ea:	e007      	b.n	80008fc <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	899b      	ldrh	r3, [r3, #12]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	819a      	strh	r2, [r3, #12]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	809a      	strh	r2, [r3, #4]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29a      	uxth	r2, r3
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	4013      	ands	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e001      	b.n	8000956 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f103 0208 	add.w	r2, r3, #8
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f103 0208 	add.w	r2, r3, #8
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0208 	add.w	r2, r3, #8
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d103      	bne.n	8000a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e00c      	b.n	8000a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3308      	adds	r3, #8
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e002      	b.n	8000a34 <vListInsert+0x2e>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d2f6      	bcs.n	8000a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	6892      	ldr	r2, [r2, #8]
 8000a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	6852      	ldr	r2, [r2, #4]
 8000a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d103      	bne.n	8000aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fffb 	bl	8001adc <pvPortMalloc>
 8000ae6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00e      	beq.n	8000b0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000aee:	2058      	movs	r0, #88	; 0x58
 8000af0:	f000 fff4 	bl	8001adc <pvPortMalloc>
 8000af4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30
 8000b02:	e005      	b.n	8000b10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000b04:	6978      	ldr	r0, [r7, #20]
 8000b06:	f001 f8ad 	bl	8001c64 <vPortFree>
 8000b0a:	e001      	b.n	8000b10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d013      	beq.n	8000b3e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9303      	str	r3, [sp, #12]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f80e 	bl	8000b4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000b32:	69f8      	ldr	r0, [r7, #28]
 8000b34:	f000 f8a0 	bl	8000c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	e002      	b.n	8000b44 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000b44:	69bb      	ldr	r3, [r7, #24]
	}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b088      	sub	sp, #32
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10a      	bne.n	8000b78 <prvInitialiseNewTask+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b66:	f383 8811 	msr	BASEPRI, r3
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b74:	bf00      	nop
 8000b76:	e7fe      	b.n	8000b76 <prvInitialiseNewTask+0x28>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	461a      	mov	r2, r3
 8000b82:	21a5      	movs	r1, #165	; 0xa5
 8000b84:	f003 f9da 	bl	8003f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b92:	3b01      	subs	r3, #1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	f023 0307 	bic.w	r3, r3, #7
 8000ba0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00a      	beq.n	8000bc2 <prvInitialiseNewTask+0x74>
	__asm volatile
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	613b      	str	r3, [r7, #16]
}
 8000bbe:	bf00      	nop
 8000bc0:	e7fe      	b.n	8000bc0 <prvInitialiseNewTask+0x72>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e012      	b.n	8000bee <prvInitialiseNewTask+0xa0>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	4413      	add	r3, r2
 8000bce:	7819      	ldrb	r1, [r3, #0]
 8000bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3334      	adds	r3, #52	; 0x34
 8000bd8:	460a      	mov	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	4413      	add	r3, r2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <prvInitialiseNewTask+0xa8>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	2b09      	cmp	r3, #9
 8000bf2:	d9e9      	bls.n	8000bc8 <prvInitialiseNewTask+0x7a>
 8000bf4:	e000      	b.n	8000bf8 <prvInitialiseNewTask+0xaa>
		{
			break;
 8000bf6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d901      	bls.n	8000c0a <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c06:	2304      	movs	r3, #4
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c14:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c18:	2200      	movs	r2, #0
 8000c1a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1e:	3304      	adds	r3, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff febf 	bl	80009a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	3318      	adds	r3, #24
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff feba 	bl	80009a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	f1c3 0205 	rsb	r2, r3, #5
 8000c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	2200      	movs	r2, #0
 8000c4a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	68f9      	ldr	r1, [r7, #12]
 8000c58:	69b8      	ldr	r0, [r7, #24]
 8000c5a:	f000 fce9 	bl	8001630 <pxPortInitialiseStack>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000c80:	f000 fe00 	bl	8001884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <prvAddNewTaskToReadyList+0xfc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a3a      	ldr	r2, [pc, #232]	; (8000d74 <prvAddNewTaskToReadyList+0xfc>)
 8000c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000c8e:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d109      	bne.n	8000caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000c96:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <prvAddNewTaskToReadyList+0xfc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d110      	bne.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ca4:	f000 fbae 	bl	8001404 <prvInitialiseTaskLists>
 8000ca8:	e00d      	b.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <prvAddNewTaskToReadyList+0x104>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d109      	bne.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d802      	bhi.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000cc0:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <prvAddNewTaskToReadyList+0x108>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a2c      	ldr	r2, [pc, #176]	; (8000d80 <prvAddNewTaskToReadyList+0x108>)
 8000cce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <prvAddNewTaskToReadyList+0x108>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d016      	beq.n	8000d0c <prvAddNewTaskToReadyList+0x94>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fb61 	bl	80033a8 <SEGGER_SYSVIEW_OnTaskCreate>
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461c      	mov	r4, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	1ae3      	subs	r3, r4, r3
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	462b      	mov	r3, r5
 8000d08:	f001 f96a 	bl	8001fe0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fbd2 	bl	80034b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	2201      	movs	r2, #1
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <prvAddNewTaskToReadyList+0x10c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <prvAddNewTaskToReadyList+0x10c>)
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <prvAddNewTaskToReadyList+0x110>)
 8000d34:	441a      	add	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	f7ff fe3e 	bl	80009be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d42:	f000 fdcf 	bl	80018e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <prvAddNewTaskToReadyList+0x104>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00e      	beq.n	8000d6c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <prvAddNewTaskToReadyList+0x114>)
 8000d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	f3bf 8f4f 	dsb	sy
 8000d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	20000180 	.word	0x20000180
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	2000018c 	.word	0x2000018c
 8000d80:	2000019c 	.word	0x2000019c
 8000d84:	20000188 	.word	0x20000188
 8000d88:	200000ac 	.word	0x200000ac
 8000d8c:	e000ed04 	.word	0xe000ed04

08000d90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8000d98:	f000 fd74 	bl	8001884 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d102      	bne.n	8000da8 <vTaskDelete+0x18>
 8000da2:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <vTaskDelete+0x110>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	e000      	b.n	8000daa <vTaskDelete+0x1a>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3304      	adds	r3, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fe61 	bl	8000a78 <uxListRemove>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d115      	bne.n	8000de8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc0:	4938      	ldr	r1, [pc, #224]	; (8000ea4 <vTaskDelete+0x114>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10a      	bne.n	8000de8 <vTaskDelete+0x58>
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <vTaskDelete+0x118>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4013      	ands	r3, r2
 8000de4:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <vTaskDelete+0x118>)
 8000de6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3318      	adds	r3, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3f 	bl	8000a78 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <vTaskDelete+0x11c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <vTaskDelete+0x11c>)
 8000e02:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <vTaskDelete+0x110>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d10b      	bne.n	8000e26 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3304      	adds	r3, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4826      	ldr	r0, [pc, #152]	; (8000eb0 <vTaskDelete+0x120>)
 8000e16:	f7ff fdd2 	bl	80009be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <vTaskDelete+0x124>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <vTaskDelete+0x124>)
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e009      	b.n	8000e3a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <vTaskDelete+0x128>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <vTaskDelete+0x128>)
 8000e2e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f000 fb55 	bl	80014e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8000e36:	f000 fb63 	bl	8001500 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fbdf 	bl	8003600 <SEGGER_SYSVIEW_ShrinkId>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4619      	mov	r1, r3
 8000e46:	2022      	movs	r0, #34	; 0x22
 8000e48:	f001 feb6 	bl	8002bb8 <SEGGER_SYSVIEW_RecordU32>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 f92e 	bl	80020b0 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 8000e54:	f000 fd46 	bl	80018e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <vTaskDelete+0x12c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d01b      	beq.n	8000e98 <vTaskDelete+0x108>
		{
			if( pxTCB == pxCurrentTCB )
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <vTaskDelete+0x110>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d116      	bne.n	8000e98 <vTaskDelete+0x108>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <vTaskDelete+0x130>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00a      	beq.n	8000e88 <vTaskDelete+0xf8>
	__asm volatile
 8000e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e76:	f383 8811 	msr	BASEPRI, r3
 8000e7a:	f3bf 8f6f 	isb	sy
 8000e7e:	f3bf 8f4f 	dsb	sy
 8000e82:	60bb      	str	r3, [r7, #8]
}
 8000e84:	bf00      	nop
 8000e86:	e7fe      	b.n	8000e86 <vTaskDelete+0xf6>
				portYIELD_WITHIN_API();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <vTaskDelete+0x134>)
 8000e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	f3bf 8f4f 	dsb	sy
 8000e94:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000a8 	.word	0x200000a8
 8000ea4:	200000ac 	.word	0x200000ac
 8000ea8:	20000188 	.word	0x20000188
 8000eac:	2000019c 	.word	0x2000019c
 8000eb0:	20000154 	.word	0x20000154
 8000eb4:	20000168 	.word	0x20000168
 8000eb8:	20000180 	.word	0x20000180
 8000ebc:	2000018c 	.word	0x2000018c
 8000ec0:	200001a8 	.word	0x200001a8
 8000ec4:	e000ed04 	.word	0xe000ed04

08000ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d01b      	beq.n	8000f12 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <vTaskDelay+0x68>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00a      	beq.n	8000ef8 <vTaskDelay+0x30>
	__asm volatile
 8000ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee6:	f383 8811 	msr	BASEPRI, r3
 8000eea:	f3bf 8f6f 	isb	sy
 8000eee:	f3bf 8f4f 	dsb	sy
 8000ef2:	60bb      	str	r3, [r7, #8]
}
 8000ef4:	bf00      	nop
 8000ef6:	e7fe      	b.n	8000ef6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8000ef8:	f000 f876 	bl	8000fe8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	2023      	movs	r0, #35	; 0x23
 8000f00:	f001 fe5a 	bl	8002bb8 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000f04:	2100      	movs	r1, #0
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fb1a 	bl	8001540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000f0c:	f000 f87a 	bl	8001004 <xTaskResumeAll>
 8000f10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d107      	bne.n	8000f28 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <vTaskDelay+0x6c>)
 8000f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	f3bf 8f4f 	dsb	sy
 8000f24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001a8 	.word	0x200001a8
 8000f34:	e000ed04 	.word	0xe000ed04

08000f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <vTaskStartScheduler+0x94>)
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	2282      	movs	r2, #130	; 0x82
 8000f4a:	4921      	ldr	r1, [pc, #132]	; (8000fd0 <vTaskStartScheduler+0x98>)
 8000f4c:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <vTaskStartScheduler+0x9c>)
 8000f4e:	f7ff fdbd 	bl	8000acc <xTaskCreate>
 8000f52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d124      	bne.n	8000fa4 <vTaskStartScheduler+0x6c>
	__asm volatile
 8000f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f5e:	f383 8811 	msr	BASEPRI, r3
 8000f62:	f3bf 8f6f 	isb	sy
 8000f66:	f3bf 8f4f 	dsb	sy
 8000f6a:	60bb      	str	r3, [r7, #8]
}
 8000f6c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <vTaskStartScheduler+0xa0>)
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <vTaskStartScheduler+0xa4>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <vTaskStartScheduler+0xa8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <vTaskStartScheduler+0xac>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <vTaskStartScheduler+0x94>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d102      	bne.n	8000f94 <vTaskStartScheduler+0x5c>
 8000f8e:	f002 f9ef 	bl	8003370 <SEGGER_SYSVIEW_OnIdle>
 8000f92:	e004      	b.n	8000f9e <vTaskStartScheduler+0x66>
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <vTaskStartScheduler+0xac>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fa49 	bl	8003430 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000f9e:	f000 fbcf 	bl	8001740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000fa2:	e00e      	b.n	8000fc2 <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000faa:	d10a      	bne.n	8000fc2 <vTaskStartScheduler+0x8a>
	__asm volatile
 8000fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	607b      	str	r3, [r7, #4]
}
 8000fbe:	bf00      	nop
 8000fc0:	e7fe      	b.n	8000fc0 <vTaskStartScheduler+0x88>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001a4 	.word	0x200001a4
 8000fd0:	080047a4 	.word	0x080047a4
 8000fd4:	080013d5 	.word	0x080013d5
 8000fd8:	200001a0 	.word	0x200001a0
 8000fdc:	2000018c 	.word	0x2000018c
 8000fe0:	20000184 	.word	0x20000184
 8000fe4:	200000a8 	.word	0x200000a8

08000fe8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <vTaskSuspendAll+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a03      	ldr	r2, [pc, #12]	; (8001000 <vTaskSuspendAll+0x18>)
 8000ff4:	6013      	str	r3, [r2, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	200001a8 	.word	0x200001a8

08001004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <xTaskResumeAll+0x11c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10a      	bne.n	8001030 <xTaskResumeAll+0x2c>
	__asm volatile
 800101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101e:	f383 8811 	msr	BASEPRI, r3
 8001022:	f3bf 8f6f 	isb	sy
 8001026:	f3bf 8f4f 	dsb	sy
 800102a:	603b      	str	r3, [r7, #0]
}
 800102c:	bf00      	nop
 800102e:	e7fe      	b.n	800102e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001030:	f000 fc28 	bl	8001884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <xTaskResumeAll+0x11c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a39      	ldr	r2, [pc, #228]	; (8001120 <xTaskResumeAll+0x11c>)
 800103c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <xTaskResumeAll+0x11c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d165      	bne.n	8001112 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <xTaskResumeAll+0x120>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d061      	beq.n	8001112 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800104e:	e032      	b.n	80010b6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <xTaskResumeAll+0x124>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3318      	adds	r3, #24
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fd0b 	bl	8000a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fd06 	bl	8000a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fa22 	bl	80034b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	2201      	movs	r2, #1
 800107a:	409a      	lsls	r2, r3
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <xTaskResumeAll+0x128>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4313      	orrs	r3, r2
 8001082:	4a2a      	ldr	r2, [pc, #168]	; (800112c <xTaskResumeAll+0x128>)
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <xTaskResumeAll+0x12c>)
 8001094:	441a      	add	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3304      	adds	r3, #4
 800109a:	4619      	mov	r1, r3
 800109c:	4610      	mov	r0, r2
 800109e:	f7ff fc8e 	bl	80009be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <xTaskResumeAll+0x130>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d302      	bcc.n	80010b6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <xTaskResumeAll+0x134>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <xTaskResumeAll+0x124>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1c8      	bne.n	8001050 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80010c4:	f000 fa1c 	bl	8001500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <xTaskResumeAll+0x138>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d010      	beq.n	80010f6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80010d4:	f000 f858 	bl	8001188 <xTaskIncrementTick>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <xTaskResumeAll+0x134>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f1      	bne.n	80010d4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <xTaskResumeAll+0x138>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <xTaskResumeAll+0x134>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d009      	beq.n	8001112 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80010fe:	2301      	movs	r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <xTaskResumeAll+0x13c>)
 8001104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001112:	f000 fbe7 	bl	80018e4 <vPortExitCritical>

	return xAlreadyYielded;
 8001116:	68bb      	ldr	r3, [r7, #8]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001a8 	.word	0x200001a8
 8001124:	20000180 	.word	0x20000180
 8001128:	20000140 	.word	0x20000140
 800112c:	20000188 	.word	0x20000188
 8001130:	200000ac 	.word	0x200000ac
 8001134:	200000a8 	.word	0x200000a8
 8001138:	20000194 	.word	0x20000194
 800113c:	20000190 	.word	0x20000190
 8001140:	e000ed04 	.word	0xe000ed04

08001144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <xTaskGetTickCount+0x1c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000184 	.word	0x20000184

08001164 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800116a:	f000 fc77 	bl	8001a5c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <xTaskGetTickCountFromISR+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001178:	683b      	ldr	r3, [r7, #0]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000184 	.word	0x20000184

08001188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <xTaskIncrementTick+0x14c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 808c 	bne.w	80012b4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <xTaskIncrementTick+0x150>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <xTaskIncrementTick+0x150>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d120      	bne.n	80011f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <xTaskIncrementTick+0x154>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80011ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011be:	f383 8811 	msr	BASEPRI, r3
 80011c2:	f3bf 8f6f 	isb	sy
 80011c6:	f3bf 8f4f 	dsb	sy
 80011ca:	603b      	str	r3, [r7, #0]
}
 80011cc:	bf00      	nop
 80011ce:	e7fe      	b.n	80011ce <xTaskIncrementTick+0x46>
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <xTaskIncrementTick+0x154>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <xTaskIncrementTick+0x158>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a40      	ldr	r2, [pc, #256]	; (80012dc <xTaskIncrementTick+0x154>)
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <xTaskIncrementTick+0x158>)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <xTaskIncrementTick+0x15c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a3e      	ldr	r2, [pc, #248]	; (80012e4 <xTaskIncrementTick+0x15c>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	f000 f987 	bl	8001500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80011f2:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <xTaskIncrementTick+0x160>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d34c      	bcc.n	8001296 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <xTaskIncrementTick+0x154>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d104      	bne.n	8001210 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <xTaskIncrementTick+0x160>)
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	601a      	str	r2, [r3, #0]
					break;
 800120e:	e042      	b.n	8001296 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <xTaskIncrementTick+0x154>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	d203      	bcs.n	8001230 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001228:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <xTaskIncrementTick+0x160>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800122e:	e032      	b.n	8001296 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3304      	adds	r3, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fc1f 	bl	8000a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3318      	adds	r3, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fc16 	bl	8000a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 f932 	bl	80034b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	2201      	movs	r2, #1
 800125a:	409a      	lsls	r2, r3
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <xTaskIncrementTick+0x164>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4313      	orrs	r3, r2
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <xTaskIncrementTick+0x164>)
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <xTaskIncrementTick+0x168>)
 8001274:	441a      	add	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3304      	adds	r3, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f7ff fb9e 	bl	80009be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <xTaskIncrementTick+0x16c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	429a      	cmp	r2, r3
 800128e:	d3b5      	bcc.n	80011fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001290:	2301      	movs	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001294:	e7b2      	b.n	80011fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <xTaskIncrementTick+0x16c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	4914      	ldr	r1, [pc, #80]	; (80012f0 <xTaskIncrementTick+0x168>)
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d907      	bls.n	80012be <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e004      	b.n	80012be <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <xTaskIncrementTick+0x170>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <xTaskIncrementTick+0x170>)
 80012bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <xTaskIncrementTick+0x174>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80012c6:	2301      	movs	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80012ca:	697b      	ldr	r3, [r7, #20]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001a8 	.word	0x200001a8
 80012d8:	20000184 	.word	0x20000184
 80012dc:	20000138 	.word	0x20000138
 80012e0:	2000013c 	.word	0x2000013c
 80012e4:	20000198 	.word	0x20000198
 80012e8:	200001a0 	.word	0x200001a0
 80012ec:	20000188 	.word	0x20000188
 80012f0:	200000ac 	.word	0x200000ac
 80012f4:	200000a8 	.word	0x200000a8
 80012f8:	20000190 	.word	0x20000190
 80012fc:	20000194 	.word	0x20000194

08001300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <vTaskSwitchContext+0xbc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <vTaskSwitchContext+0xc0>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001314:	e04d      	b.n	80013b2 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <vTaskSwitchContext+0xc0>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <vTaskSwitchContext+0xc4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	f1c3 031f 	rsb	r3, r3, #31
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	4925      	ldr	r1, [pc, #148]	; (80013c8 <vTaskSwitchContext+0xc8>)
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <vTaskSwitchContext+0x5c>
	__asm volatile
 8001346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134a:	f383 8811 	msr	BASEPRI, r3
 800134e:	f3bf 8f6f 	isb	sy
 8001352:	f3bf 8f4f 	dsb	sy
 8001356:	607b      	str	r3, [r7, #4]
}
 8001358:	bf00      	nop
 800135a:	e7fe      	b.n	800135a <vTaskSwitchContext+0x5a>
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <vTaskSwitchContext+0xc8>)
 8001368:	4413      	add	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	3308      	adds	r3, #8
 800137e:	429a      	cmp	r2, r3
 8001380:	d104      	bne.n	800138c <vTaskSwitchContext+0x8c>
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <vTaskSwitchContext+0xcc>)
 8001394:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <vTaskSwitchContext+0xcc>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <vTaskSwitchContext+0xd0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d102      	bne.n	80013a8 <vTaskSwitchContext+0xa8>
 80013a2:	f001 ffe5 	bl	8003370 <SEGGER_SYSVIEW_OnIdle>
}
 80013a6:	e004      	b.n	80013b2 <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <vTaskSwitchContext+0xcc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 f83f 	bl	8003430 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001a8 	.word	0x200001a8
 80013c0:	20000194 	.word	0x20000194
 80013c4:	20000188 	.word	0x20000188
 80013c8:	200000ac 	.word	0x200000ac
 80013cc:	200000a8 	.word	0x200000a8
 80013d0:	200001a4 	.word	0x200001a4

080013d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80013dc:	f000 f852 	bl	8001484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <prvIdleTask+0x28>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d9f9      	bls.n	80013dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <prvIdleTask+0x2c>)
 80013ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f3bf 8f4f 	dsb	sy
 80013f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80013f8:	e7f0      	b.n	80013dc <prvIdleTask+0x8>
 80013fa:	bf00      	nop
 80013fc:	200000ac 	.word	0x200000ac
 8001400:	e000ed04 	.word	0xe000ed04

08001404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e00c      	b.n	800142a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <prvInitialiseTaskLists+0x60>)
 800141c:	4413      	add	r3, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff faa0 	bl	8000964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3301      	adds	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d9ef      	bls.n	8001410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <prvInitialiseTaskLists+0x64>)
 8001432:	f7ff fa97 	bl	8000964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <prvInitialiseTaskLists+0x68>)
 8001438:	f7ff fa94 	bl	8000964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <prvInitialiseTaskLists+0x6c>)
 800143e:	f7ff fa91 	bl	8000964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001442:	480c      	ldr	r0, [pc, #48]	; (8001474 <prvInitialiseTaskLists+0x70>)
 8001444:	f7ff fa8e 	bl	8000964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <prvInitialiseTaskLists+0x74>)
 800144a:	f7ff fa8b 	bl	8000964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <prvInitialiseTaskLists+0x78>)
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <prvInitialiseTaskLists+0x64>)
 8001452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <prvInitialiseTaskLists+0x7c>)
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <prvInitialiseTaskLists+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000ac 	.word	0x200000ac
 8001468:	20000110 	.word	0x20000110
 800146c:	20000124 	.word	0x20000124
 8001470:	20000140 	.word	0x20000140
 8001474:	20000154 	.word	0x20000154
 8001478:	2000016c 	.word	0x2000016c
 800147c:	20000138 	.word	0x20000138
 8001480:	2000013c 	.word	0x2000013c

08001484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800148a:	e019      	b.n	80014c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800148c:	f000 f9fa 	bl	8001884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <prvCheckTasksWaitingTermination+0x50>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3304      	adds	r3, #4
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff faeb 	bl	8000a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <prvCheckTasksWaitingTermination+0x54>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <prvCheckTasksWaitingTermination+0x54>)
 80014aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <prvCheckTasksWaitingTermination+0x58>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <prvCheckTasksWaitingTermination+0x58>)
 80014b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80014b6:	f000 fa15 	bl	80018e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f810 	bl	80014e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <prvCheckTasksWaitingTermination+0x58>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e1      	bne.n	800148c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000154 	.word	0x20000154
 80014d8:	20000180 	.word	0x20000180
 80014dc:	20000168 	.word	0x20000168

080014e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fbb9 	bl	8001c64 <vPortFree>
			vPortFree( pxTCB );
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fbb6 	bl	8001c64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <prvResetNextTaskUnblockTime+0x38>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <prvResetNextTaskUnblockTime+0x3c>)
 8001512:	f04f 32ff 	mov.w	r2, #4294967295
 8001516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001518:	e008      	b.n	800152c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <prvResetNextTaskUnblockTime+0x38>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <prvResetNextTaskUnblockTime+0x3c>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	20000138 	.word	0x20000138
 800153c:	200001a0 	.word	0x200001a0

08001540 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <prvAddCurrentTaskToDelayedList+0xd4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3304      	adds	r3, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fa8e 	bl	8000a78 <uxListRemove>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10b      	bne.n	800157a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	2201      	movs	r2, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4013      	ands	r3, r2
 8001576:	4a29      	ldr	r2, [pc, #164]	; (800161c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001578:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d110      	bne.n	80015a4 <prvAddCurrentTaskToDelayedList+0x64>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00d      	beq.n	80015a4 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	211b      	movs	r1, #27
 800158e:	4618      	mov	r0, r3
 8001590:	f001 ffd6 	bl	8003540 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3304      	adds	r3, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4820      	ldr	r0, [pc, #128]	; (8001620 <prvAddCurrentTaskToDelayedList+0xe0>)
 800159e:	f7ff fa0e 	bl	80009be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80015a2:	e032      	b.n	800160a <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d20f      	bcs.n	80015dc <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2104      	movs	r1, #4
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 ffbc 	bl	8003540 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe4>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3304      	adds	r3, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7ff fa16 	bl	8000a06 <vListInsert>
}
 80015da:	e016      	b.n	800160a <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2104      	movs	r1, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 ffac 	bl	8003540 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f7ff fa06 	bl	8000a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <prvAddCurrentTaskToDelayedList+0xec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	429a      	cmp	r2, r3
 8001602:	d202      	bcs.n	800160a <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8001604:	4a09      	ldr	r2, [pc, #36]	; (800162c <prvAddCurrentTaskToDelayedList+0xec>)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000184 	.word	0x20000184
 8001618:	200000a8 	.word	0x200000a8
 800161c:	20000188 	.word	0x20000188
 8001620:	2000016c 	.word	0x2000016c
 8001624:	2000013c 	.word	0x2000013c
 8001628:	20000138 	.word	0x20000138
 800162c:	200001a0 	.word	0x200001a0

08001630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b04      	subs	r3, #4
 8001640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3b04      	subs	r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f023 0201 	bic.w	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b04      	subs	r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001660:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <pxPortInitialiseStack+0x64>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3b14      	subs	r3, #20
 800166a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3b04      	subs	r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f06f 0202 	mvn.w	r2, #2
 800167e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3b20      	subs	r3, #32
 8001684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	08001699 	.word	0x08001699

08001698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <prvTaskExitError+0x54>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016aa:	d00a      	beq.n	80016c2 <prvTaskExitError+0x2a>
	__asm volatile
 80016ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b0:	f383 8811 	msr	BASEPRI, r3
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	60fb      	str	r3, [r7, #12]
}
 80016be:	bf00      	nop
 80016c0:	e7fe      	b.n	80016c0 <prvTaskExitError+0x28>
	__asm volatile
 80016c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c6:	f383 8811 	msr	BASEPRI, r3
 80016ca:	f3bf 8f6f 	isb	sy
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	60bb      	str	r3, [r7, #8]
}
 80016d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80016d6:	bf00      	nop
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0fc      	beq.n	80016d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000010 	.word	0x20000010

080016f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <pxCurrentTCBConst2>)
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	6808      	ldr	r0, [r1, #0]
 80016f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fa:	f380 8809 	msr	PSP, r0
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f380 8811 	msr	BASEPRI, r0
 800170a:	4770      	bx	lr
 800170c:	f3af 8000 	nop.w

08001710 <pxCurrentTCBConst2>:
 8001710:	200000a8 	.word	0x200000a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop

08001718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <prvPortStartFirstTask+0x24>)
 800171a:	6800      	ldr	r0, [r0, #0]
 800171c:	6800      	ldr	r0, [r0, #0]
 800171e:	f380 8808 	msr	MSP, r0
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f380 8814 	msr	CONTROL, r0
 800172a:	b662      	cpsie	i
 800172c:	b661      	cpsie	f
 800172e:	f3bf 8f4f 	dsb	sy
 8001732:	f3bf 8f6f 	isb	sy
 8001736:	df00      	svc	0
 8001738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800173a:	bf00      	nop
 800173c:	e000ed08 	.word	0xe000ed08

08001740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <xPortStartScheduler+0x120>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a46      	ldr	r2, [pc, #280]	; (8001864 <xPortStartScheduler+0x124>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d10a      	bne.n	8001766 <xPortStartScheduler+0x26>
	__asm volatile
 8001750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001754:	f383 8811 	msr	BASEPRI, r3
 8001758:	f3bf 8f6f 	isb	sy
 800175c:	f3bf 8f4f 	dsb	sy
 8001760:	613b      	str	r3, [r7, #16]
}
 8001762:	bf00      	nop
 8001764:	e7fe      	b.n	8001764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <xPortStartScheduler+0x120>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a3f      	ldr	r2, [pc, #252]	; (8001868 <xPortStartScheduler+0x128>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d10a      	bne.n	8001786 <xPortStartScheduler+0x46>
	__asm volatile
 8001770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001774:	f383 8811 	msr	BASEPRI, r3
 8001778:	f3bf 8f6f 	isb	sy
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	60fb      	str	r3, [r7, #12]
}
 8001782:	bf00      	nop
 8001784:	e7fe      	b.n	8001784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <xPortStartScheduler+0x12c>)
 8001788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <xPortStartScheduler+0x130>)
 80017ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <xPortStartScheduler+0x134>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017b4:	e009      	b.n	80017ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <xPortStartScheduler+0x134>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a2d      	ldr	r2, [pc, #180]	; (8001874 <xPortStartScheduler+0x134>)
 80017be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	2b80      	cmp	r3, #128	; 0x80
 80017d4:	d0ef      	beq.n	80017b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <xPortStartScheduler+0x134>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d00a      	beq.n	80017f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80017e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	60bb      	str	r3, [r7, #8]
}
 80017f4:	bf00      	nop
 80017f6:	e7fe      	b.n	80017f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <xPortStartScheduler+0x134>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <xPortStartScheduler+0x134>)
 8001800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <xPortStartScheduler+0x134>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800180a:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <xPortStartScheduler+0x134>)
 800180c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <xPortStartScheduler+0x138>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <xPortStartScheduler+0x138>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <xPortStartScheduler+0x138>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <xPortStartScheduler+0x138>)
 8001828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800182c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800182e:	f000 f8e7 	bl	8001a00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <xPortStartScheduler+0x13c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001838:	f000 f906 	bl	8001a48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <xPortStartScheduler+0x140>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <xPortStartScheduler+0x140>)
 8001842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001848:	f7ff ff66 	bl	8001718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800184c:	f7ff fd58 	bl	8001300 <vTaskSwitchContext>
	prvTaskExitError();
 8001850:	f7ff ff22 	bl	8001698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00
 8001864:	410fc271 	.word	0x410fc271
 8001868:	410fc270 	.word	0x410fc270
 800186c:	e000e400 	.word	0xe000e400
 8001870:	200001ac 	.word	0x200001ac
 8001874:	200001b0 	.word	0x200001b0
 8001878:	e000ed20 	.word	0xe000ed20
 800187c:	20000010 	.word	0x20000010
 8001880:	e000ef34 	.word	0xe000ef34

08001884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
	__asm volatile
 800188a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188e:	f383 8811 	msr	BASEPRI, r3
 8001892:	f3bf 8f6f 	isb	sy
 8001896:	f3bf 8f4f 	dsb	sy
 800189a:	607b      	str	r3, [r7, #4]
}
 800189c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <vPortEnterCritical+0x58>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <vPortEnterCritical+0x58>)
 80018a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <vPortEnterCritical+0x58>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d10f      	bne.n	80018d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <vPortEnterCritical+0x5c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80018ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018be:	f383 8811 	msr	BASEPRI, r3
 80018c2:	f3bf 8f6f 	isb	sy
 80018c6:	f3bf 8f4f 	dsb	sy
 80018ca:	603b      	str	r3, [r7, #0]
}
 80018cc:	bf00      	nop
 80018ce:	e7fe      	b.n	80018ce <vPortEnterCritical+0x4a>
	}
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	20000010 	.word	0x20000010
 80018e0:	e000ed04 	.word	0xe000ed04

080018e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <vPortExitCritical+0x50>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <vPortExitCritical+0x24>
	__asm volatile
 80018f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f6:	f383 8811 	msr	BASEPRI, r3
 80018fa:	f3bf 8f6f 	isb	sy
 80018fe:	f3bf 8f4f 	dsb	sy
 8001902:	607b      	str	r3, [r7, #4]
}
 8001904:	bf00      	nop
 8001906:	e7fe      	b.n	8001906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <vPortExitCritical+0x50>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <vPortExitCritical+0x50>)
 8001910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <vPortExitCritical+0x50>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <vPortExitCritical+0x42>
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000010 	.word	0x20000010
	...

08001940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001940:	f3ef 8009 	mrs	r0, PSP
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <pxCurrentTCBConst>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f01e 0f10 	tst.w	lr, #16
 8001950:	bf08      	it	eq
 8001952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800195a:	6010      	str	r0, [r2, #0]
 800195c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001964:	f380 8811 	msr	BASEPRI, r0
 8001968:	f3bf 8f4f 	dsb	sy
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f7ff fcc6 	bl	8001300 <vTaskSwitchContext>
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f380 8811 	msr	BASEPRI, r0
 800197c:	bc09      	pop	{r0, r3}
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	6808      	ldr	r0, [r1, #0]
 8001982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001986:	f01e 0f10 	tst.w	lr, #16
 800198a:	bf08      	it	eq
 800198c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001990:	f380 8809 	msr	PSP, r0
 8001994:	f3bf 8f6f 	isb	sy
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	f3af 8000 	nop.w

080019a0 <pxCurrentTCBConst>:
 80019a0:	200000a8 	.word	0x200000a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop

080019a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	__asm volatile
 80019ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b2:	f383 8811 	msr	BASEPRI, r3
 80019b6:	f3bf 8f6f 	isb	sy
 80019ba:	f3bf 8f4f 	dsb	sy
 80019be:	607b      	str	r3, [r7, #4]
}
 80019c0:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80019c2:	f001 fc5b 	bl	800327c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80019c6:	f7ff fbdf 	bl	8001188 <xTaskIncrementTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80019d0:	f001 fcb2 	bl	8003338 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <SysTick_Handler+0x54>)
 80019d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e003      	b.n	80019e6 <SysTick_Handler+0x3e>
		}
		else
		{
			traceISR_EXIT();
 80019de:	f001 fc8f 	bl	8003300 <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 80019e2:	f7ff fc8d 	bl	8001300 <vTaskSwitchContext>
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f383 8811 	msr	BASEPRI, r3
}
 80019f0:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000ed04 	.word	0xe000ed04

08001a00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <vPortSetupTimerInterrupt+0x34>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <vPortSetupTimerInterrupt+0x38>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <vPortSetupTimerInterrupt+0x3c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <vPortSetupTimerInterrupt+0x40>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <vPortSetupTimerInterrupt+0x44>)
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <vPortSetupTimerInterrupt+0x34>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010
 8001a38:	e000e018 	.word	0xe000e018
 8001a3c:	20000014 	.word	0x20000014
 8001a40:	10624dd3 	.word	0x10624dd3
 8001a44:	e000e014 	.word	0xe000e014

08001a48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a58 <vPortEnableVFP+0x10>
 8001a4c:	6801      	ldr	r1, [r0, #0]
 8001a4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a52:	6001      	str	r1, [r0, #0]
 8001a54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001a56:	bf00      	nop
 8001a58:	e000ed88 	.word	0xe000ed88

08001a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001a62:	f3ef 8305 	mrs	r3, IPSR
 8001a66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	d914      	bls.n	8001a98 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <vPortValidateInterruptPriority+0x70>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <vPortValidateInterruptPriority+0x74>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	7afa      	ldrb	r2, [r7, #11]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d20a      	bcs.n	8001a98 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8001a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a86:	f383 8811 	msr	BASEPRI, r3
 8001a8a:	f3bf 8f6f 	isb	sy
 8001a8e:	f3bf 8f4f 	dsb	sy
 8001a92:	607b      	str	r3, [r7, #4]
}
 8001a94:	bf00      	nop
 8001a96:	e7fe      	b.n	8001a96 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <vPortValidateInterruptPriority+0x78>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <vPortValidateInterruptPriority+0x7c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d90a      	bls.n	8001abe <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8001aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	603b      	str	r3, [r7, #0]
}
 8001aba:	bf00      	nop
 8001abc:	e7fe      	b.n	8001abc <vPortValidateInterruptPriority+0x60>
	}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e3f0 	.word	0xe000e3f0
 8001ad0:	200001ac 	.word	0x200001ac
 8001ad4:	e000ed0c 	.word	0xe000ed0c
 8001ad8:	200001b0 	.word	0x200001b0

08001adc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001ae8:	f7ff fa7e 	bl	8000fe8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <pvPortMalloc+0x174>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001af4:	f000 f910 	bl	8001d18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <pvPortMalloc+0x178>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 808e 	bne.w	8001c22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01d      	beq.n	8001b48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d014      	beq.n	8001b48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f023 0307 	bic.w	r3, r3, #7
 8001b24:	3308      	adds	r3, #8
 8001b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00a      	beq.n	8001b48 <pvPortMalloc+0x6c>
	__asm volatile
 8001b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	617b      	str	r3, [r7, #20]
}
 8001b44:	bf00      	nop
 8001b46:	e7fe      	b.n	8001b46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d069      	beq.n	8001c22 <pvPortMalloc+0x146>
 8001b4e:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <pvPortMalloc+0x17c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d864      	bhi.n	8001c22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <pvPortMalloc+0x180>)
 8001b5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b5c:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <pvPortMalloc+0x180>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b62:	e004      	b.n	8001b6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d903      	bls.n	8001b80 <pvPortMalloc+0xa4>
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f1      	bne.n	8001b64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <pvPortMalloc+0x174>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d04b      	beq.n	8001c22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2208      	movs	r2, #8
 8001b90:	4413      	add	r3, r2
 8001b92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	1ad2      	subs	r2, r2, r3
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d91f      	bls.n	8001bec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00a      	beq.n	8001bd4 <pvPortMalloc+0xf8>
	__asm volatile
 8001bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	613b      	str	r3, [r7, #16]
}
 8001bd0:	bf00      	nop
 8001bd2:	e7fe      	b.n	8001bd2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1ad2      	subs	r2, r2, r3
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001be6:	69b8      	ldr	r0, [r7, #24]
 8001be8:	f000 f8f8 	bl	8001ddc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <pvPortMalloc+0x17c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <pvPortMalloc+0x17c>)
 8001bf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <pvPortMalloc+0x17c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <pvPortMalloc+0x184>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d203      	bcs.n	8001c0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <pvPortMalloc+0x17c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <pvPortMalloc+0x184>)
 8001c0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <pvPortMalloc+0x178>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c22:	f7ff f9ef 	bl	8001004 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <pvPortMalloc+0x16a>
	__asm volatile
 8001c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	f3bf 8f6f 	isb	sy
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	60fb      	str	r3, [r7, #12]
}
 8001c42:	bf00      	nop
 8001c44:	e7fe      	b.n	8001c44 <pvPortMalloc+0x168>
	return pvReturn;
 8001c46:	69fb      	ldr	r3, [r7, #28]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20012dbc 	.word	0x20012dbc
 8001c54:	20012dc8 	.word	0x20012dc8
 8001c58:	20012dc0 	.word	0x20012dc0
 8001c5c:	20012db4 	.word	0x20012db4
 8001c60:	20012dc4 	.word	0x20012dc4

08001c64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d048      	beq.n	8001d08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001c76:	2308      	movs	r3, #8
 8001c78:	425b      	negs	r3, r3
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <vPortFree+0xac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10a      	bne.n	8001ca8 <vPortFree+0x44>
	__asm volatile
 8001c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c96:	f383 8811 	msr	BASEPRI, r3
 8001c9a:	f3bf 8f6f 	isb	sy
 8001c9e:	f3bf 8f4f 	dsb	sy
 8001ca2:	60fb      	str	r3, [r7, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	e7fe      	b.n	8001ca6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <vPortFree+0x62>
	__asm volatile
 8001cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	60bb      	str	r3, [r7, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	e7fe      	b.n	8001cc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <vPortFree+0xac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d019      	beq.n	8001d08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d115      	bne.n	8001d08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <vPortFree+0xac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001cec:	f7ff f97c 	bl	8000fe8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <vPortFree+0xb0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <vPortFree+0xb0>)
 8001cfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001cfe:	6938      	ldr	r0, [r7, #16]
 8001d00:	f000 f86c 	bl	8001ddc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d04:	f7ff f97e 	bl	8001004 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20012dc8 	.word	0x20012dc8
 8001d14:	20012dc0 	.word	0x20012dc0

08001d18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d1e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001d22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <prvHeapInit+0xac>)
 8001d26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3307      	adds	r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f023 0307 	bic.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <prvHeapInit+0xac>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <prvHeapInit+0xb0>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <prvHeapInit+0xb0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4413      	add	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001d64:	2208      	movs	r2, #8
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0307 	bic.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <prvHeapInit+0xb4>)
 8001d78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <prvHeapInit+0xb4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <prvHeapInit+0xb4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	1ad2      	subs	r2, r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <prvHeapInit+0xb4>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <prvHeapInit+0xb8>)
 8001da6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <prvHeapInit+0xbc>)
 8001dae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <prvHeapInit+0xc0>)
 8001db2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001db6:	601a      	str	r2, [r3, #0]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	200001b4 	.word	0x200001b4
 8001dc8:	20012db4 	.word	0x20012db4
 8001dcc:	20012dbc 	.word	0x20012dbc
 8001dd0:	20012dc4 	.word	0x20012dc4
 8001dd4:	20012dc0 	.word	0x20012dc0
 8001dd8:	20012dc8 	.word	0x20012dc8

08001ddc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <prvInsertBlockIntoFreeList+0xac>)
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e002      	b.n	8001df0 <prvInsertBlockIntoFreeList+0x14>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d8f7      	bhi.n	8001dea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4413      	add	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d108      	bne.n	8001e1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	441a      	add	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	441a      	add	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d118      	bne.n	8001e64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <prvInsertBlockIntoFreeList+0xb0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d00d      	beq.n	8001e5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	441a      	add	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e008      	b.n	8001e6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <prvInsertBlockIntoFreeList+0xb0>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e003      	b.n	8001e6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d002      	beq.n	8001e7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20012db4 	.word	0x20012db4
 8001e8c:	20012dbc 	.word	0x20012dbc

08001e90 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <_cbSendSystemDesc+0x14>)
 8001e96:	f001 f99b 	bl	80031d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <_cbSendSystemDesc+0x18>)
 8001e9c:	f001 f998 	bl	80031d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	080047ac 	.word	0x080047ac
 8001ea8:	080047f4 	.word	0x080047f4

08001eac <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SEGGER_SYSVIEW_Conf+0x20>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SEGGER_SYSVIEW_Conf+0x20>)
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SEGGER_SYSVIEW_Conf+0x24>)
 8001eba:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <SEGGER_SYSVIEW_Conf+0x28>)
 8001ebc:	f000 fe10 	bl	8002ae0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ec0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001ec4:	f000 fe4a 	bl	8002b5c <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000014 	.word	0x20000014
 8001ed0:	08001e91 	.word	0x08001e91
 8001ed4:	08004900 	.word	0x08004900

08001ed8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	e033      	b.n	8001f4c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001ee4:	491e      	ldr	r1, [pc, #120]	; (8001f60 <_cbSendTaskList+0x88>)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	491a      	ldr	r1, [pc, #104]	; (8001f60 <_cbSendTaskList+0x88>)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3304      	adds	r3, #4
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	4c16      	ldr	r4, [pc, #88]	; (8001f60 <_cbSendTaskList+0x88>)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4423      	add	r3, r4
 8001f14:	3308      	adds	r3, #8
 8001f16:	681c      	ldr	r4, [r3, #0]
 8001f18:	4d11      	ldr	r5, [pc, #68]	; (8001f60 <_cbSendTaskList+0x88>)
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	442b      	add	r3, r5
 8001f26:	330c      	adds	r3, #12
 8001f28:	681d      	ldr	r5, [r3, #0]
 8001f2a:	4e0d      	ldr	r6, [pc, #52]	; (8001f60 <_cbSendTaskList+0x88>)
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4433      	add	r3, r6
 8001f38:	3310      	adds	r3, #16
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	462b      	mov	r3, r5
 8001f40:	4622      	mov	r2, r4
 8001f42:	f000 f971 	bl	8002228 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <_cbSendTaskList+0x8c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d3c6      	bcc.n	8001ee4 <_cbSendTaskList+0xc>
  }
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f60:	20012dcc 	.word	0x20012dcc
 8001f64:	20012e6c 	.word	0x20012e6c

08001f68 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001f6e:	f7ff f8f9 	bl	8001164 <xTaskGetTickCountFromISR>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	f04f 0400 	mov.w	r4, #0
 8001f8a:	f04f 0500 	mov.w	r5, #0
 8001f8e:	015d      	lsls	r5, r3, #5
 8001f90:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001f94:	0154      	lsls	r4, r2, #5
 8001f96:	4622      	mov	r2, r4
 8001f98:	462b      	mov	r3, r5
 8001f9a:	1a12      	subs	r2, r2, r0
 8001f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa0:	f04f 0400 	mov.w	r4, #0
 8001fa4:	f04f 0500 	mov.w	r5, #0
 8001fa8:	009d      	lsls	r5, r3, #2
 8001faa:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001fae:	0094      	lsls	r4, r2, #2
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	462b      	mov	r3, r5
 8001fb4:	1812      	adds	r2, r2, r0
 8001fb6:	eb41 0303 	adc.w	r3, r1, r3
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	00d9      	lsls	r1, r3, #3
 8001fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fc8:	00d0      	lsls	r0, r2, #3
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bdb0      	pop	{r4, r5, r7, pc}

08001fe0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001fee:	2205      	movs	r2, #5
 8001ff0:	492b      	ldr	r1, [pc, #172]	; (80020a0 <SYSVIEW_AddTask+0xc0>)
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f001 ff86 	bl	8003f04 <memcmp>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d04b      	beq.n	8002096 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b07      	cmp	r3, #7
 8002004:	d903      	bls.n	800200e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002006:	4828      	ldr	r0, [pc, #160]	; (80020a8 <SYSVIEW_AddTask+0xc8>)
 8002008:	f001 fbe8 	bl	80037dc <SEGGER_SYSVIEW_Warn>
    return;
 800200c:	e044      	b.n	8002098 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4926      	ldr	r1, [pc, #152]	; (80020ac <SYSVIEW_AddTask+0xcc>)
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4921      	ldr	r1, [pc, #132]	; (80020ac <SYSVIEW_AddTask+0xcc>)
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	3304      	adds	r3, #4
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	491b      	ldr	r1, [pc, #108]	; (80020ac <SYSVIEW_AddTask+0xcc>)
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3308      	adds	r3, #8
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4916      	ldr	r1, [pc, #88]	; (80020ac <SYSVIEW_AddTask+0xcc>)
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	330c      	adds	r3, #12
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4910      	ldr	r1, [pc, #64]	; (80020ac <SYSVIEW_AddTask+0xcc>)
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3310      	adds	r3, #16
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <SYSVIEW_AddTask+0xc4>)
 8002082:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f8ca 	bl	8002228 <SYSVIEW_SendTaskInfo>
 8002094:	e000      	b.n	8002098 <SYSVIEW_AddTask+0xb8>
    return;
 8002096:	bf00      	nop

}
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08004804 	.word	0x08004804
 80020a4:	20012e6c 	.word	0x20012e6c
 80020a8:	0800480c 	.word	0x0800480c
 80020ac:	20012dcc 	.word	0x20012dcc

080020b0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80ab 	beq.w	8002218 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e00d      	b.n	80020e4 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80020c8:	4956      	ldr	r1, [pc, #344]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d008      	beq.n	80020f0 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d3ec      	bcc.n	80020c8 <SYSVIEW_DeleteTask+0x18>
 80020ee:	e000      	b.n	80020f2 <SYSVIEW_DeleteTask+0x42>
      break;
 80020f0:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80020f2:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d111      	bne.n	8002122 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4a46      	ldr	r2, [pc, #280]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 800210a:	4413      	add	r3, r2
 800210c:	2214      	movs	r2, #20
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f001 ff13 	bl	8003f3c <memset>
    _NumTasks--;
 8002116:	4b42      	ldr	r3, [pc, #264]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3b01      	subs	r3, #1
 800211c:	4a40      	ldr	r2, [pc, #256]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e07b      	b.n	800221a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d276      	bcs.n	800221a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800212c:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	493c      	ldr	r1, [pc, #240]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	4838      	ldr	r0, [pc, #224]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4403      	add	r3, r0
 800214e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8002150:	4b33      	ldr	r3, [pc, #204]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	4933      	ldr	r1, [pc, #204]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	482f      	ldr	r0, [pc, #188]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4403      	add	r3, r0
 8002174:	3304      	adds	r3, #4
 8002176:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	4929      	ldr	r1, [pc, #164]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3308      	adds	r3, #8
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	4825      	ldr	r0, [pc, #148]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4403      	add	r3, r0
 800219c:	3308      	adds	r3, #8
 800219e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	491f      	ldr	r1, [pc, #124]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	330c      	adds	r3, #12
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	481b      	ldr	r0, [pc, #108]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4403      	add	r3, r0
 80021c4:	330c      	adds	r3, #12
 80021c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	4915      	ldr	r1, [pc, #84]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3310      	adds	r3, #16
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	4811      	ldr	r0, [pc, #68]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4403      	add	r3, r0
 80021ec:	3310      	adds	r3, #16
 80021ee:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <SYSVIEW_DeleteTask+0x174>)
 8002200:	4413      	add	r3, r2
 8002202:	2214      	movs	r2, #20
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f001 fe98 	bl	8003f3c <memset>
    _NumTasks--;
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3b01      	subs	r3, #1
 8002212:	4a03      	ldr	r2, [pc, #12]	; (8002220 <SYSVIEW_DeleteTask+0x170>)
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e000      	b.n	800221a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002218:	bf00      	nop
  }
}
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20012e6c 	.word	0x20012e6c
 8002224:	20012dcc 	.word	0x20012dcc

08002228 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	2214      	movs	r2, #20
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f001 fe7c 	bl	8003f3c <memset>
  TaskInfo.TaskID     = TaskID;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4618      	mov	r0, r3
 800225e:	f000 febd 	bl	8002fdc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002262:	bf00      	nop
 8002264:	3728      	adds	r7, #40	; 0x28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <_DoInit+0x8c>)
 8002274:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2203      	movs	r2, #3
 8002280:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <_DoInit+0x90>)
 8002286:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <_DoInit+0x94>)
 800228c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002294:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a14      	ldr	r2, [pc, #80]	; (80022fc <_DoInit+0x90>)
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <_DoInit+0x98>)
 80022b2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2210      	movs	r2, #16
 80022b8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3307      	adds	r3, #7
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <_DoInit+0x9c>)
 80022d2:	6810      	ldr	r0, [r2, #0]
 80022d4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <_DoInit+0xa0>)
 80022da:	6810      	ldr	r0, [r2, #0]
 80022dc:	6018      	str	r0, [r3, #0]
 80022de:	8891      	ldrh	r1, [r2, #4]
 80022e0:	7992      	ldrb	r2, [r2, #6]
 80022e2:	8099      	strh	r1, [r3, #4]
 80022e4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	719a      	strb	r2, [r3, #6]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	200174ac 	.word	0x200174ac
 80022fc:	0800485c 	.word	0x0800485c
 8002300:	20012e70 	.word	0x20012e70
 8002304:	20013270 	.word	0x20013270
 8002308:	08004868 	.word	0x08004868
 800230c:	0800486c 	.word	0x0800486c

08002310 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800231c:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <SEGGER_RTT_ReadNoLock+0x100>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <SEGGER_RTT_ReadNoLock+0x18>
 8002324:	f7ff ffa2 	bl	800226c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	3360      	adds	r3, #96	; 0x60
 8002334:	4a36      	ldr	r2, [pc, #216]	; (8002410 <SEGGER_RTT_ReadNoLock+0x100>)
 8002336:	4413      	add	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800234e:	6a3a      	ldr	r2, [r7, #32]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d92a      	bls.n	80023ac <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4293      	cmp	r3, r2
 8002366:	bf28      	it	cs
 8002368:	4613      	movcs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	4413      	add	r3, r2
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4619      	mov	r1, r3
 8002378:	69f8      	ldr	r0, [r7, #28]
 800237a:	f001 fdd1 	bl	8003f20 <memcpy>
    NumBytesRead += NumBytesRem;
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002396:	6a3a      	ldr	r2, [r7, #32]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	6a3a      	ldr	r2, [r7, #32]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d101      	bne.n	80023ac <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4293      	cmp	r3, r2
 80023ba:	bf28      	it	cs
 80023bc:	4613      	movcs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d018      	beq.n	80023f8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4619      	mov	r1, r3
 80023d2:	69f8      	ldr	r0, [r7, #28]
 80023d4:	f001 fda4 	bl	8003f20 <memcpy>
    NumBytesRead += NumBytesRem;
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002406:	4618      	mov	r0, r3
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200174ac 	.word	0x200174ac

08002414 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002432:	4413      	add	r3, r2
 8002434:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	429a      	cmp	r2, r3
 8002448:	d854      	bhi.n	80024f4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d30f      	bcc.n	800247e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246a:	4618      	mov	r0, r3
 800246c:	f001 fd58 	bl	8003f20 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	441a      	add	r2, r3
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800247a:	2301      	movs	r3, #1
 800247c:	e054      	b.n	8002528 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d34b      	bcc.n	8002526 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d90e      	bls.n	80024be <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	4413      	add	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fd37 	bl	8003f20 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	441a      	add	r2, r3
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	e018      	b.n	80024f0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fd28 	bl	8003f20 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	6858      	ldr	r0, [r3, #4]
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	18d1      	adds	r1, r2, r3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	f001 fd1d 	bl	8003f20 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e019      	b.n	8002528 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d30f      	bcc.n	8002526 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fd04 	bl	8003f20 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	441a      	add	r2, r3
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200174ac 	.word	0x200174ac

08002534 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800254a:	f7ff fe8f 	bl	800226c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4293      	cmp	r3, r2
 8002558:	d24c      	bcs.n	80025f4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800255a:	f3ef 8311 	mrs	r3, BASEPRI
 800255e:	f04f 0120 	mov.w	r1, #32
 8002562:	f381 8811 	msr	BASEPRI, r1
 8002566:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d032      	beq.n	80025d4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800256e:	4925      	ldr	r1, [pc, #148]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002582:	4920      	ldr	r1, [pc, #128]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	3304      	adds	r3, #4
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002598:	491a      	ldr	r1, [pc, #104]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3320      	adds	r3, #32
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80025ac:	4915      	ldr	r1, [pc, #84]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3328      	adds	r3, #40	; 0x28
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80025c0:	4910      	ldr	r1, [pc, #64]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3324      	adds	r3, #36	; 0x24
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80025d4:	490b      	ldr	r1, [pc, #44]	; (8002604 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	332c      	adds	r3, #44	; 0x2c
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e002      	b.n	80025fa <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80025fa:	697b      	ldr	r3, [r7, #20]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200174ac 	.word	0x200174ac

08002608 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002616:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800261e:	f7ff fe25 	bl	800226c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002622:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4293      	cmp	r3, r2
 800262c:	d24b      	bcs.n	80026c6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800262e:	f3ef 8311 	mrs	r3, BASEPRI
 8002632:	f04f 0120 	mov.w	r1, #32
 8002636:	f381 8811 	msr	BASEPRI, r1
 800263a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d031      	beq.n	80026a6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002642:	4925      	ldr	r1, [pc, #148]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	3360      	adds	r3, #96	; 0x60
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002656:	4920      	ldr	r1, [pc, #128]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	3364      	adds	r3, #100	; 0x64
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800266a:	491b      	ldr	r1, [pc, #108]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	3368      	adds	r3, #104	; 0x68
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800267e:	4916      	ldr	r1, [pc, #88]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	3370      	adds	r3, #112	; 0x70
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002692:	4911      	ldr	r1, [pc, #68]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	336c      	adds	r3, #108	; 0x6c
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80026a6:	490c      	ldr	r1, [pc, #48]	; (80026d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	3374      	adds	r3, #116	; 0x74
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e002      	b.n	80026cc <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	617b      	str	r3, [r7, #20]
  }
  return r;
 80026cc:	697b      	ldr	r3, [r7, #20]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200174ac 	.word	0x200174ac

080026dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026ec:	e002      	b.n	80026f4 <_EncodeStr+0x18>
    Len++;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	3301      	adds	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f6      	bne.n	80026ee <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d901      	bls.n	800270c <_EncodeStr+0x30>
    Len = Limit;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2bfe      	cmp	r3, #254	; 0xfe
 8002710:	d806      	bhi.n	8002720 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	60fa      	str	r2, [r7, #12]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e011      	b.n	8002744 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60fa      	str	r2, [r7, #12]
 8002726:	22ff      	movs	r2, #255	; 0xff
 8002728:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	60fa      	str	r2, [r7, #12]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	0a19      	lsrs	r1, r3, #8
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	60fa      	str	r2, [r7, #12]
 8002740:	b2ca      	uxtb	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002748:	e00a      	b.n	8002760 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	1c53      	adds	r3, r2, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1c59      	adds	r1, r3, #1
 8002754:	60f9      	str	r1, [r7, #12]
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	701a      	strb	r2, [r3, #0]
    n++;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d3f0      	bcc.n	800274a <_EncodeStr+0x6e>
  }
  return pPayload;
 8002768:	68fb      	ldr	r3, [r7, #12]
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002796:	1cfb      	adds	r3, r7, #3
 8002798:	2201      	movs	r2, #1
 800279a:	4619      	mov	r1, r3
 800279c:	2001      	movs	r0, #1
 800279e:	f7ff fdb7 	bl	8002310 <SEGGER_RTT_ReadNoLock>
 80027a2:	4603      	mov	r3, r0
 80027a4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	dd4c      	ble.n	8002846 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	2b07      	cmp	r3, #7
 80027b0:	dc16      	bgt.n	80027e0 <_HandleIncomingPacket+0x50>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	dd3c      	ble.n	8002830 <_HandleIncomingPacket+0xa0>
 80027b6:	3b01      	subs	r3, #1
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d839      	bhi.n	8002830 <_HandleIncomingPacket+0xa0>
 80027bc:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <_HandleIncomingPacket+0x34>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027e7 	.word	0x080027e7
 80027c8:	080027ed 	.word	0x080027ed
 80027cc:	080027f3 	.word	0x080027f3
 80027d0:	080027f9 	.word	0x080027f9
 80027d4:	080027ff 	.word	0x080027ff
 80027d8:	08002805 	.word	0x08002805
 80027dc:	0800280b 	.word	0x0800280b
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d015      	beq.n	8002810 <_HandleIncomingPacket+0x80>
 80027e4:	e024      	b.n	8002830 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80027e6:	f000 fa7d 	bl	8002ce4 <SEGGER_SYSVIEW_Start>
      break;
 80027ea:	e031      	b.n	8002850 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80027ec:	f000 fb36 	bl	8002e5c <SEGGER_SYSVIEW_Stop>
      break;
 80027f0:	e02e      	b.n	8002850 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80027f2:	f000 fd11 	bl	8003218 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80027f6:	e02b      	b.n	8002850 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80027f8:	f000 fcd6 	bl	80031a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80027fc:	e028      	b.n	8002850 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80027fe:	f000 fb53 	bl	8002ea8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002802:	e025      	b.n	8002850 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002804:	f000 ffac 	bl	8003760 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002808:	e022      	b.n	8002850 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800280a:	f000 ff8b 	bl	8003724 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800280e:	e01f      	b.n	8002850 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002810:	1cfb      	adds	r3, r7, #3
 8002812:	2201      	movs	r2, #1
 8002814:	4619      	mov	r1, r3
 8002816:	2001      	movs	r0, #1
 8002818:	f7ff fd7a 	bl	8002310 <SEGGER_RTT_ReadNoLock>
 800281c:	4603      	mov	r3, r0
 800281e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	dd11      	ble.n	800284a <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fefb 	bl	8003624 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800282e:	e00c      	b.n	800284a <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	b25b      	sxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	da0a      	bge.n	800284e <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002838:	1cfb      	adds	r3, r7, #3
 800283a:	2201      	movs	r2, #1
 800283c:	4619      	mov	r1, r3
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff fd66 	bl	8002310 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002844:	e003      	b.n	800284e <_HandleIncomingPacket+0xbe>
    }
  }
 8002846:	bf00      	nop
 8002848:	e002      	b.n	8002850 <_HandleIncomingPacket+0xc0>
      break;
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <_HandleIncomingPacket+0xc0>
      break;
 800284e:	bf00      	nop
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800285e:	2301      	movs	r3, #1
 8002860:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286c:	4b30      	ldr	r3, [pc, #192]	; (8002930 <_TrySendOverflowPacket+0xd8>)
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 8002872:	e00b      	b.n	800288c <_TrySendOverflowPacket+0x34>
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	b2da      	uxtb	r2, r3
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800287e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	09db      	lsrs	r3, r3, #7
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	2b7f      	cmp	r3, #127	; 0x7f
 8002890:	d8f0      	bhi.n	8002874 <_TrySendOverflowPacket+0x1c>
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <_TrySendOverflowPacket+0xdc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <_TrySendOverflowPacket+0xd8>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	623b      	str	r3, [r7, #32]
 80028ba:	e00b      	b.n	80028d4 <_TrySendOverflowPacket+0x7c>
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	1c59      	adds	r1, r3, #1
 80028c4:	6279      	str	r1, [r7, #36]	; 0x24
 80028c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	09db      	lsrs	r3, r3, #7
 80028d2:	623b      	str	r3, [r7, #32]
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	2b7f      	cmp	r3, #127	; 0x7f
 80028d8:	d8f0      	bhi.n	80028bc <_TrySendOverflowPacket+0x64>
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	627a      	str	r2, [r7, #36]	; 0x24
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff fd8c 	bl	8002414 <SEGGER_RTT_WriteSkipNoLock>
 80028fc:	4603      	mov	r3, r0
 80028fe:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <_TrySendOverflowPacket+0xd8>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <_TrySendOverflowPacket+0xd8>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <_TrySendOverflowPacket+0xd8>)
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e004      	b.n	8002924 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <_TrySendOverflowPacket+0xd8>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	4a03      	ldr	r2, [pc, #12]	; (8002930 <_TrySendOverflowPacket+0xd8>)
 8002922:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002924:	693b      	ldr	r3, [r7, #16]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3730      	adds	r7, #48	; 0x30
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20017288 	.word	0x20017288
 8002934:	e0001004 	.word	0xe0001004

08002938 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002944:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <_SendPacket+0x19c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d010      	beq.n	800296e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800294c:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <_SendPacket+0x19c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a1 	beq.w	8002a98 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002956:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <_SendPacket+0x19c>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d109      	bne.n	8002972 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800295e:	f7ff ff7b 	bl	8002858 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002962:	4b5c      	ldr	r3, [pc, #368]	; (8002ad4 <_SendPacket+0x19c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	f040 8098 	bne.w	8002a9c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800296c:	e001      	b.n	8002972 <_SendPacket+0x3a>
    goto Send;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <_SendPacket+0x3c>
Send:
 8002972:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b1f      	cmp	r3, #31
 8002978:	d809      	bhi.n	800298e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800297a:	4b56      	ldr	r3, [pc, #344]	; (8002ad4 <_SendPacket+0x19c>)
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 8089 	bne.w	8002aa0 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b17      	cmp	r3, #23
 8002992:	d807      	bhi.n	80029a4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3b01      	subs	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e03d      	b.n	8002a20 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b7f      	cmp	r3, #127	; 0x7f
 80029b0:	d912      	bls.n	80029d8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	09da      	lsrs	r2, r3, #7
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	3a01      	subs	r2, #1
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e006      	b.n	80029e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3b01      	subs	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b7f      	cmp	r3, #127	; 0x7f
 80029ea:	d912      	bls.n	8002a12 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	09da      	lsrs	r2, r3, #7
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	3a01      	subs	r2, #1
 8002a04:	60fa      	str	r2, [r7, #12]
 8002a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e006      	b.n	8002a20 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <_SendPacket+0x1a0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <_SendPacket+0x19c>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	e00b      	b.n	8002a52 <_SendPacket+0x11a>
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	1c59      	adds	r1, r3, #1
 8002a42:	6279      	str	r1, [r7, #36]	; 0x24
 8002a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	09db      	lsrs	r3, r3, #7
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	2b7f      	cmp	r3, #127	; 0x7f
 8002a56:	d8f0      	bhi.n	8002a3a <_SendPacket+0x102>
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68f9      	ldr	r1, [r7, #12]
 8002a72:	2001      	movs	r0, #1
 8002a74:	f7ff fcce 	bl	8002414 <SEGGER_RTT_WriteSkipNoLock>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <_SendPacket+0x19c>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	60d3      	str	r3, [r2, #12]
 8002a88:	e00b      	b.n	8002aa2 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <_SendPacket+0x19c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <_SendPacket+0x19c>)
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e004      	b.n	8002aa2 <_SendPacket+0x16a>
    goto SendDone;
 8002a98:	bf00      	nop
 8002a9a:	e002      	b.n	8002aa2 <_SendPacket+0x16a>
      goto SendDone;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <_SendPacket+0x16a>
      goto SendDone;
 8002aa0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <_SendPacket+0x1a4>)
 8002aa4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <_SendPacket+0x1a4>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d00b      	beq.n	8002aca <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <_SendPacket+0x19c>)
 8002ab4:	789b      	ldrb	r3, [r3, #2]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <_SendPacket+0x19c>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002ac0:	f7ff fe66 	bl	8002790 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <_SendPacket+0x19c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002aca:	bf00      	nop
 8002acc:	3728      	adds	r7, #40	; 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20017288 	.word	0x20017288
 8002ad8:	e0001004 	.word	0xe0001004
 8002adc:	200174ac 	.word	0x200174ac

08002ae0 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <SEGGER_SYSVIEW_Init+0x68>)
 8002af8:	4914      	ldr	r1, [pc, #80]	; (8002b4c <SEGGER_SYSVIEW_Init+0x6c>)
 8002afa:	2001      	movs	r0, #1
 8002afc:	f7ff fd1a 	bl	8002534 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002b00:	2300      	movs	r3, #0
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2308      	movs	r3, #8
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <SEGGER_SYSVIEW_Init+0x70>)
 8002b08:	4910      	ldr	r1, [pc, #64]	; (8002b4c <SEGGER_SYSVIEW_Init+0x6c>)
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7ff fd7c 	bl	8002608 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <SEGGER_SYSVIEW_Init+0x74>)
 8002b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b16:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <SEGGER_SYSVIEW_Init+0x78>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <SEGGER_SYSVIEW_Init+0x74>)
 8002b1e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002b20:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <SEGGER_SYSVIEW_Init+0x74>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <SEGGER_SYSVIEW_Init+0x74>)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002b2c:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <SEGGER_SYSVIEW_Init+0x74>)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <SEGGER_SYSVIEW_Init+0x74>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <SEGGER_SYSVIEW_Init+0x74>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20013280 	.word	0x20013280
 8002b4c:	08004874 	.word	0x08004874
 8002b50:	20017280 	.word	0x20017280
 8002b54:	20017288 	.word	0x20017288
 8002b58:	e0001004 	.word	0xe0001004

08002b5c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6113      	str	r3, [r2, #16]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20017288 	.word	0x20017288

08002b7c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002b84:	f3ef 8311 	mrs	r3, BASEPRI
 8002b88:	f04f 0120 	mov.w	r1, #32
 8002b8c:	f381 8811 	msr	BASEPRI, r1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4808      	ldr	r0, [pc, #32]	; (8002bb4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002b94:	f7ff fdef 	bl	8002776 <_PreparePacket>
 8002b98:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68b8      	ldr	r0, [r7, #8]
 8002ba0:	f7ff feca 	bl	8002938 <_SendPacket>
  RECORD_END();
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f383 8811 	msr	BASEPRI, r3
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200172b8 	.word	0x200172b8

08002bb8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8002bc6:	f04f 0120 	mov.w	r1, #32
 8002bca:	f381 8811 	msr	BASEPRI, r1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	4816      	ldr	r0, [pc, #88]	; (8002c2c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002bd2:	f7ff fdd0 	bl	8002776 <_PreparePacket>
 8002bd6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	e00b      	b.n	8002bfe <SEGGER_SYSVIEW_RecordU32+0x46>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	1c59      	adds	r1, r3, #1
 8002bee:	61f9      	str	r1, [r7, #28]
 8002bf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	09db      	lsrs	r3, r3, #7
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b7f      	cmp	r3, #127	; 0x7f
 8002c02:	d8f0      	bhi.n	8002be6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	61fa      	str	r2, [r7, #28]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	6938      	ldr	r0, [r7, #16]
 8002c1a:	f7ff fe8d 	bl	8002938 <_SendPacket>
  RECORD_END();
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f383 8811 	msr	BASEPRI, r3
}
 8002c24:	bf00      	nop
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200172b8 	.word	0x200172b8

08002c30 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8002c40:	f04f 0120 	mov.w	r1, #32
 8002c44:	f381 8811 	msr	BASEPRI, r1
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	4825      	ldr	r0, [pc, #148]	; (8002ce0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002c4c:	f7ff fd93 	bl	8002776 <_PreparePacket>
 8002c50:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5e:	e00b      	b.n	8002c78 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	1c59      	adds	r1, r3, #1
 8002c68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	09db      	lsrs	r3, r3, #7
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7c:	d8f0      	bhi.n	8002c60 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	623b      	str	r3, [r7, #32]
 8002c96:	e00b      	b.n	8002cb0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	6279      	str	r1, [r7, #36]	; 0x24
 8002ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	09db      	lsrs	r3, r3, #7
 8002cae:	623b      	str	r3, [r7, #32]
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb4:	d8f0      	bhi.n	8002c98 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	627a      	str	r2, [r7, #36]	; 0x24
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6979      	ldr	r1, [r7, #20]
 8002cca:	69b8      	ldr	r0, [r7, #24]
 8002ccc:	f7ff fe34 	bl	8002938 <_SendPacket>
  RECORD_END();
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f383 8811 	msr	BASEPRI, r3
}
 8002cd6:	bf00      	nop
 8002cd8:	3730      	adds	r7, #48	; 0x30
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200172b8 	.word	0x200172b8

08002ce4 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <SEGGER_SYSVIEW_Start+0x16c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 80aa 	bne.w	8002e48 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002cf4:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <SEGGER_SYSVIEW_Start+0x16c>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8002cfe:	f04f 0120 	mov.w	r1, #32
 8002d02:	f381 8811 	msr	BASEPRI, r1
 8002d06:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002d08:	220a      	movs	r2, #10
 8002d0a:	4952      	ldr	r1, [pc, #328]	; (8002e54 <SEGGER_SYSVIEW_Start+0x170>)
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7ff fb81 	bl	8002414 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002d18:	200a      	movs	r0, #10
 8002d1a:	f7ff ff2f 	bl	8002b7c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d22:	f04f 0120 	mov.w	r1, #32
 8002d26:	f381 8811 	msr	BASEPRI, r1
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	484a      	ldr	r0, [pc, #296]	; (8002e58 <SEGGER_SYSVIEW_Start+0x174>)
 8002d2e:	f7ff fd22 	bl	8002776 <_PreparePacket>
 8002d32:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3c:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d42:	e00b      	b.n	8002d5c <SEGGER_SYSVIEW_Start+0x78>
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	09db      	lsrs	r3, r3, #7
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d60:	d8f0      	bhi.n	8002d44 <SEGGER_SYSVIEW_Start+0x60>
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	e00b      	b.n	8002d96 <SEGGER_SYSVIEW_Start+0xb2>
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1c59      	adds	r1, r3, #1
 8002d86:	6279      	str	r1, [r7, #36]	; 0x24
 8002d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	09db      	lsrs	r3, r3, #7
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9a:	d8f0      	bhi.n	8002d7e <SEGGER_SYSVIEW_Start+0x9a>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	627a      	str	r2, [r7, #36]	; 0x24
 8002da2:	6a3a      	ldr	r2, [r7, #32]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <SEGGER_SYSVIEW_Start+0x16c>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e00b      	b.n	8002dd0 <SEGGER_SYSVIEW_Start+0xec>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	61f9      	str	r1, [r7, #28]
 8002dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	09db      	lsrs	r3, r3, #7
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8002dd4:	d8f0      	bhi.n	8002db8 <SEGGER_SYSVIEW_Start+0xd4>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	61fa      	str	r2, [r7, #28]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	2302      	movs	r3, #2
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	e00b      	b.n	8002e08 <SEGGER_SYSVIEW_Start+0x124>
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	6179      	str	r1, [r7, #20]
 8002dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	09db      	lsrs	r3, r3, #7
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e0c:	d8f0      	bhi.n	8002df0 <SEGGER_SYSVIEW_Start+0x10c>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	617a      	str	r2, [r7, #20]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002e1e:	2218      	movs	r2, #24
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fd88 	bl	8002938 <_SendPacket>
      RECORD_END();
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <SEGGER_SYSVIEW_Start+0x16c>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <SEGGER_SYSVIEW_Start+0x16c>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002e3c:	f000 f9ec 	bl	8003218 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002e40:	f000 f9b2 	bl	80031a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002e44:	f000 fc8c 	bl	8003760 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3730      	adds	r7, #48	; 0x30
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20017288 	.word	0x20017288
 8002e54:	08004908 	.word	0x08004908
 8002e58:	200172b8 	.word	0x200172b8

08002e5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e62:	f3ef 8311 	mrs	r3, BASEPRI
 8002e66:	f04f 0120 	mov.w	r1, #32
 8002e6a:	f381 8811 	msr	BASEPRI, r1
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	480b      	ldr	r0, [pc, #44]	; (8002ea0 <SEGGER_SYSVIEW_Stop+0x44>)
 8002e72:	f7ff fc80 	bl	8002776 <_PreparePacket>
 8002e76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <SEGGER_SYSVIEW_Stop+0x48>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002e80:	220b      	movs	r2, #11
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	6838      	ldr	r0, [r7, #0]
 8002e86:	f7ff fd57 	bl	8002938 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <SEGGER_SYSVIEW_Stop+0x48>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f383 8811 	msr	BASEPRI, r3
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200172b8 	.word	0x200172b8
 8002ea4:	20017288 	.word	0x20017288

08002ea8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002eae:	f3ef 8311 	mrs	r3, BASEPRI
 8002eb2:	f04f 0120 	mov.w	r1, #32
 8002eb6:	f381 8811 	msr	BASEPRI, r1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4845      	ldr	r0, [pc, #276]	; (8002fd4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002ebe:	f7ff fc5a 	bl	8002776 <_PreparePacket>
 8002ec2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed2:	e00b      	b.n	8002eec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	1c59      	adds	r1, r3, #1
 8002edc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	09db      	lsrs	r3, r3, #7
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b7f      	cmp	r3, #127	; 0x7f
 8002ef0:	d8f0      	bhi.n	8002ed4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	e00b      	b.n	8002f26 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	1c59      	adds	r1, r3, #1
 8002f16:	6279      	str	r1, [r7, #36]	; 0x24
 8002f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	09db      	lsrs	r3, r3, #7
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	2b7f      	cmp	r3, #127	; 0x7f
 8002f2a:	d8f0      	bhi.n	8002f0e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	627a      	str	r2, [r7, #36]	; 0x24
 8002f32:	6a3a      	ldr	r2, [r7, #32]
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e00b      	b.n	8002f60 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	1c59      	adds	r1, r3, #1
 8002f50:	61f9      	str	r1, [r7, #28]
 8002f52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	09db      	lsrs	r3, r3, #7
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b7f      	cmp	r3, #127	; 0x7f
 8002f64:	d8f0      	bhi.n	8002f48 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	61fa      	str	r2, [r7, #28]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e00b      	b.n	8002f98 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	6179      	str	r1, [r7, #20]
 8002f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	09db      	lsrs	r3, r3, #7
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f9c:	d8f0      	bhi.n	8002f80 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	617a      	str	r2, [r7, #20]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002fae:	2218      	movs	r2, #24
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	68b8      	ldr	r0, [r7, #8]
 8002fb4:	f7ff fcc0 	bl	8002938 <_SendPacket>
  RECORD_END();
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	4798      	blx	r3
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3730      	adds	r7, #48	; 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200172b8 	.word	0x200172b8
 8002fd8:	20017288 	.word	0x20017288

08002fdc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b092      	sub	sp, #72	; 0x48
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fe8:	f04f 0120 	mov.w	r1, #32
 8002fec:	f381 8811 	msr	BASEPRI, r1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	486b      	ldr	r0, [pc, #428]	; (80031a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002ff4:	f7ff fbbf 	bl	8002776 <_PreparePacket>
 8002ff8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b67      	ldr	r3, [pc, #412]	; (80031a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	643b      	str	r3, [r7, #64]	; 0x40
 8003010:	e00b      	b.n	800302a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	b2da      	uxtb	r2, r3
 8003016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	6479      	str	r1, [r7, #68]	; 0x44
 800301c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003026:	09db      	lsrs	r3, r3, #7
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
 800302a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302c:	2b7f      	cmp	r3, #127	; 0x7f
 800302e:	d8f0      	bhi.n	8003012 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	647a      	str	r2, [r7, #68]	; 0x44
 8003036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
 800304a:	e00b      	b.n	8003064 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	b2da      	uxtb	r2, r3
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	09db      	lsrs	r3, r3, #7
 8003062:	63bb      	str	r3, [r7, #56]	; 0x38
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	2b7f      	cmp	r3, #127	; 0x7f
 8003068:	d8f0      	bhi.n	800304c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003078:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	4619      	mov	r1, r3
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff fb2a 	bl	80026dc <_EncodeStr>
 8003088:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800308a:	2209      	movs	r2, #9
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	6938      	ldr	r0, [r7, #16]
 8003090:	f7ff fc52 	bl	8002938 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30
 80030aa:	e00b      	b.n	80030c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	6379      	str	r1, [r7, #52]	; 0x34
 80030b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	09db      	lsrs	r3, r3, #7
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	2b7f      	cmp	r3, #127	; 0x7f
 80030c8:	d8f0      	bhi.n	80030ac <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	637a      	str	r2, [r7, #52]	; 0x34
 80030d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e4:	e00b      	b.n	80030fe <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	1c59      	adds	r1, r3, #1
 80030ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80030f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	09db      	lsrs	r3, r3, #7
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2b7f      	cmp	r3, #127	; 0x7f
 8003102:	d8f0      	bhi.n	80030e6 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	62fa      	str	r2, [r7, #44]	; 0x2c
 800310a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	e00b      	b.n	8003138 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	1c59      	adds	r1, r3, #1
 8003128:	6279      	str	r1, [r7, #36]	; 0x24
 800312a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	09db      	lsrs	r3, r3, #7
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b7f      	cmp	r3, #127	; 0x7f
 800313c:	d8f0      	bhi.n	8003120 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	627a      	str	r2, [r7, #36]	; 0x24
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e00b      	b.n	8003170 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	1c59      	adds	r1, r3, #1
 8003160:	61f9      	str	r1, [r7, #28]
 8003162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	09db      	lsrs	r3, r3, #7
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b7f      	cmp	r3, #127	; 0x7f
 8003174:	d8f0      	bhi.n	8003158 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	61fa      	str	r2, [r7, #28]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003186:	2215      	movs	r2, #21
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	6938      	ldr	r0, [r7, #16]
 800318c:	f7ff fbd4 	bl	8002938 <_SendPacket>
  RECORD_END();
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f383 8811 	msr	BASEPRI, r3
}
 8003196:	bf00      	nop
 8003198:	3748      	adds	r7, #72	; 0x48
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200172b8 	.word	0x200172b8
 80031a4:	20017288 	.word	0x20017288

080031a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80031be:	4b03      	ldr	r3, [pc, #12]	; (80031cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4798      	blx	r3
  }
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20017288 	.word	0x20017288

080031d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031d8:	f3ef 8311 	mrs	r3, BASEPRI
 80031dc:	f04f 0120 	mov.w	r1, #32
 80031e0:	f381 8811 	msr	BASEPRI, r1
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	480b      	ldr	r0, [pc, #44]	; (8003214 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80031e8:	f7ff fac5 	bl	8002776 <_PreparePacket>
 80031ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6938      	ldr	r0, [r7, #16]
 80031f4:	f7ff fa72 	bl	80026dc <_EncodeStr>
 80031f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80031fa:	220e      	movs	r2, #14
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	6938      	ldr	r0, [r7, #16]
 8003200:	f7ff fb9a 	bl	8002938 <_SendPacket>
  RECORD_END();
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f383 8811 	msr	BASEPRI, r3
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200172b8 	.word	0x200172b8

08003218 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01a      	beq.n	800325c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4798      	blx	r3
 8003238:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800323c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800323e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	000a      	movs	r2, r1
 800324c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800324e:	4613      	mov	r3, r2
 8003250:	461a      	mov	r2, r3
 8003252:	4621      	mov	r1, r4
 8003254:	200d      	movs	r0, #13
 8003256:	f7ff fceb 	bl	8002c30 <SEGGER_SYSVIEW_RecordU32x2>
 800325a:	e006      	b.n	800326a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	200c      	movs	r0, #12
 8003264:	f7ff fca8 	bl	8002bb8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	bf00      	nop
 8003274:	20017288 	.word	0x20017288
 8003278:	e0001004 	.word	0xe0001004

0800327c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003282:	f3ef 8311 	mrs	r3, BASEPRI
 8003286:	f04f 0120 	mov.w	r1, #32
 800328a:	f381 8811 	msr	BASEPRI, r1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	4819      	ldr	r0, [pc, #100]	; (80032f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003292:	f7ff fa70 	bl	8002776 <_PreparePacket>
 8003296:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e00b      	b.n	80032c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	6179      	str	r1, [r7, #20]
 80032ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	09db      	lsrs	r3, r3, #7
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b7f      	cmp	r3, #127	; 0x7f
 80032cc:	d8f0      	bhi.n	80032b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	617a      	str	r2, [r7, #20]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80032de:	2202      	movs	r2, #2
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f7ff fb28 	bl	8002938 <_SendPacket>
  RECORD_END();
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f383 8811 	msr	BASEPRI, r3
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200172b8 	.word	0x200172b8
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003306:	f3ef 8311 	mrs	r3, BASEPRI
 800330a:	f04f 0120 	mov.w	r1, #32
 800330e:	f381 8811 	msr	BASEPRI, r1
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	4807      	ldr	r0, [pc, #28]	; (8003334 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003316:	f7ff fa2e 	bl	8002776 <_PreparePacket>
 800331a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800331c:	2203      	movs	r2, #3
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	6838      	ldr	r0, [r7, #0]
 8003322:	f7ff fb09 	bl	8002938 <_SendPacket>
  RECORD_END();
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f383 8811 	msr	BASEPRI, r3
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200172b8 	.word	0x200172b8

08003338 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800333e:	f3ef 8311 	mrs	r3, BASEPRI
 8003342:	f04f 0120 	mov.w	r1, #32
 8003346:	f381 8811 	msr	BASEPRI, r1
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	4807      	ldr	r0, [pc, #28]	; (800336c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800334e:	f7ff fa12 	bl	8002776 <_PreparePacket>
 8003352:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003354:	2212      	movs	r2, #18
 8003356:	6839      	ldr	r1, [r7, #0]
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f7ff faed 	bl	8002938 <_SendPacket>
  RECORD_END();
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f383 8811 	msr	BASEPRI, r3
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200172b8 	.word	0x200172b8

08003370 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003376:	f3ef 8311 	mrs	r3, BASEPRI
 800337a:	f04f 0120 	mov.w	r1, #32
 800337e:	f381 8811 	msr	BASEPRI, r1
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	4807      	ldr	r0, [pc, #28]	; (80033a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003386:	f7ff f9f6 	bl	8002776 <_PreparePacket>
 800338a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800338c:	2211      	movs	r2, #17
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	f7ff fad1 	bl	8002938 <_SendPacket>
  RECORD_END();
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f383 8811 	msr	BASEPRI, r3
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	200172b8 	.word	0x200172b8

080033a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80033b0:	f3ef 8311 	mrs	r3, BASEPRI
 80033b4:	f04f 0120 	mov.w	r1, #32
 80033b8:	f381 8811 	msr	BASEPRI, r1
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	481a      	ldr	r0, [pc, #104]	; (8003428 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80033c0:	f7ff f9d9 	bl	8002776 <_PreparePacket>
 80033c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e00b      	b.n	80033f8 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	61f9      	str	r1, [r7, #28]
 80033ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	09db      	lsrs	r3, r3, #7
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b7f      	cmp	r3, #127	; 0x7f
 80033fc:	d8f0      	bhi.n	80033e0 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	61fa      	str	r2, [r7, #28]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800340e:	2208      	movs	r2, #8
 8003410:	68f9      	ldr	r1, [r7, #12]
 8003412:	6938      	ldr	r0, [r7, #16]
 8003414:	f7ff fa90 	bl	8002938 <_SendPacket>
  RECORD_END();
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f383 8811 	msr	BASEPRI, r3
}
 800341e:	bf00      	nop
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200172b8 	.word	0x200172b8
 800342c:	20017288 	.word	0x20017288

08003430 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003438:	f3ef 8311 	mrs	r3, BASEPRI
 800343c:	f04f 0120 	mov.w	r1, #32
 8003440:	f381 8811 	msr	BASEPRI, r1
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	481a      	ldr	r0, [pc, #104]	; (80034b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003448:	f7ff f995 	bl	8002776 <_PreparePacket>
 800344c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e00b      	b.n	8003480 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	1c59      	adds	r1, r3, #1
 8003470:	61f9      	str	r1, [r7, #28]
 8003472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	09db      	lsrs	r3, r3, #7
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b7f      	cmp	r3, #127	; 0x7f
 8003484:	d8f0      	bhi.n	8003468 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	61fa      	str	r2, [r7, #28]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003496:	2204      	movs	r2, #4
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	6938      	ldr	r0, [r7, #16]
 800349c:	f7ff fa4c 	bl	8002938 <_SendPacket>
  RECORD_END();
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f383 8811 	msr	BASEPRI, r3
}
 80034a6:	bf00      	nop
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200172b8 	.word	0x200172b8
 80034b4:	20017288 	.word	0x20017288

080034b8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80034c0:	f3ef 8311 	mrs	r3, BASEPRI
 80034c4:	f04f 0120 	mov.w	r1, #32
 80034c8:	f381 8811 	msr	BASEPRI, r1
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	481a      	ldr	r0, [pc, #104]	; (8003538 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80034d0:	f7ff f951 	bl	8002776 <_PreparePacket>
 80034d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e00b      	b.n	8003508 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	61f9      	str	r1, [r7, #28]
 80034fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	09db      	lsrs	r3, r3, #7
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b7f      	cmp	r3, #127	; 0x7f
 800350c:	d8f0      	bhi.n	80034f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	61fa      	str	r2, [r7, #28]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800351e:	2206      	movs	r2, #6
 8003520:	68f9      	ldr	r1, [r7, #12]
 8003522:	6938      	ldr	r0, [r7, #16]
 8003524:	f7ff fa08 	bl	8002938 <_SendPacket>
  RECORD_END();
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f383 8811 	msr	BASEPRI, r3
}
 800352e:	bf00      	nop
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200172b8 	.word	0x200172b8
 800353c:	20017288 	.word	0x20017288

08003540 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800354a:	f3ef 8311 	mrs	r3, BASEPRI
 800354e:	f04f 0120 	mov.w	r1, #32
 8003552:	f381 8811 	msr	BASEPRI, r1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	4827      	ldr	r0, [pc, #156]	; (80035f8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800355a:	f7ff f90c 	bl	8002776 <_PreparePacket>
 800355e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	e00b      	b.n	8003592 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	6279      	str	r1, [r7, #36]	; 0x24
 8003584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	09db      	lsrs	r3, r3, #7
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2b7f      	cmp	r3, #127	; 0x7f
 8003596:	d8f0      	bhi.n	800357a <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	627a      	str	r2, [r7, #36]	; 0x24
 800359e:	6a3a      	ldr	r2, [r7, #32]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e00b      	b.n	80035ca <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	1c59      	adds	r1, r3, #1
 80035ba:	61f9      	str	r1, [r7, #28]
 80035bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	09db      	lsrs	r3, r3, #7
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b7f      	cmp	r3, #127	; 0x7f
 80035ce:	d8f0      	bhi.n	80035b2 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	61fa      	str	r2, [r7, #28]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80035e0:	2207      	movs	r2, #7
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	6938      	ldr	r0, [r7, #16]
 80035e6:	f7ff f9a7 	bl	8002938 <_SendPacket>
  RECORD_END();
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f383 8811 	msr	BASEPRI, r3
}
 80035f0:	bf00      	nop
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	200172b8 	.word	0x200172b8
 80035fc:	20017288 	.word	0x20017288

08003600 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	089b      	lsrs	r3, r3, #2
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20017288 	.word	0x20017288

08003624 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d06d      	beq.n	8003712 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800363c:	2300      	movs	r3, #0
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003640:	e008      	b.n	8003654 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	3301      	adds	r3, #1
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003658:	429a      	cmp	r2, r3
 800365a:	d3f2      	bcc.n	8003642 <SEGGER_SYSVIEW_SendModule+0x1e>
 800365c:	e000      	b.n	8003660 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800365e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d055      	beq.n	8003712 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003666:	f3ef 8311 	mrs	r3, BASEPRI
 800366a:	f04f 0120 	mov.w	r1, #32
 800366e:	f381 8811 	msr	BASEPRI, r1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	482a      	ldr	r0, [pc, #168]	; (8003720 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003676:	f7ff f87e 	bl	8002776 <_PreparePacket>
 800367a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	e00b      	b.n	80036a2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	1c59      	adds	r1, r3, #1
 8003692:	6279      	str	r1, [r7, #36]	; 0x24
 8003694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	09db      	lsrs	r3, r3, #7
 80036a0:	623b      	str	r3, [r7, #32]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2b7f      	cmp	r3, #127	; 0x7f
 80036a6:	d8f0      	bhi.n	800368a <SEGGER_SYSVIEW_SendModule+0x66>
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	627a      	str	r2, [r7, #36]	; 0x24
 80036ae:	6a3a      	ldr	r2, [r7, #32]
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e00b      	b.n	80036dc <SEGGER_SYSVIEW_SendModule+0xb8>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	61f9      	str	r1, [r7, #28]
 80036ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	09db      	lsrs	r3, r3, #7
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b7f      	cmp	r3, #127	; 0x7f
 80036e0:	d8f0      	bhi.n	80036c4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	61fa      	str	r2, [r7, #28]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7fe ffee 	bl	80026dc <_EncodeStr>
 8003700:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003702:	2216      	movs	r2, #22
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	6938      	ldr	r0, [r7, #16]
 8003708:	f7ff f916 	bl	8002938 <_SendPacket>
      RECORD_END();
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003712:	bf00      	nop
 8003714:	3730      	adds	r7, #48	; 0x30
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	200172b0 	.word	0x200172b0
 8003720:	200172b8 	.word	0x200172b8

08003724 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00f      	beq.n	8003752 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f2      	bne.n	8003738 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200172b0 	.word	0x200172b0

08003760 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003766:	f3ef 8311 	mrs	r3, BASEPRI
 800376a:	f04f 0120 	mov.w	r1, #32
 800376e:	f381 8811 	msr	BASEPRI, r1
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	4817      	ldr	r0, [pc, #92]	; (80037d4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003776:	f7fe fffe 	bl	8002776 <_PreparePacket>
 800377a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	e00b      	b.n	80037a4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1c59      	adds	r1, r3, #1
 8003794:	6179      	str	r1, [r7, #20]
 8003796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	09db      	lsrs	r3, r3, #7
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b7f      	cmp	r3, #127	; 0x7f
 80037a8:	d8f0      	bhi.n	800378c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	617a      	str	r2, [r7, #20]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80037ba:	221b      	movs	r2, #27
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	68b8      	ldr	r0, [r7, #8]
 80037c0:	f7ff f8ba 	bl	8002938 <_SendPacket>
  RECORD_END();
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f383 8811 	msr	BASEPRI, r3
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200172b8 	.word	0x200172b8
 80037d8:	200172b4 	.word	0x200172b4

080037dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80037e4:	f3ef 8311 	mrs	r3, BASEPRI
 80037e8:	f04f 0120 	mov.w	r1, #32
 80037ec:	f381 8811 	msr	BASEPRI, r1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	4827      	ldr	r0, [pc, #156]	; (8003890 <SEGGER_SYSVIEW_Warn+0xb4>)
 80037f4:	f7fe ffbf 	bl	8002776 <_PreparePacket>
 80037f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	6938      	ldr	r0, [r7, #16]
 8003800:	f7fe ff6c 	bl	80026dc <_EncodeStr>
 8003804:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	2301      	movs	r3, #1
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	e00b      	b.n	8003828 <SEGGER_SYSVIEW_Warn+0x4c>
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	1c59      	adds	r1, r3, #1
 8003818:	6279      	str	r1, [r7, #36]	; 0x24
 800381a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	09db      	lsrs	r3, r3, #7
 8003826:	623b      	str	r3, [r7, #32]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	2b7f      	cmp	r3, #127	; 0x7f
 800382c:	d8f0      	bhi.n	8003810 <SEGGER_SYSVIEW_Warn+0x34>
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	627a      	str	r2, [r7, #36]	; 0x24
 8003834:	6a3a      	ldr	r2, [r7, #32]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e00b      	b.n	8003860 <SEGGER_SYSVIEW_Warn+0x84>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	61f9      	str	r1, [r7, #28]
 8003852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	09db      	lsrs	r3, r3, #7
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b7f      	cmp	r3, #127	; 0x7f
 8003864:	d8f0      	bhi.n	8003848 <SEGGER_SYSVIEW_Warn+0x6c>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	61fa      	str	r2, [r7, #28]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003876:	221a      	movs	r2, #26
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	6938      	ldr	r0, [r7, #16]
 800387c:	f7ff f85c 	bl	8002938 <_SendPacket>
  RECORD_END();
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f383 8811 	msr	BASEPRI, r3
}
 8003886:	bf00      	nop
 8003888:	3728      	adds	r7, #40	; 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200172b8 	.word	0x200172b8

08003894 <main>:

//global variables
char usr_msg[250] = {0};

int main(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af02      	add	r7, sp, #8
	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL for SEGGER Systemview Timestamp maintaining
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <main+0x68>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a17      	ldr	r2, [pc, #92]	; (80038fc <main+0x68>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6013      	str	r3, [r2, #0]

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 80038a6:	f7fc fe0f 	bl	80004c8 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 80038aa:	f000 f9bf 	bl	8003c2c <SystemCoreClockUpdate>

	prvSetupHardware();
 80038ae:	f000 f883 	bl	80039b8 <prvSetupHardware>

	sprintf(usr_msg, "This is Demo of Task Delete API\r\n");
 80038b2:	4913      	ldr	r1, [pc, #76]	; (8003900 <main+0x6c>)
 80038b4:	4813      	ldr	r0, [pc, #76]	; (8003904 <main+0x70>)
 80038b6:	f000 fb49 	bl	8003f4c <siprintf>
	printmsg(usr_msg);
 80038ba:	4812      	ldr	r0, [pc, #72]	; (8003904 <main+0x70>)
 80038bc:	f000 f884 	bl	80039c8 <printmsg>

	//start recording
	SEGGER_SYSVIEW_Conf();
 80038c0:	f7fe faf4 	bl	8001eac <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80038c4:	f7ff fa0e 	bl	8002ce4 <SEGGER_SYSVIEW_Start>

	//3. lets create 2 tasks
	xTaskCreate(vTask1_handler, "Task-1", 500, NULL, 1, &xTaskHandle1 );
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <main+0x74>)
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	2301      	movs	r3, #1
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2300      	movs	r3, #0
 80038d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038d6:	490d      	ldr	r1, [pc, #52]	; (800390c <main+0x78>)
 80038d8:	480d      	ldr	r0, [pc, #52]	; (8003910 <main+0x7c>)
 80038da:	f7fd f8f7 	bl	8000acc <xTaskCreate>

	xTaskCreate(vTask2_handler, "Task-2", 500, NULL, 2, &xTaskHandle2 );
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <main+0x80>)
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	2302      	movs	r3, #2
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2300      	movs	r3, #0
 80038e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038ec:	490a      	ldr	r1, [pc, #40]	; (8003918 <main+0x84>)
 80038ee:	480b      	ldr	r0, [pc, #44]	; (800391c <main+0x88>)
 80038f0:	f7fd f8ec 	bl	8000acc <xTaskCreate>

	//4. start the scheduler
	vTaskStartScheduler();
 80038f4:	f7fd fb20 	bl	8000f38 <vTaskStartScheduler>

	for(;;);
 80038f8:	e7fe      	b.n	80038f8 <main+0x64>
 80038fa:	bf00      	nop
 80038fc:	e0001000 	.word	0xe0001000
 8003900:	0800487c 	.word	0x0800487c
 8003904:	200173a4 	.word	0x200173a4
 8003908:	2001739c 	.word	0x2001739c
 800390c:	080048a0 	.word	0x080048a0
 8003910:	08003921 	.word	0x08003921
 8003914:	200173a0 	.word	0x200173a0
 8003918:	080048a8 	.word	0x080048a8
 800391c:	08003955 	.word	0x08003955

08003920 <vTask1_handler>:
}

void vTask1_handler(void *params)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	sprintf(usr_msg, "Task-1 is running \r\n");
 8003928:	4907      	ldr	r1, [pc, #28]	; (8003948 <vTask1_handler+0x28>)
 800392a:	4808      	ldr	r0, [pc, #32]	; (800394c <vTask1_handler+0x2c>)
 800392c:	f000 fb0e 	bl	8003f4c <siprintf>
	printmsg(usr_msg);
 8003930:	4806      	ldr	r0, [pc, #24]	; (800394c <vTask1_handler+0x2c>)
 8003932:	f000 f849 	bl	80039c8 <printmsg>

	while(1){
		//rtos_delay(200);
		vTaskDelay(200);
 8003936:	20c8      	movs	r0, #200	; 0xc8
 8003938:	f7fd fac6 	bl	8000ec8 <vTaskDelay>
		//the LED task will be blocked , it will be removed from the ready queue for 200 ms
		//it will not be scheduled to run on the CPU for 200 ms
		//that allows idle task to run!
		//so idle task can do its freeing task...
		GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
 800393c:	2101      	movs	r1, #1
 800393e:	4804      	ldr	r0, [pc, #16]	; (8003950 <vTask1_handler+0x30>)
 8003940:	f7fc fd67 	bl	8000412 <GPIO_ToggleBits>
		vTaskDelay(200);
 8003944:	e7f7      	b.n	8003936 <vTask1_handler+0x16>
 8003946:	bf00      	nop
 8003948:	080048b0 	.word	0x080048b0
 800394c:	200173a4 	.word	0x200173a4
 8003950:	40020400 	.word	0x40020400

08003954 <vTask2_handler>:
	}

}

void vTask2_handler(void *params)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	sprintf(usr_msg, "Task-2 is running \r\n");
 800395c:	4911      	ldr	r1, [pc, #68]	; (80039a4 <vTask2_handler+0x50>)
 800395e:	4812      	ldr	r0, [pc, #72]	; (80039a8 <vTask2_handler+0x54>)
 8003960:	f000 faf4 	bl	8003f4c <siprintf>
	printmsg(usr_msg);
 8003964:	4810      	ldr	r0, [pc, #64]	; (80039a8 <vTask2_handler+0x54>)
 8003966:	f000 f82f 	bl	80039c8 <printmsg>

	while(1){
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 800396a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800396e:	480f      	ldr	r0, [pc, #60]	; (80039ac <vTask2_handler+0x58>)
 8003970:	f7fc fd35 	bl	80003de <GPIO_ReadInputDataBit>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <vTask2_handler+0x3c>
			//button is not pressed on the nucleo board
			//Task-2 deletes itself
			sprintf(usr_msg, "Task-2 is getting deleted \r\n");
 800397a:	490d      	ldr	r1, [pc, #52]	; (80039b0 <vTask2_handler+0x5c>)
 800397c:	480a      	ldr	r0, [pc, #40]	; (80039a8 <vTask2_handler+0x54>)
 800397e:	f000 fae5 	bl	8003f4c <siprintf>
			printmsg(usr_msg);
 8003982:	4809      	ldr	r0, [pc, #36]	; (80039a8 <vTask2_handler+0x54>)
 8003984:	f000 f820 	bl	80039c8 <printmsg>
			vTaskDelete(NULL);
 8003988:	2000      	movs	r0, #0
 800398a:	f7fd fa01 	bl	8000d90 <vTaskDelete>
 800398e:	e7ec      	b.n	800396a <vTask2_handler+0x16>
		}
		else{
			//button is not pressed on the nucleo board
			//toggle the led for every 1 sec
			rtos_delay(1000);
 8003990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003994:	f000 f8c6 	bl	8003b24 <rtos_delay>
			GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
 8003998:	2101      	movs	r1, #1
 800399a:	4806      	ldr	r0, [pc, #24]	; (80039b4 <vTask2_handler+0x60>)
 800399c:	f7fc fd39 	bl	8000412 <GPIO_ToggleBits>
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 80039a0:	e7e3      	b.n	800396a <vTask2_handler+0x16>
 80039a2:	bf00      	nop
 80039a4:	080048c8 	.word	0x080048c8
 80039a8:	200173a4 	.word	0x200173a4
 80039ac:	40020800 	.word	0x40020800
 80039b0:	080048e0 	.word	0x080048e0
 80039b4:	40020400 	.word	0x40020400

080039b8 <prvSetupHardware>:

	}
}

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	//Setup led and button
	prvSetupGpio();
 80039bc:	f000 f87c 	bl	8003ab8 <prvSetupGpio>

	//Setup UART3
	prvSetupUart();
 80039c0:	f000 f82c 	bl	8003a1c <prvSetupUart>

}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <printmsg>:

void printmsg(char *msg)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++){
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e013      	b.n	80039fe <printmsg+0x36>
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != SET);
 80039d6:	bf00      	nop
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	480f      	ldr	r0, [pc, #60]	; (8003a18 <printmsg+0x50>)
 80039dc:	f7fc ffa6 	bl	800092c <USART_GetFlagStatus>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d1f8      	bne.n	80039d8 <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	4809      	ldr	r0, [pc, #36]	; (8003a18 <printmsg+0x50>)
 80039f4:	f7fc ff88 	bl	8000908 <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++){
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fc fc06 	bl	8000210 <strlen>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d3e4      	bcc.n	80039d6 <printmsg+0xe>
	}

}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40004800 	.word	0x40004800

08003a1c <prvSetupUart>:

static void prvSetupUart(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003a22:	2101      	movs	r1, #1
 8003a24:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003a28:	f7fc fe54 	bl	80006d4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	2008      	movs	r0, #8
 8003a30:	f7fc fe30 	bl	8000694 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 8003a34:	f107 0310 	add.w	r3, r7, #16
 8003a38:	2208      	movs	r2, #8
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fa7d 	bl	8003f3c <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8003a42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a46:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 8003a50:	f107 0310 	add.w	r3, r7, #16
 8003a54:	4619      	mov	r1, r3
 8003a56:	4816      	ldr	r0, [pc, #88]	; (8003ab0 <prvSetupUart+0x94>)
 8003a58:	f7fc fc32 	bl	80002c0 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	2108      	movs	r1, #8
 8003a60:	4813      	ldr	r0, [pc, #76]	; (8003ab0 <prvSetupUart+0x94>)
 8003a62:	f7fc fce8 	bl	8000436 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 8003a66:	2207      	movs	r2, #7
 8003a68:	2109      	movs	r1, #9
 8003a6a:	4811      	ldr	r0, [pc, #68]	; (8003ab0 <prvSetupUart+0x94>)
 8003a6c:	f7fc fce3 	bl	8000436 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 8003a70:	463b      	mov	r3, r7
 8003a72:	2210      	movs	r2, #16
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa60 	bl	8003f3c <memset>

	uart3_init.USART_BaudRate = 115200;
 8003a7c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003a80:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003a82:	2300      	movs	r3, #0
 8003a84:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003a86:	230c      	movs	r3, #12
 8003a88:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 8003a92:	2300      	movs	r3, #0
 8003a94:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 8003a96:	463b      	mov	r3, r7
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4806      	ldr	r0, [pc, #24]	; (8003ab4 <prvSetupUart+0x98>)
 8003a9c:	f7fc fe5a 	bl	8000754 <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4804      	ldr	r0, [pc, #16]	; (8003ab4 <prvSetupUart+0x98>)
 8003aa4:	f7fc ff10 	bl	80008c8 <USART_Cmd>

}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40004800 	.word	0x40004800

08003ab8 <prvSetupGpio>:

void prvSetupGpio(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f7fc fde7 	bl	8000694 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	2004      	movs	r0, #4
 8003aca:	f7fc fde3 	bl	8000694 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003ace:	2101      	movs	r1, #1
 8003ad0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ad4:	f7fc fe1e 	bl	8000714 <RCC_APB2PeriphClockCmd>

	led_init.GPIO_Pin = GPIO_Pin_0;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 8003adc:	2301      	movs	r3, #1
 8003ade:	733b      	strb	r3, [r7, #12]
	led_init.GPIO_OType = GPIO_OType_PP;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73bb      	strb	r3, [r7, #14]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &led_init);
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	4619      	mov	r1, r3
 8003af2:	480a      	ldr	r0, [pc, #40]	; (8003b1c <prvSetupGpio+0x64>)
 8003af4:	f7fc fbe4 	bl	80002c0 <GPIO_Init>

	button_init.GPIO_Pin = GPIO_Pin_13;
 8003af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003afc:	603b      	str	r3, [r7, #0]
	button_init.GPIO_Mode = GPIO_Mode_IN;
 8003afe:	2300      	movs	r3, #0
 8003b00:	713b      	strb	r3, [r7, #4]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	71fb      	strb	r3, [r7, #7]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 8003b06:	2300      	movs	r3, #0
 8003b08:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOC, &button_init);
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4804      	ldr	r0, [pc, #16]	; (8003b20 <prvSetupGpio+0x68>)
 8003b10:	f7fc fbd6 	bl	80002c0 <GPIO_Init>

}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40020800 	.word	0x40020800

08003b24 <rtos_delay>:

void rtos_delay(uint32_t delay_in_ms)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	uint32_t current_tick_count = xTaskGetTickCount();
 8003b2c:	f7fd fb0a 	bl	8001144 <xTaskGetTickCount>
 8003b30:	60f8      	str	r0, [r7, #12]

	//convertion ms to # of ticks
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <rtos_delay+0x40>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	60bb      	str	r3, [r7, #8]

	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
 8003b46:	bf00      	nop
 8003b48:	f7fd fafc 	bl	8001144 <xTaskGetTickCount>
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4413      	add	r3, r2
 8003b54:	4299      	cmp	r1, r3
 8003b56:	d3f7      	bcc.n	8003b48 <rtos_delay+0x24>

}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	10624dd3 	.word	0x10624dd3

08003b68 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <_sbrk+0x50>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <_sbrk+0x16>
		heap_end = &end;
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <_sbrk+0x50>)
 8003b7a:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <_sbrk+0x54>)
 8003b7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <_sbrk+0x50>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <_sbrk+0x50>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	466a      	mov	r2, sp
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d907      	bls.n	8003ba2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003b92:	f000 f98d 	bl	8003eb0 <__errno>
 8003b96:	4603      	mov	r3, r0
 8003b98:	220c      	movs	r2, #12
 8003b9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	e006      	b.n	8003bb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <_sbrk+0x50>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a03      	ldr	r2, [pc, #12]	; (8003bb8 <_sbrk+0x50>)
 8003bac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200174a0 	.word	0x200174a0
 8003bbc:	20017568 	.word	0x20017568

08003bc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <SystemInit+0x60>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <SystemInit+0x60>)
 8003bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003bd4:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <SystemInit+0x64>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <SystemInit+0x64>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <SystemInit+0x64>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <SystemInit+0x64>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <SystemInit+0x64>)
 8003bec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <SystemInit+0x64>)
 8003bf8:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <SystemInit+0x68>)
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <SystemInit+0x64>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <SystemInit+0x64>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <SystemInit+0x64>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003c0e:	f000 f88f 	bl	8003d30 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c12:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <SystemInit+0x60>)
 8003c14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c18:	609a      	str	r2, [r3, #8]
#endif
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000ed00 	.word	0xe000ed00
 8003c24:	40023800 	.word	0x40023800
 8003c28:	24003010 	.word	0x24003010

08003c2c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	2302      	movs	r3, #2
 8003c44:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003c46:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <SystemCoreClockUpdate+0xf0>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d011      	beq.n	8003c7a <SystemCoreClockUpdate+0x4e>
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d844      	bhi.n	8003ce6 <SystemCoreClockUpdate+0xba>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <SystemCoreClockUpdate+0x3e>
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d004      	beq.n	8003c72 <SystemCoreClockUpdate+0x46>
 8003c68:	e03d      	b.n	8003ce6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003c6a:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <SystemCoreClockUpdate+0xf4>)
 8003c6c:	4a2d      	ldr	r2, [pc, #180]	; (8003d24 <SystemCoreClockUpdate+0xf8>)
 8003c6e:	601a      	str	r2, [r3, #0]
      break;
 8003c70:	e03d      	b.n	8003cee <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <SystemCoreClockUpdate+0xf4>)
 8003c74:	4a2c      	ldr	r2, [pc, #176]	; (8003d28 <SystemCoreClockUpdate+0xfc>)
 8003c76:	601a      	str	r2, [r3, #0]
      break;
 8003c78:	e039      	b.n	8003cee <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003c7a:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <SystemCoreClockUpdate+0xf0>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0d9b      	lsrs	r3, r3, #22
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <SystemCoreClockUpdate+0xf0>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8e:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <SystemCoreClockUpdate+0xfc>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <SystemCoreClockUpdate+0xf0>)
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	0992      	lsrs	r2, r2, #6
 8003ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e00b      	b.n	8003cc8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <SystemCoreClockUpdate+0xf8>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <SystemCoreClockUpdate+0xf0>)
 8003cba:	6852      	ldr	r2, [r2, #4]
 8003cbc:	0992      	lsrs	r2, r2, #6
 8003cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <SystemCoreClockUpdate+0xf0>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <SystemCoreClockUpdate+0xf4>)
 8003ce2:	6013      	str	r3, [r2, #0]
      break;
 8003ce4:	e003      	b.n	8003cee <SystemCoreClockUpdate+0xc2>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <SystemCoreClockUpdate+0xf4>)
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <SystemCoreClockUpdate+0xf8>)
 8003cea:	601a      	str	r2, [r3, #0]
      break;
 8003cec:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <SystemCoreClockUpdate+0xf0>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <SystemCoreClockUpdate+0x100>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <SystemCoreClockUpdate+0xf4>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <SystemCoreClockUpdate+0xf4>)
 8003d0c:	6013      	str	r3, [r2, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	20000014 	.word	0x20000014
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	017d7840 	.word	0x017d7840
 8003d2c:	20000018 	.word	0x20000018

08003d30 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003d3e:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <SetSysClock+0x11c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a42      	ldr	r2, [pc, #264]	; (8003e4c <SetSysClock+0x11c>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003d4a:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <SetSysClock+0x11c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <SetSysClock+0x38>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d66:	d1f0      	bne.n	8003d4a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003d68:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <SetSysClock+0x11c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003d74:	2301      	movs	r3, #1
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	e001      	b.n	8003d7e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d15c      	bne.n	8003e3e <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003d84:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <SetSysClock+0x11c>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	4a30      	ldr	r2, [pc, #192]	; (8003e4c <SetSysClock+0x11c>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003d90:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <SetSysClock+0x120>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2e      	ldr	r2, [pc, #184]	; (8003e50 <SetSysClock+0x120>)
 8003d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d9a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <SetSysClock+0x11c>)
 8003d9e:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <SetSysClock+0x11c>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <SetSysClock+0x11c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <SetSysClock+0x11c>)
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dae:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <SetSysClock+0x11c>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <SetSysClock+0x11c>)
 8003db6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003dba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003dbc:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <SetSysClock+0x11c>)
 8003dbe:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <SetSysClock+0x124>)
 8003dc0:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003dc2:	4b22      	ldr	r3, [pc, #136]	; (8003e4c <SetSysClock+0x11c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <SetSysClock+0x11c>)
 8003dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003dce:	bf00      	nop
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <SetSysClock+0x11c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f9      	beq.n	8003dd0 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <SetSysClock+0x120>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <SetSysClock+0x120>)
 8003de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003de8:	bf00      	nop
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <SetSysClock+0x120>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f9      	beq.n	8003dea <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <SetSysClock+0x120>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <SetSysClock+0x120>)
 8003dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e00:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003e02:	bf00      	nop
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <SetSysClock+0x120>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f9      	beq.n	8003e04 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <SetSysClock+0x128>)
 8003e12:	f240 7205 	movw	r2, #1797	; 0x705
 8003e16:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <SetSysClock+0x11c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a0b      	ldr	r2, [pc, #44]	; (8003e4c <SetSysClock+0x11c>)
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <SetSysClock+0x11c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <SetSysClock+0x11c>)
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003e30:	bf00      	nop
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <SetSysClock+0x11c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d1f9      	bne.n	8003e32 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40007000 	.word	0x40007000
 8003e54:	07405a19 	.word	0x07405a19
 8003e58:	40023c00 	.word	0x40023c00

08003e5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e5c:	480d      	ldr	r0, [pc, #52]	; (8003e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e60:	480d      	ldr	r0, [pc, #52]	; (8003e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e62:	490e      	ldr	r1, [pc, #56]	; (8003e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <LoopForever+0xe>)
  movs r3, #0
 8003e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e68:	e002      	b.n	8003e70 <LoopCopyDataInit>

08003e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e6e:	3304      	adds	r3, #4

08003e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e74:	d3f9      	bcc.n	8003e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e76:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e78:	4c0b      	ldr	r4, [pc, #44]	; (8003ea8 <LoopForever+0x16>)
  movs r3, #0
 8003e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e7c:	e001      	b.n	8003e82 <LoopFillZerobss>

08003e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e80:	3204      	adds	r2, #4

08003e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e84:	d3fb      	bcc.n	8003e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e86:	f7ff fe9b 	bl	8003bc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e8a:	f000 f817 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e8e:	f7ff fd01 	bl	8003894 <main>

08003e92 <LoopForever>:

LoopForever:
    b LoopForever
 8003e92:	e7fe      	b.n	8003e92 <LoopForever>
  ldr   r0, =_estack
 8003e94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e9c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003ea0:	08004950 	.word	0x08004950
  ldr r2, =_sbss
 8003ea4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003ea8:	20017564 	.word	0x20017564

08003eac <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003eac:	e7fe      	b.n	8003eac <ADC_IRQHandler>
	...

08003eb0 <__errno>:
 8003eb0:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <__errno+0x8>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000028 	.word	0x20000028

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4d0d      	ldr	r5, [pc, #52]	; (8003ef4 <__libc_init_array+0x38>)
 8003ec0:	4c0d      	ldr	r4, [pc, #52]	; (8003ef8 <__libc_init_array+0x3c>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	4d0b      	ldr	r5, [pc, #44]	; (8003efc <__libc_init_array+0x40>)
 8003ece:	4c0c      	ldr	r4, [pc, #48]	; (8003f00 <__libc_init_array+0x44>)
 8003ed0:	f000 fc5c 	bl	800478c <_init>
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	2600      	movs	r6, #0
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08004948 	.word	0x08004948
 8003ef8:	08004948 	.word	0x08004948
 8003efc:	08004948 	.word	0x08004948
 8003f00:	0800494c 	.word	0x0800494c

08003f04 <memcmp>:
 8003f04:	b530      	push	{r4, r5, lr}
 8003f06:	3901      	subs	r1, #1
 8003f08:	2400      	movs	r4, #0
 8003f0a:	42a2      	cmp	r2, r4
 8003f0c:	d101      	bne.n	8003f12 <memcmp+0xe>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e005      	b.n	8003f1e <memcmp+0x1a>
 8003f12:	5d03      	ldrb	r3, [r0, r4]
 8003f14:	3401      	adds	r4, #1
 8003f16:	5d0d      	ldrb	r5, [r1, r4]
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	d0f6      	beq.n	8003f0a <memcmp+0x6>
 8003f1c:	1b58      	subs	r0, r3, r5
 8003f1e:	bd30      	pop	{r4, r5, pc}

08003f20 <memcpy>:
 8003f20:	440a      	add	r2, r1
 8003f22:	4291      	cmp	r1, r2
 8003f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f28:	d100      	bne.n	8003f2c <memcpy+0xc>
 8003f2a:	4770      	bx	lr
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f36:	4291      	cmp	r1, r2
 8003f38:	d1f9      	bne.n	8003f2e <memcpy+0xe>
 8003f3a:	bd10      	pop	{r4, pc}

08003f3c <memset>:
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <siprintf>:
 8003f4c:	b40e      	push	{r1, r2, r3}
 8003f4e:	b500      	push	{lr}
 8003f50:	b09c      	sub	sp, #112	; 0x70
 8003f52:	ab1d      	add	r3, sp, #116	; 0x74
 8003f54:	9002      	str	r0, [sp, #8]
 8003f56:	9006      	str	r0, [sp, #24]
 8003f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f5c:	4809      	ldr	r0, [pc, #36]	; (8003f84 <siprintf+0x38>)
 8003f5e:	9107      	str	r1, [sp, #28]
 8003f60:	9104      	str	r1, [sp, #16]
 8003f62:	4909      	ldr	r1, [pc, #36]	; (8003f88 <siprintf+0x3c>)
 8003f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f68:	9105      	str	r1, [sp, #20]
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	a902      	add	r1, sp, #8
 8003f70:	f000 f868 	bl	8004044 <_svfiprintf_r>
 8003f74:	9b02      	ldr	r3, [sp, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	b01c      	add	sp, #112	; 0x70
 8003f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f80:	b003      	add	sp, #12
 8003f82:	4770      	bx	lr
 8003f84:	20000028 	.word	0x20000028
 8003f88:	ffff0208 	.word	0xffff0208

08003f8c <__ssputs_r>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	688e      	ldr	r6, [r1, #8]
 8003f92:	429e      	cmp	r6, r3
 8003f94:	4682      	mov	sl, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	4690      	mov	r8, r2
 8003f9a:	461f      	mov	r7, r3
 8003f9c:	d838      	bhi.n	8004010 <__ssputs_r+0x84>
 8003f9e:	898a      	ldrh	r2, [r1, #12]
 8003fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fa4:	d032      	beq.n	800400c <__ssputs_r+0x80>
 8003fa6:	6825      	ldr	r5, [r4, #0]
 8003fa8:	6909      	ldr	r1, [r1, #16]
 8003faa:	eba5 0901 	sub.w	r9, r5, r1
 8003fae:	6965      	ldr	r5, [r4, #20]
 8003fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fb8:	3301      	adds	r3, #1
 8003fba:	444b      	add	r3, r9
 8003fbc:	106d      	asrs	r5, r5, #1
 8003fbe:	429d      	cmp	r5, r3
 8003fc0:	bf38      	it	cc
 8003fc2:	461d      	movcc	r5, r3
 8003fc4:	0553      	lsls	r3, r2, #21
 8003fc6:	d531      	bpl.n	800402c <__ssputs_r+0xa0>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	f000 fb39 	bl	8004640 <_malloc_r>
 8003fce:	4606      	mov	r6, r0
 8003fd0:	b950      	cbnz	r0, 8003fe8 <__ssputs_r+0x5c>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	f8ca 3000 	str.w	r3, [sl]
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	6921      	ldr	r1, [r4, #16]
 8003fea:	464a      	mov	r2, r9
 8003fec:	f7ff ff98 	bl	8003f20 <memcpy>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	6126      	str	r6, [r4, #16]
 8003ffe:	6165      	str	r5, [r4, #20]
 8004000:	444e      	add	r6, r9
 8004002:	eba5 0509 	sub.w	r5, r5, r9
 8004006:	6026      	str	r6, [r4, #0]
 8004008:	60a5      	str	r5, [r4, #8]
 800400a:	463e      	mov	r6, r7
 800400c:	42be      	cmp	r6, r7
 800400e:	d900      	bls.n	8004012 <__ssputs_r+0x86>
 8004010:	463e      	mov	r6, r7
 8004012:	4632      	mov	r2, r6
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	4641      	mov	r1, r8
 8004018:	f000 faa8 	bl	800456c <memmove>
 800401c:	68a3      	ldr	r3, [r4, #8]
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	1b9b      	subs	r3, r3, r6
 8004022:	4432      	add	r2, r6
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	6022      	str	r2, [r4, #0]
 8004028:	2000      	movs	r0, #0
 800402a:	e7db      	b.n	8003fe4 <__ssputs_r+0x58>
 800402c:	462a      	mov	r2, r5
 800402e:	f000 fb61 	bl	80046f4 <_realloc_r>
 8004032:	4606      	mov	r6, r0
 8004034:	2800      	cmp	r0, #0
 8004036:	d1e1      	bne.n	8003ffc <__ssputs_r+0x70>
 8004038:	6921      	ldr	r1, [r4, #16]
 800403a:	4650      	mov	r0, sl
 800403c:	f000 fab0 	bl	80045a0 <_free_r>
 8004040:	e7c7      	b.n	8003fd2 <__ssputs_r+0x46>
	...

08004044 <_svfiprintf_r>:
 8004044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004048:	4698      	mov	r8, r3
 800404a:	898b      	ldrh	r3, [r1, #12]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	b09d      	sub	sp, #116	; 0x74
 8004050:	4607      	mov	r7, r0
 8004052:	460d      	mov	r5, r1
 8004054:	4614      	mov	r4, r2
 8004056:	d50e      	bpl.n	8004076 <_svfiprintf_r+0x32>
 8004058:	690b      	ldr	r3, [r1, #16]
 800405a:	b963      	cbnz	r3, 8004076 <_svfiprintf_r+0x32>
 800405c:	2140      	movs	r1, #64	; 0x40
 800405e:	f000 faef 	bl	8004640 <_malloc_r>
 8004062:	6028      	str	r0, [r5, #0]
 8004064:	6128      	str	r0, [r5, #16]
 8004066:	b920      	cbnz	r0, 8004072 <_svfiprintf_r+0x2e>
 8004068:	230c      	movs	r3, #12
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e0d1      	b.n	8004216 <_svfiprintf_r+0x1d2>
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	616b      	str	r3, [r5, #20]
 8004076:	2300      	movs	r3, #0
 8004078:	9309      	str	r3, [sp, #36]	; 0x24
 800407a:	2320      	movs	r3, #32
 800407c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004080:	f8cd 800c 	str.w	r8, [sp, #12]
 8004084:	2330      	movs	r3, #48	; 0x30
 8004086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004230 <_svfiprintf_r+0x1ec>
 800408a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800408e:	f04f 0901 	mov.w	r9, #1
 8004092:	4623      	mov	r3, r4
 8004094:	469a      	mov	sl, r3
 8004096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800409a:	b10a      	cbz	r2, 80040a0 <_svfiprintf_r+0x5c>
 800409c:	2a25      	cmp	r2, #37	; 0x25
 800409e:	d1f9      	bne.n	8004094 <_svfiprintf_r+0x50>
 80040a0:	ebba 0b04 	subs.w	fp, sl, r4
 80040a4:	d00b      	beq.n	80040be <_svfiprintf_r+0x7a>
 80040a6:	465b      	mov	r3, fp
 80040a8:	4622      	mov	r2, r4
 80040aa:	4629      	mov	r1, r5
 80040ac:	4638      	mov	r0, r7
 80040ae:	f7ff ff6d 	bl	8003f8c <__ssputs_r>
 80040b2:	3001      	adds	r0, #1
 80040b4:	f000 80aa 	beq.w	800420c <_svfiprintf_r+0x1c8>
 80040b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040ba:	445a      	add	r2, fp
 80040bc:	9209      	str	r2, [sp, #36]	; 0x24
 80040be:	f89a 3000 	ldrb.w	r3, [sl]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80a2 	beq.w	800420c <_svfiprintf_r+0x1c8>
 80040c8:	2300      	movs	r3, #0
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040d2:	f10a 0a01 	add.w	sl, sl, #1
 80040d6:	9304      	str	r3, [sp, #16]
 80040d8:	9307      	str	r3, [sp, #28]
 80040da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040de:	931a      	str	r3, [sp, #104]	; 0x68
 80040e0:	4654      	mov	r4, sl
 80040e2:	2205      	movs	r2, #5
 80040e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e8:	4851      	ldr	r0, [pc, #324]	; (8004230 <_svfiprintf_r+0x1ec>)
 80040ea:	f7fc f899 	bl	8000220 <memchr>
 80040ee:	9a04      	ldr	r2, [sp, #16]
 80040f0:	b9d8      	cbnz	r0, 800412a <_svfiprintf_r+0xe6>
 80040f2:	06d0      	lsls	r0, r2, #27
 80040f4:	bf44      	itt	mi
 80040f6:	2320      	movmi	r3, #32
 80040f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040fc:	0711      	lsls	r1, r2, #28
 80040fe:	bf44      	itt	mi
 8004100:	232b      	movmi	r3, #43	; 0x2b
 8004102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004106:	f89a 3000 	ldrb.w	r3, [sl]
 800410a:	2b2a      	cmp	r3, #42	; 0x2a
 800410c:	d015      	beq.n	800413a <_svfiprintf_r+0xf6>
 800410e:	9a07      	ldr	r2, [sp, #28]
 8004110:	4654      	mov	r4, sl
 8004112:	2000      	movs	r0, #0
 8004114:	f04f 0c0a 	mov.w	ip, #10
 8004118:	4621      	mov	r1, r4
 800411a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800411e:	3b30      	subs	r3, #48	; 0x30
 8004120:	2b09      	cmp	r3, #9
 8004122:	d94e      	bls.n	80041c2 <_svfiprintf_r+0x17e>
 8004124:	b1b0      	cbz	r0, 8004154 <_svfiprintf_r+0x110>
 8004126:	9207      	str	r2, [sp, #28]
 8004128:	e014      	b.n	8004154 <_svfiprintf_r+0x110>
 800412a:	eba0 0308 	sub.w	r3, r0, r8
 800412e:	fa09 f303 	lsl.w	r3, r9, r3
 8004132:	4313      	orrs	r3, r2
 8004134:	9304      	str	r3, [sp, #16]
 8004136:	46a2      	mov	sl, r4
 8004138:	e7d2      	b.n	80040e0 <_svfiprintf_r+0x9c>
 800413a:	9b03      	ldr	r3, [sp, #12]
 800413c:	1d19      	adds	r1, r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	9103      	str	r1, [sp, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	bfbb      	ittet	lt
 8004146:	425b      	neglt	r3, r3
 8004148:	f042 0202 	orrlt.w	r2, r2, #2
 800414c:	9307      	strge	r3, [sp, #28]
 800414e:	9307      	strlt	r3, [sp, #28]
 8004150:	bfb8      	it	lt
 8004152:	9204      	strlt	r2, [sp, #16]
 8004154:	7823      	ldrb	r3, [r4, #0]
 8004156:	2b2e      	cmp	r3, #46	; 0x2e
 8004158:	d10c      	bne.n	8004174 <_svfiprintf_r+0x130>
 800415a:	7863      	ldrb	r3, [r4, #1]
 800415c:	2b2a      	cmp	r3, #42	; 0x2a
 800415e:	d135      	bne.n	80041cc <_svfiprintf_r+0x188>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	9203      	str	r2, [sp, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	bfb8      	it	lt
 800416c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004170:	3402      	adds	r4, #2
 8004172:	9305      	str	r3, [sp, #20]
 8004174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004240 <_svfiprintf_r+0x1fc>
 8004178:	7821      	ldrb	r1, [r4, #0]
 800417a:	2203      	movs	r2, #3
 800417c:	4650      	mov	r0, sl
 800417e:	f7fc f84f 	bl	8000220 <memchr>
 8004182:	b140      	cbz	r0, 8004196 <_svfiprintf_r+0x152>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	eba0 000a 	sub.w	r0, r0, sl
 800418a:	fa03 f000 	lsl.w	r0, r3, r0
 800418e:	9b04      	ldr	r3, [sp, #16]
 8004190:	4303      	orrs	r3, r0
 8004192:	3401      	adds	r4, #1
 8004194:	9304      	str	r3, [sp, #16]
 8004196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800419a:	4826      	ldr	r0, [pc, #152]	; (8004234 <_svfiprintf_r+0x1f0>)
 800419c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041a0:	2206      	movs	r2, #6
 80041a2:	f7fc f83d 	bl	8000220 <memchr>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d038      	beq.n	800421c <_svfiprintf_r+0x1d8>
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <_svfiprintf_r+0x1f4>)
 80041ac:	bb1b      	cbnz	r3, 80041f6 <_svfiprintf_r+0x1b2>
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	3307      	adds	r3, #7
 80041b2:	f023 0307 	bic.w	r3, r3, #7
 80041b6:	3308      	adds	r3, #8
 80041b8:	9303      	str	r3, [sp, #12]
 80041ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041bc:	4433      	add	r3, r6
 80041be:	9309      	str	r3, [sp, #36]	; 0x24
 80041c0:	e767      	b.n	8004092 <_svfiprintf_r+0x4e>
 80041c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041c6:	460c      	mov	r4, r1
 80041c8:	2001      	movs	r0, #1
 80041ca:	e7a5      	b.n	8004118 <_svfiprintf_r+0xd4>
 80041cc:	2300      	movs	r3, #0
 80041ce:	3401      	adds	r4, #1
 80041d0:	9305      	str	r3, [sp, #20]
 80041d2:	4619      	mov	r1, r3
 80041d4:	f04f 0c0a 	mov.w	ip, #10
 80041d8:	4620      	mov	r0, r4
 80041da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041de:	3a30      	subs	r2, #48	; 0x30
 80041e0:	2a09      	cmp	r2, #9
 80041e2:	d903      	bls.n	80041ec <_svfiprintf_r+0x1a8>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0c5      	beq.n	8004174 <_svfiprintf_r+0x130>
 80041e8:	9105      	str	r1, [sp, #20]
 80041ea:	e7c3      	b.n	8004174 <_svfiprintf_r+0x130>
 80041ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80041f0:	4604      	mov	r4, r0
 80041f2:	2301      	movs	r3, #1
 80041f4:	e7f0      	b.n	80041d8 <_svfiprintf_r+0x194>
 80041f6:	ab03      	add	r3, sp, #12
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	462a      	mov	r2, r5
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <_svfiprintf_r+0x1f8>)
 80041fe:	a904      	add	r1, sp, #16
 8004200:	4638      	mov	r0, r7
 8004202:	f3af 8000 	nop.w
 8004206:	1c42      	adds	r2, r0, #1
 8004208:	4606      	mov	r6, r0
 800420a:	d1d6      	bne.n	80041ba <_svfiprintf_r+0x176>
 800420c:	89ab      	ldrh	r3, [r5, #12]
 800420e:	065b      	lsls	r3, r3, #25
 8004210:	f53f af2c 	bmi.w	800406c <_svfiprintf_r+0x28>
 8004214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004216:	b01d      	add	sp, #116	; 0x74
 8004218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421c:	ab03      	add	r3, sp, #12
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	462a      	mov	r2, r5
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <_svfiprintf_r+0x1f8>)
 8004224:	a904      	add	r1, sp, #16
 8004226:	4638      	mov	r0, r7
 8004228:	f000 f87a 	bl	8004320 <_printf_i>
 800422c:	e7eb      	b.n	8004206 <_svfiprintf_r+0x1c2>
 800422e:	bf00      	nop
 8004230:	08004912 	.word	0x08004912
 8004234:	0800491c 	.word	0x0800491c
 8004238:	00000000 	.word	0x00000000
 800423c:	08003f8d 	.word	0x08003f8d
 8004240:	08004918 	.word	0x08004918

08004244 <_printf_common>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	4616      	mov	r6, r2
 800424a:	4699      	mov	r9, r3
 800424c:	688a      	ldr	r2, [r1, #8]
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004254:	4293      	cmp	r3, r2
 8004256:	bfb8      	it	lt
 8004258:	4613      	movlt	r3, r2
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004260:	4607      	mov	r7, r0
 8004262:	460c      	mov	r4, r1
 8004264:	b10a      	cbz	r2, 800426a <_printf_common+0x26>
 8004266:	3301      	adds	r3, #1
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	0699      	lsls	r1, r3, #26
 800426e:	bf42      	ittt	mi
 8004270:	6833      	ldrmi	r3, [r6, #0]
 8004272:	3302      	addmi	r3, #2
 8004274:	6033      	strmi	r3, [r6, #0]
 8004276:	6825      	ldr	r5, [r4, #0]
 8004278:	f015 0506 	ands.w	r5, r5, #6
 800427c:	d106      	bne.n	800428c <_printf_common+0x48>
 800427e:	f104 0a19 	add.w	sl, r4, #25
 8004282:	68e3      	ldr	r3, [r4, #12]
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	42ab      	cmp	r3, r5
 800428a:	dc26      	bgt.n	80042da <_printf_common+0x96>
 800428c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004290:	1e13      	subs	r3, r2, #0
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	bf18      	it	ne
 8004296:	2301      	movne	r3, #1
 8004298:	0692      	lsls	r2, r2, #26
 800429a:	d42b      	bmi.n	80042f4 <_printf_common+0xb0>
 800429c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c0      	blx	r8
 80042a6:	3001      	adds	r0, #1
 80042a8:	d01e      	beq.n	80042e8 <_printf_common+0xa4>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	68e5      	ldr	r5, [r4, #12]
 80042ae:	6832      	ldr	r2, [r6, #0]
 80042b0:	f003 0306 	and.w	r3, r3, #6
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	bf08      	it	eq
 80042b8:	1aad      	subeq	r5, r5, r2
 80042ba:	68a3      	ldr	r3, [r4, #8]
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	bf0c      	ite	eq
 80042c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c4:	2500      	movne	r5, #0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bfc4      	itt	gt
 80042ca:	1a9b      	subgt	r3, r3, r2
 80042cc:	18ed      	addgt	r5, r5, r3
 80042ce:	2600      	movs	r6, #0
 80042d0:	341a      	adds	r4, #26
 80042d2:	42b5      	cmp	r5, r6
 80042d4:	d11a      	bne.n	800430c <_printf_common+0xc8>
 80042d6:	2000      	movs	r0, #0
 80042d8:	e008      	b.n	80042ec <_printf_common+0xa8>
 80042da:	2301      	movs	r3, #1
 80042dc:	4652      	mov	r2, sl
 80042de:	4649      	mov	r1, r9
 80042e0:	4638      	mov	r0, r7
 80042e2:	47c0      	blx	r8
 80042e4:	3001      	adds	r0, #1
 80042e6:	d103      	bne.n	80042f0 <_printf_common+0xac>
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f0:	3501      	adds	r5, #1
 80042f2:	e7c6      	b.n	8004282 <_printf_common+0x3e>
 80042f4:	18e1      	adds	r1, r4, r3
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	2030      	movs	r0, #48	; 0x30
 80042fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042fe:	4422      	add	r2, r4
 8004300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004308:	3302      	adds	r3, #2
 800430a:	e7c7      	b.n	800429c <_printf_common+0x58>
 800430c:	2301      	movs	r3, #1
 800430e:	4622      	mov	r2, r4
 8004310:	4649      	mov	r1, r9
 8004312:	4638      	mov	r0, r7
 8004314:	47c0      	blx	r8
 8004316:	3001      	adds	r0, #1
 8004318:	d0e6      	beq.n	80042e8 <_printf_common+0xa4>
 800431a:	3601      	adds	r6, #1
 800431c:	e7d9      	b.n	80042d2 <_printf_common+0x8e>
	...

08004320 <_printf_i>:
 8004320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	460c      	mov	r4, r1
 8004326:	4691      	mov	r9, r2
 8004328:	7e27      	ldrb	r7, [r4, #24]
 800432a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800432c:	2f78      	cmp	r7, #120	; 0x78
 800432e:	4680      	mov	r8, r0
 8004330:	469a      	mov	sl, r3
 8004332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004336:	d807      	bhi.n	8004348 <_printf_i+0x28>
 8004338:	2f62      	cmp	r7, #98	; 0x62
 800433a:	d80a      	bhi.n	8004352 <_printf_i+0x32>
 800433c:	2f00      	cmp	r7, #0
 800433e:	f000 80d8 	beq.w	80044f2 <_printf_i+0x1d2>
 8004342:	2f58      	cmp	r7, #88	; 0x58
 8004344:	f000 80a3 	beq.w	800448e <_printf_i+0x16e>
 8004348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800434c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004350:	e03a      	b.n	80043c8 <_printf_i+0xa8>
 8004352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004356:	2b15      	cmp	r3, #21
 8004358:	d8f6      	bhi.n	8004348 <_printf_i+0x28>
 800435a:	a001      	add	r0, pc, #4	; (adr r0, 8004360 <_printf_i+0x40>)
 800435c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043cd 	.word	0x080043cd
 8004368:	08004349 	.word	0x08004349
 800436c:	08004349 	.word	0x08004349
 8004370:	08004349 	.word	0x08004349
 8004374:	08004349 	.word	0x08004349
 8004378:	080043cd 	.word	0x080043cd
 800437c:	08004349 	.word	0x08004349
 8004380:	08004349 	.word	0x08004349
 8004384:	08004349 	.word	0x08004349
 8004388:	08004349 	.word	0x08004349
 800438c:	080044d9 	.word	0x080044d9
 8004390:	080043fd 	.word	0x080043fd
 8004394:	080044bb 	.word	0x080044bb
 8004398:	08004349 	.word	0x08004349
 800439c:	08004349 	.word	0x08004349
 80043a0:	080044fb 	.word	0x080044fb
 80043a4:	08004349 	.word	0x08004349
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	08004349 	.word	0x08004349
 80043b0:	08004349 	.word	0x08004349
 80043b4:	080044c3 	.word	0x080044c3
 80043b8:	680b      	ldr	r3, [r1, #0]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	600a      	str	r2, [r1, #0]
 80043c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0a3      	b.n	8004514 <_printf_i+0x1f4>
 80043cc:	6825      	ldr	r5, [r4, #0]
 80043ce:	6808      	ldr	r0, [r1, #0]
 80043d0:	062e      	lsls	r6, r5, #24
 80043d2:	f100 0304 	add.w	r3, r0, #4
 80043d6:	d50a      	bpl.n	80043ee <_printf_i+0xce>
 80043d8:	6805      	ldr	r5, [r0, #0]
 80043da:	600b      	str	r3, [r1, #0]
 80043dc:	2d00      	cmp	r5, #0
 80043de:	da03      	bge.n	80043e8 <_printf_i+0xc8>
 80043e0:	232d      	movs	r3, #45	; 0x2d
 80043e2:	426d      	negs	r5, r5
 80043e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e8:	485e      	ldr	r0, [pc, #376]	; (8004564 <_printf_i+0x244>)
 80043ea:	230a      	movs	r3, #10
 80043ec:	e019      	b.n	8004422 <_printf_i+0x102>
 80043ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043f2:	6805      	ldr	r5, [r0, #0]
 80043f4:	600b      	str	r3, [r1, #0]
 80043f6:	bf18      	it	ne
 80043f8:	b22d      	sxthne	r5, r5
 80043fa:	e7ef      	b.n	80043dc <_printf_i+0xbc>
 80043fc:	680b      	ldr	r3, [r1, #0]
 80043fe:	6825      	ldr	r5, [r4, #0]
 8004400:	1d18      	adds	r0, r3, #4
 8004402:	6008      	str	r0, [r1, #0]
 8004404:	0628      	lsls	r0, r5, #24
 8004406:	d501      	bpl.n	800440c <_printf_i+0xec>
 8004408:	681d      	ldr	r5, [r3, #0]
 800440a:	e002      	b.n	8004412 <_printf_i+0xf2>
 800440c:	0669      	lsls	r1, r5, #25
 800440e:	d5fb      	bpl.n	8004408 <_printf_i+0xe8>
 8004410:	881d      	ldrh	r5, [r3, #0]
 8004412:	4854      	ldr	r0, [pc, #336]	; (8004564 <_printf_i+0x244>)
 8004414:	2f6f      	cmp	r7, #111	; 0x6f
 8004416:	bf0c      	ite	eq
 8004418:	2308      	moveq	r3, #8
 800441a:	230a      	movne	r3, #10
 800441c:	2100      	movs	r1, #0
 800441e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004422:	6866      	ldr	r6, [r4, #4]
 8004424:	60a6      	str	r6, [r4, #8]
 8004426:	2e00      	cmp	r6, #0
 8004428:	bfa2      	ittt	ge
 800442a:	6821      	ldrge	r1, [r4, #0]
 800442c:	f021 0104 	bicge.w	r1, r1, #4
 8004430:	6021      	strge	r1, [r4, #0]
 8004432:	b90d      	cbnz	r5, 8004438 <_printf_i+0x118>
 8004434:	2e00      	cmp	r6, #0
 8004436:	d04d      	beq.n	80044d4 <_printf_i+0x1b4>
 8004438:	4616      	mov	r6, r2
 800443a:	fbb5 f1f3 	udiv	r1, r5, r3
 800443e:	fb03 5711 	mls	r7, r3, r1, r5
 8004442:	5dc7      	ldrb	r7, [r0, r7]
 8004444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004448:	462f      	mov	r7, r5
 800444a:	42bb      	cmp	r3, r7
 800444c:	460d      	mov	r5, r1
 800444e:	d9f4      	bls.n	800443a <_printf_i+0x11a>
 8004450:	2b08      	cmp	r3, #8
 8004452:	d10b      	bne.n	800446c <_printf_i+0x14c>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	07df      	lsls	r7, r3, #31
 8004458:	d508      	bpl.n	800446c <_printf_i+0x14c>
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	6861      	ldr	r1, [r4, #4]
 800445e:	4299      	cmp	r1, r3
 8004460:	bfde      	ittt	le
 8004462:	2330      	movle	r3, #48	; 0x30
 8004464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800446c:	1b92      	subs	r2, r2, r6
 800446e:	6122      	str	r2, [r4, #16]
 8004470:	f8cd a000 	str.w	sl, [sp]
 8004474:	464b      	mov	r3, r9
 8004476:	aa03      	add	r2, sp, #12
 8004478:	4621      	mov	r1, r4
 800447a:	4640      	mov	r0, r8
 800447c:	f7ff fee2 	bl	8004244 <_printf_common>
 8004480:	3001      	adds	r0, #1
 8004482:	d14c      	bne.n	800451e <_printf_i+0x1fe>
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	b004      	add	sp, #16
 800448a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448e:	4835      	ldr	r0, [pc, #212]	; (8004564 <_printf_i+0x244>)
 8004490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	680e      	ldr	r6, [r1, #0]
 8004498:	061f      	lsls	r7, r3, #24
 800449a:	f856 5b04 	ldr.w	r5, [r6], #4
 800449e:	600e      	str	r6, [r1, #0]
 80044a0:	d514      	bpl.n	80044cc <_printf_i+0x1ac>
 80044a2:	07d9      	lsls	r1, r3, #31
 80044a4:	bf44      	itt	mi
 80044a6:	f043 0320 	orrmi.w	r3, r3, #32
 80044aa:	6023      	strmi	r3, [r4, #0]
 80044ac:	b91d      	cbnz	r5, 80044b6 <_printf_i+0x196>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f023 0320 	bic.w	r3, r3, #32
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2310      	movs	r3, #16
 80044b8:	e7b0      	b.n	800441c <_printf_i+0xfc>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f043 0320 	orr.w	r3, r3, #32
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	2378      	movs	r3, #120	; 0x78
 80044c4:	4828      	ldr	r0, [pc, #160]	; (8004568 <_printf_i+0x248>)
 80044c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ca:	e7e3      	b.n	8004494 <_printf_i+0x174>
 80044cc:	065e      	lsls	r6, r3, #25
 80044ce:	bf48      	it	mi
 80044d0:	b2ad      	uxthmi	r5, r5
 80044d2:	e7e6      	b.n	80044a2 <_printf_i+0x182>
 80044d4:	4616      	mov	r6, r2
 80044d6:	e7bb      	b.n	8004450 <_printf_i+0x130>
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	6826      	ldr	r6, [r4, #0]
 80044dc:	6960      	ldr	r0, [r4, #20]
 80044de:	1d1d      	adds	r5, r3, #4
 80044e0:	600d      	str	r5, [r1, #0]
 80044e2:	0635      	lsls	r5, r6, #24
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0x1cc>
 80044e8:	6018      	str	r0, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <_printf_i+0x1d2>
 80044ec:	0671      	lsls	r1, r6, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0x1c8>
 80044f0:	8018      	strh	r0, [r3, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	4616      	mov	r6, r2
 80044f8:	e7ba      	b.n	8004470 <_printf_i+0x150>
 80044fa:	680b      	ldr	r3, [r1, #0]
 80044fc:	1d1a      	adds	r2, r3, #4
 80044fe:	600a      	str	r2, [r1, #0]
 8004500:	681e      	ldr	r6, [r3, #0]
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	2100      	movs	r1, #0
 8004506:	4630      	mov	r0, r6
 8004508:	f7fb fe8a 	bl	8000220 <memchr>
 800450c:	b108      	cbz	r0, 8004512 <_printf_i+0x1f2>
 800450e:	1b80      	subs	r0, r0, r6
 8004510:	6060      	str	r0, [r4, #4]
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	2300      	movs	r3, #0
 8004518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800451c:	e7a8      	b.n	8004470 <_printf_i+0x150>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	4632      	mov	r2, r6
 8004522:	4649      	mov	r1, r9
 8004524:	4640      	mov	r0, r8
 8004526:	47d0      	blx	sl
 8004528:	3001      	adds	r0, #1
 800452a:	d0ab      	beq.n	8004484 <_printf_i+0x164>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	079b      	lsls	r3, r3, #30
 8004530:	d413      	bmi.n	800455a <_printf_i+0x23a>
 8004532:	68e0      	ldr	r0, [r4, #12]
 8004534:	9b03      	ldr	r3, [sp, #12]
 8004536:	4298      	cmp	r0, r3
 8004538:	bfb8      	it	lt
 800453a:	4618      	movlt	r0, r3
 800453c:	e7a4      	b.n	8004488 <_printf_i+0x168>
 800453e:	2301      	movs	r3, #1
 8004540:	4632      	mov	r2, r6
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	47d0      	blx	sl
 8004548:	3001      	adds	r0, #1
 800454a:	d09b      	beq.n	8004484 <_printf_i+0x164>
 800454c:	3501      	adds	r5, #1
 800454e:	68e3      	ldr	r3, [r4, #12]
 8004550:	9903      	ldr	r1, [sp, #12]
 8004552:	1a5b      	subs	r3, r3, r1
 8004554:	42ab      	cmp	r3, r5
 8004556:	dcf2      	bgt.n	800453e <_printf_i+0x21e>
 8004558:	e7eb      	b.n	8004532 <_printf_i+0x212>
 800455a:	2500      	movs	r5, #0
 800455c:	f104 0619 	add.w	r6, r4, #25
 8004560:	e7f5      	b.n	800454e <_printf_i+0x22e>
 8004562:	bf00      	nop
 8004564:	08004923 	.word	0x08004923
 8004568:	08004934 	.word	0x08004934

0800456c <memmove>:
 800456c:	4288      	cmp	r0, r1
 800456e:	b510      	push	{r4, lr}
 8004570:	eb01 0402 	add.w	r4, r1, r2
 8004574:	d902      	bls.n	800457c <memmove+0x10>
 8004576:	4284      	cmp	r4, r0
 8004578:	4623      	mov	r3, r4
 800457a:	d807      	bhi.n	800458c <memmove+0x20>
 800457c:	1e43      	subs	r3, r0, #1
 800457e:	42a1      	cmp	r1, r4
 8004580:	d008      	beq.n	8004594 <memmove+0x28>
 8004582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800458a:	e7f8      	b.n	800457e <memmove+0x12>
 800458c:	4402      	add	r2, r0
 800458e:	4601      	mov	r1, r0
 8004590:	428a      	cmp	r2, r1
 8004592:	d100      	bne.n	8004596 <memmove+0x2a>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800459a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800459e:	e7f7      	b.n	8004590 <memmove+0x24>

080045a0 <_free_r>:
 80045a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045a2:	2900      	cmp	r1, #0
 80045a4:	d048      	beq.n	8004638 <_free_r+0x98>
 80045a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045aa:	9001      	str	r0, [sp, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f1a1 0404 	sub.w	r4, r1, #4
 80045b2:	bfb8      	it	lt
 80045b4:	18e4      	addlt	r4, r4, r3
 80045b6:	f000 f8d3 	bl	8004760 <__malloc_lock>
 80045ba:	4a20      	ldr	r2, [pc, #128]	; (800463c <_free_r+0x9c>)
 80045bc:	9801      	ldr	r0, [sp, #4]
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	4615      	mov	r5, r2
 80045c2:	b933      	cbnz	r3, 80045d2 <_free_r+0x32>
 80045c4:	6063      	str	r3, [r4, #4]
 80045c6:	6014      	str	r4, [r2, #0]
 80045c8:	b003      	add	sp, #12
 80045ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045ce:	f000 b8cd 	b.w	800476c <__malloc_unlock>
 80045d2:	42a3      	cmp	r3, r4
 80045d4:	d90b      	bls.n	80045ee <_free_r+0x4e>
 80045d6:	6821      	ldr	r1, [r4, #0]
 80045d8:	1862      	adds	r2, r4, r1
 80045da:	4293      	cmp	r3, r2
 80045dc:	bf04      	itt	eq
 80045de:	681a      	ldreq	r2, [r3, #0]
 80045e0:	685b      	ldreq	r3, [r3, #4]
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	bf04      	itt	eq
 80045e6:	1852      	addeq	r2, r2, r1
 80045e8:	6022      	streq	r2, [r4, #0]
 80045ea:	602c      	str	r4, [r5, #0]
 80045ec:	e7ec      	b.n	80045c8 <_free_r+0x28>
 80045ee:	461a      	mov	r2, r3
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b10b      	cbz	r3, 80045f8 <_free_r+0x58>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d9fa      	bls.n	80045ee <_free_r+0x4e>
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	1855      	adds	r5, r2, r1
 80045fc:	42a5      	cmp	r5, r4
 80045fe:	d10b      	bne.n	8004618 <_free_r+0x78>
 8004600:	6824      	ldr	r4, [r4, #0]
 8004602:	4421      	add	r1, r4
 8004604:	1854      	adds	r4, r2, r1
 8004606:	42a3      	cmp	r3, r4
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	d1dd      	bne.n	80045c8 <_free_r+0x28>
 800460c:	681c      	ldr	r4, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	6053      	str	r3, [r2, #4]
 8004612:	4421      	add	r1, r4
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	e7d7      	b.n	80045c8 <_free_r+0x28>
 8004618:	d902      	bls.n	8004620 <_free_r+0x80>
 800461a:	230c      	movs	r3, #12
 800461c:	6003      	str	r3, [r0, #0]
 800461e:	e7d3      	b.n	80045c8 <_free_r+0x28>
 8004620:	6825      	ldr	r5, [r4, #0]
 8004622:	1961      	adds	r1, r4, r5
 8004624:	428b      	cmp	r3, r1
 8004626:	bf04      	itt	eq
 8004628:	6819      	ldreq	r1, [r3, #0]
 800462a:	685b      	ldreq	r3, [r3, #4]
 800462c:	6063      	str	r3, [r4, #4]
 800462e:	bf04      	itt	eq
 8004630:	1949      	addeq	r1, r1, r5
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	6054      	str	r4, [r2, #4]
 8004636:	e7c7      	b.n	80045c8 <_free_r+0x28>
 8004638:	b003      	add	sp, #12
 800463a:	bd30      	pop	{r4, r5, pc}
 800463c:	200174a4 	.word	0x200174a4

08004640 <_malloc_r>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	1ccd      	adds	r5, r1, #3
 8004644:	f025 0503 	bic.w	r5, r5, #3
 8004648:	3508      	adds	r5, #8
 800464a:	2d0c      	cmp	r5, #12
 800464c:	bf38      	it	cc
 800464e:	250c      	movcc	r5, #12
 8004650:	2d00      	cmp	r5, #0
 8004652:	4606      	mov	r6, r0
 8004654:	db01      	blt.n	800465a <_malloc_r+0x1a>
 8004656:	42a9      	cmp	r1, r5
 8004658:	d903      	bls.n	8004662 <_malloc_r+0x22>
 800465a:	230c      	movs	r3, #12
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	2000      	movs	r0, #0
 8004660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004662:	f000 f87d 	bl	8004760 <__malloc_lock>
 8004666:	4921      	ldr	r1, [pc, #132]	; (80046ec <_malloc_r+0xac>)
 8004668:	680a      	ldr	r2, [r1, #0]
 800466a:	4614      	mov	r4, r2
 800466c:	b99c      	cbnz	r4, 8004696 <_malloc_r+0x56>
 800466e:	4f20      	ldr	r7, [pc, #128]	; (80046f0 <_malloc_r+0xb0>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	b923      	cbnz	r3, 800467e <_malloc_r+0x3e>
 8004674:	4621      	mov	r1, r4
 8004676:	4630      	mov	r0, r6
 8004678:	f000 f862 	bl	8004740 <_sbrk_r>
 800467c:	6038      	str	r0, [r7, #0]
 800467e:	4629      	mov	r1, r5
 8004680:	4630      	mov	r0, r6
 8004682:	f000 f85d 	bl	8004740 <_sbrk_r>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d123      	bne.n	80046d2 <_malloc_r+0x92>
 800468a:	230c      	movs	r3, #12
 800468c:	6033      	str	r3, [r6, #0]
 800468e:	4630      	mov	r0, r6
 8004690:	f000 f86c 	bl	800476c <__malloc_unlock>
 8004694:	e7e3      	b.n	800465e <_malloc_r+0x1e>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	1b5b      	subs	r3, r3, r5
 800469a:	d417      	bmi.n	80046cc <_malloc_r+0x8c>
 800469c:	2b0b      	cmp	r3, #11
 800469e:	d903      	bls.n	80046a8 <_malloc_r+0x68>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	441c      	add	r4, r3
 80046a4:	6025      	str	r5, [r4, #0]
 80046a6:	e004      	b.n	80046b2 <_malloc_r+0x72>
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	42a2      	cmp	r2, r4
 80046ac:	bf0c      	ite	eq
 80046ae:	600b      	streq	r3, [r1, #0]
 80046b0:	6053      	strne	r3, [r2, #4]
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f85a 	bl	800476c <__malloc_unlock>
 80046b8:	f104 000b 	add.w	r0, r4, #11
 80046bc:	1d23      	adds	r3, r4, #4
 80046be:	f020 0007 	bic.w	r0, r0, #7
 80046c2:	1ac2      	subs	r2, r0, r3
 80046c4:	d0cc      	beq.n	8004660 <_malloc_r+0x20>
 80046c6:	1a1b      	subs	r3, r3, r0
 80046c8:	50a3      	str	r3, [r4, r2]
 80046ca:	e7c9      	b.n	8004660 <_malloc_r+0x20>
 80046cc:	4622      	mov	r2, r4
 80046ce:	6864      	ldr	r4, [r4, #4]
 80046d0:	e7cc      	b.n	800466c <_malloc_r+0x2c>
 80046d2:	1cc4      	adds	r4, r0, #3
 80046d4:	f024 0403 	bic.w	r4, r4, #3
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d0e3      	beq.n	80046a4 <_malloc_r+0x64>
 80046dc:	1a21      	subs	r1, r4, r0
 80046de:	4630      	mov	r0, r6
 80046e0:	f000 f82e 	bl	8004740 <_sbrk_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d1dd      	bne.n	80046a4 <_malloc_r+0x64>
 80046e8:	e7cf      	b.n	800468a <_malloc_r+0x4a>
 80046ea:	bf00      	nop
 80046ec:	200174a4 	.word	0x200174a4
 80046f0:	200174a8 	.word	0x200174a8

080046f4 <_realloc_r>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	4607      	mov	r7, r0
 80046f8:	4614      	mov	r4, r2
 80046fa:	460e      	mov	r6, r1
 80046fc:	b921      	cbnz	r1, 8004708 <_realloc_r+0x14>
 80046fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004702:	4611      	mov	r1, r2
 8004704:	f7ff bf9c 	b.w	8004640 <_malloc_r>
 8004708:	b922      	cbnz	r2, 8004714 <_realloc_r+0x20>
 800470a:	f7ff ff49 	bl	80045a0 <_free_r>
 800470e:	4625      	mov	r5, r4
 8004710:	4628      	mov	r0, r5
 8004712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004714:	f000 f830 	bl	8004778 <_malloc_usable_size_r>
 8004718:	42a0      	cmp	r0, r4
 800471a:	d20f      	bcs.n	800473c <_realloc_r+0x48>
 800471c:	4621      	mov	r1, r4
 800471e:	4638      	mov	r0, r7
 8004720:	f7ff ff8e 	bl	8004640 <_malloc_r>
 8004724:	4605      	mov	r5, r0
 8004726:	2800      	cmp	r0, #0
 8004728:	d0f2      	beq.n	8004710 <_realloc_r+0x1c>
 800472a:	4631      	mov	r1, r6
 800472c:	4622      	mov	r2, r4
 800472e:	f7ff fbf7 	bl	8003f20 <memcpy>
 8004732:	4631      	mov	r1, r6
 8004734:	4638      	mov	r0, r7
 8004736:	f7ff ff33 	bl	80045a0 <_free_r>
 800473a:	e7e9      	b.n	8004710 <_realloc_r+0x1c>
 800473c:	4635      	mov	r5, r6
 800473e:	e7e7      	b.n	8004710 <_realloc_r+0x1c>

08004740 <_sbrk_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d06      	ldr	r5, [pc, #24]	; (800475c <_sbrk_r+0x1c>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	f7ff fa0c 	bl	8003b68 <_sbrk>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_sbrk_r+0x1a>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_sbrk_r+0x1a>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	20017554 	.word	0x20017554

08004760 <__malloc_lock>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__malloc_lock+0x8>)
 8004762:	f000 b811 	b.w	8004788 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	2001755c 	.word	0x2001755c

0800476c <__malloc_unlock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_unlock+0x8>)
 800476e:	f000 b80c 	b.w	800478a <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	2001755c 	.word	0x2001755c

08004778 <_malloc_usable_size_r>:
 8004778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477c:	1f18      	subs	r0, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfbc      	itt	lt
 8004782:	580b      	ldrlt	r3, [r1, r0]
 8004784:	18c0      	addlt	r0, r0, r3
 8004786:	4770      	bx	lr

08004788 <__retarget_lock_acquire_recursive>:
 8004788:	4770      	bx	lr

0800478a <__retarget_lock_release_recursive>:
 800478a:	4770      	bx	lr

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
