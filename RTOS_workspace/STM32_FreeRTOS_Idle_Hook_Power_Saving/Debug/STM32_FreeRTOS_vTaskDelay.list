
STM32_FreeRTOS_vTaskDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004510  08004510  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004510  08004510  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004510  08004510  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174cc  2000008c  080045a4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017558  080045a4  00027558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3bb  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d77  00000000  00000000  0002e477  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  000301f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00030d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003244  00000000  00000000  00031808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e52  00000000  00000000  00034a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076bf6  00000000  00000000  0003e89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003420  00000000  00000000  000b5510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004380 	.word	0x08004380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08004380 	.word	0x08004380

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	371c      	adds	r7, #28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	4013      	ands	r3, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e001      	b.n	8000402 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	405a      	eors	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	615a      	str	r2, [r3, #20]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
 8000440:	4613      	mov	r3, r2
 8000442:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800044c:	787a      	ldrb	r2, [r7, #1]
 800044e:	887b      	ldrh	r3, [r7, #2]
 8000450:	f003 0307 	and.w	r3, r3, #7
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b29b      	uxth	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3208      	adds	r2, #8
 8000468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046c:	887b      	ldrh	r3, [r7, #2]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	210f      	movs	r1, #15
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	43db      	mvns	r3, r3
 800047c:	8879      	ldrh	r1, [r7, #2]
 800047e:	08c9      	lsrs	r1, r1, #3
 8000480:	b289      	uxth	r1, r1
 8000482:	4608      	mov	r0, r1
 8000484:	ea02 0103 	and.w	r1, r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f100 0208 	add.w	r2, r0, #8
 800048e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000492:	887b      	ldrh	r3, [r7, #2]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	b29b      	uxth	r3, r3
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3208      	adds	r2, #8
 800049e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	08db      	lsrs	r3, r3, #3
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3208      	adds	r2, #8
 80004b4:	68b9      	ldr	r1, [r7, #8]
 80004b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <RCC_DeInit+0x60>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <RCC_DeInit+0x60>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <RCC_DeInit+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <RCC_DeInit+0x60>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <RCC_DeInit+0x60>)
 80004e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004ec:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <RCC_DeInit+0x60>)
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <RCC_DeInit+0x64>)
 80004f2:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <RCC_DeInit+0x60>)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <RCC_DeInit+0x68>)
 80004f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <RCC_DeInit+0x60>)
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <RCC_DeInit+0x6c>)
 8000500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <RCC_DeInit+0x60>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <RCC_DeInit+0x60>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <RCC_DeInit+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <RCC_DeInit+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023800 	.word	0x40023800
 800052c:	24003010 	.word	0x24003010
 8000530:	20003000 	.word	0x20003000
 8000534:	24003000 	.word	0x24003000

08000538 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	2302      	movs	r3, #2
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	2302      	movs	r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000558:	4b47      	ldr	r3, [pc, #284]	; (8000678 <RCC_GetClocksFreq+0x140>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f003 030c 	and.w	r3, r3, #12
 8000560:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2b04      	cmp	r3, #4
 8000566:	d007      	beq.n	8000578 <RCC_GetClocksFreq+0x40>
 8000568:	2b08      	cmp	r3, #8
 800056a:	d009      	beq.n	8000580 <RCC_GetClocksFreq+0x48>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d13d      	bne.n	80005ec <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a42      	ldr	r2, [pc, #264]	; (800067c <RCC_GetClocksFreq+0x144>)
 8000574:	601a      	str	r2, [r3, #0]
    break;
 8000576:	e03d      	b.n	80005f4 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a41      	ldr	r2, [pc, #260]	; (8000680 <RCC_GetClocksFreq+0x148>)
 800057c:	601a      	str	r2, [r3, #0]
    break;
 800057e:	e039      	b.n	80005f4 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000580:	4b3d      	ldr	r3, [pc, #244]	; (8000678 <RCC_GetClocksFreq+0x140>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	0d9b      	lsrs	r3, r3, #22
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800058c:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <RCC_GetClocksFreq+0x140>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000594:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00c      	beq.n	80005b6 <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800059c:	4a38      	ldr	r2, [pc, #224]	; (8000680 <RCC_GetClocksFreq+0x148>)
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a4:	4a34      	ldr	r2, [pc, #208]	; (8000678 <RCC_GetClocksFreq+0x140>)
 80005a6:	6852      	ldr	r2, [r2, #4]
 80005a8:	0992      	lsrs	r2, r2, #6
 80005aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	61fb      	str	r3, [r7, #28]
 80005b4:	e00b      	b.n	80005ce <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005b6:	4a31      	ldr	r2, [pc, #196]	; (800067c <RCC_GetClocksFreq+0x144>)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4a2e      	ldr	r2, [pc, #184]	; (8000678 <RCC_GetClocksFreq+0x140>)
 80005c0:	6852      	ldr	r2, [r2, #4]
 80005c2:	0992      	lsrs	r2, r2, #6
 80005c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005ce:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <RCC_GetClocksFreq+0x140>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	3301      	adds	r3, #1
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005de:	69fa      	ldr	r2, [r7, #28]
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
    break;
 80005ea:	e003      	b.n	80005f4 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <RCC_GetClocksFreq+0x144>)
 80005f0:	601a      	str	r2, [r3, #0]
    break;
 80005f2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <RCC_GetClocksFreq+0x140>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000604:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	40da      	lsrs	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <RCC_GetClocksFreq+0x140>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000624:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	0a9b      	lsrs	r3, r3, #10
 800062a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	40da      	lsrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <RCC_GetClocksFreq+0x140>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800064c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	0b5b      	lsrs	r3, r3, #13
 8000652:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	40da      	lsrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60da      	str	r2, [r3, #12]
}
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800
 800067c:	00f42400 	.word	0x00f42400
 8000680:	017d7840 	.word	0x017d7840
 8000684:	20000000 	.word	0x20000000

08000688 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800069c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069e:	4909      	ldr	r1, [pc, #36]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006a6:	e006      	b.n	80006b6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4904      	ldr	r1, [pc, #16]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <RCC_APB1PeriphClockCmd+0x3c>)
 80006dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <RCC_APB1PeriphClockCmd+0x3c>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006e6:	e006      	b.n	80006f6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <RCC_APB1PeriphClockCmd+0x3c>)
 80006ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4904      	ldr	r1, [pc, #16]	; (8000704 <RCC_APB1PeriphClockCmd+0x3c>)
 80006f2:	4013      	ands	r3, r2
 80006f4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <RCC_APB2PeriphClockCmd+0x3c>)
 800071c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800071e:	4909      	ldr	r1, [pc, #36]	; (8000744 <RCC_APB2PeriphClockCmd+0x3c>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000726:	e006      	b.n	8000736 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <RCC_APB2PeriphClockCmd+0x3c>)
 800072a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	43db      	mvns	r3, r3
 8000730:	4904      	ldr	r1, [pc, #16]	; (8000744 <RCC_APB2PeriphClockCmd+0x3c>)
 8000732:	4013      	ands	r3, r2
 8000734:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	8a1b      	ldrh	r3, [r3, #16]
 8000766:	b29b      	uxth	r3, r3
 8000768:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	88db      	ldrh	r3, [r3, #6]
 8000776:	461a      	mov	r2, r3
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	4313      	orrs	r3, r2
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	b29a      	uxth	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	899b      	ldrh	r3, [r3, #12]
 800078a:	b29b      	uxth	r3, r3
 800078c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000794:	f023 030c 	bic.w	r3, r3, #12
 8000798:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	889a      	ldrh	r2, [r3, #4]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	891b      	ldrh	r3, [r3, #8]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b2:	4313      	orrs	r3, r2
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8a9b      	ldrh	r3, [r3, #20]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	899b      	ldrh	r3, [r3, #12]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	b29a      	uxth	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fea6 	bl	8000538 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a30      	ldr	r2, [pc, #192]	; (80008b0 <USART_Init+0x168>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d003      	beq.n	80007fc <USART_Init+0xb4>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <USART_Init+0x16c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d102      	bne.n	8000802 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	e001      	b.n	8000806 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	899b      	ldrh	r3, [r3, #12]
 800080a:	b29b      	uxth	r3, r3
 800080c:	b21b      	sxth	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	da0c      	bge.n	800082c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000812:	6a3a      	ldr	r2, [r7, #32]
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	009a      	lsls	r2, r3, #2
 800081c:	441a      	add	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	fbb2 f3f3 	udiv	r3, r2, r3
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e00b      	b.n	8000844 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800082c:	6a3a      	ldr	r2, [r7, #32]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	009a      	lsls	r2, r3, #2
 8000836:	441a      	add	r2, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <USART_Init+0x170>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	095b      	lsrs	r3, r3, #5
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	2264      	movs	r2, #100	; 0x64
 8000858:	fb02 f303 	mul.w	r3, r2, r3
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	899b      	ldrh	r3, [r3, #12]
 8000866:	b29b      	uxth	r3, r3
 8000868:	b21b      	sxth	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	da0c      	bge.n	8000888 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	3332      	adds	r3, #50	; 0x32
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <USART_Init+0x170>)
 8000876:	fba2 2303 	umull	r2, r3, r2, r3
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	f003 0307 	and.w	r3, r3, #7
 8000880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000882:	4313      	orrs	r3, r2
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
 8000886:	e00b      	b.n	80008a0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	3332      	adds	r3, #50	; 0x32
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <USART_Init+0x170>)
 8000890:	fba2 2303 	umull	r2, r3, r2, r3
 8000894:	095b      	lsrs	r3, r3, #5
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800089c:	4313      	orrs	r3, r2
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	811a      	strh	r2, [r3, #8]
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40011000 	.word	0x40011000
 80008b4:	40011400 	.word	0x40011400
 80008b8:	51eb851f 	.word	0x51eb851f

080008bc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d008      	beq.n	80008e0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	899b      	ldrh	r3, [r3, #12]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008de:	e007      	b.n	80008f0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	899b      	ldrh	r3, [r3, #12]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	819a      	strh	r2, [r3, #12]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000908:	887b      	ldrh	r3, [r7, #2]
 800090a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800090e:	b29a      	uxth	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	809a      	strh	r2, [r3, #4]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b29a      	uxth	r2, r3
 8000936:	887b      	ldrh	r3, [r7, #2]
 8000938:	4013      	ands	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e001      	b.n	800094a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800094a:	7bfb      	ldrb	r3, [r7, #15]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f103 0208 	add.w	r2, r3, #8
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f103 0208 	add.w	r2, r3, #8
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d103      	bne.n	8000a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	e00c      	b.n	8000a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e002      	b.n	8000a28 <vListInsert+0x2e>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d2f6      	bcs.n	8000a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6892      	ldr	r2, [r2, #8]
 8000a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	6852      	ldr	r2, [r2, #4]
 8000a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d103      	bne.n	8000aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af04      	add	r7, sp, #16
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	4613      	mov	r3, r2
 8000ace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 ff3d 	bl	8001954 <pvPortMalloc>
 8000ada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00e      	beq.n	8000b00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ae2:	2058      	movs	r0, #88	; 0x58
 8000ae4:	f000 ff36 	bl	8001954 <pvPortMalloc>
 8000ae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	631a      	str	r2, [r3, #48]	; 0x30
 8000af6:	e005      	b.n	8000b04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000af8:	6978      	ldr	r0, [r7, #20]
 8000afa:	f000 ffed 	bl	8001ad8 <vPortFree>
 8000afe:	e001      	b.n	8000b04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d013      	beq.n	8000b32 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f000 f80e 	bl	8000b42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000b26:	69f8      	ldr	r0, [r7, #28]
 8000b28:	f000 f89e 	bl	8000c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	e002      	b.n	8000b38 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000b38:	69bb      	ldr	r3, [r7, #24]
	}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b088      	sub	sp, #32
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d109      	bne.n	8000b6a <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b5a:	f383 8811 	msr	BASEPRI, r3
 8000b5e:	f3bf 8f6f 	isb	sy
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e7fe      	b.n	8000b68 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	461a      	mov	r2, r3
 8000b74:	21a5      	movs	r1, #165	; 0xa5
 8000b76:	f002 ffff 	bl	8003b78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b84:	3b01      	subs	r3, #1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	f023 0307 	bic.w	r3, r3, #7
 8000b92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d009      	beq.n	8000bb2 <prvInitialiseNewTask+0x70>
 8000b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	e7fe      	b.n	8000bb0 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e012      	b.n	8000bde <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	7819      	ldrb	r1, [r3, #0]
 8000bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3334      	adds	r3, #52	; 0x34
 8000bc8:	460a      	mov	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	d9e9      	bls.n	8000bb8 <prvInitialiseNewTask+0x76>
 8000be4:	e000      	b.n	8000be8 <prvInitialiseNewTask+0xa6>
		{
			break;
 8000be6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d901      	bls.n	8000bfa <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c04:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c08:	2200      	movs	r2, #0
 8000c0a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0e:	3304      	adds	r3, #4
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fec1 	bl	8000998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c18:	3318      	adds	r3, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff febc 	bl	8000998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	f1c3 0205 	rsb	r2, r3, #5
 8000c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c38:	2200      	movs	r2, #0
 8000c3a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	68f9      	ldr	r1, [r7, #12]
 8000c48:	69b8      	ldr	r0, [r7, #24]
 8000c4a:	f000 fc37 	bl	80014bc <pxPortInitialiseStack>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000c70:	f000 fd4c 	bl	800170c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000c74:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <prvAddNewTaskToReadyList+0xfc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a3a      	ldr	r2, [pc, #232]	; (8000d64 <prvAddNewTaskToReadyList+0xfc>)
 8000c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <prvAddNewTaskToReadyList+0x100>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d109      	bne.n	8000c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000c86:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <prvAddNewTaskToReadyList+0x100>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c8c:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <prvAddNewTaskToReadyList+0xfc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d110      	bne.n	8000cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000c94:	f000 fafe 	bl	8001294 <prvInitialiseTaskLists>
 8000c98:	e00d      	b.n	8000cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000c9a:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <prvAddNewTaskToReadyList+0x104>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d109      	bne.n	8000cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <prvAddNewTaskToReadyList+0x100>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d802      	bhi.n	8000cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <prvAddNewTaskToReadyList+0x100>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000cb6:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <prvAddNewTaskToReadyList+0x108>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <prvAddNewTaskToReadyList+0x108>)
 8000cbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <prvAddNewTaskToReadyList+0x108>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d016      	beq.n	8000cfc <prvAddNewTaskToReadyList+0x94>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 f9db 	bl	800308c <SEGGER_SYSVIEW_OnTaskCreate>
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	461c      	mov	r4, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	1ae3      	subs	r3, r4, r3
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	f001 f8aa 	bl	8001e50 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 fa4c 	bl	800319c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2201      	movs	r2, #1
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <prvAddNewTaskToReadyList+0x10c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <prvAddNewTaskToReadyList+0x10c>)
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <prvAddNewTaskToReadyList+0x110>)
 8000d24:	441a      	add	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	f7ff fe40 	bl	80009b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d32:	f000 fd19 	bl	8001768 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <prvAddNewTaskToReadyList+0x104>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00e      	beq.n	8000d5c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <prvAddNewTaskToReadyList+0x100>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <prvAddNewTaskToReadyList+0x114>)
 8000d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}
 8000d64:	20000180 	.word	0x20000180
 8000d68:	200000a8 	.word	0x200000a8
 8000d6c:	2000018c 	.word	0x2000018c
 8000d70:	2000019c 	.word	0x2000019c
 8000d74:	20000188 	.word	0x20000188
 8000d78:	200000ac 	.word	0x200000ac
 8000d7c:	e000ed04 	.word	0xe000ed04

08000d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d01a      	beq.n	8000dc8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <vTaskDelay+0x68>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d009      	beq.n	8000dae <vTaskDelay+0x2e>
 8000d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9e:	f383 8811 	msr	BASEPRI, r3
 8000da2:	f3bf 8f6f 	isb	sy
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	e7fe      	b.n	8000dac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000dae:	f000 f875 	bl	8000e9c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	2023      	movs	r0, #35	; 0x23
 8000db6:	f001 fd73 	bl	80028a0 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000dba:	2100      	movs	r1, #0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 fb05 	bl	80013cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000dc2:	f000 f879 	bl	8000eb8 <xTaskResumeAll>
 8000dc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d107      	bne.n	8000dde <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <vTaskDelay+0x6c>)
 8000dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001a8 	.word	0x200001a8
 8000dec:	e000ed04 	.word	0xe000ed04

08000df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <vTaskStartScheduler+0x90>)
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2282      	movs	r2, #130	; 0x82
 8000e02:	4920      	ldr	r1, [pc, #128]	; (8000e84 <vTaskStartScheduler+0x94>)
 8000e04:	4820      	ldr	r0, [pc, #128]	; (8000e88 <vTaskStartScheduler+0x98>)
 8000e06:	f7ff fe5b 	bl	8000ac0 <xTaskCreate>
 8000e0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d123      	bne.n	8000e5a <vTaskStartScheduler+0x6a>
 8000e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e16:	f383 8811 	msr	BASEPRI, r3
 8000e1a:	f3bf 8f6f 	isb	sy
 8000e1e:	f3bf 8f4f 	dsb	sy
 8000e22:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <vTaskStartScheduler+0x9c>)
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <vTaskStartScheduler+0xa0>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <vTaskStartScheduler+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <vTaskStartScheduler+0xa8>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <vTaskStartScheduler+0x90>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d102      	bne.n	8000e4a <vTaskStartScheduler+0x5a>
 8000e44:	f002 f906 	bl	8003054 <SEGGER_SYSVIEW_OnIdle>
 8000e48:	e004      	b.n	8000e54 <vTaskStartScheduler+0x64>
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <vTaskStartScheduler+0xa8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 f960 	bl	8003114 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000e54:	f000 fbbc 	bl	80015d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000e58:	e00d      	b.n	8000e76 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e60:	d109      	bne.n	8000e76 <vTaskStartScheduler+0x86>
 8000e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e66:	f383 8811 	msr	BASEPRI, r3
 8000e6a:	f3bf 8f6f 	isb	sy
 8000e6e:	f3bf 8f4f 	dsb	sy
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	e7fe      	b.n	8000e74 <vTaskStartScheduler+0x84>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200001a4 	.word	0x200001a4
 8000e84:	08004398 	.word	0x08004398
 8000e88:	08001265 	.word	0x08001265
 8000e8c:	200001a0 	.word	0x200001a0
 8000e90:	2000018c 	.word	0x2000018c
 8000e94:	20000184 	.word	0x20000184
 8000e98:	200000a8 	.word	0x200000a8

08000e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <vTaskSuspendAll+0x18>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <vTaskSuspendAll+0x18>)
 8000ea8:	6013      	str	r3, [r2, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	200001a8 	.word	0x200001a8

08000eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000ec6:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <xTaskResumeAll+0x11c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <xTaskResumeAll+0x2a>
 8000ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed2:	f383 8811 	msr	BASEPRI, r3
 8000ed6:	f3bf 8f6f 	isb	sy
 8000eda:	f3bf 8f4f 	dsb	sy
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	e7fe      	b.n	8000ee0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000ee2:	f000 fc13 	bl	800170c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <xTaskResumeAll+0x11c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a39      	ldr	r2, [pc, #228]	; (8000fd4 <xTaskResumeAll+0x11c>)
 8000eee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <xTaskResumeAll+0x11c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d165      	bne.n	8000fc4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <xTaskResumeAll+0x120>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d061      	beq.n	8000fc4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f00:	e032      	b.n	8000f68 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <xTaskResumeAll+0x124>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3318      	adds	r3, #24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fdac 	bl	8000a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3304      	adds	r3, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fda7 	bl	8000a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 f93b 	bl	800319c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <xTaskResumeAll+0x128>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <xTaskResumeAll+0x128>)
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <xTaskResumeAll+0x12c>)
 8000f46:	441a      	add	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff fd2f 	bl	80009b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <xTaskResumeAll+0x130>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d302      	bcc.n	8000f68 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <xTaskResumeAll+0x134>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <xTaskResumeAll+0x124>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1c8      	bne.n	8000f02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000f76:	f000 fa09 	bl	800138c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <xTaskResumeAll+0x138>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d010      	beq.n	8000fa8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000f86:	f000 f849 	bl	800101c <xTaskIncrementTick>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <xTaskResumeAll+0x134>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f1      	bne.n	8000f86 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <xTaskResumeAll+0x138>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <xTaskResumeAll+0x134>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d009      	beq.n	8000fc4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <xTaskResumeAll+0x13c>)
 8000fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000fc4:	f000 fbd0 	bl	8001768 <vPortExitCritical>

	return xAlreadyYielded;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001a8 	.word	0x200001a8
 8000fd8:	20000180 	.word	0x20000180
 8000fdc:	20000140 	.word	0x20000140
 8000fe0:	20000188 	.word	0x20000188
 8000fe4:	200000ac 	.word	0x200000ac
 8000fe8:	200000a8 	.word	0x200000a8
 8000fec:	20000194 	.word	0x20000194
 8000ff0:	20000190 	.word	0x20000190
 8000ff4:	e000ed04 	.word	0xe000ed04

08000ff8 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ffe:	f000 fc6b 	bl	80018d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <xTaskGetTickCountFromISR+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800100c:	683b      	ldr	r3, [r7, #0]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000184 	.word	0x20000184

0800101c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <xTaskIncrementTick+0x14c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 808b 	bne.w	8001146 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001030:	4b4e      	ldr	r3, [pc, #312]	; (800116c <xTaskIncrementTick+0x150>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <xTaskIncrementTick+0x150>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d11f      	bne.n	8001084 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001044:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <xTaskIncrementTick+0x154>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d009      	beq.n	8001062 <xTaskIncrementTick+0x46>
 800104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	f3bf 8f6f 	isb	sy
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	e7fe      	b.n	8001060 <xTaskIncrementTick+0x44>
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <xTaskIncrementTick+0x154>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <xTaskIncrementTick+0x158>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a40      	ldr	r2, [pc, #256]	; (8001170 <xTaskIncrementTick+0x154>)
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4a40      	ldr	r2, [pc, #256]	; (8001174 <xTaskIncrementTick+0x158>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <xTaskIncrementTick+0x15c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a3e      	ldr	r2, [pc, #248]	; (8001178 <xTaskIncrementTick+0x15c>)
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	f000 f984 	bl	800138c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <xTaskIncrementTick+0x160>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	429a      	cmp	r2, r3
 800108c:	d34c      	bcc.n	8001128 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <xTaskIncrementTick+0x154>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001098:	4b38      	ldr	r3, [pc, #224]	; (800117c <xTaskIncrementTick+0x160>)
 800109a:	f04f 32ff 	mov.w	r2, #4294967295
 800109e:	601a      	str	r2, [r3, #0]
					break;
 80010a0:	e042      	b.n	8001128 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <xTaskIncrementTick+0x154>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d203      	bcs.n	80010c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80010ba:	4a30      	ldr	r2, [pc, #192]	; (800117c <xTaskIncrementTick+0x160>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80010c0:	e032      	b.n	8001128 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	3304      	adds	r3, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fcd0 	bl	8000a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3318      	adds	r3, #24
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fcc7 	bl	8000a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 f85b 	bl	800319c <SEGGER_SYSVIEW_OnTaskStartReady>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	2201      	movs	r2, #1
 80010ec:	409a      	lsls	r2, r3
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <xTaskIncrementTick+0x164>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	4a22      	ldr	r2, [pc, #136]	; (8001180 <xTaskIncrementTick+0x164>)
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <xTaskIncrementTick+0x168>)
 8001106:	441a      	add	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	3304      	adds	r3, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f7ff fc4f 	bl	80009b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <xTaskIncrementTick+0x16c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	429a      	cmp	r2, r3
 8001120:	d3b5      	bcc.n	800108e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001126:	e7b2      	b.n	800108e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <xTaskIncrementTick+0x16c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112e:	4915      	ldr	r1, [pc, #84]	; (8001184 <xTaskIncrementTick+0x168>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d907      	bls.n	8001150 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e004      	b.n	8001150 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <xTaskIncrementTick+0x170>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <xTaskIncrementTick+0x170>)
 800114e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <xTaskIncrementTick+0x174>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800115c:	697b      	ldr	r3, [r7, #20]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001a8 	.word	0x200001a8
 800116c:	20000184 	.word	0x20000184
 8001170:	20000138 	.word	0x20000138
 8001174:	2000013c 	.word	0x2000013c
 8001178:	20000198 	.word	0x20000198
 800117c:	200001a0 	.word	0x200001a0
 8001180:	20000188 	.word	0x20000188
 8001184:	200000ac 	.word	0x200000ac
 8001188:	200000a8 	.word	0x200000a8
 800118c:	20000190 	.word	0x20000190
 8001190:	20000194 	.word	0x20000194

08001194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <vTaskSwitchContext+0xb8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <vTaskSwitchContext+0xbc>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80011a8:	e04c      	b.n	8001244 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <vTaskSwitchContext+0xbc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <vTaskSwitchContext+0xc0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	f1c3 031f 	rsb	r3, r3, #31
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	4924      	ldr	r1, [pc, #144]	; (8001258 <vTaskSwitchContext+0xc4>)
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <vTaskSwitchContext+0x5a>
	__asm volatile
 80011da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e7fe      	b.n	80011ec <vTaskSwitchContext+0x58>
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4a17      	ldr	r2, [pc, #92]	; (8001258 <vTaskSwitchContext+0xc4>)
 80011fa:	4413      	add	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	3308      	adds	r3, #8
 8001210:	429a      	cmp	r2, r3
 8001212:	d104      	bne.n	800121e <vTaskSwitchContext+0x8a>
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <vTaskSwitchContext+0xc8>)
 8001226:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <vTaskSwitchContext+0xc8>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <vTaskSwitchContext+0xcc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d102      	bne.n	800123a <vTaskSwitchContext+0xa6>
 8001234:	f001 ff0e 	bl	8003054 <SEGGER_SYSVIEW_OnIdle>
}
 8001238:	e004      	b.n	8001244 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <vTaskSwitchContext+0xc8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f001 ff68 	bl	8003114 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001a8 	.word	0x200001a8
 8001250:	20000194 	.word	0x20000194
 8001254:	20000188 	.word	0x20000188
 8001258:	200000ac 	.word	0x200000ac
 800125c:	200000a8 	.word	0x200000a8
 8001260:	200001a4 	.word	0x200001a4

08001264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800126c:	f000 f852 	bl	8001314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <prvIdleTask+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d9f9      	bls.n	800126c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <prvIdleTask+0x2c>)
 800127a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	f3bf 8f4f 	dsb	sy
 8001284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001288:	e7f0      	b.n	800126c <prvIdleTask+0x8>
 800128a:	bf00      	nop
 800128c:	200000ac 	.word	0x200000ac
 8001290:	e000ed04 	.word	0xe000ed04

08001294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e00c      	b.n	80012ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <prvInitialiseTaskLists+0x60>)
 80012ac:	4413      	add	r3, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fb52 	bl	8000958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3301      	adds	r3, #1
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d9ef      	bls.n	80012a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <prvInitialiseTaskLists+0x64>)
 80012c2:	f7ff fb49 	bl	8000958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <prvInitialiseTaskLists+0x68>)
 80012c8:	f7ff fb46 	bl	8000958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <prvInitialiseTaskLists+0x6c>)
 80012ce:	f7ff fb43 	bl	8000958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <prvInitialiseTaskLists+0x70>)
 80012d4:	f7ff fb40 	bl	8000958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <prvInitialiseTaskLists+0x74>)
 80012da:	f7ff fb3d 	bl	8000958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <prvInitialiseTaskLists+0x78>)
 80012e0:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <prvInitialiseTaskLists+0x64>)
 80012e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <prvInitialiseTaskLists+0x7c>)
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <prvInitialiseTaskLists+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000ac 	.word	0x200000ac
 80012f8:	20000110 	.word	0x20000110
 80012fc:	20000124 	.word	0x20000124
 8001300:	20000140 	.word	0x20000140
 8001304:	20000154 	.word	0x20000154
 8001308:	2000016c 	.word	0x2000016c
 800130c:	20000138 	.word	0x20000138
 8001310:	2000013c 	.word	0x2000013c

08001314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800131a:	e019      	b.n	8001350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800131c:	f000 f9f6 	bl	800170c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <prvCheckTasksWaitingTermination+0x4c>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3304      	adds	r3, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fb9d 	bl	8000a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <prvCheckTasksWaitingTermination+0x50>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3b01      	subs	r3, #1
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <prvCheckTasksWaitingTermination+0x50>)
 800133a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <prvCheckTasksWaitingTermination+0x54>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <prvCheckTasksWaitingTermination+0x54>)
 8001344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001346:	f000 fa0f 	bl	8001768 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f80e 	bl	800136c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <prvCheckTasksWaitingTermination+0x54>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1e1      	bne.n	800131c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000154 	.word	0x20000154
 8001364:	20000180 	.word	0x20000180
 8001368:	20000168 	.word	0x20000168

0800136c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fbad 	bl	8001ad8 <vPortFree>
			vPortFree( pxTCB );
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fbaa 	bl	8001ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <prvResetNextTaskUnblockTime+0x38>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d104      	bne.n	80013a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <prvResetNextTaskUnblockTime+0x3c>)
 800139e:	f04f 32ff 	mov.w	r2, #4294967295
 80013a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80013a4:	e008      	b.n	80013b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <prvResetNextTaskUnblockTime+0x38>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <prvResetNextTaskUnblockTime+0x3c>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20000138 	.word	0x20000138
 80013c8:	200001a0 	.word	0x200001a0

080013cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80013d6:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3304      	adds	r3, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fb42 	bl	8000a6c <uxListRemove>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2201      	movs	r2, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4013      	ands	r3, r2
 8001402:	4a29      	ldr	r2, [pc, #164]	; (80014a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001404:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	d110      	bne.n	8001430 <prvAddCurrentTaskToDelayedList+0x64>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00d      	beq.n	8001430 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	211b      	movs	r1, #27
 800141a:	4618      	mov	r0, r3
 800141c:	f001 ff02 	bl	8003224 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3304      	adds	r3, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4820      	ldr	r0, [pc, #128]	; (80014ac <prvAddCurrentTaskToDelayedList+0xe0>)
 800142a:	f7ff fac2 	bl	80009b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800142e:	e032      	b.n	8001496 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d20f      	bcs.n	8001468 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2104      	movs	r1, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fee8 	bl	8003224 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3304      	adds	r3, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4610      	mov	r0, r2
 8001462:	f7ff faca 	bl	80009fa <vListInsert>
}
 8001466:	e016      	b.n	8001496 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2104      	movs	r1, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fed8 	bl	8003224 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3304      	adds	r3, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff faba 	bl	80009fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	429a      	cmp	r2, r3
 800148e:	d202      	bcs.n	8001496 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8001490:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000184 	.word	0x20000184
 80014a4:	200000a8 	.word	0x200000a8
 80014a8:	20000188 	.word	0x20000188
 80014ac:	2000016c 	.word	0x2000016c
 80014b0:	2000013c 	.word	0x2000013c
 80014b4:	20000138 	.word	0x20000138
 80014b8:	200001a0 	.word	0x200001a0

080014bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3b04      	subs	r3, #4
 80014cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3b04      	subs	r3, #4
 80014da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f023 0201 	bic.w	r2, r3, #1
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b04      	subs	r3, #4
 80014ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014ec:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <pxPortInitialiseStack+0x64>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b14      	subs	r3, #20
 80014f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3b04      	subs	r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f06f 0202 	mvn.w	r2, #2
 800150a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3b20      	subs	r3, #32
 8001510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	08001525 	.word	0x08001525

08001524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <prvTaskExitError+0x50>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001536:	d009      	beq.n	800154c <prvTaskExitError+0x28>
 8001538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153c:	f383 8811 	msr	BASEPRI, r3
 8001540:	f3bf 8f6f 	isb	sy
 8001544:	f3bf 8f4f 	dsb	sy
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e7fe      	b.n	800154a <prvTaskExitError+0x26>
 800154c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001550:	f383 8811 	msr	BASEPRI, r3
 8001554:	f3bf 8f6f 	isb	sy
 8001558:	f3bf 8f4f 	dsb	sy
 800155c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800155e:	bf00      	nop
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0fc      	beq.n	8001560 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000010 	.word	0x20000010
	...

08001580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <pxCurrentTCBConst2>)
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	6808      	ldr	r0, [r1, #0]
 8001586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800158a:	f380 8809 	msr	PSP, r0
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f380 8811 	msr	BASEPRI, r0
 800159a:	4770      	bx	lr
 800159c:	f3af 8000 	nop.w

080015a0 <pxCurrentTCBConst2>:
 80015a0:	200000a8 	.word	0x200000a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop

080015a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <prvPortStartFirstTask+0x24>)
 80015aa:	6800      	ldr	r0, [r0, #0]
 80015ac:	6800      	ldr	r0, [r0, #0]
 80015ae:	f380 8808 	msr	MSP, r0
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	f380 8814 	msr	CONTROL, r0
 80015ba:	b662      	cpsie	i
 80015bc:	b661      	cpsie	f
 80015be:	f3bf 8f4f 	dsb	sy
 80015c2:	f3bf 8f6f 	isb	sy
 80015c6:	df00      	svc	0
 80015c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80015ca:	bf00      	nop
 80015cc:	e000ed08 	.word	0xe000ed08

080015d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <xPortStartScheduler+0x118>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a44      	ldr	r2, [pc, #272]	; (80016ec <xPortStartScheduler+0x11c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d109      	bne.n	80015f4 <xPortStartScheduler+0x24>
 80015e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	e7fe      	b.n	80015f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <xPortStartScheduler+0x118>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <xPortStartScheduler+0x120>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d109      	bne.n	8001612 <xPortStartScheduler+0x42>
 80015fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001602:	f383 8811 	msr	BASEPRI, r3
 8001606:	f3bf 8f6f 	isb	sy
 800160a:	f3bf 8f4f 	dsb	sy
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	e7fe      	b.n	8001610 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <xPortStartScheduler+0x124>)
 8001614:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <xPortStartScheduler+0x128>)
 8001638:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <xPortStartScheduler+0x12c>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001640:	e009      	b.n	8001656 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <xPortStartScheduler+0x12c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3b01      	subs	r3, #1
 8001648:	4a2c      	ldr	r2, [pc, #176]	; (80016fc <xPortStartScheduler+0x12c>)
 800164a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165e:	2b80      	cmp	r3, #128	; 0x80
 8001660:	d0ef      	beq.n	8001642 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <xPortStartScheduler+0x12c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	d009      	beq.n	8001682 <xPortStartScheduler+0xb2>
 800166e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001672:	f383 8811 	msr	BASEPRI, r3
 8001676:	f3bf 8f6f 	isb	sy
 800167a:	f3bf 8f4f 	dsb	sy
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	e7fe      	b.n	8001680 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <xPortStartScheduler+0x12c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <xPortStartScheduler+0x12c>)
 800168a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <xPortStartScheduler+0x12c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <xPortStartScheduler+0x12c>)
 8001696:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <xPortStartScheduler+0x130>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a16      	ldr	r2, [pc, #88]	; (8001700 <xPortStartScheduler+0x130>)
 80016a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <xPortStartScheduler+0x130>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a13      	ldr	r2, [pc, #76]	; (8001700 <xPortStartScheduler+0x130>)
 80016b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80016b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80016b8:	f000 f8e0 	bl	800187c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <xPortStartScheduler+0x134>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80016c2:	f000 f8ff 	bl	80018c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <xPortStartScheduler+0x138>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <xPortStartScheduler+0x138>)
 80016cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80016d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80016d2:	f7ff ff69 	bl	80015a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80016d6:	f7ff fd5d 	bl	8001194 <vTaskSwitchContext>
	prvTaskExitError();
 80016da:	f7ff ff23 	bl	8001524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	410fc271 	.word	0x410fc271
 80016f0:	410fc270 	.word	0x410fc270
 80016f4:	e000e400 	.word	0xe000e400
 80016f8:	200001ac 	.word	0x200001ac
 80016fc:	200001b0 	.word	0x200001b0
 8001700:	e000ed20 	.word	0xe000ed20
 8001704:	20000010 	.word	0x20000010
 8001708:	e000ef34 	.word	0xe000ef34

0800170c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001716:	f383 8811 	msr	BASEPRI, r3
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	f3bf 8f4f 	dsb	sy
 8001722:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <vPortEnterCritical+0x54>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <vPortEnterCritical+0x54>)
 800172c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <vPortEnterCritical+0x54>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10e      	bne.n	8001754 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <vPortEnterCritical+0x58>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <vPortEnterCritical+0x48>
 8001740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001744:	f383 8811 	msr	BASEPRI, r3
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	e7fe      	b.n	8001752 <vPortEnterCritical+0x46>
	}
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	20000010 	.word	0x20000010
 8001764:	e000ed04 	.word	0xe000ed04

08001768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <vPortExitCritical+0x4c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <vPortExitCritical+0x22>
 8001776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177a:	f383 8811 	msr	BASEPRI, r3
 800177e:	f3bf 8f6f 	isb	sy
 8001782:	f3bf 8f4f 	dsb	sy
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	e7fe      	b.n	8001788 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <vPortExitCritical+0x4c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3b01      	subs	r3, #1
 8001790:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <vPortExitCritical+0x4c>)
 8001792:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <vPortExitCritical+0x4c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d104      	bne.n	80017a6 <vPortExitCritical+0x3e>
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000010 	.word	0x20000010
	...

080017c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80017c0:	f3ef 8009 	mrs	r0, PSP
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <pxCurrentTCBConst>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f01e 0f10 	tst.w	lr, #16
 80017d0:	bf08      	it	eq
 80017d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80017d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017da:	6010      	str	r0, [r2, #0]
 80017dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80017e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017e4:	f380 8811 	msr	BASEPRI, r0
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	f3bf 8f6f 	isb	sy
 80017f0:	f7ff fcd0 	bl	8001194 <vTaskSwitchContext>
 80017f4:	f04f 0000 	mov.w	r0, #0
 80017f8:	f380 8811 	msr	BASEPRI, r0
 80017fc:	bc09      	pop	{r0, r3}
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	6808      	ldr	r0, [r1, #0]
 8001802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001806:	f01e 0f10 	tst.w	lr, #16
 800180a:	bf08      	it	eq
 800180c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001810:	f380 8809 	msr	PSP, r0
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w

08001820 <pxCurrentTCBConst>:
 8001820:	200000a8 	.word	0x200000a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop

08001828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	__asm volatile
 800182e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001832:	f383 8811 	msr	BASEPRI, r3
 8001836:	f3bf 8f6f 	isb	sy
 800183a:	f3bf 8f4f 	dsb	sy
 800183e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001840:	f001 fb8e 	bl	8002f60 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001844:	f7ff fbea 	bl	800101c <xTaskIncrementTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800184e:	f001 fbe5 	bl	800301c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <SysTick_Handler+0x50>)
 8001854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e003      	b.n	8001864 <SysTick_Handler+0x3c>
		}
		else
		{
			traceISR_EXIT();
 800185c:	f001 fbc2 	bl	8002fe4 <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 8001860:	f7ff fc98 	bl	8001194 <vTaskSwitchContext>
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000ed04 	.word	0xe000ed04

0800187c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <vPortSetupTimerInterrupt+0x34>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <vPortSetupTimerInterrupt+0x38>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <vPortSetupTimerInterrupt+0x3c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <vPortSetupTimerInterrupt+0x40>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <vPortSetupTimerInterrupt+0x44>)
 800189a:	3b01      	subs	r3, #1
 800189c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <vPortSetupTimerInterrupt+0x34>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010
 80018b4:	e000e018 	.word	0xe000e018
 80018b8:	20000014 	.word	0x20000014
 80018bc:	10624dd3 	.word	0x10624dd3
 80018c0:	e000e014 	.word	0xe000e014

080018c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80018c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80018d4 <vPortEnableVFP+0x10>
 80018c8:	6801      	ldr	r1, [r0, #0]
 80018ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80018ce:	6001      	str	r1, [r0, #0]
 80018d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80018d2:	bf00      	nop
 80018d4:	e000ed88 	.word	0xe000ed88

080018d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80018de:	f3ef 8305 	mrs	r3, IPSR
 80018e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b0f      	cmp	r3, #15
 80018e8:	d913      	bls.n	8001912 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <vPortValidateInterruptPriority+0x6c>)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <vPortValidateInterruptPriority+0x70>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	7afa      	ldrb	r2, [r7, #11]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d209      	bcs.n	8001912 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80018fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001902:	f383 8811 	msr	BASEPRI, r3
 8001906:	f3bf 8f6f 	isb	sy
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	e7fe      	b.n	8001910 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <vPortValidateInterruptPriority+0x74>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <vPortValidateInterruptPriority+0x78>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d909      	bls.n	8001936 <vPortValidateInterruptPriority+0x5e>
 8001922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001926:	f383 8811 	msr	BASEPRI, r3
 800192a:	f3bf 8f6f 	isb	sy
 800192e:	f3bf 8f4f 	dsb	sy
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	e7fe      	b.n	8001934 <vPortValidateInterruptPriority+0x5c>
	}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e3f0 	.word	0xe000e3f0
 8001948:	200001ac 	.word	0x200001ac
 800194c:	e000ed0c 	.word	0xe000ed0c
 8001950:	200001b0 	.word	0x200001b0

08001954 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001960:	f7ff fa9c 	bl	8000e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001964:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <pvPortMalloc+0x170>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800196c:	f000 f90c 	bl	8001b88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001970:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <pvPortMalloc+0x174>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 808c 	bne.w	8001a96 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001984:	2208      	movs	r2, #8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	2b00      	cmp	r3, #0
 8001994:	d013      	beq.n	80019be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f023 0307 	bic.w	r3, r3, #7
 800199c:	3308      	adds	r3, #8
 800199e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <pvPortMalloc+0x6a>
 80019aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ae:	f383 8811 	msr	BASEPRI, r3
 80019b2:	f3bf 8f6f 	isb	sy
 80019b6:	f3bf 8f4f 	dsb	sy
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e7fe      	b.n	80019bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d068      	beq.n	8001a96 <pvPortMalloc+0x142>
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <pvPortMalloc+0x178>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d863      	bhi.n	8001a96 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80019ce:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <pvPortMalloc+0x17c>)
 80019d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <pvPortMalloc+0x17c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80019d8:	e004      	b.n	80019e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d903      	bls.n	80019f6 <pvPortMalloc+0xa2>
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f1      	bne.n	80019da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <pvPortMalloc+0x170>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d04a      	beq.n	8001a96 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2208      	movs	r2, #8
 8001a06:	4413      	add	r3, r2
 8001a08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	1ad2      	subs	r2, r2, r3
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d91e      	bls.n	8001a60 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <pvPortMalloc+0xf4>
 8001a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a38:	f383 8811 	msr	BASEPRI, r3
 8001a3c:	f3bf 8f6f 	isb	sy
 8001a40:	f3bf 8f4f 	dsb	sy
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	e7fe      	b.n	8001a46 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1ad2      	subs	r2, r2, r3
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a5a:	69b8      	ldr	r0, [r7, #24]
 8001a5c:	f000 f8f6 	bl	8001c4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <pvPortMalloc+0x178>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <pvPortMalloc+0x178>)
 8001a6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <pvPortMalloc+0x178>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <pvPortMalloc+0x180>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d203      	bcs.n	8001a82 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <pvPortMalloc+0x178>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <pvPortMalloc+0x180>)
 8001a80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <pvPortMalloc+0x174>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001a96:	f7ff fa0f 	bl	8000eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <pvPortMalloc+0x164>
 8001aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa8:	f383 8811 	msr	BASEPRI, r3
 8001aac:	f3bf 8f6f 	isb	sy
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e7fe      	b.n	8001ab6 <pvPortMalloc+0x162>
	return pvReturn;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20012dbc 	.word	0x20012dbc
 8001ac8:	20012dc8 	.word	0x20012dc8
 8001acc:	20012dc0 	.word	0x20012dc0
 8001ad0:	20012db4 	.word	0x20012db4
 8001ad4:	20012dc4 	.word	0x20012dc4

08001ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d046      	beq.n	8001b78 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001aea:	2308      	movs	r3, #8
 8001aec:	425b      	negs	r3, r3
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4413      	add	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <vPortFree+0xa8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <vPortFree+0x42>
 8001b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e7fe      	b.n	8001b18 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <vPortFree+0x5e>
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	e7fe      	b.n	8001b34 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <vPortFree+0xa8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d019      	beq.n	8001b78 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d115      	bne.n	8001b78 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <vPortFree+0xa8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001b5c:	f7ff f99e 	bl	8000e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <vPortFree+0xac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <vPortFree+0xac>)
 8001b6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	f000 f86c 	bl	8001c4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001b74:	f7ff f9a0 	bl	8000eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20012dc8 	.word	0x20012dc8
 8001b84:	20012dc0 	.word	0x20012dc0

08001b88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b8e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001b92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <prvHeapInit+0xac>)
 8001b96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f023 0307 	bic.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <prvHeapInit+0xac>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <prvHeapInit+0xb0>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <prvHeapInit+0xb0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0307 	bic.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a15      	ldr	r2, [pc, #84]	; (8001c3c <prvHeapInit+0xb4>)
 8001be8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <prvHeapInit+0xb4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <prvHeapInit+0xb4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	1ad2      	subs	r2, r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <prvHeapInit+0xb4>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <prvHeapInit+0xb8>)
 8001c16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <prvHeapInit+0xbc>)
 8001c1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <prvHeapInit+0xc0>)
 8001c22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	200001b4 	.word	0x200001b4
 8001c38:	20012db4 	.word	0x20012db4
 8001c3c:	20012dbc 	.word	0x20012dbc
 8001c40:	20012dc4 	.word	0x20012dc4
 8001c44:	20012dc0 	.word	0x20012dc0
 8001c48:	20012dc8 	.word	0x20012dc8

08001c4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <prvInsertBlockIntoFreeList+0xac>)
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e002      	b.n	8001c60 <prvInsertBlockIntoFreeList+0x14>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d8f7      	bhi.n	8001c5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	4413      	add	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d108      	bne.n	8001c8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	441a      	add	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	441a      	add	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d118      	bne.n	8001cd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <prvInsertBlockIntoFreeList+0xb0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d00d      	beq.n	8001cca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e008      	b.n	8001cdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <prvInsertBlockIntoFreeList+0xb0>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e003      	b.n	8001cdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d002      	beq.n	8001cea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20012db4 	.word	0x20012db4
 8001cfc:	20012dbc 	.word	0x20012dbc

08001d00 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <_cbSendSystemDesc+0x14>)
 8001d06:	f001 f8d7 	bl	8002eb8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <_cbSendSystemDesc+0x18>)
 8001d0c:	f001 f8d4 	bl	8002eb8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	080043a0 	.word	0x080043a0
 8001d18:	080043e8 	.word	0x080043e8

08001d1c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SEGGER_SYSVIEW_Conf+0x20>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SEGGER_SYSVIEW_Conf+0x20>)
 8001d26:	6819      	ldr	r1, [r3, #0]
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SEGGER_SYSVIEW_Conf+0x24>)
 8001d2a:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <SEGGER_SYSVIEW_Conf+0x28>)
 8001d2c:	f000 fd4c 	bl	80027c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001d30:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001d34:	f000 fd86 	bl	8002844 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000014 	.word	0x20000014
 8001d40:	08001d01 	.word	0x08001d01
 8001d44:	080044c8 	.word	0x080044c8

08001d48 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	e034      	b.n	8001dbe <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001d54:	491e      	ldr	r1, [pc, #120]	; (8001dd0 <_cbSendTaskList+0x88>)
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	491a      	ldr	r1, [pc, #104]	; (8001dd0 <_cbSendTaskList+0x88>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3304      	adds	r3, #4
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <_cbSendTaskList+0x88>)
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3308      	adds	r3, #8
 8001d86:	681d      	ldr	r5, [r3, #0]
 8001d88:	4911      	ldr	r1, [pc, #68]	; (8001dd0 <_cbSendTaskList+0x88>)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	330c      	adds	r3, #12
 8001d98:	681e      	ldr	r6, [r3, #0]
 8001d9a:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <_cbSendTaskList+0x88>)
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3310      	adds	r3, #16
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4633      	mov	r3, r6
 8001db0:	462a      	mov	r2, r5
 8001db2:	4621      	mov	r1, r4
 8001db4:	f000 f8b4 	bl	8001f20 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <_cbSendTaskList+0x8c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3c5      	bcc.n	8001d54 <_cbSendTaskList+0xc>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd0:	20012dcc 	.word	0x20012dcc
 8001dd4:	20012e6c 	.word	0x20012e6c

08001dd8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001dde:	f7ff f90b 	bl	8000ff8 <xTaskGetTickCountFromISR>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f04f 0400 	mov.w	r4, #0
 8001de8:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001dec:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001df0:	462b      	mov	r3, r5
 8001df2:	4634      	mov	r4, r6
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	0162      	lsls	r2, r4, #5
 8001dfe:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001e02:	0159      	lsls	r1, r3, #5
 8001e04:	460b      	mov	r3, r1
 8001e06:	4614      	mov	r4, r2
 8001e08:	1b5b      	subs	r3, r3, r5
 8001e0a:	eb64 0406 	sbc.w	r4, r4, r6
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	00a2      	lsls	r2, r4, #2
 8001e18:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001e1c:	0099      	lsls	r1, r3, #2
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4614      	mov	r4, r2
 8001e22:	195b      	adds	r3, r3, r5
 8001e24:	eb44 0406 	adc.w	r4, r4, r6
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	00e2      	lsls	r2, r4, #3
 8001e32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e36:	00d9      	lsls	r1, r3, #3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4614      	mov	r4, r2
 8001e3c:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8001e40:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	4621      	mov	r1, r4
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e50 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001e5e:	2205      	movs	r2, #5
 8001e60:	492b      	ldr	r1, [pc, #172]	; (8001f10 <SYSVIEW_AddTask+0xc0>)
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f001 fe6e 	bl	8003b44 <memcmp>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d04b      	beq.n	8001f06 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b07      	cmp	r3, #7
 8001e74:	d903      	bls.n	8001e7e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001e76:	4828      	ldr	r0, [pc, #160]	; (8001f18 <SYSVIEW_AddTask+0xc8>)
 8001e78:	f001 fb10 	bl	800349c <SEGGER_SYSVIEW_Warn>
    return;
 8001e7c:	e044      	b.n	8001f08 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4926      	ldr	r1, [pc, #152]	; (8001f1c <SYSVIEW_AddTask+0xcc>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4921      	ldr	r1, [pc, #132]	; (8001f1c <SYSVIEW_AddTask+0xcc>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	491b      	ldr	r1, [pc, #108]	; (8001f1c <SYSVIEW_AddTask+0xcc>)
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3308      	adds	r3, #8
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4916      	ldr	r1, [pc, #88]	; (8001f1c <SYSVIEW_AddTask+0xcc>)
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	330c      	adds	r3, #12
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4910      	ldr	r1, [pc, #64]	; (8001f1c <SYSVIEW_AddTask+0xcc>)
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <SYSVIEW_AddTask+0xc4>)
 8001ef2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f80e 	bl	8001f20 <SYSVIEW_SendTaskInfo>
 8001f04:	e000      	b.n	8001f08 <SYSVIEW_AddTask+0xb8>
    return;
 8001f06:	bf00      	nop

}
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	080043f8 	.word	0x080043f8
 8001f14:	20012e6c 	.word	0x20012e6c
 8001f18:	08004400 	.word	0x08004400
 8001f1c:	20012dcc 	.word	0x20012dcc

08001f20 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2214      	movs	r2, #20
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 fe1e 	bl	8003b78 <memset>
  TaskInfo.TaskID     = TaskID;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 feb5 	bl	8002cc4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <_DoInit+0x8c>)
 8001f6c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <_DoInit+0x90>)
 8001f7e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <_DoInit+0x94>)
 8001f84:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_DoInit+0x90>)
 8001fa4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_DoInit+0x98>)
 8001faa:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3307      	adds	r3, #7
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <_DoInit+0x9c>)
 8001fca:	6810      	ldr	r0, [r2, #0]
 8001fcc:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <_DoInit+0xa0>)
 8001fd2:	6810      	ldr	r0, [r2, #0]
 8001fd4:	6018      	str	r0, [r3, #0]
 8001fd6:	8891      	ldrh	r1, [r2, #4]
 8001fd8:	7992      	ldrb	r2, [r2, #6]
 8001fda:	8099      	strh	r1, [r3, #4]
 8001fdc:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	719a      	strb	r2, [r3, #6]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	200174ac 	.word	0x200174ac
 8001ff4:	08004450 	.word	0x08004450
 8001ff8:	20012e70 	.word	0x20012e70
 8001ffc:	20013270 	.word	0x20013270
 8002000:	0800445c 	.word	0x0800445c
 8002004:	08004460 	.word	0x08004460

08002008 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002014:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <SEGGER_RTT_ReadNoLock+0x100>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <SEGGER_RTT_ReadNoLock+0x18>
 800201c:	f7ff ffa2 	bl	8001f64 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	3360      	adds	r3, #96	; 0x60
 800202c:	4a36      	ldr	r2, [pc, #216]	; (8002108 <SEGGER_RTT_ReadNoLock+0x100>)
 800202e:	4413      	add	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	429a      	cmp	r2, r3
 800204c:	d92a      	bls.n	80020a4 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4293      	cmp	r3, r2
 800205e:	bf28      	it	cs
 8002060:	4613      	movcs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	4413      	add	r3, r2
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4619      	mov	r1, r3
 8002070:	69f8      	ldr	r0, [r7, #28]
 8002072:	f001 fd76 	bl	8003b62 <memcpy>
    NumBytesRead += NumBytesRem;
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800208e:	6a3a      	ldr	r2, [r7, #32]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d101      	bne.n	80020a4 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf28      	it	cs
 80020b4:	4613      	movcs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d018      	beq.n	80020f0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4619      	mov	r1, r3
 80020ca:	69f8      	ldr	r0, [r7, #28]
 80020cc:	f001 fd49 	bl	8003b62 <memcpy>
    NumBytesRead += NumBytesRem;
 80020d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200174ac 	.word	0x200174ac

0800210c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4a3f      	ldr	r2, [pc, #252]	; (8002228 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800212a:	4413      	add	r3, r2
 800212c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	429a      	cmp	r2, r3
 8002140:	d854      	bhi.n	80021ec <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d30f      	bcc.n	8002176 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002162:	4618      	mov	r0, r3
 8002164:	f001 fcfd 	bl	8003b62 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	441a      	add	r2, r3
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002172:	2301      	movs	r3, #1
 8002174:	e054      	b.n	8002220 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d34b      	bcc.n	800221e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d90e      	bls.n	80021b6 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4413      	add	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 fcdc 	bl	8003b62 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	441a      	add	r2, r3
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	e018      	b.n	80021e8 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fccd 	bl	8003b62 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	6858      	ldr	r0, [r3, #4]
 80021cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	18d1      	adds	r1, r2, r3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	f001 fcc2 	bl	8003b62 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e019      	b.n	8002220 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d30f      	bcc.n	800221e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fca9 	bl	8003b62 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	441a      	add	r2, r3
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3728      	adds	r7, #40	; 0x28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200174ac 	.word	0x200174ac

0800222c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002242:	f7ff fe8f 	bl	8001f64 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4293      	cmp	r3, r2
 8002250:	d24c      	bcs.n	80022ec <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002252:	f3ef 8311 	mrs	r3, BASEPRI
 8002256:	f04f 0120 	mov.w	r1, #32
 800225a:	f381 8811 	msr	BASEPRI, r1
 800225e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d032      	beq.n	80022cc <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002266:	4925      	ldr	r1, [pc, #148]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800227a:	4920      	ldr	r1, [pc, #128]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	3304      	adds	r3, #4
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002290:	491a      	ldr	r1, [pc, #104]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	3320      	adds	r3, #32
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80022a4:	4915      	ldr	r1, [pc, #84]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3328      	adds	r3, #40	; 0x28
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80022b8:	4910      	ldr	r1, [pc, #64]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	3324      	adds	r3, #36	; 0x24
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80022cc:	490b      	ldr	r1, [pc, #44]	; (80022fc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	332c      	adds	r3, #44	; 0x2c
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e002      	b.n	80022f2 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80022f2:	697b      	ldr	r3, [r7, #20]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200174ac 	.word	0x200174ac

08002300 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002316:	f7ff fe25 	bl	8001f64 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4293      	cmp	r3, r2
 8002324:	d24b      	bcs.n	80023be <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002326:	f3ef 8311 	mrs	r3, BASEPRI
 800232a:	f04f 0120 	mov.w	r1, #32
 800232e:	f381 8811 	msr	BASEPRI, r1
 8002332:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d031      	beq.n	800239e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800233a:	4925      	ldr	r1, [pc, #148]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	3360      	adds	r3, #96	; 0x60
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800234e:	4920      	ldr	r1, [pc, #128]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3364      	adds	r3, #100	; 0x64
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002362:	491b      	ldr	r1, [pc, #108]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3368      	adds	r3, #104	; 0x68
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002376:	4916      	ldr	r1, [pc, #88]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	3370      	adds	r3, #112	; 0x70
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800238a:	4911      	ldr	r1, [pc, #68]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	336c      	adds	r3, #108	; 0x6c
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800239e:	490c      	ldr	r1, [pc, #48]	; (80023d0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	3374      	adds	r3, #116	; 0x74
 80023ae:	6a3a      	ldr	r2, [r7, #32]
 80023b0:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e002      	b.n	80023c4 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	617b      	str	r3, [r7, #20]
  }
  return r;
 80023c4:	697b      	ldr	r3, [r7, #20]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200174ac 	.word	0x200174ac

080023d4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80023e4:	e002      	b.n	80023ec <_EncodeStr+0x18>
    Len++;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	3301      	adds	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f6      	bne.n	80023e6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d901      	bls.n	8002404 <_EncodeStr+0x30>
    Len = Limit;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2bfe      	cmp	r3, #254	; 0xfe
 8002408:	d806      	bhi.n	8002418 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	60fa      	str	r2, [r7, #12]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e011      	b.n	800243c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	60fa      	str	r2, [r7, #12]
 800241e:	22ff      	movs	r2, #255	; 0xff
 8002420:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	0a19      	lsrs	r1, r3, #8
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	60fa      	str	r2, [r7, #12]
 8002438:	b2ca      	uxtb	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002440:	e00a      	b.n	8002458 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	1c53      	adds	r3, r2, #1
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1c59      	adds	r1, r3, #1
 800244c:	60f9      	str	r1, [r7, #12]
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	701a      	strb	r2, [r3, #0]
    n++;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3f0      	bcc.n	8002442 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	4618      	mov	r0, r3
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800248c:	1cfb      	adds	r3, r7, #3
 800248e:	2201      	movs	r2, #1
 8002490:	4619      	mov	r1, r3
 8002492:	2001      	movs	r0, #1
 8002494:	f7ff fdb8 	bl	8002008 <SEGGER_RTT_ReadNoLock>
 8002498:	4603      	mov	r3, r0
 800249a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	dd44      	ble.n	800252c <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d01a      	beq.n	80024de <_HandleIncomingPacket+0x58>
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	dc06      	bgt.n	80024ba <_HandleIncomingPacket+0x34>
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d010      	beq.n	80024d2 <_HandleIncomingPacket+0x4c>
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	dc11      	bgt.n	80024d8 <_HandleIncomingPacket+0x52>
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d009      	beq.n	80024cc <_HandleIncomingPacket+0x46>
 80024b8:	e02d      	b.n	8002516 <_HandleIncomingPacket+0x90>
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d015      	beq.n	80024ea <_HandleIncomingPacket+0x64>
 80024be:	2b06      	cmp	r3, #6
 80024c0:	db10      	blt.n	80024e4 <_HandleIncomingPacket+0x5e>
 80024c2:	2b07      	cmp	r3, #7
 80024c4:	d014      	beq.n	80024f0 <_HandleIncomingPacket+0x6a>
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d015      	beq.n	80024f6 <_HandleIncomingPacket+0x70>
 80024ca:	e024      	b.n	8002516 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80024cc:	f000 fa7e 	bl	80029cc <SEGGER_SYSVIEW_Start>
      break;
 80024d0:	e031      	b.n	8002536 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80024d2:	f000 fb37 	bl	8002b44 <SEGGER_SYSVIEW_Stop>
      break;
 80024d6:	e02e      	b.n	8002536 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80024d8:	f000 fd12 	bl	8002f00 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80024dc:	e02b      	b.n	8002536 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80024de:	f000 fcd7 	bl	8002e90 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80024e2:	e028      	b.n	8002536 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80024e4:	f000 fb54 	bl	8002b90 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80024e8:	e025      	b.n	8002536 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80024ea:	f000 ff99 	bl	8003420 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80024ee:	e022      	b.n	8002536 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80024f0:	f000 ff78 	bl	80033e4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80024f4:	e01f      	b.n	8002536 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80024f6:	1cfb      	adds	r3, r7, #3
 80024f8:	2201      	movs	r2, #1
 80024fa:	4619      	mov	r1, r3
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fd83 	bl	8002008 <SEGGER_RTT_ReadNoLock>
 8002502:	4603      	mov	r3, r0
 8002504:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	dd11      	ble.n	8002530 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fee8 	bl	80032e4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002514:	e00c      	b.n	8002530 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	b25b      	sxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	da0a      	bge.n	8002534 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800251e:	1cfb      	adds	r3, r7, #3
 8002520:	2201      	movs	r2, #1
 8002522:	4619      	mov	r1, r3
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff fd6f 	bl	8002008 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800252a:	e003      	b.n	8002534 <_HandleIncomingPacket+0xae>
    }
  }
 800252c:	bf00      	nop
 800252e:	e002      	b.n	8002536 <_HandleIncomingPacket+0xb0>
      break;
 8002530:	bf00      	nop
 8002532:	e000      	b.n	8002536 <_HandleIncomingPacket+0xb0>
      break;
 8002534:	bf00      	nop
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002546:	2301      	movs	r3, #1
 8002548:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002554:	4b30      	ldr	r3, [pc, #192]	; (8002618 <_TrySendOverflowPacket+0xd8>)
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
 800255a:	e00b      	b.n	8002574 <_TrySendOverflowPacket+0x34>
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	b2da      	uxtb	r2, r3
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	09db      	lsrs	r3, r3, #7
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	2b7f      	cmp	r3, #127	; 0x7f
 8002578:	d8f0      	bhi.n	800255c <_TrySendOverflowPacket+0x1c>
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <_TrySendOverflowPacket+0xdc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <_TrySendOverflowPacket+0xd8>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	e00b      	b.n	80025bc <_TrySendOverflowPacket+0x7c>
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	1c59      	adds	r1, r3, #1
 80025ac:	6279      	str	r1, [r7, #36]	; 0x24
 80025ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	09db      	lsrs	r3, r3, #7
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	2b7f      	cmp	r3, #127	; 0x7f
 80025c0:	d8f0      	bhi.n	80025a4 <_TrySendOverflowPacket+0x64>
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	627a      	str	r2, [r7, #36]	; 0x24
 80025c8:	6a3a      	ldr	r2, [r7, #32]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff fd94 	bl	800210c <SEGGER_RTT_WriteSkipNoLock>
 80025e4:	4603      	mov	r3, r0
 80025e6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <_TrySendOverflowPacket+0xd8>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <_TrySendOverflowPacket+0xd8>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <_TrySendOverflowPacket+0xd8>)
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e004      	b.n	800260c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <_TrySendOverflowPacket+0xd8>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	4a03      	ldr	r2, [pc, #12]	; (8002618 <_TrySendOverflowPacket+0xd8>)
 800260a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800260c:	693b      	ldr	r3, [r7, #16]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3730      	adds	r7, #48	; 0x30
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20017288 	.word	0x20017288
 800261c:	e0001004 	.word	0xe0001004

08002620 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800262c:	4b63      	ldr	r3, [pc, #396]	; (80027bc <_SendPacket+0x19c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d010      	beq.n	8002656 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <_SendPacket+0x19c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a1 	beq.w	8002780 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <_SendPacket+0x19c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d109      	bne.n	800265a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002646:	f7ff ff7b 	bl	8002540 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <_SendPacket+0x19c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	f040 8098 	bne.w	8002784 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002654:	e001      	b.n	800265a <_SendPacket+0x3a>
    goto Send;
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <_SendPacket+0x3c>
Send:
 800265a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b1f      	cmp	r3, #31
 8002660:	d809      	bhi.n	8002676 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002662:	4b56      	ldr	r3, [pc, #344]	; (80027bc <_SendPacket+0x19c>)
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 8089 	bne.w	8002788 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b17      	cmp	r3, #23
 800267a:	d807      	bhi.n	800268c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3b01      	subs	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e03d      	b.n	8002708 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b7f      	cmp	r3, #127	; 0x7f
 8002698:	d912      	bls.n	80026c0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	09da      	lsrs	r2, r3, #7
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	3a01      	subs	r2, #1
 80026b2:	60fa      	str	r2, [r7, #12]
 80026b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e006      	b.n	80026ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b7f      	cmp	r3, #127	; 0x7f
 80026d2:	d912      	bls.n	80026fa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	09da      	lsrs	r2, r3, #7
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3b01      	subs	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	3a01      	subs	r2, #1
 80026ec:	60fa      	str	r2, [r7, #12]
 80026ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e006      	b.n	8002708 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <_SendPacket+0x1a0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <_SendPacket+0x19c>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	e00b      	b.n	800273a <_SendPacket+0x11a>
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	1c59      	adds	r1, r3, #1
 800272a:	6279      	str	r1, [r7, #36]	; 0x24
 800272c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	09db      	lsrs	r3, r3, #7
 8002738:	623b      	str	r3, [r7, #32]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	2b7f      	cmp	r3, #127	; 0x7f
 800273e:	d8f0      	bhi.n	8002722 <_SendPacket+0x102>
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	627a      	str	r2, [r7, #36]	; 0x24
 8002746:	6a3a      	ldr	r2, [r7, #32]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	461a      	mov	r2, r3
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	2001      	movs	r0, #1
 800275c:	f7ff fcd6 	bl	800210c <SEGGER_RTT_WriteSkipNoLock>
 8002760:	4603      	mov	r3, r0
 8002762:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <_SendPacket+0x19c>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	60d3      	str	r3, [r2, #12]
 8002770:	e00b      	b.n	800278a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <_SendPacket+0x19c>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <_SendPacket+0x19c>)
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e004      	b.n	800278a <_SendPacket+0x16a>
    goto SendDone;
 8002780:	bf00      	nop
 8002782:	e002      	b.n	800278a <_SendPacket+0x16a>
      goto SendDone;
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <_SendPacket+0x16a>
      goto SendDone;
 8002788:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <_SendPacket+0x1a4>)
 800278c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <_SendPacket+0x1a4>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	429a      	cmp	r2, r3
 8002798:	d00b      	beq.n	80027b2 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <_SendPacket+0x19c>)
 800279c:	789b      	ldrb	r3, [r3, #2]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <_SendPacket+0x19c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80027a8:	f7ff fe6d 	bl	8002486 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <_SendPacket+0x19c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20017288 	.word	0x20017288
 80027c0:	e0001004 	.word	0xe0001004
 80027c4:	200174ac 	.word	0x200174ac

080027c8 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <SEGGER_SYSVIEW_Init+0x68>)
 80027e0:	4914      	ldr	r1, [pc, #80]	; (8002834 <SEGGER_SYSVIEW_Init+0x6c>)
 80027e2:	2001      	movs	r0, #1
 80027e4:	f7ff fd22 	bl	800222c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2308      	movs	r3, #8
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <SEGGER_SYSVIEW_Init+0x70>)
 80027f0:	4910      	ldr	r1, [pc, #64]	; (8002834 <SEGGER_SYSVIEW_Init+0x6c>)
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7ff fd84 	bl	8002300 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <SEGGER_SYSVIEW_Init+0x74>)
 80027fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fe:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <SEGGER_SYSVIEW_Init+0x78>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <SEGGER_SYSVIEW_Init+0x74>)
 8002806:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <SEGGER_SYSVIEW_Init+0x74>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <SEGGER_SYSVIEW_Init+0x74>)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002814:	4a09      	ldr	r2, [pc, #36]	; (800283c <SEGGER_SYSVIEW_Init+0x74>)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <SEGGER_SYSVIEW_Init+0x74>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <SEGGER_SYSVIEW_Init+0x74>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20013280 	.word	0x20013280
 8002834:	08004468 	.word	0x08004468
 8002838:	20017280 	.word	0x20017280
 800283c:	20017288 	.word	0x20017288
 8002840:	e0001004 	.word	0xe0001004

08002844 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6113      	str	r3, [r2, #16]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20017288 	.word	0x20017288

08002864 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800286c:	f3ef 8311 	mrs	r3, BASEPRI
 8002870:	f04f 0120 	mov.w	r1, #32
 8002874:	f381 8811 	msr	BASEPRI, r1
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4808      	ldr	r0, [pc, #32]	; (800289c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800287c:	f7ff fdf7 	bl	800246e <_PreparePacket>
 8002880:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68b8      	ldr	r0, [r7, #8]
 8002888:	f7ff feca 	bl	8002620 <_SendPacket>
  RECORD_END();
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f383 8811 	msr	BASEPRI, r3
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200172b8 	.word	0x200172b8

080028a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80028aa:	f3ef 8311 	mrs	r3, BASEPRI
 80028ae:	f04f 0120 	mov.w	r1, #32
 80028b2:	f381 8811 	msr	BASEPRI, r1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	4816      	ldr	r0, [pc, #88]	; (8002914 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80028ba:	f7ff fdd8 	bl	800246e <_PreparePacket>
 80028be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e00b      	b.n	80028e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	1c59      	adds	r1, r3, #1
 80028d6:	61f9      	str	r1, [r7, #28]
 80028d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	09db      	lsrs	r3, r3, #7
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b7f      	cmp	r3, #127	; 0x7f
 80028ea:	d8f0      	bhi.n	80028ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	61fa      	str	r2, [r7, #28]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	6938      	ldr	r0, [r7, #16]
 8002902:	f7ff fe8d 	bl	8002620 <_SendPacket>
  RECORD_END();
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f383 8811 	msr	BASEPRI, r3
}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200172b8 	.word	0x200172b8

08002918 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b08c      	sub	sp, #48	; 0x30
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002924:	f3ef 8311 	mrs	r3, BASEPRI
 8002928:	f04f 0120 	mov.w	r1, #32
 800292c:	f381 8811 	msr	BASEPRI, r1
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	4825      	ldr	r0, [pc, #148]	; (80029c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002934:	f7ff fd9b 	bl	800246e <_PreparePacket>
 8002938:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
 8002946:	e00b      	b.n	8002960 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	b2da      	uxtb	r2, r3
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	09db      	lsrs	r3, r3, #7
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	2b7f      	cmp	r3, #127	; 0x7f
 8002964:	d8f0      	bhi.n	8002948 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800296c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	e00b      	b.n	8002998 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	6279      	str	r1, [r7, #36]	; 0x24
 800298a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	09db      	lsrs	r3, r3, #7
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2b7f      	cmp	r3, #127	; 0x7f
 800299c:	d8f0      	bhi.n	8002980 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	627a      	str	r2, [r7, #36]	; 0x24
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6979      	ldr	r1, [r7, #20]
 80029b2:	69b8      	ldr	r0, [r7, #24]
 80029b4:	f7ff fe34 	bl	8002620 <_SendPacket>
  RECORD_END();
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f383 8811 	msr	BASEPRI, r3
}
 80029be:	bf00      	nop
 80029c0:	3730      	adds	r7, #48	; 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200172b8 	.word	0x200172b8

080029cc <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80029d2:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <SEGGER_SYSVIEW_Start+0x16c>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 80aa 	bne.w	8002b30 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80029dc:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <SEGGER_SYSVIEW_Start+0x16c>)
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80029e2:	f3ef 8311 	mrs	r3, BASEPRI
 80029e6:	f04f 0120 	mov.w	r1, #32
 80029ea:	f381 8811 	msr	BASEPRI, r1
 80029ee:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80029f0:	220a      	movs	r2, #10
 80029f2:	4952      	ldr	r1, [pc, #328]	; (8002b3c <SEGGER_SYSVIEW_Start+0x170>)
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7ff fb89 	bl	800210c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002a00:	200a      	movs	r0, #10
 8002a02:	f7ff ff2f 	bl	8002864 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002a06:	f3ef 8311 	mrs	r3, BASEPRI
 8002a0a:	f04f 0120 	mov.w	r1, #32
 8002a0e:	f381 8811 	msr	BASEPRI, r1
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	484a      	ldr	r0, [pc, #296]	; (8002b40 <SEGGER_SYSVIEW_Start+0x174>)
 8002a16:	f7ff fd2a 	bl	800246e <_PreparePacket>
 8002a1a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a24:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a2a:	e00b      	b.n	8002a44 <SEGGER_SYSVIEW_Start+0x78>
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	1c59      	adds	r1, r3, #1
 8002a34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	09db      	lsrs	r3, r3, #7
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	2b7f      	cmp	r3, #127	; 0x7f
 8002a48:	d8f0      	bhi.n	8002a2c <SEGGER_SYSVIEW_Start+0x60>
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	e00b      	b.n	8002a7e <SEGGER_SYSVIEW_Start+0xb2>
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1c59      	adds	r1, r3, #1
 8002a6e:	6279      	str	r1, [r7, #36]	; 0x24
 8002a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	09db      	lsrs	r3, r3, #7
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	2b7f      	cmp	r3, #127	; 0x7f
 8002a82:	d8f0      	bhi.n	8002a66 <SEGGER_SYSVIEW_Start+0x9a>
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	627a      	str	r2, [r7, #36]	; 0x24
 8002a8a:	6a3a      	ldr	r2, [r7, #32]
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	e00b      	b.n	8002ab8 <SEGGER_SYSVIEW_Start+0xec>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	1c59      	adds	r1, r3, #1
 8002aa8:	61f9      	str	r1, [r7, #28]
 8002aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	09db      	lsrs	r3, r3, #7
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b7f      	cmp	r3, #127	; 0x7f
 8002abc:	d8f0      	bhi.n	8002aa0 <SEGGER_SYSVIEW_Start+0xd4>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	61fa      	str	r2, [r7, #28]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e00b      	b.n	8002af0 <SEGGER_SYSVIEW_Start+0x124>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1c59      	adds	r1, r3, #1
 8002ae0:	6179      	str	r1, [r7, #20]
 8002ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	09db      	lsrs	r3, r3, #7
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b7f      	cmp	r3, #127	; 0x7f
 8002af4:	d8f0      	bhi.n	8002ad8 <SEGGER_SYSVIEW_Start+0x10c>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	617a      	str	r2, [r7, #20]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002b06:	2218      	movs	r2, #24
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fd88 	bl	8002620 <_SendPacket>
      RECORD_END();
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <SEGGER_SYSVIEW_Start+0x16c>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <SEGGER_SYSVIEW_Start+0x16c>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002b24:	f000 f9ec 	bl	8002f00 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002b28:	f000 f9b2 	bl	8002e90 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002b2c:	f000 fc78 	bl	8003420 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002b30:	bf00      	nop
 8002b32:	3730      	adds	r7, #48	; 0x30
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20017288 	.word	0x20017288
 8002b3c:	080044d0 	.word	0x080044d0
 8002b40:	200172b8 	.word	0x200172b8

08002b44 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8002b4e:	f04f 0120 	mov.w	r1, #32
 8002b52:	f381 8811 	msr	BASEPRI, r1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	480b      	ldr	r0, [pc, #44]	; (8002b88 <SEGGER_SYSVIEW_Stop+0x44>)
 8002b5a:	f7ff fc88 	bl	800246e <_PreparePacket>
 8002b5e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <SEGGER_SYSVIEW_Stop+0x48>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002b68:	220b      	movs	r2, #11
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	6838      	ldr	r0, [r7, #0]
 8002b6e:	f7ff fd57 	bl	8002620 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <SEGGER_SYSVIEW_Stop+0x48>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f383 8811 	msr	BASEPRI, r3
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200172b8 	.word	0x200172b8
 8002b8c:	20017288 	.word	0x20017288

08002b90 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08c      	sub	sp, #48	; 0x30
 8002b94:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002b96:	f3ef 8311 	mrs	r3, BASEPRI
 8002b9a:	f04f 0120 	mov.w	r1, #32
 8002b9e:	f381 8811 	msr	BASEPRI, r1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	4845      	ldr	r0, [pc, #276]	; (8002cbc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002ba6:	f7ff fc62 	bl	800246e <_PreparePacket>
 8002baa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb4:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	e00b      	b.n	8002bd4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	1c59      	adds	r1, r3, #1
 8002bc4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002bc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	09db      	lsrs	r3, r3, #7
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd8:	d8f0      	bhi.n	8002bbc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	e00b      	b.n	8002c0e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1c59      	adds	r1, r3, #1
 8002bfe:	6279      	str	r1, [r7, #36]	; 0x24
 8002c00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	09db      	lsrs	r3, r3, #7
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	2b7f      	cmp	r3, #127	; 0x7f
 8002c12:	d8f0      	bhi.n	8002bf6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	627a      	str	r2, [r7, #36]	; 0x24
 8002c1a:	6a3a      	ldr	r2, [r7, #32]
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e00b      	b.n	8002c48 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	61f9      	str	r1, [r7, #28]
 8002c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	09db      	lsrs	r3, r3, #7
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c4c:	d8f0      	bhi.n	8002c30 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	61fa      	str	r2, [r7, #28]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e00b      	b.n	8002c80 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1c59      	adds	r1, r3, #1
 8002c70:	6179      	str	r1, [r7, #20]
 8002c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	09db      	lsrs	r3, r3, #7
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b7f      	cmp	r3, #127	; 0x7f
 8002c84:	d8f0      	bhi.n	8002c68 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	617a      	str	r2, [r7, #20]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002c96:	2218      	movs	r2, #24
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	68b8      	ldr	r0, [r7, #8]
 8002c9c:	f7ff fcc0 	bl	8002620 <_SendPacket>
  RECORD_END();
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	4798      	blx	r3
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3730      	adds	r7, #48	; 0x30
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200172b8 	.word	0x200172b8
 8002cc0:	20017288 	.word	0x20017288

08002cc4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b092      	sub	sp, #72	; 0x48
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8002cd0:	f04f 0120 	mov.w	r1, #32
 8002cd4:	f381 8811 	msr	BASEPRI, r1
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	486b      	ldr	r0, [pc, #428]	; (8002e88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002cdc:	f7ff fbc7 	bl	800246e <_PreparePacket>
 8002ce0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf8:	e00b      	b.n	8002d12 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d00:	1c59      	adds	r1, r3, #1
 8002d02:	6479      	str	r1, [r7, #68]	; 0x44
 8002d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0e:	09db      	lsrs	r3, r3, #7
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	2b7f      	cmp	r3, #127	; 0x7f
 8002d16:	d8f0      	bhi.n	8002cfa <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	647a      	str	r2, [r7, #68]	; 0x44
 8002d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d32:	e00b      	b.n	8002d4c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	1c59      	adds	r1, r3, #1
 8002d3c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002d3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	09db      	lsrs	r3, r3, #7
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d50:	d8f0      	bhi.n	8002d34 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d60:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	4619      	mov	r1, r3
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fb32 	bl	80023d4 <_EncodeStr>
 8002d70:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002d72:	2209      	movs	r2, #9
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	6938      	ldr	r0, [r7, #16]
 8002d78:	f7ff fc52 	bl	8002620 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
 8002d92:	e00b      	b.n	8002dac <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	6379      	str	r1, [r7, #52]	; 0x34
 8002d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	09db      	lsrs	r3, r3, #7
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2b7f      	cmp	r3, #127	; 0x7f
 8002db0:	d8f0      	bhi.n	8002d94 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	637a      	str	r2, [r7, #52]	; 0x34
 8002db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dcc:	e00b      	b.n	8002de6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002dd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	09db      	lsrs	r3, r3, #7
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dea:	d8f0      	bhi.n	8002dce <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	e00b      	b.n	8002e20 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	6279      	str	r1, [r7, #36]	; 0x24
 8002e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	09db      	lsrs	r3, r3, #7
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2b7f      	cmp	r3, #127	; 0x7f
 8002e24:	d8f0      	bhi.n	8002e08 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	627a      	str	r2, [r7, #36]	; 0x24
 8002e2c:	6a3a      	ldr	r2, [r7, #32]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e00b      	b.n	8002e58 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	61f9      	str	r1, [r7, #28]
 8002e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	09db      	lsrs	r3, r3, #7
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e5c:	d8f0      	bhi.n	8002e40 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	61fa      	str	r2, [r7, #28]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002e6e:	2215      	movs	r2, #21
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	6938      	ldr	r0, [r7, #16]
 8002e74:	f7ff fbd4 	bl	8002620 <_SendPacket>
  RECORD_END();
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f383 8811 	msr	BASEPRI, r3
}
 8002e7e:	bf00      	nop
 8002e80:	3748      	adds	r7, #72	; 0x48
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200172b8 	.word	0x200172b8
 8002e8c:	20017288 	.word	0x20017288

08002e90 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4798      	blx	r3
  }
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20017288 	.word	0x20017288

08002eb8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec4:	f04f 0120 	mov.w	r1, #32
 8002ec8:	f381 8811 	msr	BASEPRI, r1
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	480b      	ldr	r0, [pc, #44]	; (8002efc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002ed0:	f7ff facd 	bl	800246e <_PreparePacket>
 8002ed4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	6938      	ldr	r0, [r7, #16]
 8002edc:	f7ff fa7a 	bl	80023d4 <_EncodeStr>
 8002ee0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002ee2:	220e      	movs	r2, #14
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	6938      	ldr	r0, [r7, #16]
 8002ee8:	f7ff fb9a 	bl	8002620 <_SendPacket>
  RECORD_END();
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f383 8811 	msr	BASEPRI, r3
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200172b8 	.word	0x200172b8

08002f00 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d019      	beq.n	8002f42 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d014      	beq.n	8002f42 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4798      	blx	r3
 8002f20:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f24:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002f26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f04f 0400 	mov.w	r4, #0
 8002f32:	0013      	movs	r3, r2
 8002f34:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f36:	461a      	mov	r2, r3
 8002f38:	4601      	mov	r1, r0
 8002f3a:	200d      	movs	r0, #13
 8002f3c:	f7ff fcec 	bl	8002918 <SEGGER_SYSVIEW_RecordU32x2>
 8002f40:	e005      	b.n	8002f4e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	200c      	movs	r0, #12
 8002f4a:	f7ff fca9 	bl	80028a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20017288 	.word	0x20017288
 8002f5c:	e0001004 	.word	0xe0001004

08002f60 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002f66:	f3ef 8311 	mrs	r3, BASEPRI
 8002f6a:	f04f 0120 	mov.w	r1, #32
 8002f6e:	f381 8811 	msr	BASEPRI, r1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	4819      	ldr	r0, [pc, #100]	; (8002fdc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002f76:	f7ff fa7a 	bl	800246e <_PreparePacket>
 8002f7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f88:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e00b      	b.n	8002fac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	1c59      	adds	r1, r3, #1
 8002f9c:	6179      	str	r1, [r7, #20]
 8002f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	09db      	lsrs	r3, r3, #7
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b7f      	cmp	r3, #127	; 0x7f
 8002fb0:	d8f0      	bhi.n	8002f94 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	617a      	str	r2, [r7, #20]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	68b8      	ldr	r0, [r7, #8]
 8002fc8:	f7ff fb2a 	bl	8002620 <_SendPacket>
  RECORD_END();
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f383 8811 	msr	BASEPRI, r3
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200172b8 	.word	0x200172b8
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002fea:	f3ef 8311 	mrs	r3, BASEPRI
 8002fee:	f04f 0120 	mov.w	r1, #32
 8002ff2:	f381 8811 	msr	BASEPRI, r1
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002ffa:	f7ff fa38 	bl	800246e <_PreparePacket>
 8002ffe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003000:	2203      	movs	r2, #3
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	6838      	ldr	r0, [r7, #0]
 8003006:	f7ff fb0b 	bl	8002620 <_SendPacket>
  RECORD_END();
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f383 8811 	msr	BASEPRI, r3
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200172b8 	.word	0x200172b8

0800301c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003022:	f3ef 8311 	mrs	r3, BASEPRI
 8003026:	f04f 0120 	mov.w	r1, #32
 800302a:	f381 8811 	msr	BASEPRI, r1
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	4807      	ldr	r0, [pc, #28]	; (8003050 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003032:	f7ff fa1c 	bl	800246e <_PreparePacket>
 8003036:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003038:	2212      	movs	r2, #18
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f7ff faef 	bl	8002620 <_SendPacket>
  RECORD_END();
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f383 8811 	msr	BASEPRI, r3
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200172b8 	.word	0x200172b8

08003054 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800305a:	f3ef 8311 	mrs	r3, BASEPRI
 800305e:	f04f 0120 	mov.w	r1, #32
 8003062:	f381 8811 	msr	BASEPRI, r1
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	4807      	ldr	r0, [pc, #28]	; (8003088 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800306a:	f7ff fa00 	bl	800246e <_PreparePacket>
 800306e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003070:	2211      	movs	r2, #17
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f7ff fad3 	bl	8002620 <_SendPacket>
  RECORD_END();
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f383 8811 	msr	BASEPRI, r3
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200172b8 	.word	0x200172b8

0800308c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003094:	f3ef 8311 	mrs	r3, BASEPRI
 8003098:	f04f 0120 	mov.w	r1, #32
 800309c:	f381 8811 	msr	BASEPRI, r1
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	481a      	ldr	r0, [pc, #104]	; (800310c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80030a4:	f7ff f9e3 	bl	800246e <_PreparePacket>
 80030a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e00b      	b.n	80030dc <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	61f9      	str	r1, [r7, #28]
 80030ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	09db      	lsrs	r3, r3, #7
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b7f      	cmp	r3, #127	; 0x7f
 80030e0:	d8f0      	bhi.n	80030c4 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	61fa      	str	r2, [r7, #28]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80030f2:	2208      	movs	r2, #8
 80030f4:	68f9      	ldr	r1, [r7, #12]
 80030f6:	6938      	ldr	r0, [r7, #16]
 80030f8:	f7ff fa92 	bl	8002620 <_SendPacket>
  RECORD_END();
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f383 8811 	msr	BASEPRI, r3
}
 8003102:	bf00      	nop
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200172b8 	.word	0x200172b8
 8003110:	20017288 	.word	0x20017288

08003114 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800311c:	f3ef 8311 	mrs	r3, BASEPRI
 8003120:	f04f 0120 	mov.w	r1, #32
 8003124:	f381 8811 	msr	BASEPRI, r1
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	481a      	ldr	r0, [pc, #104]	; (8003194 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800312c:	f7ff f99f 	bl	800246e <_PreparePacket>
 8003130:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e00b      	b.n	8003164 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	61f9      	str	r1, [r7, #28]
 8003156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	09db      	lsrs	r3, r3, #7
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b7f      	cmp	r3, #127	; 0x7f
 8003168:	d8f0      	bhi.n	800314c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	61fa      	str	r2, [r7, #28]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800317a:	2204      	movs	r2, #4
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	6938      	ldr	r0, [r7, #16]
 8003180:	f7ff fa4e 	bl	8002620 <_SendPacket>
  RECORD_END();
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f383 8811 	msr	BASEPRI, r3
}
 800318a:	bf00      	nop
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200172b8 	.word	0x200172b8
 8003198:	20017288 	.word	0x20017288

0800319c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80031a4:	f3ef 8311 	mrs	r3, BASEPRI
 80031a8:	f04f 0120 	mov.w	r1, #32
 80031ac:	f381 8811 	msr	BASEPRI, r1
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	481a      	ldr	r0, [pc, #104]	; (800321c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80031b4:	f7ff f95b 	bl	800246e <_PreparePacket>
 80031b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e00b      	b.n	80031ec <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	61f9      	str	r1, [r7, #28]
 80031de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	09db      	lsrs	r3, r3, #7
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b7f      	cmp	r3, #127	; 0x7f
 80031f0:	d8f0      	bhi.n	80031d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	61fa      	str	r2, [r7, #28]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003202:	2206      	movs	r2, #6
 8003204:	68f9      	ldr	r1, [r7, #12]
 8003206:	6938      	ldr	r0, [r7, #16]
 8003208:	f7ff fa0a 	bl	8002620 <_SendPacket>
  RECORD_END();
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f383 8811 	msr	BASEPRI, r3
}
 8003212:	bf00      	nop
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200172b8 	.word	0x200172b8
 8003220:	20017288 	.word	0x20017288

08003224 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800322e:	f3ef 8311 	mrs	r3, BASEPRI
 8003232:	f04f 0120 	mov.w	r1, #32
 8003236:	f381 8811 	msr	BASEPRI, r1
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	4827      	ldr	r0, [pc, #156]	; (80032dc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800323e:	f7ff f916 	bl	800246e <_PreparePacket>
 8003242:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	623b      	str	r3, [r7, #32]
 800325c:	e00b      	b.n	8003276 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	1c59      	adds	r1, r3, #1
 8003266:	6279      	str	r1, [r7, #36]	; 0x24
 8003268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	09db      	lsrs	r3, r3, #7
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2b7f      	cmp	r3, #127	; 0x7f
 800327a:	d8f0      	bhi.n	800325e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	627a      	str	r2, [r7, #36]	; 0x24
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	e00b      	b.n	80032ae <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	1c59      	adds	r1, r3, #1
 800329e:	61f9      	str	r1, [r7, #28]
 80032a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	09db      	lsrs	r3, r3, #7
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b7f      	cmp	r3, #127	; 0x7f
 80032b2:	d8f0      	bhi.n	8003296 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	61fa      	str	r2, [r7, #28]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80032c4:	2207      	movs	r2, #7
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	6938      	ldr	r0, [r7, #16]
 80032ca:	f7ff f9a9 	bl	8002620 <_SendPacket>
  RECORD_END();
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f383 8811 	msr	BASEPRI, r3
}
 80032d4:	bf00      	nop
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200172b8 	.word	0x200172b8
 80032e0:	20017288 	.word	0x20017288

080032e4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	; 0x30
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d06d      	beq.n	80033d2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003300:	e008      	b.n	8003314 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	3301      	adds	r3, #1
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003318:	429a      	cmp	r2, r3
 800331a:	d3f2      	bcc.n	8003302 <SEGGER_SYSVIEW_SendModule+0x1e>
 800331c:	e000      	b.n	8003320 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800331e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d055      	beq.n	80033d2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003326:	f3ef 8311 	mrs	r3, BASEPRI
 800332a:	f04f 0120 	mov.w	r1, #32
 800332e:	f381 8811 	msr	BASEPRI, r1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	482a      	ldr	r0, [pc, #168]	; (80033e0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003336:	f7ff f89a 	bl	800246e <_PreparePacket>
 800333a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	e00b      	b.n	8003362 <SEGGER_SYSVIEW_SendModule+0x7e>
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	6279      	str	r1, [r7, #36]	; 0x24
 8003354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	09db      	lsrs	r3, r3, #7
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2b7f      	cmp	r3, #127	; 0x7f
 8003366:	d8f0      	bhi.n	800334a <SEGGER_SYSVIEW_SendModule+0x66>
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	627a      	str	r2, [r7, #36]	; 0x24
 800336e:	6a3a      	ldr	r2, [r7, #32]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	e00b      	b.n	800339c <SEGGER_SYSVIEW_SendModule+0xb8>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	61f9      	str	r1, [r7, #28]
 800338e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	09db      	lsrs	r3, r3, #7
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b7f      	cmp	r3, #127	; 0x7f
 80033a0:	d8f0      	bhi.n	8003384 <SEGGER_SYSVIEW_SendModule+0xa0>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	61fa      	str	r2, [r7, #28]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	4619      	mov	r1, r3
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff f80a 	bl	80023d4 <_EncodeStr>
 80033c0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80033c2:	2216      	movs	r2, #22
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	6938      	ldr	r0, [r7, #16]
 80033c8:	f7ff f92a 	bl	8002620 <_SendPacket>
      RECORD_END();
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80033d2:	bf00      	nop
 80033d4:	3730      	adds	r7, #48	; 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200172b0 	.word	0x200172b0
 80033e0:	200172b8 	.word	0x200172b8

080033e4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00f      	beq.n	8003412 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f2      	bne.n	80033f8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200172b0 	.word	0x200172b0

08003420 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003426:	f3ef 8311 	mrs	r3, BASEPRI
 800342a:	f04f 0120 	mov.w	r1, #32
 800342e:	f381 8811 	msr	BASEPRI, r1
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	4817      	ldr	r0, [pc, #92]	; (8003494 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003436:	f7ff f81a 	bl	800246e <_PreparePacket>
 800343a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e00b      	b.n	8003464 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1c59      	adds	r1, r3, #1
 8003454:	6179      	str	r1, [r7, #20]
 8003456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	09db      	lsrs	r3, r3, #7
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b7f      	cmp	r3, #127	; 0x7f
 8003468:	d8f0      	bhi.n	800344c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	617a      	str	r2, [r7, #20]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800347a:	221b      	movs	r2, #27
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f7ff f8ce 	bl	8002620 <_SendPacket>
  RECORD_END();
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f383 8811 	msr	BASEPRI, r3
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200172b8 	.word	0x200172b8
 8003498:	200172b4 	.word	0x200172b4

0800349c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034a4:	f3ef 8311 	mrs	r3, BASEPRI
 80034a8:	f04f 0120 	mov.w	r1, #32
 80034ac:	f381 8811 	msr	BASEPRI, r1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	4827      	ldr	r0, [pc, #156]	; (8003550 <SEGGER_SYSVIEW_Warn+0xb4>)
 80034b4:	f7fe ffdb 	bl	800246e <_PreparePacket>
 80034b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6938      	ldr	r0, [r7, #16]
 80034c0:	f7fe ff88 	bl	80023d4 <_EncodeStr>
 80034c4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	2301      	movs	r3, #1
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	e00b      	b.n	80034e8 <SEGGER_SYSVIEW_Warn+0x4c>
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	6279      	str	r1, [r7, #36]	; 0x24
 80034da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	09db      	lsrs	r3, r3, #7
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	2b7f      	cmp	r3, #127	; 0x7f
 80034ec:	d8f0      	bhi.n	80034d0 <SEGGER_SYSVIEW_Warn+0x34>
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	627a      	str	r2, [r7, #36]	; 0x24
 80034f4:	6a3a      	ldr	r2, [r7, #32]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e00b      	b.n	8003520 <SEGGER_SYSVIEW_Warn+0x84>
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	61f9      	str	r1, [r7, #28]
 8003512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	09db      	lsrs	r3, r3, #7
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b7f      	cmp	r3, #127	; 0x7f
 8003524:	d8f0      	bhi.n	8003508 <SEGGER_SYSVIEW_Warn+0x6c>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	61fa      	str	r2, [r7, #28]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003536:	221a      	movs	r2, #26
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	6938      	ldr	r0, [r7, #16]
 800353c:	f7ff f870 	bl	8002620 <_SendPacket>
  RECORD_END();
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f383 8811 	msr	BASEPRI, r3
}
 8003546:	bf00      	nop
 8003548:	3728      	adds	r7, #40	; 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200172b8 	.word	0x200172b8

08003554 <main>:

//global variables
char usr_msg[250] = {0};

int main(void)
{
 8003554:	b5b0      	push	{r4, r5, r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af02      	add	r7, sp, #8
	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL for SEGGER Systemview Timestamp maintaining
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <main+0x7c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <main+0x7c>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6013      	str	r3, [r2, #0]

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 8003566:	f7fc ffaf 	bl	80004c8 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 800356a:	f000 f985 	bl	8003878 <SystemCoreClockUpdate>

	prvSetupHardware();
 800356e:	f000 f86d 	bl	800364c <prvSetupHardware>

	sprintf(usr_msg, "This is Demo of Task Switching Priority \r\n");
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <main+0x80>)
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <main+0x84>)
 8003576:	4614      	mov	r4, r2
 8003578:	461d      	mov	r5, r3
 800357a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800357e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003586:	c403      	stmia	r4!, {r0, r1}
 8003588:	8022      	strh	r2, [r4, #0]
 800358a:	3402      	adds	r4, #2
 800358c:	0c13      	lsrs	r3, r2, #16
 800358e:	7023      	strb	r3, [r4, #0]
	printmsg(usr_msg);
 8003590:	4810      	ldr	r0, [pc, #64]	; (80035d4 <main+0x80>)
 8003592:	f000 f863 	bl	800365c <printmsg>

	//start recording
	SEGGER_SYSVIEW_Conf();
 8003596:	f7fe fbc1 	bl	8001d1c <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800359a:	f7ff fa17 	bl	80029cc <SEGGER_SYSVIEW_Start>

	//3. lets create 2 tasks
	xTaskCreate(vTask1_handler, "Task-1", 500, NULL, 2, &xTaskHandle1 );
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <main+0x88>)
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2302      	movs	r3, #2
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035ac:	490c      	ldr	r1, [pc, #48]	; (80035e0 <main+0x8c>)
 80035ae:	480d      	ldr	r0, [pc, #52]	; (80035e4 <main+0x90>)
 80035b0:	f7fd fa86 	bl	8000ac0 <xTaskCreate>

	xTaskCreate(vTask2_handler, "Task-2", 500, NULL, 3, &xTaskHandle2 );
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <main+0x94>)
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	2303      	movs	r3, #3
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2300      	movs	r3, #0
 80035be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035c2:	490a      	ldr	r1, [pc, #40]	; (80035ec <main+0x98>)
 80035c4:	480a      	ldr	r0, [pc, #40]	; (80035f0 <main+0x9c>)
 80035c6:	f7fd fa7b 	bl	8000ac0 <xTaskCreate>

	//4. start the scheduler
	vTaskStartScheduler();
 80035ca:	f7fd fc11 	bl	8000df0 <vTaskStartScheduler>

	for(;;);
 80035ce:	e7fe      	b.n	80035ce <main+0x7a>
 80035d0:	e0001000 	.word	0xe0001000
 80035d4:	200173a4 	.word	0x200173a4
 80035d8:	08004470 	.word	0x08004470
 80035dc:	2001739c 	.word	0x2001739c
 80035e0:	0800449c 	.word	0x0800449c
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	200173a0 	.word	0x200173a0
 80035ec:	080044a4 	.word	0x080044a4
 80035f0:	0800362d 	.word	0x0800362d

080035f4 <vTask1_handler>:
}

void vTask1_handler(void *params)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	while(1){
		sprintf(usr_msg,"Status of the LED is: %d\r\n", GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0));
 80035fc:	2101      	movs	r1, #1
 80035fe:	4808      	ldr	r0, [pc, #32]	; (8003620 <vTask1_handler+0x2c>)
 8003600:	f7fc feec 	bl	80003dc <GPIO_ReadOutputDataBit>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	4906      	ldr	r1, [pc, #24]	; (8003624 <vTask1_handler+0x30>)
 800360a:	4807      	ldr	r0, [pc, #28]	; (8003628 <vTask1_handler+0x34>)
 800360c:	f000 fabc 	bl	8003b88 <siprintf>
		printmsg(usr_msg);
 8003610:	4805      	ldr	r0, [pc, #20]	; (8003628 <vTask1_handler+0x34>)
 8003612:	f000 f823 	bl	800365c <printmsg>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8003616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800361a:	f7fd fbb1 	bl	8000d80 <vTaskDelay>
		sprintf(usr_msg,"Status of the LED is: %d\r\n", GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0));
 800361e:	e7ed      	b.n	80035fc <vTask1_handler+0x8>
 8003620:	40020400 	.word	0x40020400
 8003624:	080044ac 	.word	0x080044ac
 8003628:	200173a4 	.word	0x200173a4

0800362c <vTask2_handler>:
	}
}

void vTask2_handler(void *params)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
 8003634:	2101      	movs	r1, #1
 8003636:	4804      	ldr	r0, [pc, #16]	; (8003648 <vTask2_handler+0x1c>)
 8003638:	f7fc feea 	bl	8000410 <GPIO_ToggleBits>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800363c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003640:	f7fd fb9e 	bl	8000d80 <vTaskDelay>
		GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
 8003644:	e7f6      	b.n	8003634 <vTask2_handler+0x8>
 8003646:	bf00      	nop
 8003648:	40020400 	.word	0x40020400

0800364c <prvSetupHardware>:
	}
}

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
	//Setup led and button
	prvSetupGpio();
 8003650:	f000 f87a 	bl	8003748 <prvSetupGpio>

	//Setup UART3
	prvSetupUart();
 8003654:	f000 f82a 	bl	80036ac <prvSetupUart>

}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}

0800365c <printmsg>:

void printmsg(char *msg)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++){
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e013      	b.n	8003692 <printmsg+0x36>
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != SET);
 800366a:	bf00      	nop
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	480e      	ldr	r0, [pc, #56]	; (80036a8 <printmsg+0x4c>)
 8003670:	f7fd f956 	bl	8000920 <USART_GetFlagStatus>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d1f8      	bne.n	800366c <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	4808      	ldr	r0, [pc, #32]	; (80036a8 <printmsg+0x4c>)
 8003688:	f7fd f938 	bl	80008fc <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++){
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3301      	adds	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fc fdbc 	bl	8000210 <strlen>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4293      	cmp	r3, r2
 800369e:	d3e4      	bcc.n	800366a <printmsg+0xe>
	}

}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40004800 	.word	0x40004800

080036ac <prvSetupUart>:

static void prvSetupUart(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80036b2:	2101      	movs	r1, #1
 80036b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80036b8:	f7fd f806 	bl	80006c8 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80036bc:	2101      	movs	r1, #1
 80036be:	2008      	movs	r0, #8
 80036c0:	f7fc ffe2 	bl	8000688 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	2208      	movs	r2, #8
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa53 	bl	8003b78 <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80036d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036d6:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 80036d8:	2302      	movs	r3, #2
 80036da:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4619      	mov	r1, r3
 80036e6:	4816      	ldr	r0, [pc, #88]	; (8003740 <prvSetupUart+0x94>)
 80036e8:	f7fc fdea 	bl	80002c0 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 80036ec:	2207      	movs	r2, #7
 80036ee:	2108      	movs	r1, #8
 80036f0:	4813      	ldr	r0, [pc, #76]	; (8003740 <prvSetupUart+0x94>)
 80036f2:	f7fc fe9f 	bl	8000434 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 80036f6:	2207      	movs	r2, #7
 80036f8:	2109      	movs	r1, #9
 80036fa:	4811      	ldr	r0, [pc, #68]	; (8003740 <prvSetupUart+0x94>)
 80036fc:	f7fc fe9a 	bl	8000434 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 8003700:	463b      	mov	r3, r7
 8003702:	2210      	movs	r2, #16
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fa36 	bl	8003b78 <memset>

	uart3_init.USART_BaudRate = 115200;
 800370c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003710:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003712:	2300      	movs	r3, #0
 8003714:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003716:	230c      	movs	r3, #12
 8003718:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 800371a:	2300      	movs	r3, #0
 800371c:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 800371e:	2300      	movs	r3, #0
 8003720:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 8003722:	2300      	movs	r3, #0
 8003724:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 8003726:	463b      	mov	r3, r7
 8003728:	4619      	mov	r1, r3
 800372a:	4806      	ldr	r0, [pc, #24]	; (8003744 <prvSetupUart+0x98>)
 800372c:	f7fd f80c 	bl	8000748 <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 8003730:	2101      	movs	r1, #1
 8003732:	4804      	ldr	r0, [pc, #16]	; (8003744 <prvSetupUart+0x98>)
 8003734:	f7fd f8c2 	bl	80008bc <USART_Cmd>

}
 8003738:	bf00      	nop
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40020c00 	.word	0x40020c00
 8003744:	40004800 	.word	0x40004800

08003748 <prvSetupGpio>:

void prvSetupGpio(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800374e:	2101      	movs	r1, #1
 8003750:	2002      	movs	r0, #2
 8003752:	f7fc ff99 	bl	8000688 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003756:	2101      	movs	r1, #1
 8003758:	2004      	movs	r0, #4
 800375a:	f7fc ff95 	bl	8000688 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800375e:	2101      	movs	r1, #1
 8003760:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003764:	f7fc ffd0 	bl	8000708 <RCC_APB2PeriphClockCmd>

	led_init.GPIO_Pin = GPIO_Pin_0;
 8003768:	2301      	movs	r3, #1
 800376a:	60bb      	str	r3, [r7, #8]
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 800376c:	2301      	movs	r3, #1
 800376e:	733b      	strb	r3, [r7, #12]
	led_init.GPIO_OType = GPIO_OType_PP;
 8003770:	2300      	movs	r3, #0
 8003772:	73bb      	strb	r3, [r7, #14]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8003778:	2300      	movs	r3, #0
 800377a:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &led_init);
 800377c:	f107 0308 	add.w	r3, r7, #8
 8003780:	4619      	mov	r1, r3
 8003782:	480a      	ldr	r0, [pc, #40]	; (80037ac <prvSetupGpio+0x64>)
 8003784:	f7fc fd9c 	bl	80002c0 <GPIO_Init>

	button_init.GPIO_Pin = GPIO_Pin_13;
 8003788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800378c:	603b      	str	r3, [r7, #0]
	button_init.GPIO_Mode = GPIO_Mode_IN;
 800378e:	2300      	movs	r3, #0
 8003790:	713b      	strb	r3, [r7, #4]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	71fb      	strb	r3, [r7, #7]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 8003796:	2300      	movs	r3, #0
 8003798:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOC, &button_init);
 800379a:	463b      	mov	r3, r7
 800379c:	4619      	mov	r1, r3
 800379e:	4804      	ldr	r0, [pc, #16]	; (80037b0 <prvSetupGpio+0x68>)
 80037a0:	f7fc fd8e 	bl	80002c0 <GPIO_Init>

}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40020400 	.word	0x40020400
 80037b0:	40020800 	.word	0x40020800

080037b4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <_sbrk+0x50>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <_sbrk+0x16>
		heap_end = &end;
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <_sbrk+0x50>)
 80037c6:	4a10      	ldr	r2, [pc, #64]	; (8003808 <_sbrk+0x54>)
 80037c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <_sbrk+0x50>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <_sbrk+0x50>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	466a      	mov	r2, sp
 80037da:	4293      	cmp	r3, r2
 80037dc:	d907      	bls.n	80037ee <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80037de:	f000 f987 	bl	8003af0 <__errno>
 80037e2:	4602      	mov	r2, r0
 80037e4:	230c      	movs	r3, #12
 80037e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ec:	e006      	b.n	80037fc <_sbrk+0x48>
	}

	heap_end += incr;
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <_sbrk+0x50>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	4a03      	ldr	r2, [pc, #12]	; (8003804 <_sbrk+0x50>)
 80037f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	200174a0 	.word	0x200174a0
 8003808:	20017558 	.word	0x20017558

0800380c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003810:	4b16      	ldr	r3, [pc, #88]	; (800386c <SystemInit+0x60>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	4a15      	ldr	r2, [pc, #84]	; (800386c <SystemInit+0x60>)
 8003818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800381c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <SystemInit+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a12      	ldr	r2, [pc, #72]	; (8003870 <SystemInit+0x64>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <SystemInit+0x64>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <SystemInit+0x64>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <SystemInit+0x64>)
 8003838:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <SystemInit+0x64>)
 8003844:	4a0b      	ldr	r2, [pc, #44]	; (8003874 <SystemInit+0x68>)
 8003846:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <SystemInit+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a08      	ldr	r2, [pc, #32]	; (8003870 <SystemInit+0x64>)
 800384e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <SystemInit+0x64>)
 8003856:	2200      	movs	r2, #0
 8003858:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800385a:	f000 f889 	bl	8003970 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <SystemInit+0x60>)
 8003860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003864:	609a      	str	r2, [r3, #8]
#endif
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	e000ed00 	.word	0xe000ed00
 8003870:	40023800 	.word	0x40023800
 8003874:	24003010 	.word	0x24003010

08003878 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	2302      	movs	r3, #2
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	2302      	movs	r3, #2
 8003890:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <SystemCoreClockUpdate+0xe4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d007      	beq.n	80038b2 <SystemCoreClockUpdate+0x3a>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d009      	beq.n	80038ba <SystemCoreClockUpdate+0x42>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d13d      	bne.n	8003926 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <SystemCoreClockUpdate+0xe8>)
 80038ac:	4a2d      	ldr	r2, [pc, #180]	; (8003964 <SystemCoreClockUpdate+0xec>)
 80038ae:	601a      	str	r2, [r3, #0]
      break;
 80038b0:	e03d      	b.n	800392e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <SystemCoreClockUpdate+0xe8>)
 80038b4:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <SystemCoreClockUpdate+0xf0>)
 80038b6:	601a      	str	r2, [r3, #0]
      break;
 80038b8:	e039      	b.n	800392e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80038ba:	4b28      	ldr	r3, [pc, #160]	; (800395c <SystemCoreClockUpdate+0xe4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0d9b      	lsrs	r3, r3, #22
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c6:	4b25      	ldr	r3, [pc, #148]	; (800395c <SystemCoreClockUpdate+0xe4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ce:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80038d6:	4a24      	ldr	r2, [pc, #144]	; (8003968 <SystemCoreClockUpdate+0xf0>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	4a1f      	ldr	r2, [pc, #124]	; (800395c <SystemCoreClockUpdate+0xe4>)
 80038e0:	6852      	ldr	r2, [r2, #4]
 80038e2:	0992      	lsrs	r2, r2, #6
 80038e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e00b      	b.n	8003908 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80038f0:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <SystemCoreClockUpdate+0xec>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	4a18      	ldr	r2, [pc, #96]	; (800395c <SystemCoreClockUpdate+0xe4>)
 80038fa:	6852      	ldr	r2, [r2, #4]
 80038fc:	0992      	lsrs	r2, r2, #6
 80038fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <SystemCoreClockUpdate+0xe4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	3301      	adds	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <SystemCoreClockUpdate+0xe8>)
 8003922:	6013      	str	r3, [r2, #0]
      break;
 8003924:	e003      	b.n	800392e <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003926:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <SystemCoreClockUpdate+0xe8>)
 8003928:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <SystemCoreClockUpdate+0xec>)
 800392a:	601a      	str	r2, [r3, #0]
      break;
 800392c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <SystemCoreClockUpdate+0xe4>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	4a0c      	ldr	r2, [pc, #48]	; (800396c <SystemCoreClockUpdate+0xf4>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <SystemCoreClockUpdate+0xe8>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a05      	ldr	r2, [pc, #20]	; (8003960 <SystemCoreClockUpdate+0xe8>)
 800394c:	6013      	str	r3, [r2, #0]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	20000014 	.word	0x20000014
 8003964:	00f42400 	.word	0x00f42400
 8003968:	017d7840 	.word	0x017d7840
 800396c:	20000018 	.word	0x20000018

08003970 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	2300      	movs	r3, #0
 800397c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <SetSysClock+0x11c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a42      	ldr	r2, [pc, #264]	; (8003a8c <SetSysClock+0x11c>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800398a:	4b40      	ldr	r3, [pc, #256]	; (8003a8c <SetSysClock+0x11c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3301      	adds	r3, #1
 8003998:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <SetSysClock+0x38>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80039a6:	d1f0      	bne.n	800398a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80039a8:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <SetSysClock+0x11c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80039b4:	2301      	movs	r3, #1
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	e001      	b.n	80039be <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80039ba:	2300      	movs	r3, #0
 80039bc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d15c      	bne.n	8003a7e <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039c4:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <SetSysClock+0x11c>)
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	4a30      	ldr	r2, [pc, #192]	; (8003a8c <SetSysClock+0x11c>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80039d0:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <SetSysClock+0x120>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <SetSysClock+0x120>)
 80039d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039da:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80039dc:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <SetSysClock+0x11c>)
 80039de:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <SetSysClock+0x11c>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80039e4:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <SetSysClock+0x11c>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a28      	ldr	r2, [pc, #160]	; (8003a8c <SetSysClock+0x11c>)
 80039ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ee:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80039f0:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <SetSysClock+0x11c>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <SetSysClock+0x11c>)
 80039f6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80039fa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <SetSysClock+0x11c>)
 80039fe:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <SetSysClock+0x124>)
 8003a00:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <SetSysClock+0x11c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <SetSysClock+0x11c>)
 8003a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003a0e:	bf00      	nop
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <SetSysClock+0x11c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f9      	beq.n	8003a10 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <SetSysClock+0x120>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <SetSysClock+0x120>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003a28:	bf00      	nop
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <SetSysClock+0x120>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f9      	beq.n	8003a2a <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <SetSysClock+0x120>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <SetSysClock+0x120>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003a42:	bf00      	nop
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <SetSysClock+0x120>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f9      	beq.n	8003a44 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <SetSysClock+0x128>)
 8003a52:	f240 7205 	movw	r2, #1797	; 0x705
 8003a56:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <SetSysClock+0x11c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <SetSysClock+0x11c>)
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <SetSysClock+0x11c>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <SetSysClock+0x11c>)
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003a70:	bf00      	nop
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <SetSysClock+0x11c>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d1f9      	bne.n	8003a72 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40007000 	.word	0x40007000
 8003a94:	07405a19 	.word	0x07405a19
 8003a98:	40023c00 	.word	0x40023c00

08003a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a9c:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aa0:	480d      	ldr	r0, [pc, #52]	; (8003ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003aa2:	490e      	ldr	r1, [pc, #56]	; (8003adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003aa4:	4a0e      	ldr	r2, [pc, #56]	; (8003ae0 <LoopForever+0xe>)
  movs r3, #0
 8003aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aa8:	e002      	b.n	8003ab0 <LoopCopyDataInit>

08003aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aae:	3304      	adds	r3, #4

08003ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ab4:	d3f9      	bcc.n	8003aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ab6:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ab8:	4c0b      	ldr	r4, [pc, #44]	; (8003ae8 <LoopForever+0x16>)
  movs r3, #0
 8003aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003abc:	e001      	b.n	8003ac2 <LoopFillZerobss>

08003abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac0:	3204      	adds	r2, #4

08003ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ac4:	d3fb      	bcc.n	8003abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ac6:	f7ff fea1 	bl	800380c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003aca:	f000 f817 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ace:	f7ff fd41 	bl	8003554 <main>

08003ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ad2:	e7fe      	b.n	8003ad2 <LoopForever>
  ldr   r0, =_estack
 8003ad4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003adc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003ae0:	08004518 	.word	0x08004518
  ldr r2, =_sbss
 8003ae4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003ae8:	20017558 	.word	0x20017558

08003aec <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aec:	e7fe      	b.n	8003aec <ADC_IRQHandler>
	...

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000028 	.word	0x20000028

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4e0d      	ldr	r6, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1ba4      	subs	r4, r4, r6
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2500      	movs	r5, #0
 8003b08:	42a5      	cmp	r5, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4e0b      	ldr	r6, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 fc36 	bl	8004380 <_init>
 8003b14:	1ba4      	subs	r4, r4, r6
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2500      	movs	r5, #0
 8003b1a:	42a5      	cmp	r5, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b24:	4798      	blx	r3
 8003b26:	3501      	adds	r5, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b2e:	4798      	blx	r3
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08004510 	.word	0x08004510
 8003b38:	08004510 	.word	0x08004510
 8003b3c:	08004510 	.word	0x08004510
 8003b40:	08004514 	.word	0x08004514

08003b44 <memcmp>:
 8003b44:	b530      	push	{r4, r5, lr}
 8003b46:	2400      	movs	r4, #0
 8003b48:	42a2      	cmp	r2, r4
 8003b4a:	d101      	bne.n	8003b50 <memcmp+0xc>
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e007      	b.n	8003b60 <memcmp+0x1c>
 8003b50:	5d03      	ldrb	r3, [r0, r4]
 8003b52:	3401      	adds	r4, #1
 8003b54:	190d      	adds	r5, r1, r4
 8003b56:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003b5a:	42ab      	cmp	r3, r5
 8003b5c:	d0f4      	beq.n	8003b48 <memcmp+0x4>
 8003b5e:	1b58      	subs	r0, r3, r5
 8003b60:	bd30      	pop	{r4, r5, pc}

08003b62 <memcpy>:
 8003b62:	b510      	push	{r4, lr}
 8003b64:	1e43      	subs	r3, r0, #1
 8003b66:	440a      	add	r2, r1
 8003b68:	4291      	cmp	r1, r2
 8003b6a:	d100      	bne.n	8003b6e <memcpy+0xc>
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b76:	e7f7      	b.n	8003b68 <memcpy+0x6>

08003b78 <memset>:
 8003b78:	4402      	add	r2, r0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d100      	bne.n	8003b82 <memset+0xa>
 8003b80:	4770      	bx	lr
 8003b82:	f803 1b01 	strb.w	r1, [r3], #1
 8003b86:	e7f9      	b.n	8003b7c <memset+0x4>

08003b88 <siprintf>:
 8003b88:	b40e      	push	{r1, r2, r3}
 8003b8a:	b500      	push	{lr}
 8003b8c:	b09c      	sub	sp, #112	; 0x70
 8003b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b90:	9002      	str	r0, [sp, #8]
 8003b92:	9006      	str	r0, [sp, #24]
 8003b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b98:	4809      	ldr	r0, [pc, #36]	; (8003bc0 <siprintf+0x38>)
 8003b9a:	9107      	str	r1, [sp, #28]
 8003b9c:	9104      	str	r1, [sp, #16]
 8003b9e:	4909      	ldr	r1, [pc, #36]	; (8003bc4 <siprintf+0x3c>)
 8003ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ba4:	9105      	str	r1, [sp, #20]
 8003ba6:	6800      	ldr	r0, [r0, #0]
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	a902      	add	r1, sp, #8
 8003bac:	f000 f866 	bl	8003c7c <_svfiprintf_r>
 8003bb0:	9b02      	ldr	r3, [sp, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	b01c      	add	sp, #112	; 0x70
 8003bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bbc:	b003      	add	sp, #12
 8003bbe:	4770      	bx	lr
 8003bc0:	20000028 	.word	0x20000028
 8003bc4:	ffff0208 	.word	0xffff0208

08003bc8 <__ssputs_r>:
 8003bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bcc:	688e      	ldr	r6, [r1, #8]
 8003bce:	429e      	cmp	r6, r3
 8003bd0:	4682      	mov	sl, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	4690      	mov	r8, r2
 8003bd6:	4699      	mov	r9, r3
 8003bd8:	d837      	bhi.n	8003c4a <__ssputs_r+0x82>
 8003bda:	898a      	ldrh	r2, [r1, #12]
 8003bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003be0:	d031      	beq.n	8003c46 <__ssputs_r+0x7e>
 8003be2:	6825      	ldr	r5, [r4, #0]
 8003be4:	6909      	ldr	r1, [r1, #16]
 8003be6:	1a6f      	subs	r7, r5, r1
 8003be8:	6965      	ldr	r5, [r4, #20]
 8003bea:	2302      	movs	r3, #2
 8003bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bf0:	fb95 f5f3 	sdiv	r5, r5, r3
 8003bf4:	f109 0301 	add.w	r3, r9, #1
 8003bf8:	443b      	add	r3, r7
 8003bfa:	429d      	cmp	r5, r3
 8003bfc:	bf38      	it	cc
 8003bfe:	461d      	movcc	r5, r3
 8003c00:	0553      	lsls	r3, r2, #21
 8003c02:	d530      	bpl.n	8003c66 <__ssputs_r+0x9e>
 8003c04:	4629      	mov	r1, r5
 8003c06:	f000 fb21 	bl	800424c <_malloc_r>
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	b950      	cbnz	r0, 8003c24 <__ssputs_r+0x5c>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	f8ca 3000 	str.w	r3, [sl]
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c1a:	81a3      	strh	r3, [r4, #12]
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c24:	463a      	mov	r2, r7
 8003c26:	6921      	ldr	r1, [r4, #16]
 8003c28:	f7ff ff9b 	bl	8003b62 <memcpy>
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	6126      	str	r6, [r4, #16]
 8003c3a:	6165      	str	r5, [r4, #20]
 8003c3c:	443e      	add	r6, r7
 8003c3e:	1bed      	subs	r5, r5, r7
 8003c40:	6026      	str	r6, [r4, #0]
 8003c42:	60a5      	str	r5, [r4, #8]
 8003c44:	464e      	mov	r6, r9
 8003c46:	454e      	cmp	r6, r9
 8003c48:	d900      	bls.n	8003c4c <__ssputs_r+0x84>
 8003c4a:	464e      	mov	r6, r9
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	4641      	mov	r1, r8
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	f000 fa93 	bl	800417c <memmove>
 8003c56:	68a3      	ldr	r3, [r4, #8]
 8003c58:	1b9b      	subs	r3, r3, r6
 8003c5a:	60a3      	str	r3, [r4, #8]
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	441e      	add	r6, r3
 8003c60:	6026      	str	r6, [r4, #0]
 8003c62:	2000      	movs	r0, #0
 8003c64:	e7dc      	b.n	8003c20 <__ssputs_r+0x58>
 8003c66:	462a      	mov	r2, r5
 8003c68:	f000 fb4a 	bl	8004300 <_realloc_r>
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d1e2      	bne.n	8003c38 <__ssputs_r+0x70>
 8003c72:	6921      	ldr	r1, [r4, #16]
 8003c74:	4650      	mov	r0, sl
 8003c76:	f000 fa9b 	bl	80041b0 <_free_r>
 8003c7a:	e7c8      	b.n	8003c0e <__ssputs_r+0x46>

08003c7c <_svfiprintf_r>:
 8003c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c80:	461d      	mov	r5, r3
 8003c82:	898b      	ldrh	r3, [r1, #12]
 8003c84:	061f      	lsls	r7, r3, #24
 8003c86:	b09d      	sub	sp, #116	; 0x74
 8003c88:	4680      	mov	r8, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	d50f      	bpl.n	8003cb0 <_svfiprintf_r+0x34>
 8003c90:	690b      	ldr	r3, [r1, #16]
 8003c92:	b96b      	cbnz	r3, 8003cb0 <_svfiprintf_r+0x34>
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	f000 fad9 	bl	800424c <_malloc_r>
 8003c9a:	6020      	str	r0, [r4, #0]
 8003c9c:	6120      	str	r0, [r4, #16]
 8003c9e:	b928      	cbnz	r0, 8003cac <_svfiprintf_r+0x30>
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	f8c8 3000 	str.w	r3, [r8]
 8003ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8003caa:	e0c8      	b.n	8003e3e <_svfiprintf_r+0x1c2>
 8003cac:	2340      	movs	r3, #64	; 0x40
 8003cae:	6163      	str	r3, [r4, #20]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cba:	2330      	movs	r3, #48	; 0x30
 8003cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cc0:	9503      	str	r5, [sp, #12]
 8003cc2:	f04f 0b01 	mov.w	fp, #1
 8003cc6:	4637      	mov	r7, r6
 8003cc8:	463d      	mov	r5, r7
 8003cca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cce:	b10b      	cbz	r3, 8003cd4 <_svfiprintf_r+0x58>
 8003cd0:	2b25      	cmp	r3, #37	; 0x25
 8003cd2:	d13e      	bne.n	8003d52 <_svfiprintf_r+0xd6>
 8003cd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8003cd8:	d00b      	beq.n	8003cf2 <_svfiprintf_r+0x76>
 8003cda:	4653      	mov	r3, sl
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	f7ff ff71 	bl	8003bc8 <__ssputs_r>
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	f000 80a4 	beq.w	8003e34 <_svfiprintf_r+0x1b8>
 8003cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cee:	4453      	add	r3, sl
 8003cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf2:	783b      	ldrb	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 809d 	beq.w	8003e34 <_svfiprintf_r+0x1b8>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	9307      	str	r3, [sp, #28]
 8003d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d0e:	462f      	mov	r7, r5
 8003d10:	2205      	movs	r2, #5
 8003d12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d16:	4850      	ldr	r0, [pc, #320]	; (8003e58 <_svfiprintf_r+0x1dc>)
 8003d18:	f7fc fa82 	bl	8000220 <memchr>
 8003d1c:	9b04      	ldr	r3, [sp, #16]
 8003d1e:	b9d0      	cbnz	r0, 8003d56 <_svfiprintf_r+0xda>
 8003d20:	06d9      	lsls	r1, r3, #27
 8003d22:	bf44      	itt	mi
 8003d24:	2220      	movmi	r2, #32
 8003d26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d2a:	071a      	lsls	r2, r3, #28
 8003d2c:	bf44      	itt	mi
 8003d2e:	222b      	movmi	r2, #43	; 0x2b
 8003d30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d34:	782a      	ldrb	r2, [r5, #0]
 8003d36:	2a2a      	cmp	r2, #42	; 0x2a
 8003d38:	d015      	beq.n	8003d66 <_svfiprintf_r+0xea>
 8003d3a:	9a07      	ldr	r2, [sp, #28]
 8003d3c:	462f      	mov	r7, r5
 8003d3e:	2000      	movs	r0, #0
 8003d40:	250a      	movs	r5, #10
 8003d42:	4639      	mov	r1, r7
 8003d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d48:	3b30      	subs	r3, #48	; 0x30
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	d94d      	bls.n	8003dea <_svfiprintf_r+0x16e>
 8003d4e:	b1b8      	cbz	r0, 8003d80 <_svfiprintf_r+0x104>
 8003d50:	e00f      	b.n	8003d72 <_svfiprintf_r+0xf6>
 8003d52:	462f      	mov	r7, r5
 8003d54:	e7b8      	b.n	8003cc8 <_svfiprintf_r+0x4c>
 8003d56:	4a40      	ldr	r2, [pc, #256]	; (8003e58 <_svfiprintf_r+0x1dc>)
 8003d58:	1a80      	subs	r0, r0, r2
 8003d5a:	fa0b f000 	lsl.w	r0, fp, r0
 8003d5e:	4318      	orrs	r0, r3
 8003d60:	9004      	str	r0, [sp, #16]
 8003d62:	463d      	mov	r5, r7
 8003d64:	e7d3      	b.n	8003d0e <_svfiprintf_r+0x92>
 8003d66:	9a03      	ldr	r2, [sp, #12]
 8003d68:	1d11      	adds	r1, r2, #4
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	9103      	str	r1, [sp, #12]
 8003d6e:	2a00      	cmp	r2, #0
 8003d70:	db01      	blt.n	8003d76 <_svfiprintf_r+0xfa>
 8003d72:	9207      	str	r2, [sp, #28]
 8003d74:	e004      	b.n	8003d80 <_svfiprintf_r+0x104>
 8003d76:	4252      	negs	r2, r2
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	9207      	str	r2, [sp, #28]
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	783b      	ldrb	r3, [r7, #0]
 8003d82:	2b2e      	cmp	r3, #46	; 0x2e
 8003d84:	d10c      	bne.n	8003da0 <_svfiprintf_r+0x124>
 8003d86:	787b      	ldrb	r3, [r7, #1]
 8003d88:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8a:	d133      	bne.n	8003df4 <_svfiprintf_r+0x178>
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	1d1a      	adds	r2, r3, #4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	9203      	str	r2, [sp, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bfb8      	it	lt
 8003d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d9c:	3702      	adds	r7, #2
 8003d9e:	9305      	str	r3, [sp, #20]
 8003da0:	4d2e      	ldr	r5, [pc, #184]	; (8003e5c <_svfiprintf_r+0x1e0>)
 8003da2:	7839      	ldrb	r1, [r7, #0]
 8003da4:	2203      	movs	r2, #3
 8003da6:	4628      	mov	r0, r5
 8003da8:	f7fc fa3a 	bl	8000220 <memchr>
 8003dac:	b138      	cbz	r0, 8003dbe <_svfiprintf_r+0x142>
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	1b40      	subs	r0, r0, r5
 8003db2:	fa03 f000 	lsl.w	r0, r3, r0
 8003db6:	9b04      	ldr	r3, [sp, #16]
 8003db8:	4303      	orrs	r3, r0
 8003dba:	3701      	adds	r7, #1
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	7839      	ldrb	r1, [r7, #0]
 8003dc0:	4827      	ldr	r0, [pc, #156]	; (8003e60 <_svfiprintf_r+0x1e4>)
 8003dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dc6:	2206      	movs	r2, #6
 8003dc8:	1c7e      	adds	r6, r7, #1
 8003dca:	f7fc fa29 	bl	8000220 <memchr>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d038      	beq.n	8003e44 <_svfiprintf_r+0x1c8>
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <_svfiprintf_r+0x1e8>)
 8003dd4:	bb13      	cbnz	r3, 8003e1c <_svfiprintf_r+0x1a0>
 8003dd6:	9b03      	ldr	r3, [sp, #12]
 8003dd8:	3307      	adds	r3, #7
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	3308      	adds	r3, #8
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de4:	444b      	add	r3, r9
 8003de6:	9309      	str	r3, [sp, #36]	; 0x24
 8003de8:	e76d      	b.n	8003cc6 <_svfiprintf_r+0x4a>
 8003dea:	fb05 3202 	mla	r2, r5, r2, r3
 8003dee:	2001      	movs	r0, #1
 8003df0:	460f      	mov	r7, r1
 8003df2:	e7a6      	b.n	8003d42 <_svfiprintf_r+0xc6>
 8003df4:	2300      	movs	r3, #0
 8003df6:	3701      	adds	r7, #1
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	250a      	movs	r5, #10
 8003dfe:	4638      	mov	r0, r7
 8003e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e04:	3a30      	subs	r2, #48	; 0x30
 8003e06:	2a09      	cmp	r2, #9
 8003e08:	d903      	bls.n	8003e12 <_svfiprintf_r+0x196>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0c8      	beq.n	8003da0 <_svfiprintf_r+0x124>
 8003e0e:	9105      	str	r1, [sp, #20]
 8003e10:	e7c6      	b.n	8003da0 <_svfiprintf_r+0x124>
 8003e12:	fb05 2101 	mla	r1, r5, r1, r2
 8003e16:	2301      	movs	r3, #1
 8003e18:	4607      	mov	r7, r0
 8003e1a:	e7f0      	b.n	8003dfe <_svfiprintf_r+0x182>
 8003e1c:	ab03      	add	r3, sp, #12
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4622      	mov	r2, r4
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <_svfiprintf_r+0x1ec>)
 8003e24:	a904      	add	r1, sp, #16
 8003e26:	4640      	mov	r0, r8
 8003e28:	f3af 8000 	nop.w
 8003e2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e30:	4681      	mov	r9, r0
 8003e32:	d1d6      	bne.n	8003de2 <_svfiprintf_r+0x166>
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	065b      	lsls	r3, r3, #25
 8003e38:	f53f af35 	bmi.w	8003ca6 <_svfiprintf_r+0x2a>
 8003e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e3e:	b01d      	add	sp, #116	; 0x74
 8003e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e44:	ab03      	add	r3, sp, #12
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4622      	mov	r2, r4
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <_svfiprintf_r+0x1ec>)
 8003e4c:	a904      	add	r1, sp, #16
 8003e4e:	4640      	mov	r0, r8
 8003e50:	f000 f882 	bl	8003f58 <_printf_i>
 8003e54:	e7ea      	b.n	8003e2c <_svfiprintf_r+0x1b0>
 8003e56:	bf00      	nop
 8003e58:	080044da 	.word	0x080044da
 8003e5c:	080044e0 	.word	0x080044e0
 8003e60:	080044e4 	.word	0x080044e4
 8003e64:	00000000 	.word	0x00000000
 8003e68:	08003bc9 	.word	0x08003bc9

08003e6c <_printf_common>:
 8003e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e70:	4691      	mov	r9, r2
 8003e72:	461f      	mov	r7, r3
 8003e74:	688a      	ldr	r2, [r1, #8]
 8003e76:	690b      	ldr	r3, [r1, #16]
 8003e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	bfb8      	it	lt
 8003e80:	4613      	movlt	r3, r2
 8003e82:	f8c9 3000 	str.w	r3, [r9]
 8003e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	b112      	cbz	r2, 8003e96 <_printf_common+0x2a>
 8003e90:	3301      	adds	r3, #1
 8003e92:	f8c9 3000 	str.w	r3, [r9]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	0699      	lsls	r1, r3, #26
 8003e9a:	bf42      	ittt	mi
 8003e9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ea0:	3302      	addmi	r3, #2
 8003ea2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ea6:	6825      	ldr	r5, [r4, #0]
 8003ea8:	f015 0506 	ands.w	r5, r5, #6
 8003eac:	d107      	bne.n	8003ebe <_printf_common+0x52>
 8003eae:	f104 0a19 	add.w	sl, r4, #25
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	42ab      	cmp	r3, r5
 8003ebc:	dc28      	bgt.n	8003f10 <_printf_common+0xa4>
 8003ebe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ec2:	6822      	ldr	r2, [r4, #0]
 8003ec4:	3300      	adds	r3, #0
 8003ec6:	bf18      	it	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	0692      	lsls	r2, r2, #26
 8003ecc:	d42d      	bmi.n	8003f2a <_printf_common+0xbe>
 8003ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ed2:	4639      	mov	r1, r7
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	47c0      	blx	r8
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d020      	beq.n	8003f1e <_printf_common+0xb2>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	68e5      	ldr	r5, [r4, #12]
 8003ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ee4:	f003 0306 	and.w	r3, r3, #6
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	bf08      	it	eq
 8003eec:	1aad      	subeq	r5, r5, r2
 8003eee:	68a3      	ldr	r3, [r4, #8]
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	bf0c      	ite	eq
 8003ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ef8:	2500      	movne	r5, #0
 8003efa:	4293      	cmp	r3, r2
 8003efc:	bfc4      	itt	gt
 8003efe:	1a9b      	subgt	r3, r3, r2
 8003f00:	18ed      	addgt	r5, r5, r3
 8003f02:	f04f 0900 	mov.w	r9, #0
 8003f06:	341a      	adds	r4, #26
 8003f08:	454d      	cmp	r5, r9
 8003f0a:	d11a      	bne.n	8003f42 <_printf_common+0xd6>
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	e008      	b.n	8003f22 <_printf_common+0xb6>
 8003f10:	2301      	movs	r3, #1
 8003f12:	4652      	mov	r2, sl
 8003f14:	4639      	mov	r1, r7
 8003f16:	4630      	mov	r0, r6
 8003f18:	47c0      	blx	r8
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d103      	bne.n	8003f26 <_printf_common+0xba>
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f26:	3501      	adds	r5, #1
 8003f28:	e7c3      	b.n	8003eb2 <_printf_common+0x46>
 8003f2a:	18e1      	adds	r1, r4, r3
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	2030      	movs	r0, #48	; 0x30
 8003f30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f34:	4422      	add	r2, r4
 8003f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f3e:	3302      	adds	r3, #2
 8003f40:	e7c5      	b.n	8003ece <_printf_common+0x62>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4622      	mov	r2, r4
 8003f46:	4639      	mov	r1, r7
 8003f48:	4630      	mov	r0, r6
 8003f4a:	47c0      	blx	r8
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d0e6      	beq.n	8003f1e <_printf_common+0xb2>
 8003f50:	f109 0901 	add.w	r9, r9, #1
 8003f54:	e7d8      	b.n	8003f08 <_printf_common+0x9c>
	...

08003f58 <_printf_i>:
 8003f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f60:	460c      	mov	r4, r1
 8003f62:	7e09      	ldrb	r1, [r1, #24]
 8003f64:	b085      	sub	sp, #20
 8003f66:	296e      	cmp	r1, #110	; 0x6e
 8003f68:	4617      	mov	r7, r2
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	4698      	mov	r8, r3
 8003f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f70:	f000 80b3 	beq.w	80040da <_printf_i+0x182>
 8003f74:	d822      	bhi.n	8003fbc <_printf_i+0x64>
 8003f76:	2963      	cmp	r1, #99	; 0x63
 8003f78:	d036      	beq.n	8003fe8 <_printf_i+0x90>
 8003f7a:	d80a      	bhi.n	8003f92 <_printf_i+0x3a>
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	f000 80b9 	beq.w	80040f4 <_printf_i+0x19c>
 8003f82:	2958      	cmp	r1, #88	; 0x58
 8003f84:	f000 8083 	beq.w	800408e <_printf_i+0x136>
 8003f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f90:	e032      	b.n	8003ff8 <_printf_i+0xa0>
 8003f92:	2964      	cmp	r1, #100	; 0x64
 8003f94:	d001      	beq.n	8003f9a <_printf_i+0x42>
 8003f96:	2969      	cmp	r1, #105	; 0x69
 8003f98:	d1f6      	bne.n	8003f88 <_printf_i+0x30>
 8003f9a:	6820      	ldr	r0, [r4, #0]
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	0605      	lsls	r5, r0, #24
 8003fa0:	f103 0104 	add.w	r1, r3, #4
 8003fa4:	d52a      	bpl.n	8003ffc <_printf_i+0xa4>
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6011      	str	r1, [r2, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da03      	bge.n	8003fb6 <_printf_i+0x5e>
 8003fae:	222d      	movs	r2, #45	; 0x2d
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fb6:	486f      	ldr	r0, [pc, #444]	; (8004174 <_printf_i+0x21c>)
 8003fb8:	220a      	movs	r2, #10
 8003fba:	e039      	b.n	8004030 <_printf_i+0xd8>
 8003fbc:	2973      	cmp	r1, #115	; 0x73
 8003fbe:	f000 809d 	beq.w	80040fc <_printf_i+0x1a4>
 8003fc2:	d808      	bhi.n	8003fd6 <_printf_i+0x7e>
 8003fc4:	296f      	cmp	r1, #111	; 0x6f
 8003fc6:	d020      	beq.n	800400a <_printf_i+0xb2>
 8003fc8:	2970      	cmp	r1, #112	; 0x70
 8003fca:	d1dd      	bne.n	8003f88 <_printf_i+0x30>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	f043 0320 	orr.w	r3, r3, #32
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	e003      	b.n	8003fde <_printf_i+0x86>
 8003fd6:	2975      	cmp	r1, #117	; 0x75
 8003fd8:	d017      	beq.n	800400a <_printf_i+0xb2>
 8003fda:	2978      	cmp	r1, #120	; 0x78
 8003fdc:	d1d4      	bne.n	8003f88 <_printf_i+0x30>
 8003fde:	2378      	movs	r3, #120	; 0x78
 8003fe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fe4:	4864      	ldr	r0, [pc, #400]	; (8004178 <_printf_i+0x220>)
 8003fe6:	e055      	b.n	8004094 <_printf_i+0x13c>
 8003fe8:	6813      	ldr	r3, [r2, #0]
 8003fea:	1d19      	adds	r1, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6011      	str	r1, [r2, #0]
 8003ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e08c      	b.n	8004116 <_printf_i+0x1be>
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004004:	bf18      	it	ne
 8004006:	b21b      	sxthne	r3, r3
 8004008:	e7cf      	b.n	8003faa <_printf_i+0x52>
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	6825      	ldr	r5, [r4, #0]
 800400e:	1d18      	adds	r0, r3, #4
 8004010:	6010      	str	r0, [r2, #0]
 8004012:	0628      	lsls	r0, r5, #24
 8004014:	d501      	bpl.n	800401a <_printf_i+0xc2>
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	e002      	b.n	8004020 <_printf_i+0xc8>
 800401a:	0668      	lsls	r0, r5, #25
 800401c:	d5fb      	bpl.n	8004016 <_printf_i+0xbe>
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	4854      	ldr	r0, [pc, #336]	; (8004174 <_printf_i+0x21c>)
 8004022:	296f      	cmp	r1, #111	; 0x6f
 8004024:	bf14      	ite	ne
 8004026:	220a      	movne	r2, #10
 8004028:	2208      	moveq	r2, #8
 800402a:	2100      	movs	r1, #0
 800402c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004030:	6865      	ldr	r5, [r4, #4]
 8004032:	60a5      	str	r5, [r4, #8]
 8004034:	2d00      	cmp	r5, #0
 8004036:	f2c0 8095 	blt.w	8004164 <_printf_i+0x20c>
 800403a:	6821      	ldr	r1, [r4, #0]
 800403c:	f021 0104 	bic.w	r1, r1, #4
 8004040:	6021      	str	r1, [r4, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d13d      	bne.n	80040c2 <_printf_i+0x16a>
 8004046:	2d00      	cmp	r5, #0
 8004048:	f040 808e 	bne.w	8004168 <_printf_i+0x210>
 800404c:	4665      	mov	r5, ip
 800404e:	2a08      	cmp	r2, #8
 8004050:	d10b      	bne.n	800406a <_printf_i+0x112>
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	07db      	lsls	r3, r3, #31
 8004056:	d508      	bpl.n	800406a <_printf_i+0x112>
 8004058:	6923      	ldr	r3, [r4, #16]
 800405a:	6862      	ldr	r2, [r4, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	bfde      	ittt	le
 8004060:	2330      	movle	r3, #48	; 0x30
 8004062:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004066:	f105 35ff 	addle.w	r5, r5, #4294967295
 800406a:	ebac 0305 	sub.w	r3, ip, r5
 800406e:	6123      	str	r3, [r4, #16]
 8004070:	f8cd 8000 	str.w	r8, [sp]
 8004074:	463b      	mov	r3, r7
 8004076:	aa03      	add	r2, sp, #12
 8004078:	4621      	mov	r1, r4
 800407a:	4630      	mov	r0, r6
 800407c:	f7ff fef6 	bl	8003e6c <_printf_common>
 8004080:	3001      	adds	r0, #1
 8004082:	d14d      	bne.n	8004120 <_printf_i+0x1c8>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	b005      	add	sp, #20
 800408a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800408e:	4839      	ldr	r0, [pc, #228]	; (8004174 <_printf_i+0x21c>)
 8004090:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	6821      	ldr	r1, [r4, #0]
 8004098:	1d1d      	adds	r5, r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6015      	str	r5, [r2, #0]
 800409e:	060a      	lsls	r2, r1, #24
 80040a0:	d50b      	bpl.n	80040ba <_printf_i+0x162>
 80040a2:	07ca      	lsls	r2, r1, #31
 80040a4:	bf44      	itt	mi
 80040a6:	f041 0120 	orrmi.w	r1, r1, #32
 80040aa:	6021      	strmi	r1, [r4, #0]
 80040ac:	b91b      	cbnz	r3, 80040b6 <_printf_i+0x15e>
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	f022 0220 	bic.w	r2, r2, #32
 80040b4:	6022      	str	r2, [r4, #0]
 80040b6:	2210      	movs	r2, #16
 80040b8:	e7b7      	b.n	800402a <_printf_i+0xd2>
 80040ba:	064d      	lsls	r5, r1, #25
 80040bc:	bf48      	it	mi
 80040be:	b29b      	uxthmi	r3, r3
 80040c0:	e7ef      	b.n	80040a2 <_printf_i+0x14a>
 80040c2:	4665      	mov	r5, ip
 80040c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80040c8:	fb02 3311 	mls	r3, r2, r1, r3
 80040cc:	5cc3      	ldrb	r3, [r0, r3]
 80040ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040d2:	460b      	mov	r3, r1
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d1f5      	bne.n	80040c4 <_printf_i+0x16c>
 80040d8:	e7b9      	b.n	800404e <_printf_i+0xf6>
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	6825      	ldr	r5, [r4, #0]
 80040de:	6961      	ldr	r1, [r4, #20]
 80040e0:	1d18      	adds	r0, r3, #4
 80040e2:	6010      	str	r0, [r2, #0]
 80040e4:	0628      	lsls	r0, r5, #24
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	d501      	bpl.n	80040ee <_printf_i+0x196>
 80040ea:	6019      	str	r1, [r3, #0]
 80040ec:	e002      	b.n	80040f4 <_printf_i+0x19c>
 80040ee:	066a      	lsls	r2, r5, #25
 80040f0:	d5fb      	bpl.n	80040ea <_printf_i+0x192>
 80040f2:	8019      	strh	r1, [r3, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	6123      	str	r3, [r4, #16]
 80040f8:	4665      	mov	r5, ip
 80040fa:	e7b9      	b.n	8004070 <_printf_i+0x118>
 80040fc:	6813      	ldr	r3, [r2, #0]
 80040fe:	1d19      	adds	r1, r3, #4
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	681d      	ldr	r5, [r3, #0]
 8004104:	6862      	ldr	r2, [r4, #4]
 8004106:	2100      	movs	r1, #0
 8004108:	4628      	mov	r0, r5
 800410a:	f7fc f889 	bl	8000220 <memchr>
 800410e:	b108      	cbz	r0, 8004114 <_printf_i+0x1bc>
 8004110:	1b40      	subs	r0, r0, r5
 8004112:	6060      	str	r0, [r4, #4]
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	2300      	movs	r3, #0
 800411a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411e:	e7a7      	b.n	8004070 <_printf_i+0x118>
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	462a      	mov	r2, r5
 8004124:	4639      	mov	r1, r7
 8004126:	4630      	mov	r0, r6
 8004128:	47c0      	blx	r8
 800412a:	3001      	adds	r0, #1
 800412c:	d0aa      	beq.n	8004084 <_printf_i+0x12c>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	079b      	lsls	r3, r3, #30
 8004132:	d413      	bmi.n	800415c <_printf_i+0x204>
 8004134:	68e0      	ldr	r0, [r4, #12]
 8004136:	9b03      	ldr	r3, [sp, #12]
 8004138:	4298      	cmp	r0, r3
 800413a:	bfb8      	it	lt
 800413c:	4618      	movlt	r0, r3
 800413e:	e7a3      	b.n	8004088 <_printf_i+0x130>
 8004140:	2301      	movs	r3, #1
 8004142:	464a      	mov	r2, r9
 8004144:	4639      	mov	r1, r7
 8004146:	4630      	mov	r0, r6
 8004148:	47c0      	blx	r8
 800414a:	3001      	adds	r0, #1
 800414c:	d09a      	beq.n	8004084 <_printf_i+0x12c>
 800414e:	3501      	adds	r5, #1
 8004150:	68e3      	ldr	r3, [r4, #12]
 8004152:	9a03      	ldr	r2, [sp, #12]
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	42ab      	cmp	r3, r5
 8004158:	dcf2      	bgt.n	8004140 <_printf_i+0x1e8>
 800415a:	e7eb      	b.n	8004134 <_printf_i+0x1dc>
 800415c:	2500      	movs	r5, #0
 800415e:	f104 0919 	add.w	r9, r4, #25
 8004162:	e7f5      	b.n	8004150 <_printf_i+0x1f8>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ac      	bne.n	80040c2 <_printf_i+0x16a>
 8004168:	7803      	ldrb	r3, [r0, #0]
 800416a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800416e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004172:	e76c      	b.n	800404e <_printf_i+0xf6>
 8004174:	080044eb 	.word	0x080044eb
 8004178:	080044fc 	.word	0x080044fc

0800417c <memmove>:
 800417c:	4288      	cmp	r0, r1
 800417e:	b510      	push	{r4, lr}
 8004180:	eb01 0302 	add.w	r3, r1, r2
 8004184:	d807      	bhi.n	8004196 <memmove+0x1a>
 8004186:	1e42      	subs	r2, r0, #1
 8004188:	4299      	cmp	r1, r3
 800418a:	d00a      	beq.n	80041a2 <memmove+0x26>
 800418c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004190:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004194:	e7f8      	b.n	8004188 <memmove+0xc>
 8004196:	4283      	cmp	r3, r0
 8004198:	d9f5      	bls.n	8004186 <memmove+0xa>
 800419a:	1881      	adds	r1, r0, r2
 800419c:	1ad2      	subs	r2, r2, r3
 800419e:	42d3      	cmn	r3, r2
 80041a0:	d100      	bne.n	80041a4 <memmove+0x28>
 80041a2:	bd10      	pop	{r4, pc}
 80041a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80041ac:	e7f7      	b.n	800419e <memmove+0x22>
	...

080041b0 <_free_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4605      	mov	r5, r0
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d045      	beq.n	8004244 <_free_r+0x94>
 80041b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041bc:	1f0c      	subs	r4, r1, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfb8      	it	lt
 80041c2:	18e4      	addlt	r4, r4, r3
 80041c4:	f000 f8d2 	bl	800436c <__malloc_lock>
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <_free_r+0x98>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	4610      	mov	r0, r2
 80041ce:	b933      	cbnz	r3, 80041de <_free_r+0x2e>
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	6014      	str	r4, [r2, #0]
 80041d4:	4628      	mov	r0, r5
 80041d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041da:	f000 b8c8 	b.w	800436e <__malloc_unlock>
 80041de:	42a3      	cmp	r3, r4
 80041e0:	d90c      	bls.n	80041fc <_free_r+0x4c>
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	1862      	adds	r2, r4, r1
 80041e6:	4293      	cmp	r3, r2
 80041e8:	bf04      	itt	eq
 80041ea:	681a      	ldreq	r2, [r3, #0]
 80041ec:	685b      	ldreq	r3, [r3, #4]
 80041ee:	6063      	str	r3, [r4, #4]
 80041f0:	bf04      	itt	eq
 80041f2:	1852      	addeq	r2, r2, r1
 80041f4:	6022      	streq	r2, [r4, #0]
 80041f6:	6004      	str	r4, [r0, #0]
 80041f8:	e7ec      	b.n	80041d4 <_free_r+0x24>
 80041fa:	4613      	mov	r3, r2
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	b10a      	cbz	r2, 8004204 <_free_r+0x54>
 8004200:	42a2      	cmp	r2, r4
 8004202:	d9fa      	bls.n	80041fa <_free_r+0x4a>
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	1858      	adds	r0, r3, r1
 8004208:	42a0      	cmp	r0, r4
 800420a:	d10b      	bne.n	8004224 <_free_r+0x74>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	4401      	add	r1, r0
 8004210:	1858      	adds	r0, r3, r1
 8004212:	4282      	cmp	r2, r0
 8004214:	6019      	str	r1, [r3, #0]
 8004216:	d1dd      	bne.n	80041d4 <_free_r+0x24>
 8004218:	6810      	ldr	r0, [r2, #0]
 800421a:	6852      	ldr	r2, [r2, #4]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	4401      	add	r1, r0
 8004220:	6019      	str	r1, [r3, #0]
 8004222:	e7d7      	b.n	80041d4 <_free_r+0x24>
 8004224:	d902      	bls.n	800422c <_free_r+0x7c>
 8004226:	230c      	movs	r3, #12
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	e7d3      	b.n	80041d4 <_free_r+0x24>
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	1821      	adds	r1, r4, r0
 8004230:	428a      	cmp	r2, r1
 8004232:	bf04      	itt	eq
 8004234:	6811      	ldreq	r1, [r2, #0]
 8004236:	6852      	ldreq	r2, [r2, #4]
 8004238:	6062      	str	r2, [r4, #4]
 800423a:	bf04      	itt	eq
 800423c:	1809      	addeq	r1, r1, r0
 800423e:	6021      	streq	r1, [r4, #0]
 8004240:	605c      	str	r4, [r3, #4]
 8004242:	e7c7      	b.n	80041d4 <_free_r+0x24>
 8004244:	bd38      	pop	{r3, r4, r5, pc}
 8004246:	bf00      	nop
 8004248:	200174a4 	.word	0x200174a4

0800424c <_malloc_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	1ccd      	adds	r5, r1, #3
 8004250:	f025 0503 	bic.w	r5, r5, #3
 8004254:	3508      	adds	r5, #8
 8004256:	2d0c      	cmp	r5, #12
 8004258:	bf38      	it	cc
 800425a:	250c      	movcc	r5, #12
 800425c:	2d00      	cmp	r5, #0
 800425e:	4606      	mov	r6, r0
 8004260:	db01      	blt.n	8004266 <_malloc_r+0x1a>
 8004262:	42a9      	cmp	r1, r5
 8004264:	d903      	bls.n	800426e <_malloc_r+0x22>
 8004266:	230c      	movs	r3, #12
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	2000      	movs	r0, #0
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	f000 f87d 	bl	800436c <__malloc_lock>
 8004272:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <_malloc_r+0xac>)
 8004274:	6814      	ldr	r4, [r2, #0]
 8004276:	4621      	mov	r1, r4
 8004278:	b991      	cbnz	r1, 80042a0 <_malloc_r+0x54>
 800427a:	4c20      	ldr	r4, [pc, #128]	; (80042fc <_malloc_r+0xb0>)
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	b91b      	cbnz	r3, 8004288 <_malloc_r+0x3c>
 8004280:	4630      	mov	r0, r6
 8004282:	f000 f863 	bl	800434c <_sbrk_r>
 8004286:	6020      	str	r0, [r4, #0]
 8004288:	4629      	mov	r1, r5
 800428a:	4630      	mov	r0, r6
 800428c:	f000 f85e 	bl	800434c <_sbrk_r>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d124      	bne.n	80042de <_malloc_r+0x92>
 8004294:	230c      	movs	r3, #12
 8004296:	6033      	str	r3, [r6, #0]
 8004298:	4630      	mov	r0, r6
 800429a:	f000 f868 	bl	800436e <__malloc_unlock>
 800429e:	e7e4      	b.n	800426a <_malloc_r+0x1e>
 80042a0:	680b      	ldr	r3, [r1, #0]
 80042a2:	1b5b      	subs	r3, r3, r5
 80042a4:	d418      	bmi.n	80042d8 <_malloc_r+0x8c>
 80042a6:	2b0b      	cmp	r3, #11
 80042a8:	d90f      	bls.n	80042ca <_malloc_r+0x7e>
 80042aa:	600b      	str	r3, [r1, #0]
 80042ac:	50cd      	str	r5, [r1, r3]
 80042ae:	18cc      	adds	r4, r1, r3
 80042b0:	4630      	mov	r0, r6
 80042b2:	f000 f85c 	bl	800436e <__malloc_unlock>
 80042b6:	f104 000b 	add.w	r0, r4, #11
 80042ba:	1d23      	adds	r3, r4, #4
 80042bc:	f020 0007 	bic.w	r0, r0, #7
 80042c0:	1ac3      	subs	r3, r0, r3
 80042c2:	d0d3      	beq.n	800426c <_malloc_r+0x20>
 80042c4:	425a      	negs	r2, r3
 80042c6:	50e2      	str	r2, [r4, r3]
 80042c8:	e7d0      	b.n	800426c <_malloc_r+0x20>
 80042ca:	428c      	cmp	r4, r1
 80042cc:	684b      	ldr	r3, [r1, #4]
 80042ce:	bf16      	itet	ne
 80042d0:	6063      	strne	r3, [r4, #4]
 80042d2:	6013      	streq	r3, [r2, #0]
 80042d4:	460c      	movne	r4, r1
 80042d6:	e7eb      	b.n	80042b0 <_malloc_r+0x64>
 80042d8:	460c      	mov	r4, r1
 80042da:	6849      	ldr	r1, [r1, #4]
 80042dc:	e7cc      	b.n	8004278 <_malloc_r+0x2c>
 80042de:	1cc4      	adds	r4, r0, #3
 80042e0:	f024 0403 	bic.w	r4, r4, #3
 80042e4:	42a0      	cmp	r0, r4
 80042e6:	d005      	beq.n	80042f4 <_malloc_r+0xa8>
 80042e8:	1a21      	subs	r1, r4, r0
 80042ea:	4630      	mov	r0, r6
 80042ec:	f000 f82e 	bl	800434c <_sbrk_r>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d0cf      	beq.n	8004294 <_malloc_r+0x48>
 80042f4:	6025      	str	r5, [r4, #0]
 80042f6:	e7db      	b.n	80042b0 <_malloc_r+0x64>
 80042f8:	200174a4 	.word	0x200174a4
 80042fc:	200174a8 	.word	0x200174a8

08004300 <_realloc_r>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	4607      	mov	r7, r0
 8004304:	4614      	mov	r4, r2
 8004306:	460e      	mov	r6, r1
 8004308:	b921      	cbnz	r1, 8004314 <_realloc_r+0x14>
 800430a:	4611      	mov	r1, r2
 800430c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004310:	f7ff bf9c 	b.w	800424c <_malloc_r>
 8004314:	b922      	cbnz	r2, 8004320 <_realloc_r+0x20>
 8004316:	f7ff ff4b 	bl	80041b0 <_free_r>
 800431a:	4625      	mov	r5, r4
 800431c:	4628      	mov	r0, r5
 800431e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004320:	f000 f826 	bl	8004370 <_malloc_usable_size_r>
 8004324:	42a0      	cmp	r0, r4
 8004326:	d20f      	bcs.n	8004348 <_realloc_r+0x48>
 8004328:	4621      	mov	r1, r4
 800432a:	4638      	mov	r0, r7
 800432c:	f7ff ff8e 	bl	800424c <_malloc_r>
 8004330:	4605      	mov	r5, r0
 8004332:	2800      	cmp	r0, #0
 8004334:	d0f2      	beq.n	800431c <_realloc_r+0x1c>
 8004336:	4631      	mov	r1, r6
 8004338:	4622      	mov	r2, r4
 800433a:	f7ff fc12 	bl	8003b62 <memcpy>
 800433e:	4631      	mov	r1, r6
 8004340:	4638      	mov	r0, r7
 8004342:	f7ff ff35 	bl	80041b0 <_free_r>
 8004346:	e7e9      	b.n	800431c <_realloc_r+0x1c>
 8004348:	4635      	mov	r5, r6
 800434a:	e7e7      	b.n	800431c <_realloc_r+0x1c>

0800434c <_sbrk_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4c06      	ldr	r4, [pc, #24]	; (8004368 <_sbrk_r+0x1c>)
 8004350:	2300      	movs	r3, #0
 8004352:	4605      	mov	r5, r0
 8004354:	4608      	mov	r0, r1
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	f7ff fa2c 	bl	80037b4 <_sbrk>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_sbrk_r+0x1a>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	b103      	cbz	r3, 8004366 <_sbrk_r+0x1a>
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	20017554 	.word	0x20017554

0800436c <__malloc_lock>:
 800436c:	4770      	bx	lr

0800436e <__malloc_unlock>:
 800436e:	4770      	bx	lr

08004370 <_malloc_usable_size_r>:
 8004370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004374:	1f18      	subs	r0, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	bfbc      	itt	lt
 800437a:	580b      	ldrlt	r3, [r1, r0]
 800437c:	18c0      	addlt	r0, r0, r3
 800437e:	4770      	bx	lr

08004380 <_init>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr

0800438c <_fini>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	bf00      	nop
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr
