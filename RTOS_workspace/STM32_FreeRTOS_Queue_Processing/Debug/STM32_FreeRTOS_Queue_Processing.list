
STM32_FreeRTOS_Queue_Processing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d8  080067d8  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  080067d8  080067d8  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067d8  080067d8  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017580  20000174  08006954  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200176f4  08006954  000276f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f5a  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002989  00000000  00000000  000340fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00037a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040a1  00000000  00000000  00038940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010104  00000000  00000000  0003c9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079985  00000000  00000000  0004cae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c646a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004890  00000000  00000000  000c64c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000174 	.word	0x20000174
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006588 	.word	0x08006588

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000178 	.word	0x20000178
 800020c:	08006588 	.word	0x08006588

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	460b      	mov	r3, r1
 80003e8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003ea:	2300      	movs	r3, #0
 80003ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	887b      	ldrh	r3, [r7, #2]
 80003f4:	4013      	ands	r3, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003fa:	2301      	movs	r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
 80003fe:	e001      	b.n	8000404 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000404:	7bfb      	ldrb	r3, [r7, #15]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	460b      	mov	r3, r1
 800041c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	887a      	ldrh	r2, [r7, #2]
 8000422:	831a      	strh	r2, [r3, #24]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	887a      	ldrh	r2, [r7, #2]
 8000440:	835a      	strh	r2, [r3, #26]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	460b      	mov	r3, r1
 8000458:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	887b      	ldrh	r3, [r7, #2]
 8000460:	405a      	eors	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	615a      	str	r2, [r3, #20]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000472:	b480      	push	{r7}
 8000474:	b085      	sub	sp, #20
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	460b      	mov	r3, r1
 800047c:	807b      	strh	r3, [r7, #2]
 800047e:	4613      	mov	r3, r2
 8000480:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800048a:	787a      	ldrb	r2, [r7, #1]
 800048c:	887b      	ldrh	r3, [r7, #2]
 800048e:	f003 0307 	and.w	r3, r3, #7
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800049a:	887b      	ldrh	r3, [r7, #2]
 800049c:	08db      	lsrs	r3, r3, #3
 800049e:	b29b      	uxth	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	3208      	adds	r2, #8
 80004a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004aa:	887b      	ldrh	r3, [r7, #2]
 80004ac:	f003 0307 	and.w	r3, r3, #7
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	210f      	movs	r1, #15
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	8879      	ldrh	r1, [r7, #2]
 80004bc:	08c9      	lsrs	r1, r1, #3
 80004be:	b289      	uxth	r1, r1
 80004c0:	4608      	mov	r0, r1
 80004c2:	ea02 0103 	and.w	r1, r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f100 0208 	add.w	r2, r0, #8
 80004cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004d0:	887b      	ldrh	r3, [r7, #2]
 80004d2:	08db      	lsrs	r3, r3, #3
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	461a      	mov	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3208      	adds	r2, #8
 80004dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004e6:	887b      	ldrh	r3, [r7, #2]
 80004e8:	08db      	lsrs	r3, r3, #3
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	3208      	adds	r2, #8
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <RCC_DeInit+0x60>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a15      	ldr	r2, [pc, #84]	; (8000564 <RCC_DeInit+0x60>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <RCC_DeInit+0x60>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <RCC_DeInit+0x60>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <RCC_DeInit+0x60>)
 8000520:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000524:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000528:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <RCC_DeInit+0x60>)
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <RCC_DeInit+0x64>)
 800052e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <RCC_DeInit+0x60>)
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <RCC_DeInit+0x68>)
 8000534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <RCC_DeInit+0x60>)
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <RCC_DeInit+0x6c>)
 800053c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <RCC_DeInit+0x60>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <RCC_DeInit+0x60>)
 8000546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800054a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <RCC_DeInit+0x60>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <RCC_DeInit+0x60>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800
 8000568:	24003010 	.word	0x24003010
 800056c:	20003000 	.word	0x20003000
 8000570:	24003000 	.word	0x24003000

08000574 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000574:	b480      	push	{r7}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	2302      	movs	r3, #2
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	2302      	movs	r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000594:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	f003 030c 	and.w	r3, r3, #12
 800059c:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d011      	beq.n	80005c8 <RCC_GetClocksFreq+0x54>
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	2b08      	cmp	r3, #8
 80005a8:	d844      	bhi.n	8000634 <RCC_GetClocksFreq+0xc0>
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d003      	beq.n	80005b8 <RCC_GetClocksFreq+0x44>
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d004      	beq.n	80005c0 <RCC_GetClocksFreq+0x4c>
 80005b6:	e03d      	b.n	8000634 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a42      	ldr	r2, [pc, #264]	; (80006c4 <RCC_GetClocksFreq+0x150>)
 80005bc:	601a      	str	r2, [r3, #0]
    break;
 80005be:	e03d      	b.n	800063c <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a41      	ldr	r2, [pc, #260]	; (80006c8 <RCC_GetClocksFreq+0x154>)
 80005c4:	601a      	str	r2, [r3, #0]
    break;
 80005c6:	e039      	b.n	800063c <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005c8:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	0d9b      	lsrs	r3, r3, #22
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005d4:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005dc:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00c      	beq.n	80005fe <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005e4:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <RCC_GetClocksFreq+0x154>)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ec:	4a34      	ldr	r2, [pc, #208]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 80005ee:	6852      	ldr	r2, [r2, #4]
 80005f0:	0992      	lsrs	r2, r2, #6
 80005f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	e00b      	b.n	8000616 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005fe:	4a31      	ldr	r2, [pc, #196]	; (80006c4 <RCC_GetClocksFreq+0x150>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4a2e      	ldr	r2, [pc, #184]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 8000608:	6852      	ldr	r2, [r2, #4]
 800060a:	0992      	lsrs	r2, r2, #6
 800060c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000610:	fb02 f303 	mul.w	r3, r2, r3
 8000614:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	f003 0303 	and.w	r3, r3, #3
 8000620:	3301      	adds	r3, #1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000626:	69fa      	ldr	r2, [r7, #28]
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	fbb2 f2f3 	udiv	r2, r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	601a      	str	r2, [r3, #0]
    break;
 8000632:	e003      	b.n	800063c <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a23      	ldr	r2, [pc, #140]	; (80006c4 <RCC_GetClocksFreq+0x150>)
 8000638:	601a      	str	r2, [r3, #0]
    break;
 800063a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000644:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800064c:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <RCC_GetClocksFreq+0x158>)
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	40da      	lsrs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800066c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	0a9b      	lsrs	r3, r3, #10
 8000672:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000674:	4a15      	ldr	r2, [pc, #84]	; (80006cc <RCC_GetClocksFreq+0x158>)
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	40da      	lsrs	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <RCC_GetClocksFreq+0x14c>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000694:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	0b5b      	lsrs	r3, r3, #13
 800069a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <RCC_GetClocksFreq+0x158>)
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	40da      	lsrs	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	60da      	str	r2, [r3, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3724      	adds	r7, #36	; 0x24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40023800 	.word	0x40023800
 80006c4:	00f42400 	.word	0x00f42400
 80006c8:	017d7840 	.word	0x017d7840
 80006cc:	20000000 	.word	0x20000000

080006d0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <RCC_AHB1PeriphClockCmd+0x3c>)
 80006e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e6:	4909      	ldr	r1, [pc, #36]	; (800070c <RCC_AHB1PeriphClockCmd+0x3c>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006ee:	e006      	b.n	80006fe <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <RCC_AHB1PeriphClockCmd+0x3c>)
 80006f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4904      	ldr	r1, [pc, #16]	; (800070c <RCC_AHB1PeriphClockCmd+0x3c>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <RCC_APB1PeriphClockCmd+0x3c>)
 8000724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000726:	4909      	ldr	r1, [pc, #36]	; (800074c <RCC_APB1PeriphClockCmd+0x3c>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4313      	orrs	r3, r2
 800072c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800072e:	e006      	b.n	800073e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <RCC_APB1PeriphClockCmd+0x3c>)
 8000732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	43db      	mvns	r3, r3
 8000738:	4904      	ldr	r1, [pc, #16]	; (800074c <RCC_APB1PeriphClockCmd+0x3c>)
 800073a:	4013      	ands	r3, r2
 800073c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d006      	beq.n	8000770 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <RCC_APB2PeriphClockCmd+0x3c>)
 8000764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000766:	4909      	ldr	r1, [pc, #36]	; (800078c <RCC_APB2PeriphClockCmd+0x3c>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4313      	orrs	r3, r2
 800076c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800076e:	e006      	b.n	800077e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <RCC_APB2PeriphClockCmd+0x3c>)
 8000772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	43db      	mvns	r3, r3
 8000778:	4904      	ldr	r1, [pc, #16]	; (800078c <RCC_APB2PeriphClockCmd+0x3c>)
 800077a:	4013      	ands	r3, r2
 800077c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <RTC_GetTime+0xa0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80007a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80007aa:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	0c1b      	lsrs	r3, r3, #16
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d11a      	bne.n	8000826 <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f86b 	bl	80008d0 <RTC_Bcd2ToByte>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f862 	bl	80008d0 <RTC_Bcd2ToByte>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	789b      	ldrb	r3, [r3, #2]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f859 	bl	80008d0 <RTC_Bcd2ToByte>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	709a      	strb	r2, [r3, #2]
  }
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40002800 	.word	0x40002800

08000834 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <RTC_GetDate+0x98>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800084a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800084e:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	0c1b      	lsrs	r3, r3, #16
 8000854:	b2da      	uxtb	r2, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f003 031f 	and.w	r3, r3, #31
 8000864:	b2da      	uxtb	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000872:	b2da      	uxtb	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	0b5b      	lsrs	r3, r3, #13
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	b2da      	uxtb	r2, r3
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d11a      	bne.n	80008c4 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	78db      	ldrb	r3, [r3, #3]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f81c 	bl	80008d0 <RTC_Bcd2ToByte>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f813 	bl	80008d0 <RTC_Bcd2ToByte>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f80a 	bl	80008d0 <RTC_Bcd2ToByte>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	709a      	strb	r2, [r3, #2]
  }
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40002800 	.word	0x40002800

080008d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	4413      	add	r3, r2
 80008fa:	b2db      	uxtb	r3, r3
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	8a1b      	ldrh	r3, [r3, #16]
 8000926:	b29b      	uxth	r3, r3
 8000928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	88db      	ldrh	r3, [r3, #6]
 8000936:	461a      	mov	r2, r3
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	4313      	orrs	r3, r2
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	899b      	ldrh	r3, [r3, #12]
 800094a:	b29b      	uxth	r3, r3
 800094c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000954:	f023 030c 	bic.w	r3, r3, #12
 8000958:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	889a      	ldrh	r2, [r3, #4]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	891b      	ldrh	r3, [r3, #8]
 8000962:	4313      	orrs	r3, r2
 8000964:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800096a:	4313      	orrs	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	4313      	orrs	r3, r2
 8000974:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	b29a      	uxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	8a9b      	ldrh	r3, [r3, #20]
 8000982:	b29b      	uxth	r3, r3
 8000984:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	899b      	ldrh	r3, [r3, #12]
 8000992:	461a      	mov	r2, r3
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	4313      	orrs	r3, r2
 8000998:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	b29a      	uxth	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fde4 	bl	8000574 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <USART_Init+0x168>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d003      	beq.n	80009bc <USART_Init+0xb4>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <USART_Init+0x16c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d102      	bne.n	80009c2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	623b      	str	r3, [r7, #32]
 80009c0:	e001      	b.n	80009c6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	899b      	ldrh	r3, [r3, #12]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da0c      	bge.n	80009ec <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80009d2:	6a3a      	ldr	r2, [r7, #32]
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	009a      	lsls	r2, r3, #2
 80009dc:	441a      	add	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	e00b      	b.n	8000a04 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80009ec:	6a3a      	ldr	r2, [r7, #32]
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	009a      	lsls	r2, r3, #2
 80009f6:	441a      	add	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <USART_Init+0x170>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	095b      	lsrs	r3, r3, #5
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da0c      	bge.n	8000a48 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	3332      	adds	r3, #50	; 0x32
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <USART_Init+0x170>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a42:	4313      	orrs	r3, r2
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
 8000a46:	e00b      	b.n	8000a60 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	3332      	adds	r3, #50	; 0x32
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <USART_Init+0x170>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	095b      	lsrs	r3, r3, #5
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	811a      	strh	r2, [r3, #8]
}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40011000 	.word	0x40011000
 8000a74:	40011400 	.word	0x40011400
 8000a78:	51eb851f 	.word	0x51eb851f

08000a7c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	899b      	ldrh	r3, [r3, #12]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a9e:	e007      	b.n	8000ab0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	899b      	ldrh	r3, [r3, #12]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	819a      	strh	r2, [r3, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	809a      	strh	r2, [r3, #4]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	889b      	ldrh	r3, [r3, #4]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af2:	b29b      	uxth	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	095b      	lsrs	r3, r3, #5
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	f003 031f 	and.w	r3, r3, #31
 8000b34:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000b36:	2201      	movs	r2, #1
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d103      	bne.n	8000b4e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	330c      	adds	r3, #12
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e009      	b.n	8000b62 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d103      	bne.n	8000b5c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3310      	adds	r3, #16
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e002      	b.n	8000b62 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3314      	adds	r3, #20
 8000b60:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b62:	787b      	ldrb	r3, [r7, #1]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b74:	e006      	b.n	8000b84 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	400a      	ands	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e001      	b.n	8000bba <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f103 0208 	add.w	r2, r3, #8
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f103 0208 	add.w	r2, r3, #8
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f103 0208 	add.w	r2, r3, #8
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c80:	d103      	bne.n	8000c8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e00c      	b.n	8000ca4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e002      	b.n	8000c98 <vListInsert+0x2e>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d2f6      	bcs.n	8000c92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6892      	ldr	r2, [r2, #8]
 8000cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6852      	ldr	r2, [r2, #4]
 8000cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d103      	bne.n	8000d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10a      	bne.n	8000d5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d48:	f383 8811 	msr	BASEPRI, r3
 8000d4c:	f3bf 8f6f 	isb	sy
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d56:	bf00      	nop
 8000d58:	e7fe      	b.n	8000d58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000d5a:	f002 f97b 	bl	8003054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	68f9      	ldr	r1, [r7, #12]
 8000d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d6a:	fb01 f303 	mul.w	r3, r1, r3
 8000d6e:	441a      	add	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	68f9      	ldr	r1, [r7, #12]
 8000d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d90:	fb01 f303 	mul.w	r3, r1, r3
 8000d94:	441a      	add	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	22ff      	movs	r2, #255	; 0xff
 8000d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	22ff      	movs	r2, #255	; 0xff
 8000da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d114      	bne.n	8000dda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d01a      	beq.n	8000dee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3310      	adds	r3, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 f8e5 	bl	8001f8c <xTaskRemoveFromEventList>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d012      	beq.n	8000dee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <xQueueGenericReset+0xcc>)
 8000dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	f3bf 8f6f 	isb	sy
 8000dd8:	e009      	b.n	8000dee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3310      	adds	r3, #16
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fef2 	bl	8000bc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3324      	adds	r3, #36	; 0x24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff feed 	bl	8000bc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000dee:	f002 f961 	bl	80030b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	e000ed04 	.word	0xe000ed04

08000e00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8000e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	613b      	str	r3, [r7, #16]
}
 8000e26:	bf00      	nop
 8000e28:	e7fe      	b.n	8000e28 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	e004      	b.n	8000e40 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	3350      	adds	r3, #80	; 0x50
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 fa31 	bl	80032ac <pvPortMalloc>
 8000e4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00d      	beq.n	8000e6e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3350      	adds	r3, #80	; 0x50
 8000e5a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e5c:	79fa      	ldrb	r2, [r7, #7]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4613      	mov	r3, r2
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f000 f805 	bl	8000e78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000e6e:	69bb      	ldr	r3, [r7, #24]
	}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e002      	b.n	8000e9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	69b8      	ldr	r0, [r7, #24]
 8000eaa:	f7ff ff41 	bl	8000d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	78fa      	ldrb	r2, [r7, #3]
 8000eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	68f9      	ldr	r1, [r7, #12]
 8000ebc:	2073      	movs	r0, #115	; 0x73
 8000ebe:	f003 fa3d 	bl	800433c <SEGGER_SYSVIEW_RecordU32x3>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	; 0x40
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10a      	bne.n	8000efe <xQueueGenericSend+0x32>
	__asm volatile
 8000ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eec:	f383 8811 	msr	BASEPRI, r3
 8000ef0:	f3bf 8f6f 	isb	sy
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000efa:	bf00      	nop
 8000efc:	e7fe      	b.n	8000efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <xQueueGenericSend+0x40>
 8000f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <xQueueGenericSend+0x44>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <xQueueGenericSend+0x46>
 8000f10:	2300      	movs	r3, #0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10a      	bne.n	8000f2c <xQueueGenericSend+0x60>
	__asm volatile
 8000f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1a:	f383 8811 	msr	BASEPRI, r3
 8000f1e:	f3bf 8f6f 	isb	sy
 8000f22:	f3bf 8f4f 	dsb	sy
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000f28:	bf00      	nop
 8000f2a:	e7fe      	b.n	8000f2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d103      	bne.n	8000f3a <xQueueGenericSend+0x6e>
 8000f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d101      	bne.n	8000f3e <xQueueGenericSend+0x72>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <xQueueGenericSend+0x74>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10a      	bne.n	8000f5a <xQueueGenericSend+0x8e>
	__asm volatile
 8000f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f48:	f383 8811 	msr	BASEPRI, r3
 8000f4c:	f3bf 8f6f 	isb	sy
 8000f50:	f3bf 8f4f 	dsb	sy
 8000f54:	623b      	str	r3, [r7, #32]
}
 8000f56:	bf00      	nop
 8000f58:	e7fe      	b.n	8000f58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f5a:	f001 f9b7 	bl	80022cc <xTaskGetSchedulerState>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <xQueueGenericSend+0x9e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <xQueueGenericSend+0xa2>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <xQueueGenericSend+0xa4>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <xQueueGenericSend+0xbe>
	__asm volatile
 8000f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f78:	f383 8811 	msr	BASEPRI, r3
 8000f7c:	f3bf 8f6f 	isb	sy
 8000f80:	f3bf 8f4f 	dsb	sy
 8000f84:	61fb      	str	r3, [r7, #28]
}
 8000f86:	bf00      	nop
 8000f88:	e7fe      	b.n	8000f88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f8a:	f002 f863 	bl	8003054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d302      	bcc.n	8000fa0 <xQueueGenericSend+0xd4>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d136      	bne.n	800100e <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 f80e 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	205a      	movs	r0, #90	; 0x5a
 8000fb6:	f003 fa37 	bl	8004428 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fc0:	f000 fa66 	bl	8001490 <prvCopyDataToQueue>
 8000fc4:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d010      	beq.n	8000ff0 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd0:	3324      	adds	r3, #36	; 0x24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 ffda 	bl	8001f8c <xTaskRemoveFromEventList>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d013      	beq.n	8001006 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000fde:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <xQueueGenericSend+0x248>)
 8000fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	e00a      	b.n	8001006 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000ff6:	4b47      	ldr	r3, [pc, #284]	; (8001114 <xQueueGenericSend+0x248>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001006:	f002 f855 	bl	80030b4 <vPortExitCritical>
				return pdPASS;
 800100a:	2301      	movs	r3, #1
 800100c:	e07d      	b.n	800110a <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d110      	bne.n	8001036 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001014:	f002 f84e 	bl	80030b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101a:	4618      	mov	r0, r3
 800101c:	f003 ffd2 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	460b      	mov	r3, r1
 800102a:	4601      	mov	r1, r0
 800102c:	205a      	movs	r0, #90	; 0x5a
 800102e:	f003 f9fb 	bl	8004428 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001032:	2300      	movs	r3, #0
 8001034:	e069      	b.n	800110a <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4618      	mov	r0, r3
 8001042:	f001 f809 	bl	8002058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001046:	2301      	movs	r3, #1
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800104a:	f002 f833 	bl	80030b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800104e:	f000 fd55 	bl	8001afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001052:	f001 ffff 	bl	8003054 <vPortEnterCritical>
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800105c:	b25b      	sxtb	r3, r3
 800105e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001062:	d103      	bne.n	800106c <xQueueGenericSend+0x1a0>
 8001064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d103      	bne.n	8001082 <xQueueGenericSend+0x1b6>
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001082:	f002 f817 	bl	80030b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001086:	1d3a      	adds	r2, r7, #4
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fff8 	bl	8002084 <xTaskCheckForTimeOut>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d124      	bne.n	80010e4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800109a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800109c:	f000 faf0 	bl	8001680 <prvIsQueueFull>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d018      	beq.n	80010d8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80010a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a8:	3310      	adds	r3, #16
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 ff1a 	bl	8001ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80010b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010b6:	f000 fa7b 	bl	80015b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80010ba:	f000 fd2d 	bl	8001b18 <xTaskResumeAll>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f af62 	bne.w	8000f8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <xQueueGenericSend+0x248>)
 80010c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	f3bf 8f4f 	dsb	sy
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	e758      	b.n	8000f8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80010d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010da:	f000 fa69 	bl	80015b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010de:	f000 fd1b 	bl	8001b18 <xTaskResumeAll>
 80010e2:	e752      	b.n	8000f8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80010e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010e6:	f000 fa63 	bl	80015b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80010ea:	f000 fd15 	bl	8001b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80010ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 ff67 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	460b      	mov	r3, r1
 8001100:	4601      	mov	r1, r0
 8001102:	205a      	movs	r0, #90	; 0x5a
 8001104:	f003 f990 	bl	8004428 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8001108:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800110a:	4618      	mov	r0, r3
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000ed04 	.word	0xe000ed04

08001118 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	; 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10a      	bne.n	8001146 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001134:	f383 8811 	msr	BASEPRI, r3
 8001138:	f3bf 8f6f 	isb	sy
 800113c:	f3bf 8f4f 	dsb	sy
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001142:	bf00      	nop
 8001144:	e7fe      	b.n	8001144 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <xQueueGenericSendFromISR+0x3c>
 800114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <xQueueGenericSendFromISR+0x40>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <xQueueGenericSendFromISR+0x42>
 8001158:	2300      	movs	r3, #0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10a      	bne.n	8001174 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	623b      	str	r3, [r7, #32]
}
 8001170:	bf00      	nop
 8001172:	e7fe      	b.n	8001172 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d103      	bne.n	8001182 <xQueueGenericSendFromISR+0x6a>
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <xQueueGenericSendFromISR+0x6e>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <xQueueGenericSendFromISR+0x70>
 8001186:	2300      	movs	r3, #0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10a      	bne.n	80011a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800118c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001190:	f383 8811 	msr	BASEPRI, r3
 8001194:	f3bf 8f6f 	isb	sy
 8001198:	f3bf 8f4f 	dsb	sy
 800119c:	61fb      	str	r3, [r7, #28]
}
 800119e:	bf00      	nop
 80011a0:	e7fe      	b.n	80011a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80011a2:	f002 f843 	bl	800322c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80011a6:	f3ef 8211 	mrs	r2, BASEPRI
 80011aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ae:	f383 8811 	msr	BASEPRI, r3
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	61ba      	str	r2, [r7, #24]
 80011bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80011be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d302      	bcc.n	80011d4 <xQueueGenericSendFromISR+0xbc>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d136      	bne.n	8001242 <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80011d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80011de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 feef 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 80011e6:	4601      	mov	r1, r0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	461a      	mov	r2, r3
 80011ec:	2060      	movs	r0, #96	; 0x60
 80011ee:	f003 f84b 	bl	8004288 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011f8:	f000 f94a 	bl	8001490 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80011fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d112      	bne.n	800122c <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	2b00      	cmp	r3, #0
 800120c:	d016      	beq.n	800123c <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800120e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001210:	3324      	adds	r3, #36	; 0x24
 8001212:	4618      	mov	r0, r3
 8001214:	f000 feba 	bl	8001f8c <xTaskRemoveFromEventList>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00e      	beq.n	800123c <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e007      	b.n	800123c <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800122c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001230:	3301      	adds	r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	b25a      	sxtb	r2, r3
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800123c:	2301      	movs	r3, #1
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001240:	e00b      	b.n	800125a <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001244:	4618      	mov	r0, r3
 8001246:	f003 febd 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 800124a:	4601      	mov	r1, r0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	461a      	mov	r2, r3
 8001250:	2060      	movs	r0, #96	; 0x60
 8001252:	f003 f819 	bl	8004288 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8001256:	2300      	movs	r3, #0
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001264:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001268:	4618      	mov	r0, r3
 800126a:	3738      	adds	r7, #56	; 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b08f      	sub	sp, #60	; 0x3c
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10a      	bne.n	80012a0 <xQueueReceive+0x30>
	__asm volatile
 800128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	f3bf 8f4f 	dsb	sy
 800129a:	623b      	str	r3, [r7, #32]
}
 800129c:	bf00      	nop
 800129e:	e7fe      	b.n	800129e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <xQueueReceive+0x3e>
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <xQueueReceive+0x42>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <xQueueReceive+0x44>
 80012b2:	2300      	movs	r3, #0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10a      	bne.n	80012ce <xQueueReceive+0x5e>
	__asm volatile
 80012b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012bc:	f383 8811 	msr	BASEPRI, r3
 80012c0:	f3bf 8f6f 	isb	sy
 80012c4:	f3bf 8f4f 	dsb	sy
 80012c8:	61fb      	str	r3, [r7, #28]
}
 80012ca:	bf00      	nop
 80012cc:	e7fe      	b.n	80012cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012ce:	f000 fffd 	bl	80022cc <xTaskGetSchedulerState>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <xQueueReceive+0x6e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <xQueueReceive+0x72>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <xQueueReceive+0x74>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10a      	bne.n	80012fe <xQueueReceive+0x8e>
	__asm volatile
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	f383 8811 	msr	BASEPRI, r3
 80012f0:	f3bf 8f6f 	isb	sy
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	61bb      	str	r3, [r7, #24]
}
 80012fa:	bf00      	nop
 80012fc:	e7fe      	b.n	80012fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80012fe:	f001 fea9 	bl	8003054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001306:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	2b00      	cmp	r3, #0
 800130c:	d02f      	beq.n	800136e <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001312:	f000 f927 	bl	8001564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fe53 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 800131e:	4604      	mov	r4, r0
 8001320:	2000      	movs	r0, #0
 8001322:	f003 fe4f 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 8001326:	4602      	mov	r2, r0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2101      	movs	r1, #1
 800132c:	9100      	str	r1, [sp, #0]
 800132e:	4621      	mov	r1, r4
 8001330:	205c      	movs	r0, #92	; 0x5c
 8001332:	f003 f879 	bl	8004428 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	1e5a      	subs	r2, r3, #1
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00f      	beq.n	8001366 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	3310      	adds	r3, #16
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fe1e 	bl	8001f8c <xTaskRemoveFromEventList>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001356:	4b4d      	ldr	r3, [pc, #308]	; (800148c <xQueueReceive+0x21c>)
 8001358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001366:	f001 fea5 	bl	80030b4 <vPortExitCritical>
				return pdPASS;
 800136a:	2301      	movs	r3, #1
 800136c:	e08a      	b.n	8001484 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d113      	bne.n	800139c <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001374:	f001 fe9e 	bl	80030b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fe22 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 8001380:	4604      	mov	r4, r0
 8001382:	2000      	movs	r0, #0
 8001384:	f003 fe1e 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 8001388:	4602      	mov	r2, r0
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2101      	movs	r1, #1
 800138e:	9100      	str	r1, [sp, #0]
 8001390:	4621      	mov	r1, r4
 8001392:	205c      	movs	r0, #92	; 0x5c
 8001394:	f003 f848 	bl	8004428 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8001398:	2300      	movs	r3, #0
 800139a:	e073      	b.n	8001484 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d106      	bne.n	80013b0 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fe56 	bl	8002058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80013b0:	f001 fe80 	bl	80030b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80013b4:	f000 fba2 	bl	8001afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80013b8:	f001 fe4c 	bl	8003054 <vPortEnterCritical>
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d103      	bne.n	80013d2 <xQueueReceive+0x162>
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013de:	d103      	bne.n	80013e8 <xQueueReceive+0x178>
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013e8:	f001 fe64 	bl	80030b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013ec:	1d3a      	adds	r2, r7, #4
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fe45 	bl	8002084 <xTaskCheckForTimeOut>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d124      	bne.n	800144a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001402:	f000 f927 	bl	8001654 <prvIsQueueEmpty>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d018      	beq.n	800143e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	3324      	adds	r3, #36	; 0x24
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd67 	bl	8001ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800141a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800141c:	f000 f8c8 	bl	80015b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001420:	f000 fb7a 	bl	8001b18 <xTaskResumeAll>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f af69 	bne.w	80012fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <xQueueReceive+0x21c>)
 800142e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f3bf 8f4f 	dsb	sy
 8001438:	f3bf 8f6f 	isb	sy
 800143c:	e75f      	b.n	80012fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800143e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001440:	f000 f8b6 	bl	80015b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001444:	f000 fb68 	bl	8001b18 <xTaskResumeAll>
 8001448:	e759      	b.n	80012fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800144a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800144c:	f000 f8b0 	bl	80015b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001450:	f000 fb62 	bl	8001b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001456:	f000 f8fd 	bl	8001654 <prvIsQueueEmpty>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	f43f af4e 	beq.w	80012fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fdad 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 800146a:	4604      	mov	r4, r0
 800146c:	2000      	movs	r0, #0
 800146e:	f003 fda9 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 8001472:	4602      	mov	r2, r0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2101      	movs	r1, #1
 8001478:	9100      	str	r1, [sp, #0]
 800147a:	4621      	mov	r1, r4
 800147c:	205c      	movs	r0, #92	; 0x5c
 800147e:	f002 ffd3 	bl	8004428 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8001482:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001484:	4618      	mov	r0, r3
 8001486:	3734      	adds	r7, #52	; 0x34
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	e000ed04 	.word	0xe000ed04

08001490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10d      	bne.n	80014ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d14d      	bne.n	8001552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 ff24 	bl	8002308 <xTaskPriorityDisinherit>
 80014c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e043      	b.n	8001552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d119      	bne.n	8001504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6858      	ldr	r0, [r3, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	461a      	mov	r2, r3
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	f004 fc1e 	bl	8005d1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	441a      	add	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d32b      	bcc.n	8001552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	e026      	b.n	8001552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68d8      	ldr	r0, [r3, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	461a      	mov	r2, r3
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	f004 fc04 	bl	8005d1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	425b      	negs	r3, r3
 800151e:	441a      	add	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	425b      	negs	r3, r3
 800153a:	441a      	add	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d105      	bne.n	8001552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	3b01      	subs	r3, #1
 8001550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800155a:	697b      	ldr	r3, [r7, #20]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	d018      	beq.n	80015a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	441a      	add	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	429a      	cmp	r2, r3
 800158e:	d303      	bcc.n	8001598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68d9      	ldr	r1, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	461a      	mov	r2, r3
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f004 fbba 	bl	8005d1c <memcpy>
	}
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80015b8:	f001 fd4c 	bl	8003054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80015c4:	e011      	b.n	80015ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d012      	beq.n	80015f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3324      	adds	r3, #36	; 0x24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fcda 	bl	8001f8c <xTaskRemoveFromEventList>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80015de:	f000 fdb3 	bl	8002148 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dce9      	bgt.n	80015c6 <prvUnlockQueue+0x16>
 80015f2:	e000      	b.n	80015f6 <prvUnlockQueue+0x46>
					break;
 80015f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	22ff      	movs	r2, #255	; 0xff
 80015fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80015fe:	f001 fd59 	bl	80030b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001602:	f001 fd27 	bl	8003054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800160c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800160e:	e011      	b.n	8001634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d012      	beq.n	800163e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3310      	adds	r3, #16
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fcb5 	bl	8001f8c <xTaskRemoveFromEventList>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001628:	f000 fd8e 	bl	8002148 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	3b01      	subs	r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001638:	2b00      	cmp	r3, #0
 800163a:	dce9      	bgt.n	8001610 <prvUnlockQueue+0x60>
 800163c:	e000      	b.n	8001640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800163e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001648:	f001 fd34 	bl	80030b4 <vPortExitCritical>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800165c:	f001 fcfa 	bl	8003054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001668:	2301      	movs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e001      	b.n	8001672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001672:	f001 fd1f 	bl	80030b4 <vPortExitCritical>

	return xReturn;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001688:	f001 fce4 	bl	8003054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	429a      	cmp	r2, r3
 8001696:	d102      	bne.n	800169e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001698:	2301      	movs	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	e001      	b.n	80016a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80016a2:	f001 fd07 	bl	80030b4 <vPortExitCritical>

	return xReturn;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e01e      	b.n	80016fe <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <vQueueAddToRegistry+0x60>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d115      	bne.n	80016f8 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80016cc:	4910      	ldr	r1, [pc, #64]	; (8001710 <vQueueAddToRegistry+0x60>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <vQueueAddToRegistry+0x60>)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fc6d 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 80016ea:	4601      	mov	r1, r0
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	2071      	movs	r0, #113	; 0x71
 80016f2:	f002 fdc9 	bl	8004288 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80016f6:	e006      	b.n	8001706 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b07      	cmp	r3, #7
 8001702:	d9dd      	bls.n	80016c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200175e8 	.word	0x200175e8

08001714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001724:	f001 fc96 	bl	8003054 <vPortEnterCritical>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800172e:	b25b      	sxtb	r3, r3
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d103      	bne.n	800173e <vQueueWaitForMessageRestricted+0x2a>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001744:	b25b      	sxtb	r3, r3
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174a:	d103      	bne.n	8001754 <vQueueWaitForMessageRestricted+0x40>
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001754:	f001 fcae 	bl	80030b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	2b00      	cmp	r3, #0
 800175e:	d106      	bne.n	800176e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3324      	adds	r3, #36	; 0x24
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fbe1 	bl	8001f30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff1e 	bl	80015b0 <prvUnlockQueue>
	}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af04      	add	r7, sp, #16
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4618      	mov	r0, r3
 8001792:	f001 fd8b 	bl	80032ac <pvPortMalloc>
 8001796:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00e      	beq.n	80017bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800179e:	2058      	movs	r0, #88	; 0x58
 80017a0:	f001 fd84 	bl	80032ac <pvPortMalloc>
 80017a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
 80017b2:	e005      	b.n	80017c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80017b4:	6978      	ldr	r0, [r7, #20]
 80017b6:	f001 fe3d 	bl	8003434 <vPortFree>
 80017ba:	e001      	b.n	80017c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d013      	beq.n	80017ee <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017c6:	88fa      	ldrh	r2, [r7, #6]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9303      	str	r3, [sp, #12]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f80e 	bl	80017fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80017e2:	69f8      	ldr	r0, [r7, #28]
 80017e4:	f000 f8a0 	bl	8001928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	e002      	b.n	80017f4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80017f4:	69bb      	ldr	r3, [r7, #24]
	}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b088      	sub	sp, #32
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <prvInitialiseNewTask+0x2a>
	__asm volatile
 8001812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001816:	f383 8811 	msr	BASEPRI, r3
 800181a:	f3bf 8f6f 	isb	sy
 800181e:	f3bf 8f4f 	dsb	sy
 8001822:	617b      	str	r3, [r7, #20]
}
 8001824:	bf00      	nop
 8001826:	e7fe      	b.n	8001826 <prvInitialiseNewTask+0x28>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	461a      	mov	r2, r3
 8001832:	21a5      	movs	r1, #165	; 0xa5
 8001834:	f004 fa80 	bl	8005d38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001842:	3b01      	subs	r3, #1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f023 0307 	bic.w	r3, r3, #7
 8001850:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00a      	beq.n	8001872 <prvInitialiseNewTask+0x74>
	__asm volatile
 800185c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001860:	f383 8811 	msr	BASEPRI, r3
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	613b      	str	r3, [r7, #16]
}
 800186e:	bf00      	nop
 8001870:	e7fe      	b.n	8001870 <prvInitialiseNewTask+0x72>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e012      	b.n	800189e <prvInitialiseNewTask+0xa0>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	7819      	ldrb	r1, [r3, #0]
 8001880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	3334      	adds	r3, #52	; 0x34
 8001888:	460a      	mov	r2, r1
 800188a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <prvInitialiseNewTask+0xa8>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	3301      	adds	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d9e9      	bls.n	8001878 <prvInitialiseNewTask+0x7a>
 80018a4:	e000      	b.n	80018a8 <prvInitialiseNewTask+0xaa>
		{
			break;
 80018a6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d901      	bls.n	80018ba <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80018b6:	2304      	movs	r3, #4
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80018c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018c4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80018c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c8:	2200      	movs	r2, #0
 80018ca:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	3304      	adds	r3, #4
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f999 	bl	8000c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	3318      	adds	r3, #24
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f994 	bl	8000c08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	f1c3 0205 	rsb	r2, r3, #5
 80018ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f8:	2200      	movs	r2, #0
 80018fa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	69b8      	ldr	r0, [r7, #24]
 800190a:	f001 fa73 	bl	8002df4 <pxPortInitialiseStack>
 800190e:	4602      	mov	r2, r0
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001912:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af02      	add	r7, sp, #8
 800192e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001930:	f001 fb90 	bl	8003054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001934:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <prvAddNewTaskToReadyList+0xfc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <prvAddNewTaskToReadyList+0xfc>)
 800193c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800193e:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <prvAddNewTaskToReadyList+0x100>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001946:	4a38      	ldr	r2, [pc, #224]	; (8001a28 <prvAddNewTaskToReadyList+0x100>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <prvAddNewTaskToReadyList+0xfc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d110      	bne.n	8001976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001954:	f000 fc1c 	bl	8002190 <prvInitialiseTaskLists>
 8001958:	e00d      	b.n	8001976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <prvAddNewTaskToReadyList+0x104>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <prvAddNewTaskToReadyList+0x100>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	429a      	cmp	r2, r3
 800196e:	d802      	bhi.n	8001976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001970:	4a2d      	ldr	r2, [pc, #180]	; (8001a28 <prvAddNewTaskToReadyList+0x100>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <prvAddNewTaskToReadyList+0x108>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <prvAddNewTaskToReadyList+0x108>)
 800197e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <prvAddNewTaskToReadyList+0x108>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d016      	beq.n	80019bc <prvAddNewTaskToReadyList+0x94>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 f9eb 	bl	8004d6c <SEGGER_SYSVIEW_OnTaskCreate>
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	461d      	mov	r5, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461c      	mov	r4, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	1ae3      	subs	r3, r4, r3
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	462b      	mov	r3, r5
 80019b8:	f001 fefa 	bl	80037b0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fa5c 	bl	8004e7c <SEGGER_SYSVIEW_OnTaskStartReady>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2201      	movs	r2, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <prvAddNewTaskToReadyList+0x10c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <prvAddNewTaskToReadyList+0x10c>)
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <prvAddNewTaskToReadyList+0x110>)
 80019e4:	441a      	add	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3304      	adds	r3, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f7ff f918 	bl	8000c22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80019f2:	f001 fb5f 	bl	80030b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <prvAddNewTaskToReadyList+0x104>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00e      	beq.n	8001a1c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <prvAddNewTaskToReadyList+0x100>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <prvAddNewTaskToReadyList+0x114>)
 8001a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f3bf 8f4f 	dsb	sy
 8001a18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}
 8001a24:	20000268 	.word	0x20000268
 8001a28:	20000190 	.word	0x20000190
 8001a2c:	20000274 	.word	0x20000274
 8001a30:	20000284 	.word	0x20000284
 8001a34:	20000270 	.word	0x20000270
 8001a38:	20000194 	.word	0x20000194
 8001a3c:	e000ed04 	.word	0xe000ed04

08001a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <vTaskStartScheduler+0xa0>)
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2282      	movs	r2, #130	; 0x82
 8001a52:	4924      	ldr	r1, [pc, #144]	; (8001ae4 <vTaskStartScheduler+0xa4>)
 8001a54:	4824      	ldr	r0, [pc, #144]	; (8001ae8 <vTaskStartScheduler+0xa8>)
 8001a56:	f7ff fe91 	bl	800177c <xTaskCreate>
 8001a5a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001a62:	f000 fea5 	bl	80027b0 <xTimerCreateTimerTask>
 8001a66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d124      	bne.n	8001ab8 <vTaskStartScheduler+0x78>
	__asm volatile
 8001a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a72:	f383 8811 	msr	BASEPRI, r3
 8001a76:	f3bf 8f6f 	isb	sy
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	60bb      	str	r3, [r7, #8]
}
 8001a80:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <vTaskStartScheduler+0xac>)
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <vTaskStartScheduler+0xb0>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <vTaskStartScheduler+0xb4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <vTaskStartScheduler+0xb8>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <vTaskStartScheduler+0xa0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d102      	bne.n	8001aa8 <vTaskStartScheduler+0x68>
 8001aa2:	f003 f947 	bl	8004d34 <SEGGER_SYSVIEW_OnIdle>
 8001aa6:	e004      	b.n	8001ab2 <vTaskStartScheduler+0x72>
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <vTaskStartScheduler+0xb8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 f9a1 	bl	8004df4 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ab2:	f001 fa2d 	bl	8002f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ab6:	e00e      	b.n	8001ad6 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abe:	d10a      	bne.n	8001ad6 <vTaskStartScheduler+0x96>
	__asm volatile
 8001ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac4:	f383 8811 	msr	BASEPRI, r3
 8001ac8:	f3bf 8f6f 	isb	sy
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	607b      	str	r3, [r7, #4]
}
 8001ad2:	bf00      	nop
 8001ad4:	e7fe      	b.n	8001ad4 <vTaskStartScheduler+0x94>
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000028c 	.word	0x2000028c
 8001ae4:	080065a0 	.word	0x080065a0
 8001ae8:	08002161 	.word	0x08002161
 8001aec:	20000288 	.word	0x20000288
 8001af0:	20000274 	.word	0x20000274
 8001af4:	2000026c 	.word	0x2000026c
 8001af8:	20000190 	.word	0x20000190

08001afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <vTaskSuspendAll+0x18>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <vTaskSuspendAll+0x18>)
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	20000290 	.word	0x20000290

08001b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b26:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <xTaskResumeAll+0x11c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10a      	bne.n	8001b44 <xTaskResumeAll+0x2c>
	__asm volatile
 8001b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b32:	f383 8811 	msr	BASEPRI, r3
 8001b36:	f3bf 8f6f 	isb	sy
 8001b3a:	f3bf 8f4f 	dsb	sy
 8001b3e:	603b      	str	r3, [r7, #0]
}
 8001b40:	bf00      	nop
 8001b42:	e7fe      	b.n	8001b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b44:	f001 fa86 	bl	8003054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <xTaskResumeAll+0x11c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <xTaskResumeAll+0x11c>)
 8001b50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <xTaskResumeAll+0x11c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d165      	bne.n	8001c26 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <xTaskResumeAll+0x120>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d061      	beq.n	8001c26 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b62:	e032      	b.n	8001bca <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <xTaskResumeAll+0x124>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3318      	adds	r3, #24
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f8b3 	bl	8000cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f8ae 	bl	8000cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 f97a 	bl	8004e7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <xTaskResumeAll+0x128>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <xTaskResumeAll+0x128>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <xTaskResumeAll+0x12c>)
 8001ba8:	441a      	add	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f7ff f836 	bl	8000c22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <xTaskResumeAll+0x130>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d302      	bcc.n	8001bca <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <xTaskResumeAll+0x134>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <xTaskResumeAll+0x124>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1c8      	bne.n	8001b64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001bd8:	f000 fb58 	bl	800228c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <xTaskResumeAll+0x138>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001be8:	f000 f858 	bl	8001c9c <xTaskIncrementTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <xTaskResumeAll+0x134>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f1      	bne.n	8001be8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <xTaskResumeAll+0x138>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <xTaskResumeAll+0x134>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <xTaskResumeAll+0x13c>)
 8001c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f3bf 8f4f 	dsb	sy
 8001c22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c26:	f001 fa45 	bl	80030b4 <vPortExitCritical>

	return xAlreadyYielded;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000290 	.word	0x20000290
 8001c38:	20000268 	.word	0x20000268
 8001c3c:	20000228 	.word	0x20000228
 8001c40:	20000270 	.word	0x20000270
 8001c44:	20000194 	.word	0x20000194
 8001c48:	20000190 	.word	0x20000190
 8001c4c:	2000027c 	.word	0x2000027c
 8001c50:	20000278 	.word	0x20000278
 8001c54:	e000ed04 	.word	0xe000ed04

08001c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <xTaskGetTickCount+0x1c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000026c 	.word	0x2000026c

08001c78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c7e:	f001 fad5 	bl	800322c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <xTaskGetTickCountFromISR+0x20>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001c8c:	683b      	ldr	r3, [r7, #0]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000026c 	.word	0x2000026c

08001c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ca6:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <xTaskIncrementTick+0x14c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 808c 	bne.w	8001dc8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <xTaskIncrementTick+0x150>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <xTaskIncrementTick+0x150>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d120      	bne.n	8001d06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001cc4:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <xTaskIncrementTick+0x154>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <xTaskIncrementTick+0x48>
	__asm volatile
 8001cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd2:	f383 8811 	msr	BASEPRI, r3
 8001cd6:	f3bf 8f6f 	isb	sy
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	603b      	str	r3, [r7, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	e7fe      	b.n	8001ce2 <xTaskIncrementTick+0x46>
 8001ce4:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <xTaskIncrementTick+0x154>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <xTaskIncrementTick+0x158>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <xTaskIncrementTick+0x154>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <xTaskIncrementTick+0x158>)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <xTaskIncrementTick+0x15c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a3e      	ldr	r2, [pc, #248]	; (8001df8 <xTaskIncrementTick+0x15c>)
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	f000 fac3 	bl	800228c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <xTaskIncrementTick+0x160>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d34c      	bcc.n	8001daa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d10:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <xTaskIncrementTick+0x154>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d104      	bne.n	8001d24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <xTaskIncrementTick+0x160>)
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	601a      	str	r2, [r3, #0]
					break;
 8001d22:	e042      	b.n	8001daa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d24:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <xTaskIncrementTick+0x154>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d203      	bcs.n	8001d44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d3c:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <xTaskIncrementTick+0x160>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001d42:	e032      	b.n	8001daa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe ffc7 	bl	8000cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3318      	adds	r3, #24
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ffbe 	bl	8000cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 f88a 	bl	8004e7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <xTaskIncrementTick+0x164>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <xTaskIncrementTick+0x164>)
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <xTaskIncrementTick+0x168>)
 8001d88:	441a      	add	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f7fe ff46 	bl	8000c22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <xTaskIncrementTick+0x16c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3b5      	bcc.n	8001d10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001da8:	e7b2      	b.n	8001d10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <xTaskIncrementTick+0x16c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	4914      	ldr	r1, [pc, #80]	; (8001e04 <xTaskIncrementTick+0x168>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d907      	bls.n	8001dd2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e004      	b.n	8001dd2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <xTaskIncrementTick+0x170>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <xTaskIncrementTick+0x170>)
 8001dd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <xTaskIncrementTick+0x174>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001dde:	697b      	ldr	r3, [r7, #20]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000290 	.word	0x20000290
 8001dec:	2000026c 	.word	0x2000026c
 8001df0:	20000220 	.word	0x20000220
 8001df4:	20000224 	.word	0x20000224
 8001df8:	20000280 	.word	0x20000280
 8001dfc:	20000288 	.word	0x20000288
 8001e00:	20000270 	.word	0x20000270
 8001e04:	20000194 	.word	0x20000194
 8001e08:	20000190 	.word	0x20000190
 8001e0c:	20000278 	.word	0x20000278
 8001e10:	2000027c 	.word	0x2000027c

08001e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <vTaskSwitchContext+0xbc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <vTaskSwitchContext+0xc0>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e28:	e04d      	b.n	8001ec6 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <vTaskSwitchContext+0xc0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <vTaskSwitchContext+0xc4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f1c3 031f 	rsb	r3, r3, #31
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	4925      	ldr	r1, [pc, #148]	; (8001edc <vTaskSwitchContext+0xc8>)
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	607b      	str	r3, [r7, #4]
}
 8001e6c:	bf00      	nop
 8001e6e:	e7fe      	b.n	8001e6e <vTaskSwitchContext+0x5a>
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4a18      	ldr	r2, [pc, #96]	; (8001edc <vTaskSwitchContext+0xc8>)
 8001e7c:	4413      	add	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	3308      	adds	r3, #8
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d104      	bne.n	8001ea0 <vTaskSwitchContext+0x8c>
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <vTaskSwitchContext+0xcc>)
 8001ea8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <vTaskSwitchContext+0xcc>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <vTaskSwitchContext+0xd0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d102      	bne.n	8001ebc <vTaskSwitchContext+0xa8>
 8001eb6:	f002 ff3d 	bl	8004d34 <SEGGER_SYSVIEW_OnIdle>
}
 8001eba:	e004      	b.n	8001ec6 <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <vTaskSwitchContext+0xcc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 ff97 	bl	8004df4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000290 	.word	0x20000290
 8001ed4:	2000027c 	.word	0x2000027c
 8001ed8:	20000270 	.word	0x20000270
 8001edc:	20000194 	.word	0x20000194
 8001ee0:	20000190 	.word	0x20000190
 8001ee4:	2000028c 	.word	0x2000028c

08001ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	60fb      	str	r3, [r7, #12]
}
 8001f0a:	bf00      	nop
 8001f0c:	e7fe      	b.n	8001f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <vTaskPlaceOnEventList+0x44>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3318      	adds	r3, #24
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fea7 	bl	8000c6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	6838      	ldr	r0, [r7, #0]
 8001f20:	f000 fbce 	bl	80026c0 <prvAddCurrentTaskToDelayedList>
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000190 	.word	0x20000190

08001f30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	617b      	str	r3, [r7, #20]
}
 8001f54:	bf00      	nop
 8001f56:	e7fe      	b.n	8001f56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <vTaskPlaceOnEventListRestricted+0x58>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7fe fe5e 	bl	8000c22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001f72:	2024      	movs	r0, #36	; 0x24
 8001f74:	f002 f92e 	bl	80041d4 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	68b8      	ldr	r0, [r7, #8]
 8001f7c:	f000 fba0 	bl	80026c0 <prvAddCurrentTaskToDelayedList>
	}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000190 	.word	0x20000190

08001f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	60fb      	str	r3, [r7, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	e7fe      	b.n	8001fb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	3318      	adds	r3, #24
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fe8d 	bl	8000cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <xTaskRemoveFromEventList+0xb4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d120      	bne.n	800200c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fe84 	bl	8000cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 ff50 	bl	8004e7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <xTaskRemoveFromEventList+0xb8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	4a16      	ldr	r2, [pc, #88]	; (8002044 <xTaskRemoveFromEventList+0xb8>)
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <xTaskRemoveFromEventList+0xbc>)
 8001ffc:	441a      	add	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	3304      	adds	r3, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f7fe fe0c 	bl	8000c22 <vListInsertEnd>
 800200a:	e005      	b.n	8002018 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3318      	adds	r3, #24
 8002010:	4619      	mov	r1, r3
 8002012:	480e      	ldr	r0, [pc, #56]	; (800204c <xTaskRemoveFromEventList+0xc0>)
 8002014:	f7fe fe05 	bl	8000c22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <xTaskRemoveFromEventList+0xc4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	429a      	cmp	r2, r3
 8002024:	d905      	bls.n	8002032 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002026:	2301      	movs	r3, #1
 8002028:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <xTaskRemoveFromEventList+0xc8>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e001      	b.n	8002036 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002036:	697b      	ldr	r3, [r7, #20]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000290 	.word	0x20000290
 8002044:	20000270 	.word	0x20000270
 8002048:	20000194 	.word	0x20000194
 800204c:	20000228 	.word	0x20000228
 8002050:	20000190 	.word	0x20000190
 8002054:	2000027c 	.word	0x2000027c

08002058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <vTaskInternalSetTimeOutState+0x24>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <vTaskInternalSetTimeOutState+0x28>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	605a      	str	r2, [r3, #4]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	20000280 	.word	0x20000280
 8002080:	2000026c 	.word	0x2000026c

08002084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	613b      	str	r3, [r7, #16]
}
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	60fb      	str	r3, [r7, #12]
}
 80020c2:	bf00      	nop
 80020c4:	e7fe      	b.n	80020c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80020c6:	f000 ffc5 	bl	8003054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <xTaskCheckForTimeOut+0xbc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e2:	d102      	bne.n	80020ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	e023      	b.n	8002132 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <xTaskCheckForTimeOut+0xc0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d007      	beq.n	8002106 <xTaskCheckForTimeOut+0x82>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d302      	bcc.n	8002106 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002100:	2301      	movs	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	e015      	b.n	8002132 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d20b      	bcs.n	8002128 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff9b 	bl	8002058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e004      	b.n	8002132 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800212e:	2301      	movs	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002132:	f000 ffbf 	bl	80030b4 <vPortExitCritical>

	return xReturn;
 8002136:	69fb      	ldr	r3, [r7, #28]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000026c 	.word	0x2000026c
 8002144:	20000280 	.word	0x20000280

08002148 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <vTaskMissedYield+0x14>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	2000027c 	.word	0x2000027c

08002160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002168:	f000 f852 	bl	8002210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <prvIdleTask+0x28>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d9f9      	bls.n	8002168 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <prvIdleTask+0x2c>)
 8002176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002184:	e7f0      	b.n	8002168 <prvIdleTask+0x8>
 8002186:	bf00      	nop
 8002188:	20000194 	.word	0x20000194
 800218c:	e000ed04 	.word	0xe000ed04

08002190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	e00c      	b.n	80021b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <prvInitialiseTaskLists+0x60>)
 80021a8:	4413      	add	r3, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fd0c 	bl	8000bc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d9ef      	bls.n	800219c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <prvInitialiseTaskLists+0x64>)
 80021be:	f7fe fd03 	bl	8000bc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <prvInitialiseTaskLists+0x68>)
 80021c4:	f7fe fd00 	bl	8000bc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <prvInitialiseTaskLists+0x6c>)
 80021ca:	f7fe fcfd 	bl	8000bc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <prvInitialiseTaskLists+0x70>)
 80021d0:	f7fe fcfa 	bl	8000bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <prvInitialiseTaskLists+0x74>)
 80021d6:	f7fe fcf7 	bl	8000bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <prvInitialiseTaskLists+0x78>)
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <prvInitialiseTaskLists+0x64>)
 80021de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <prvInitialiseTaskLists+0x7c>)
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <prvInitialiseTaskLists+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000194 	.word	0x20000194
 80021f4:	200001f8 	.word	0x200001f8
 80021f8:	2000020c 	.word	0x2000020c
 80021fc:	20000228 	.word	0x20000228
 8002200:	2000023c 	.word	0x2000023c
 8002204:	20000254 	.word	0x20000254
 8002208:	20000220 	.word	0x20000220
 800220c:	20000224 	.word	0x20000224

08002210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002216:	e019      	b.n	800224c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002218:	f000 ff1c 	bl	8003054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <prvCheckTasksWaitingTermination+0x50>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fd57 	bl	8000cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <prvCheckTasksWaitingTermination+0x54>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <prvCheckTasksWaitingTermination+0x54>)
 8002236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <prvCheckTasksWaitingTermination+0x58>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3b01      	subs	r3, #1
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <prvCheckTasksWaitingTermination+0x58>)
 8002240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002242:	f000 ff37 	bl	80030b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f810 	bl	800226c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <prvCheckTasksWaitingTermination+0x58>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e1      	bne.n	8002218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000023c 	.word	0x2000023c
 8002264:	20000268 	.word	0x20000268
 8002268:	20000250 	.word	0x20000250

0800226c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f8db 	bl	8003434 <vPortFree>
			vPortFree( pxTCB );
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f001 f8d8 	bl	8003434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <prvResetNextTaskUnblockTime+0x38>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <prvResetNextTaskUnblockTime+0x3c>)
 800229e:	f04f 32ff 	mov.w	r2, #4294967295
 80022a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80022a4:	e008      	b.n	80022b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <prvResetNextTaskUnblockTime+0x38>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <prvResetNextTaskUnblockTime+0x3c>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20000220 	.word	0x20000220
 80022c8:	20000288 	.word	0x20000288

080022cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <xTaskGetSchedulerState+0x34>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80022da:	2301      	movs	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	e008      	b.n	80022f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <xTaskGetSchedulerState+0x38>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80022e8:	2302      	movs	r3, #2
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	e001      	b.n	80022f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80022f2:	687b      	ldr	r3, [r7, #4]
	}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20000274 	.word	0x20000274
 8002304:	20000290 	.word	0x20000290

08002308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d073      	beq.n	8002406 <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <xTaskPriorityDisinherit+0x108>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d00a      	beq.n	800233e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	60fb      	str	r3, [r7, #12]
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	60bb      	str	r3, [r7, #8]
}
 8002358:	bf00      	nop
 800235a:	e7fe      	b.n	800235a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236e:	429a      	cmp	r2, r3
 8002370:	d049      	beq.n	8002406 <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d145      	bne.n	8002406 <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	3304      	adds	r3, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fcac 	bl	8000cdc <uxListRemove>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d115      	bne.n	80023b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238e:	4921      	ldr	r1, [pc, #132]	; (8002414 <xTaskPriorityDisinherit+0x10c>)
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xTaskPriorityDisinherit+0xae>
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	2201      	movs	r2, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <xTaskPriorityDisinherit+0x110>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4013      	ands	r3, r2
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <xTaskPriorityDisinherit+0x110>)
 80023b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	204a      	movs	r0, #74	; 0x4a
 80023bc:	f001 ff28 	bl	8004210 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	f1c3 0205 	rsb	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	2201      	movs	r2, #1
 80023da:	409a      	lsls	r2, r3
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <xTaskPriorityDisinherit+0x110>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <xTaskPriorityDisinherit+0x110>)
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <xTaskPriorityDisinherit+0x10c>)
 80023f4:	441a      	add	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3304      	adds	r3, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f7fe fc10 	bl	8000c22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002402:	2301      	movs	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002406:	697b      	ldr	r3, [r7, #20]
	}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000190 	.word	0x20000190
 8002414:	20000194 	.word	0x20000194
 8002418:	20000270 	.word	0x20000270

0800241c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800242a:	f000 fe13 	bl	8003054 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <xTaskNotifyWait+0xc0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d01a      	beq.n	8002472 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <xTaskNotifyWait+0xc0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	43d2      	mvns	r2, r2
 8002446:	400a      	ands	r2, r1
 8002448:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <xTaskNotifyWait+0xc0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800245a:	2101      	movs	r1, #1
 800245c:	6838      	ldr	r0, [r7, #0]
 800245e:	f000 f92f 	bl	80026c0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <xTaskNotifyWait+0xc4>)
 8002464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002472:	f000 fe1f 	bl	80030b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002476:	f000 fded 	bl	8003054 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	2040      	movs	r0, #64	; 0x40
 8002488:	f001 ffce 	bl	8004428 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <xTaskNotifyWait+0xc0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <xTaskNotifyWait+0xc0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d002      	beq.n	80024b0 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e008      	b.n	80024c2 <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <xTaskNotifyWait+0xc0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	43d2      	mvns	r2, r2
 80024ba:	400a      	ands	r2, r1
 80024bc:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80024be:	2301      	movs	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <xTaskNotifyWait+0xc0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80024cc:	f000 fdf2 	bl	80030b4 <vPortExitCritical>

		return xReturn;
 80024d0:	697b      	ldr	r3, [r7, #20]
	}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000190 	.word	0x20000190
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b090      	sub	sp, #64	; 0x40
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80024f4:	2301      	movs	r3, #1
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002510:	bf00      	nop
 8002512:	e7fe      	b.n	8002512 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002514:	f000 fe8a 	bl	800322c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800251c:	f3ef 8211 	mrs	r2, BASEPRI
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	623a      	str	r2, [r7, #32]
 8002532:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8002534:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800254c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d828      	bhi.n	80025b0 <xTaskGenericNotifyFromISR+0xcc>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <xTaskGenericNotifyFromISR+0x80>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	080025d1 	.word	0x080025d1
 8002568:	08002579 	.word	0x08002579
 800256c:	08002587 	.word	0x08002587
 8002570:	08002593 	.word	0x08002593
 8002574:	0800259b 	.word	0x0800259b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	431a      	orrs	r2, r3
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8002584:	e027      	b.n	80025d6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8002590:	e021      	b.n	80025d6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8002598:	e01d      	b.n	80025d6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800259a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d003      	beq.n	80025aa <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80025a8:	e015      	b.n	80025d6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80025ae:	e012      	b.n	80025d6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d00c      	beq.n	80025d4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80025ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	61bb      	str	r3, [r7, #24]
}
 80025cc:	bf00      	nop
 80025ce:	e7fe      	b.n	80025ce <xTaskGenericNotifyFromISR+0xea>
					break;
 80025d0:	bf00      	nop
 80025d2:	e000      	b.n	80025d6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80025d4:	bf00      	nop
			}

			traceTASK_NOTIFY_FROM_ISR();
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 fcf3 	bl	8004fc4 <SEGGER_SYSVIEW_ShrinkId>
 80025de:	79f9      	ldrb	r1, [r7, #7]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025e4:	9201      	str	r2, [sp, #4]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	460b      	mov	r3, r1
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	4601      	mov	r1, r0
 80025ee:	203f      	movs	r0, #63	; 0x3f
 80025f0:	f001 ffac 	bl	800454c <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80025f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d149      	bne.n	8002690 <xTaskGenericNotifyFromISR+0x1ac>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <xTaskGenericNotifyFromISR+0x136>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	617b      	str	r3, [r7, #20]
}
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xTaskGenericNotifyFromISR+0x134>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <xTaskGenericNotifyFromISR+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d120      	bne.n	8002664 <xTaskGenericNotifyFromISR+0x180>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	3304      	adds	r3, #4
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fb58 	bl	8000cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fc24 	bl	8004e7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2201      	movs	r2, #1
 800263a:	409a      	lsls	r2, r3
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <xTaskGenericNotifyFromISR+0x1c8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4313      	orrs	r3, r2
 8002642:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <xTaskGenericNotifyFromISR+0x1c8>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <xTaskGenericNotifyFromISR+0x1cc>)
 8002654:	441a      	add	r2, r3
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	3304      	adds	r3, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fe fae0 	bl	8000c22 <vListInsertEnd>
 8002662:	e005      	b.n	8002670 <xTaskGenericNotifyFromISR+0x18c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	3318      	adds	r3, #24
 8002668:	4619      	mov	r1, r3
 800266a:	4812      	ldr	r0, [pc, #72]	; (80026b4 <xTaskGenericNotifyFromISR+0x1d0>)
 800266c:	f7fe fad9 	bl	8000c22 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <xTaskGenericNotifyFromISR+0x1d4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	429a      	cmp	r2, r3
 800267c:	d908      	bls.n	8002690 <xTaskGenericNotifyFromISR+0x1ac>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <xTaskGenericNotifyFromISR+0x1a6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <xTaskGenericNotifyFromISR+0x1d8>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f383 8811 	msr	BASEPRI, r3
}
 800269a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800269e:	4618      	mov	r0, r3
 80026a0:	3738      	adds	r7, #56	; 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000290 	.word	0x20000290
 80026ac:	20000270 	.word	0x20000270
 80026b0:	20000194 	.word	0x20000194
 80026b4:	20000228 	.word	0x20000228
 80026b8:	20000190 	.word	0x20000190
 80026bc:	2000027c 	.word	0x2000027c

080026c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <prvAddCurrentTaskToDelayedList+0xd4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3304      	adds	r3, #4
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb00 	bl	8000cdc <uxListRemove>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	2201      	movs	r2, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <prvAddCurrentTaskToDelayedList+0xdc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4013      	ands	r3, r2
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <prvAddCurrentTaskToDelayedList+0xdc>)
 80026f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d110      	bne.n	8002724 <prvAddCurrentTaskToDelayedList+0x64>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	211b      	movs	r1, #27
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fbf8 	bl	8004f04 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3304      	adds	r3, #4
 800271a:	4619      	mov	r1, r3
 800271c:	4820      	ldr	r0, [pc, #128]	; (80027a0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800271e:	f7fe fa80 	bl	8000c22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002722:	e032      	b.n	800278a <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d20f      	bcs.n	800275c <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2104      	movs	r1, #4
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fbde 	bl	8004f04 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3304      	adds	r3, #4
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f7fe fa88 	bl	8000c6a <vListInsert>
}
 800275a:	e016      	b.n	800278a <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2104      	movs	r1, #4
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fbce 	bl	8004f04 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <prvAddCurrentTaskToDelayedList+0xd8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3304      	adds	r3, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f7fe fa78 	bl	8000c6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <prvAddCurrentTaskToDelayedList+0xec>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d202      	bcs.n	800278a <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8002784:	4a09      	ldr	r2, [pc, #36]	; (80027ac <prvAddCurrentTaskToDelayedList+0xec>)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000026c 	.word	0x2000026c
 8002798:	20000190 	.word	0x20000190
 800279c:	20000270 	.word	0x20000270
 80027a0:	20000254 	.word	0x20000254
 80027a4:	20000224 	.word	0x20000224
 80027a8:	20000220 	.word	0x20000220
 80027ac:	20000288 	.word	0x20000288

080027b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80027ba:	f000 fae5 	bl	8002d88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <xTimerCreateTimerTask+0x54>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <xTimerCreateTimerTask+0x58>)
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2302      	movs	r3, #2
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2300      	movs	r3, #0
 80027d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027d4:	490d      	ldr	r1, [pc, #52]	; (800280c <xTimerCreateTimerTask+0x5c>)
 80027d6:	480e      	ldr	r0, [pc, #56]	; (8002810 <xTimerCreateTimerTask+0x60>)
 80027d8:	f7fe ffd0 	bl	800177c <xTaskCreate>
 80027dc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	603b      	str	r3, [r7, #0]
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80027fa:	687b      	ldr	r3, [r7, #4]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200002c4 	.word	0x200002c4
 8002808:	200002c8 	.word	0x200002c8
 800280c:	080065a8 	.word	0x080065a8
 8002810:	080029d1 	.word	0x080029d1

08002814 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002822:	202c      	movs	r0, #44	; 0x2c
 8002824:	f000 fd42 	bl	80032ac <pvPortMalloc>
 8002828:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f805 	bl	800284e <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002844:	697b      	ldr	r3, [r7, #20]
	}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	617b      	str	r3, [r7, #20]
}
 8002874:	bf00      	nop
 8002876:	e7fe      	b.n	8002876 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800287e:	f000 fa83 	bl	8002d88 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	6a3a      	ldr	r2, [r7, #32]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3304      	adds	r3, #4
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe f9af 	bl	8000c08 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	623b      	str	r3, [r7, #32]
}
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <xTimerGenericCommand+0x98>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d02a      	beq.n	8002940 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	dc18      	bgt.n	800292e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028fc:	f7ff fce6 	bl	80022cc <xTaskGetSchedulerState>
 8002900:	4603      	mov	r3, r0
 8002902:	2b02      	cmp	r3, #2
 8002904:	d109      	bne.n	800291a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <xTimerGenericCommand+0x98>)
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f107 0114 	add.w	r1, r7, #20
 800290e:	2300      	movs	r3, #0
 8002910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002912:	f7fe fadb 	bl	8000ecc <xQueueGenericSend>
 8002916:	6278      	str	r0, [r7, #36]	; 0x24
 8002918:	e012      	b.n	8002940 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <xTimerGenericCommand+0x98>)
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	f107 0114 	add.w	r1, r7, #20
 8002922:	2300      	movs	r3, #0
 8002924:	2200      	movs	r2, #0
 8002926:	f7fe fad1 	bl	8000ecc <xQueueGenericSend>
 800292a:	6278      	str	r0, [r7, #36]	; 0x24
 800292c:	e008      	b.n	8002940 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <xTimerGenericCommand+0x98>)
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	f107 0114 	add.w	r1, r7, #20
 8002936:	2300      	movs	r3, #0
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	f7fe fbed 	bl	8001118 <xQueueGenericSendFromISR>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002942:	4618      	mov	r0, r3
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200002c4 	.word	0x200002c4

08002950 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <prvProcessExpiredTimer+0x7c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3304      	adds	r3, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe f9b7 	bl	8000cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d122      	bne.n	80029bc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	18d1      	adds	r1, r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f000 f8c8 	bl	8002b18 <prvInsertTimerInActiveList>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800298e:	2300      	movs	r3, #0
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2300      	movs	r3, #0
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	2100      	movs	r1, #0
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f7ff ff8b 	bl	80028b4 <xTimerGenericCommand>
 800299e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	60fb      	str	r3, [r7, #12]
}
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	4798      	blx	r3
}
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200002bc 	.word	0x200002bc

080029d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029d8:	f107 0308 	add.w	r3, r7, #8
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f857 	bl	8002a90 <prvGetNextExpireTime>
 80029e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4619      	mov	r1, r3
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f803 	bl	80029f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80029ee:	f000 f8d5 	bl	8002b9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029f2:	e7f1      	b.n	80029d8 <prvTimerTask+0x8>

080029f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80029fe:	f7ff f87d 	bl	8001afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f866 	bl	8002ad8 <prvSampleTimeNow>
 8002a0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d130      	bne.n	8002a76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <prvProcessTimerOrBlockTask+0x3c>
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d806      	bhi.n	8002a30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002a22:	f7ff f879 	bl	8001b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff91 	bl	8002950 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002a2e:	e024      	b.n	8002a7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <prvProcessTimerOrBlockTask+0x90>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <prvProcessTimerOrBlockTask+0x50>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <prvProcessTimerOrBlockTask+0x52>
 8002a44:	2300      	movs	r3, #0
 8002a46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <prvProcessTimerOrBlockTask+0x94>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe fe5d 	bl	8001714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002a5a:	f7ff f85d 	bl	8001b18 <xTaskResumeAll>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <prvProcessTimerOrBlockTask+0x98>)
 8002a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	f3bf 8f6f 	isb	sy
}
 8002a74:	e001      	b.n	8002a7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a76:	f7ff f84f 	bl	8001b18 <xTaskResumeAll>
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002c0 	.word	0x200002c0
 8002a88:	200002c4 	.word	0x200002c4
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <prvGetNextExpireTime+0x44>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <prvGetNextExpireTime+0x16>
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	e000      	b.n	8002aa8 <prvGetNextExpireTime+0x18>
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <prvGetNextExpireTime+0x44>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e001      	b.n	8002ac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	200002bc 	.word	0x200002bc

08002ad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002ae0:	f7ff f8ba 	bl	8001c58 <xTaskGetTickCount>
 8002ae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <prvSampleTimeNow+0x3c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d205      	bcs.n	8002afc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002af0:	f000 f8e8 	bl	8002cc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e002      	b.n	8002b02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <prvSampleTimeNow+0x3c>)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002b08:	68fb      	ldr	r3, [r7, #12]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200002cc 	.word	0x200002cc

08002b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d812      	bhi.n	8002b64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	1ad2      	subs	r2, r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d302      	bcc.n	8002b52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e01b      	b.n	8002b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <prvInsertTimerInActiveList+0x7c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f7fe f884 	bl	8000c6a <vListInsert>
 8002b62:	e012      	b.n	8002b8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d206      	bcs.n	8002b7a <prvInsertTimerInActiveList+0x62>
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e007      	b.n	8002b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <prvInsertTimerInActiveList+0x80>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3304      	adds	r3, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f7fe f870 	bl	8000c6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002b8a:	697b      	ldr	r3, [r7, #20]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200002c0 	.word	0x200002c0
 8002b98:	200002bc 	.word	0x200002bc

08002b9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ba2:	e07c      	b.n	8002c9e <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db78      	blt.n	8002c9c <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f88e 	bl	8000cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff88 	bl	8002ad8 <prvSampleTimeNow>
 8002bc8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d866      	bhi.n	8002c9e <prvProcessReceivedCommands+0x102>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <prvProcessReceivedCommands+0x3c>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002c01 	.word	0x08002c01
 8002bdc:	08002c01 	.word	0x08002c01
 8002be0:	08002c01 	.word	0x08002c01
 8002be4:	08002c9f 	.word	0x08002c9f
 8002be8:	08002c5d 	.word	0x08002c5d
 8002bec:	08002c95 	.word	0x08002c95
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c01 	.word	0x08002c01
 8002bf8:	08002c9f 	.word	0x08002c9f
 8002bfc:	08002c5d 	.word	0x08002c5d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	18d1      	adds	r1, r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c0e:	f7ff ff83 	bl	8002b18 <prvInsertTimerInActiveList>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d042      	beq.n	8002c9e <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c1e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d13a      	bne.n	8002c9e <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	441a      	add	r2, r3
 8002c30:	2300      	movs	r3, #0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c3a:	f7ff fe3b 	bl	80028b4 <xTimerGenericCommand>
 8002c3e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d12b      	bne.n	8002c9e <prvProcessReceivedCommands+0x102>
	__asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	61bb      	str	r3, [r7, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	e7fe      	b.n	8002c5a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	617b      	str	r3, [r7, #20]
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	18d1      	adds	r1, r2, r3
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	6a3a      	ldr	r2, [r7, #32]
 8002c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c8e:	f7ff ff43 	bl	8002b18 <prvInsertTimerInActiveList>
					break;
 8002c92:	e004      	b.n	8002c9e <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c96:	f000 fbcd 	bl	8003434 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002c9a:	e000      	b.n	8002c9e <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002c9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <prvProcessReceivedCommands+0x124>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f107 0108 	add.w	r1, r7, #8
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fae1 	bl	8001270 <xQueueReceive>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f af77 	bne.w	8002ba4 <prvProcessReceivedCommands+0x8>
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	3728      	adds	r7, #40	; 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200002c4 	.word	0x200002c4

08002cc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cca:	e045      	b.n	8002d58 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <prvSwitchTimerLists+0xbc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <prvSwitchTimerLists+0xbc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fff9 	bl	8000cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d12e      	bne.n	8002d58 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d90e      	bls.n	8002d2a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <prvSwitchTimerLists+0xbc>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f7fd ffa1 	bl	8000c6a <vListInsert>
 8002d28:	e016      	b.n	8002d58 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	2100      	movs	r1, #0
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fdbd 	bl	80028b4 <xTimerGenericCommand>
 8002d3a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <prvSwitchTimerLists+0x94>
	__asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	603b      	str	r3, [r7, #0]
}
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <prvSwitchTimerLists+0xbc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1b4      	bne.n	8002ccc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <prvSwitchTimerLists+0xbc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <prvSwitchTimerLists+0xc0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <prvSwitchTimerLists+0xbc>)
 8002d6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <prvSwitchTimerLists+0xc0>)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6013      	str	r3, [r2, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200002bc 	.word	0x200002bc
 8002d84:	200002c0 	.word	0x200002c0

08002d88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d8c:	f000 f962 	bl	8003054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <prvCheckForValidListAndQueue+0x54>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11d      	bne.n	8002dd4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d98:	4811      	ldr	r0, [pc, #68]	; (8002de0 <prvCheckForValidListAndQueue+0x58>)
 8002d9a:	f7fd ff15 	bl	8000bc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d9e:	4811      	ldr	r0, [pc, #68]	; (8002de4 <prvCheckForValidListAndQueue+0x5c>)
 8002da0:	f7fd ff12 	bl	8000bc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <prvCheckForValidListAndQueue+0x60>)
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <prvCheckForValidListAndQueue+0x58>)
 8002da8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <prvCheckForValidListAndQueue+0x64>)
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <prvCheckForValidListAndQueue+0x5c>)
 8002dae:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002db0:	2200      	movs	r2, #0
 8002db2:	210c      	movs	r1, #12
 8002db4:	200a      	movs	r0, #10
 8002db6:	f7fe f823 	bl	8000e00 <xQueueGenericCreate>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <prvCheckForValidListAndQueue+0x54>)
 8002dbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <prvCheckForValidListAndQueue+0x54>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <prvCheckForValidListAndQueue+0x54>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4908      	ldr	r1, [pc, #32]	; (8002df0 <prvCheckForValidListAndQueue+0x68>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fc6e 	bl	80016b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dd4:	f000 f96e 	bl	80030b4 <vPortExitCritical>
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	200002c4 	.word	0x200002c4
 8002de0:	20000294 	.word	0x20000294
 8002de4:	200002a8 	.word	0x200002a8
 8002de8:	200002bc 	.word	0x200002bc
 8002dec:	200002c0 	.word	0x200002c0
 8002df0:	080065b0 	.word	0x080065b0

08002df4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3b04      	subs	r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b04      	subs	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f023 0201 	bic.w	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b04      	subs	r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e24:	4a0c      	ldr	r2, [pc, #48]	; (8002e58 <pxPortInitialiseStack+0x64>)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3b14      	subs	r3, #20
 8002e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3b04      	subs	r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f06f 0202 	mvn.w	r2, #2
 8002e42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3b20      	subs	r3, #32
 8002e48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	08002e5d 	.word	0x08002e5d

08002e5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <prvTaskExitError+0x54>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d00a      	beq.n	8002e86 <prvTaskExitError+0x2a>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	60fb      	str	r3, [r7, #12]
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <prvTaskExitError+0x28>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	60bb      	str	r3, [r7, #8]
}
 8002e98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e9a:	bf00      	nop
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0fc      	beq.n	8002e9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	20000010 	.word	0x20000010
	...

08002ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <pxCurrentTCBConst2>)
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	6808      	ldr	r0, [r1, #0]
 8002ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eca:	f380 8809 	msr	PSP, r0
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f380 8811 	msr	BASEPRI, r0
 8002eda:	4770      	bx	lr
 8002edc:	f3af 8000 	nop.w

08002ee0 <pxCurrentTCBConst2>:
 8002ee0:	20000190 	.word	0x20000190
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop

08002ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ee8:	4808      	ldr	r0, [pc, #32]	; (8002f0c <prvPortStartFirstTask+0x24>)
 8002eea:	6800      	ldr	r0, [r0, #0]
 8002eec:	6800      	ldr	r0, [r0, #0]
 8002eee:	f380 8808 	msr	MSP, r0
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f380 8814 	msr	CONTROL, r0
 8002efa:	b662      	cpsie	i
 8002efc:	b661      	cpsie	f
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	df00      	svc	0
 8002f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f0a:	bf00      	nop
 8002f0c:	e000ed08 	.word	0xe000ed08

08002f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <xPortStartScheduler+0x120>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <xPortStartScheduler+0x124>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10a      	bne.n	8002f36 <xPortStartScheduler+0x26>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f36:	4b3e      	ldr	r3, [pc, #248]	; (8003030 <xPortStartScheduler+0x120>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a3f      	ldr	r2, [pc, #252]	; (8003038 <xPortStartScheduler+0x128>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10a      	bne.n	8002f56 <xPortStartScheduler+0x46>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	60fb      	str	r3, [r7, #12]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <xPortStartScheduler+0x12c>)
 8002f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	22ff      	movs	r2, #255	; 0xff
 8002f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <xPortStartScheduler+0x130>)
 8002f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <xPortStartScheduler+0x134>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f84:	e009      	b.n	8002f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002f86:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <xPortStartScheduler+0x134>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	4a2d      	ldr	r2, [pc, #180]	; (8003044 <xPortStartScheduler+0x134>)
 8002f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d0ef      	beq.n	8002f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fa6:	4b27      	ldr	r3, [pc, #156]	; (8003044 <xPortStartScheduler+0x134>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d00a      	beq.n	8002fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	60bb      	str	r3, [r7, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <xPortStartScheduler+0x134>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <xPortStartScheduler+0x134>)
 8002fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <xPortStartScheduler+0x134>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fda:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <xPortStartScheduler+0x134>)
 8002fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <xPortStartScheduler+0x138>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <xPortStartScheduler+0x138>)
 8002fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <xPortStartScheduler+0x138>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <xPortStartScheduler+0x138>)
 8002ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ffe:	f000 f8e7 	bl	80031d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <xPortStartScheduler+0x13c>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003008:	f000 f906 	bl	8003218 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <xPortStartScheduler+0x140>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <xPortStartScheduler+0x140>)
 8003012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003018:	f7ff ff66 	bl	8002ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800301c:	f7fe fefa 	bl	8001e14 <vTaskSwitchContext>
	prvTaskExitError();
 8003020:	f7ff ff1c 	bl	8002e5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000ed00 	.word	0xe000ed00
 8003034:	410fc271 	.word	0x410fc271
 8003038:	410fc270 	.word	0x410fc270
 800303c:	e000e400 	.word	0xe000e400
 8003040:	200002d0 	.word	0x200002d0
 8003044:	200002d4 	.word	0x200002d4
 8003048:	e000ed20 	.word	0xe000ed20
 800304c:	20000010 	.word	0x20000010
 8003050:	e000ef34 	.word	0xe000ef34

08003054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	607b      	str	r3, [r7, #4]
}
 800306c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <vPortEnterCritical+0x58>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <vPortEnterCritical+0x58>)
 8003076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <vPortEnterCritical+0x58>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10f      	bne.n	80030a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <vPortEnterCritical+0x5c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	603b      	str	r3, [r7, #0]
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <vPortEnterCritical+0x4a>
	}
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20000010 	.word	0x20000010
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <vPortExitCritical+0x50>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <vPortExitCritical+0x24>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	607b      	str	r3, [r7, #4]
}
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <vPortExitCritical+0x50>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3b01      	subs	r3, #1
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <vPortExitCritical+0x50>)
 80030e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <vPortExitCritical+0x50>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <vPortExitCritical+0x42>
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f383 8811 	msr	BASEPRI, r3
}
 80030f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000010 	.word	0x20000010
	...

08003110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003110:	f3ef 8009 	mrs	r0, PSP
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	4b15      	ldr	r3, [pc, #84]	; (8003170 <pxCurrentTCBConst>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f01e 0f10 	tst.w	lr, #16
 8003120:	bf08      	it	eq
 8003122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003134:	f380 8811 	msr	BASEPRI, r0
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f7fe fe68 	bl	8001e14 <vTaskSwitchContext>
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f380 8811 	msr	BASEPRI, r0
 800314c:	bc09      	pop	{r0, r3}
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	6808      	ldr	r0, [r1, #0]
 8003152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003156:	f01e 0f10 	tst.w	lr, #16
 800315a:	bf08      	it	eq
 800315c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003160:	f380 8809 	msr	PSP, r0
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w

08003170 <pxCurrentTCBConst>:
 8003170:	20000190 	.word	0x20000190
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	607b      	str	r3, [r7, #4]
}
 8003190:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003192:	f001 fd55 	bl	8004c40 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003196:	f7fe fd81 	bl	8001c9c <xTaskIncrementTick>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80031a0:	f001 fdac 	bl	8004cfc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <SysTick_Handler+0x54>)
 80031a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e003      	b.n	80031b6 <SysTick_Handler+0x3e>
		}
		else
		{
			traceISR_EXIT();
 80031ae:	f001 fd89 	bl	8004cc4 <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 80031b2:	f7fe fe2f 	bl	8001e14 <vTaskSwitchContext>
 80031b6:	2300      	movs	r3, #0
 80031b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f383 8811 	msr	BASEPRI, r3
}
 80031c0:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <vPortSetupTimerInterrupt+0x34>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <vPortSetupTimerInterrupt+0x38>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <vPortSetupTimerInterrupt+0x3c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <vPortSetupTimerInterrupt+0x40>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	4a09      	ldr	r2, [pc, #36]	; (8003214 <vPortSetupTimerInterrupt+0x44>)
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <vPortSetupTimerInterrupt+0x34>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010
 8003208:	e000e018 	.word	0xe000e018
 800320c:	200000fc 	.word	0x200000fc
 8003210:	10624dd3 	.word	0x10624dd3
 8003214:	e000e014 	.word	0xe000e014

08003218 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003218:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003228 <vPortEnableVFP+0x10>
 800321c:	6801      	ldr	r1, [r0, #0]
 800321e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003222:	6001      	str	r1, [r0, #0]
 8003224:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003226:	bf00      	nop
 8003228:	e000ed88 	.word	0xe000ed88

0800322c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003232:	f3ef 8305 	mrs	r3, IPSR
 8003236:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	d914      	bls.n	8003268 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <vPortValidateInterruptPriority+0x70>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <vPortValidateInterruptPriority+0x74>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	7afa      	ldrb	r2, [r7, #11]
 800324e:	429a      	cmp	r2, r3
 8003250:	d20a      	bcs.n	8003268 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	607b      	str	r3, [r7, #4]
}
 8003264:	bf00      	nop
 8003266:	e7fe      	b.n	8003266 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <vPortValidateInterruptPriority+0x78>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <vPortValidateInterruptPriority+0x7c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d90a      	bls.n	800328e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	603b      	str	r3, [r7, #0]
}
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <vPortValidateInterruptPriority+0x60>
	}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e3f0 	.word	0xe000e3f0
 80032a0:	200002d0 	.word	0x200002d0
 80032a4:	e000ed0c 	.word	0xe000ed0c
 80032a8:	200002d4 	.word	0x200002d4

080032ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80032b8:	f7fe fc20 	bl	8001afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032bc:	4b58      	ldr	r3, [pc, #352]	; (8003420 <pvPortMalloc+0x174>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80032c4:	f000 f910 	bl	80034e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032c8:	4b56      	ldr	r3, [pc, #344]	; (8003424 <pvPortMalloc+0x178>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 808e 	bne.w	80033f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01d      	beq.n	8003318 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80032dc:	2208      	movs	r2, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d014      	beq.n	8003318 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f023 0307 	bic.w	r3, r3, #7
 80032f4:	3308      	adds	r3, #8
 80032f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <pvPortMalloc+0x6c>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	617b      	str	r3, [r7, #20]
}
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d069      	beq.n	80033f2 <pvPortMalloc+0x146>
 800331e:	4b42      	ldr	r3, [pc, #264]	; (8003428 <pvPortMalloc+0x17c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	d864      	bhi.n	80033f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <pvPortMalloc+0x180>)
 800332a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800332c:	4b3f      	ldr	r3, [pc, #252]	; (800342c <pvPortMalloc+0x180>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003332:	e004      	b.n	800333e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d903      	bls.n	8003350 <pvPortMalloc+0xa4>
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f1      	bne.n	8003334 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003350:	4b33      	ldr	r3, [pc, #204]	; (8003420 <pvPortMalloc+0x174>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	429a      	cmp	r2, r3
 8003358:	d04b      	beq.n	80033f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2208      	movs	r2, #8
 8003360:	4413      	add	r3, r2
 8003362:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	2308      	movs	r3, #8
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	429a      	cmp	r2, r3
 800337a:	d91f      	bls.n	80033bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <pvPortMalloc+0xf8>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	613b      	str	r3, [r7, #16]
}
 80033a0:	bf00      	nop
 80033a2:	e7fe      	b.n	80033a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad2      	subs	r2, r2, r3
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033b6:	69b8      	ldr	r0, [r7, #24]
 80033b8:	f000 f8f8 	bl	80035ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <pvPortMalloc+0x17c>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	4a18      	ldr	r2, [pc, #96]	; (8003428 <pvPortMalloc+0x17c>)
 80033c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033ca:	4b17      	ldr	r3, [pc, #92]	; (8003428 <pvPortMalloc+0x17c>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <pvPortMalloc+0x184>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d203      	bcs.n	80033de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <pvPortMalloc+0x17c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <pvPortMalloc+0x184>)
 80033dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <pvPortMalloc+0x178>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80033f2:	f7fe fb91 	bl	8001b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <pvPortMalloc+0x16a>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60fb      	str	r3, [r7, #12]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <pvPortMalloc+0x168>
	return pvReturn;
 8003416:	69fb      	ldr	r3, [r7, #28]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20012ee0 	.word	0x20012ee0
 8003424:	20012eec 	.word	0x20012eec
 8003428:	20012ee4 	.word	0x20012ee4
 800342c:	20012ed8 	.word	0x20012ed8
 8003430:	20012ee8 	.word	0x20012ee8

08003434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d048      	beq.n	80034d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003446:	2308      	movs	r3, #8
 8003448:	425b      	negs	r3, r3
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4413      	add	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <vPortFree+0xac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <vPortFree+0x44>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	60fb      	str	r3, [r7, #12]
}
 8003474:	bf00      	nop
 8003476:	e7fe      	b.n	8003476 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <vPortFree+0x62>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	60bb      	str	r3, [r7, #8]
}
 8003492:	bf00      	nop
 8003494:	e7fe      	b.n	8003494 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <vPortFree+0xac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d019      	beq.n	80034d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d115      	bne.n	80034d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <vPortFree+0xac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80034bc:	f7fe fb1e 	bl	8001afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <vPortFree+0xb0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	4a06      	ldr	r2, [pc, #24]	; (80034e4 <vPortFree+0xb0>)
 80034cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034ce:	6938      	ldr	r0, [r7, #16]
 80034d0:	f000 f86c 	bl	80035ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80034d4:	f7fe fb20 	bl	8001b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20012eec 	.word	0x20012eec
 80034e4:	20012ee4 	.word	0x20012ee4

080034e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034ee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80034f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <prvHeapInit+0xac>)
 80034f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3307      	adds	r3, #7
 8003506:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <prvHeapInit+0xac>)
 8003518:	4413      	add	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <prvHeapInit+0xb0>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <prvHeapInit+0xb0>)
 8003528:	2200      	movs	r2, #0
 800352a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003534:	2208      	movs	r2, #8
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0307 	bic.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a15      	ldr	r2, [pc, #84]	; (800359c <prvHeapInit+0xb4>)
 8003548:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <prvHeapInit+0xb4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <prvHeapInit+0xb4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <prvHeapInit+0xb4>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <prvHeapInit+0xb8>)
 8003576:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <prvHeapInit+0xbc>)
 800357e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <prvHeapInit+0xc0>)
 8003582:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003586:	601a      	str	r2, [r3, #0]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	200002d8 	.word	0x200002d8
 8003598:	20012ed8 	.word	0x20012ed8
 800359c:	20012ee0 	.word	0x20012ee0
 80035a0:	20012ee8 	.word	0x20012ee8
 80035a4:	20012ee4 	.word	0x20012ee4
 80035a8:	20012eec 	.word	0x20012eec

080035ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035b4:	4b28      	ldr	r3, [pc, #160]	; (8003658 <prvInsertBlockIntoFreeList+0xac>)
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e002      	b.n	80035c0 <prvInsertBlockIntoFreeList+0x14>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d8f7      	bhi.n	80035ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	4413      	add	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d108      	bne.n	80035ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	441a      	add	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d118      	bne.n	8003634 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <prvInsertBlockIntoFreeList+0xb0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d00d      	beq.n	800362a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e008      	b.n	800363c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <prvInsertBlockIntoFreeList+0xb0>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e003      	b.n	800363c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d002      	beq.n	800364a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20012ed8 	.word	0x20012ed8
 800365c:	20012ee0 	.word	0x20012ee0

08003660 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <_cbSendSystemDesc+0x14>)
 8003666:	f001 fa95 	bl	8004b94 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800366a:	4803      	ldr	r0, [pc, #12]	; (8003678 <_cbSendSystemDesc+0x18>)
 800366c:	f001 fa92 	bl	8004b94 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	080065b8 	.word	0x080065b8
 8003678:	08006600 	.word	0x08006600

0800367c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <SEGGER_SYSVIEW_Conf+0x20>)
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <SEGGER_SYSVIEW_Conf+0x20>)
 8003686:	6819      	ldr	r1, [r3, #0]
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800368a:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800368c:	f000 fd54 	bl	8004138 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003690:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003694:	f000 fd8e 	bl	80041b4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	200000fc 	.word	0x200000fc
 80036a0:	08003661 	.word	0x08003661
 80036a4:	08006790 	.word	0x08006790

080036a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	e033      	b.n	800371c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036b4:	491e      	ldr	r1, [pc, #120]	; (8003730 <_cbSendTaskList+0x88>)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	491a      	ldr	r1, [pc, #104]	; (8003730 <_cbSendTaskList+0x88>)
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3304      	adds	r3, #4
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	4c16      	ldr	r4, [pc, #88]	; (8003730 <_cbSendTaskList+0x88>)
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4423      	add	r3, r4
 80036e4:	3308      	adds	r3, #8
 80036e6:	681c      	ldr	r4, [r3, #0]
 80036e8:	4d11      	ldr	r5, [pc, #68]	; (8003730 <_cbSendTaskList+0x88>)
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	442b      	add	r3, r5
 80036f6:	330c      	adds	r3, #12
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	4e0d      	ldr	r6, [pc, #52]	; (8003730 <_cbSendTaskList+0x88>)
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4433      	add	r3, r6
 8003708:	3310      	adds	r3, #16
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	462b      	mov	r3, r5
 8003710:	4622      	mov	r2, r4
 8003712:	f000 f8b5 	bl	8003880 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3301      	adds	r3, #1
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <_cbSendTaskList+0x8c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3c6      	bcc.n	80036b4 <_cbSendTaskList+0xc>
  }
}
 8003726:	bf00      	nop
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003730:	20012ef0 	.word	0x20012ef0
 8003734:	20012f90 	.word	0x20012f90

08003738 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003738:	b5b0      	push	{r4, r5, r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800373e:	f7fe fa9b 	bl	8001c78 <xTaskGetTickCountFromISR>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800374e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	f04f 0400 	mov.w	r4, #0
 800375a:	f04f 0500 	mov.w	r5, #0
 800375e:	015d      	lsls	r5, r3, #5
 8003760:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003764:	0154      	lsls	r4, r2, #5
 8003766:	4622      	mov	r2, r4
 8003768:	462b      	mov	r3, r5
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	eb63 0301 	sbc.w	r3, r3, r1
 8003770:	f04f 0400 	mov.w	r4, #0
 8003774:	f04f 0500 	mov.w	r5, #0
 8003778:	009d      	lsls	r5, r3, #2
 800377a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800377e:	0094      	lsls	r4, r2, #2
 8003780:	4622      	mov	r2, r4
 8003782:	462b      	mov	r3, r5
 8003784:	1812      	adds	r2, r2, r0
 8003786:	eb41 0303 	adc.w	r3, r1, r3
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003798:	00d0      	lsls	r0, r2, #3
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80037a2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bdb0      	pop	{r4, r5, r7, pc}

080037b0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037be:	2205      	movs	r2, #5
 80037c0:	492b      	ldr	r1, [pc, #172]	; (8003870 <SYSVIEW_AddTask+0xc0>)
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	f002 fa9c 	bl	8005d00 <memcmp>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d04b      	beq.n	8003866 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b07      	cmp	r3, #7
 80037d4:	d903      	bls.n	80037de <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80037d6:	4828      	ldr	r0, [pc, #160]	; (8003878 <SYSVIEW_AddTask+0xc8>)
 80037d8:	f001 fce2 	bl	80051a0 <SEGGER_SYSVIEW_Warn>
    return;
 80037dc:	e044      	b.n	8003868 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80037de:	4b25      	ldr	r3, [pc, #148]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4926      	ldr	r1, [pc, #152]	; (800387c <SYSVIEW_AddTask+0xcc>)
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4921      	ldr	r1, [pc, #132]	; (800387c <SYSVIEW_AddTask+0xcc>)
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3304      	adds	r3, #4
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	491b      	ldr	r1, [pc, #108]	; (800387c <SYSVIEW_AddTask+0xcc>)
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3308      	adds	r3, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4916      	ldr	r1, [pc, #88]	; (800387c <SYSVIEW_AddTask+0xcc>)
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	330c      	adds	r3, #12
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4910      	ldr	r1, [pc, #64]	; (800387c <SYSVIEW_AddTask+0xcc>)
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3310      	adds	r3, #16
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	4a08      	ldr	r2, [pc, #32]	; (8003874 <SYSVIEW_AddTask+0xc4>)
 8003852:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f80e 	bl	8003880 <SYSVIEW_SendTaskInfo>
 8003864:	e000      	b.n	8003868 <SYSVIEW_AddTask+0xb8>
    return;
 8003866:	bf00      	nop

}
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	08006610 	.word	0x08006610
 8003874:	20012f90 	.word	0x20012f90
 8003878:	08006618 	.word	0x08006618
 800387c:	20012ef0 	.word	0x20012ef0

08003880 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800388e:	f107 0314 	add.w	r3, r7, #20
 8003892:	2214      	movs	r2, #20
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f002 fa4e 	bl	8005d38 <memset>
  TaskInfo.TaskID     = TaskID;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 f873 	bl	80049a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038ba:	bf00      	nop
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80038ca:	4b21      	ldr	r3, [pc, #132]	; (8003950 <_DoInit+0x8c>)
 80038cc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2203      	movs	r2, #3
 80038d2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <_DoInit+0x90>)
 80038de:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <_DoInit+0x94>)
 80038e4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ec:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <_DoInit+0x90>)
 8003904:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <_DoInit+0x98>)
 800390a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2210      	movs	r2, #16
 8003910:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3307      	adds	r3, #7
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <_DoInit+0x9c>)
 800392a:	6810      	ldr	r0, [r2, #0]
 800392c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <_DoInit+0xa0>)
 8003932:	6810      	ldr	r0, [r2, #0]
 8003934:	6018      	str	r0, [r3, #0]
 8003936:	8891      	ldrh	r1, [r2, #4]
 8003938:	7992      	ldrb	r2, [r2, #6]
 800393a:	8099      	strh	r1, [r3, #4]
 800393c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	719a      	strb	r2, [r3, #6]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	20017628 	.word	0x20017628
 8003954:	08006668 	.word	0x08006668
 8003958:	20012f94 	.word	0x20012f94
 800395c:	20013394 	.word	0x20013394
 8003960:	08006674 	.word	0x08006674
 8003964:	08006678 	.word	0x08006678

08003968 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003974:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <SEGGER_RTT_ReadNoLock+0x100>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <SEGGER_RTT_ReadNoLock+0x18>
 800397c:	f7ff ffa2 	bl	80038c4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	3360      	adds	r3, #96	; 0x60
 800398c:	4a36      	ldr	r2, [pc, #216]	; (8003a68 <SEGGER_RTT_ReadNoLock+0x100>)
 800398e:	4413      	add	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d92a      	bls.n	8003a04 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4293      	cmp	r3, r2
 80039be:	bf28      	it	cs
 80039c0:	4613      	movcs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	4413      	add	r3, r2
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4619      	mov	r1, r3
 80039d0:	69f8      	ldr	r0, [r7, #28]
 80039d2:	f002 f9a3 	bl	8005d1c <memcpy>
    NumBytesRead += NumBytesRem;
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039ee:	6a3a      	ldr	r2, [r7, #32]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d101      	bne.n	8003a04 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003a00:	2300      	movs	r3, #0
 8003a02:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf28      	it	cs
 8003a14:	4613      	movcs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d018      	beq.n	8003a50 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	4413      	add	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	69f8      	ldr	r0, [r7, #28]
 8003a2c:	f002 f976 	bl	8005d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20017628 	.word	0x20017628

08003a6c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4a3f      	ldr	r2, [pc, #252]	; (8003b88 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d854      	bhi.n	8003b4c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d30f      	bcc.n	8003ad6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	4413      	add	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 f92a 	bl	8005d1c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	441a      	add	r2, r3
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e054      	b.n	8003b80 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d34b      	bcc.n	8003b7e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d90e      	bls.n	8003b16 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	4413      	add	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 f909 	bl	8005d1c <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	441a      	add	r2, r3
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	e018      	b.n	8003b48 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 f8fa 	bl	8005d1c <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	6858      	ldr	r0, [r3, #4]
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	18d1      	adds	r1, r2, r3
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f002 f8ef 	bl	8005d1c <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad2      	subs	r2, r2, r3
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e019      	b.n	8003b80 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d30f      	bcc.n	8003b7e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	4413      	add	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 f8d6 	bl	8005d1c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	441a      	add	r2, r3
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20017628 	.word	0x20017628

08003b8c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003ba2:	f7ff fe8f 	bl	80038c4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d24c      	bcs.n	8003c4c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003bb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb6:	f04f 0120 	mov.w	r1, #32
 8003bba:	f381 8811 	msr	BASEPRI, r1
 8003bbe:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d032      	beq.n	8003c2c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003bc6:	4925      	ldr	r1, [pc, #148]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003bda:	4920      	ldr	r1, [pc, #128]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	3304      	adds	r3, #4
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003bf0:	491a      	ldr	r1, [pc, #104]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3320      	adds	r3, #32
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003c04:	4915      	ldr	r1, [pc, #84]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	440b      	add	r3, r1
 8003c12:	3328      	adds	r3, #40	; 0x28
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003c18:	4910      	ldr	r1, [pc, #64]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	3324      	adds	r3, #36	; 0x24
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003c2c:	490b      	ldr	r1, [pc, #44]	; (8003c5c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	332c      	adds	r3, #44	; 0x2c
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e002      	b.n	8003c52 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003c52:	697b      	ldr	r3, [r7, #20]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20017628 	.word	0x20017628

08003c60 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003c76:	f7ff fe25 	bl	80038c4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d24b      	bcs.n	8003d1e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003c86:	f3ef 8311 	mrs	r3, BASEPRI
 8003c8a:	f04f 0120 	mov.w	r1, #32
 8003c8e:	f381 8811 	msr	BASEPRI, r1
 8003c92:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d031      	beq.n	8003cfe <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003c9a:	4925      	ldr	r1, [pc, #148]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3360      	adds	r3, #96	; 0x60
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cae:	4920      	ldr	r1, [pc, #128]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	3364      	adds	r3, #100	; 0x64
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003cc2:	491b      	ldr	r1, [pc, #108]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	3368      	adds	r3, #104	; 0x68
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003cd6:	4916      	ldr	r1, [pc, #88]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3370      	adds	r3, #112	; 0x70
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003cea:	4911      	ldr	r1, [pc, #68]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	440b      	add	r3, r1
 8003cf8:	336c      	adds	r3, #108	; 0x6c
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003cfe:	490c      	ldr	r1, [pc, #48]	; (8003d30 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3374      	adds	r3, #116	; 0x74
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e002      	b.n	8003d24 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003d24:	697b      	ldr	r3, [r7, #20]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20017628 	.word	0x20017628

08003d34 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003d44:	e002      	b.n	8003d4c <_EncodeStr+0x18>
    Len++;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f6      	bne.n	8003d46 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d901      	bls.n	8003d64 <_EncodeStr+0x30>
    Len = Limit;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2bfe      	cmp	r3, #254	; 0xfe
 8003d68:	d806      	bhi.n	8003d78 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	60fa      	str	r2, [r7, #12]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e011      	b.n	8003d9c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	60fa      	str	r2, [r7, #12]
 8003d7e:	22ff      	movs	r2, #255	; 0xff
 8003d80:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	60fa      	str	r2, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	0a19      	lsrs	r1, r3, #8
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	60fa      	str	r2, [r7, #12]
 8003d98:	b2ca      	uxtb	r2, r1
 8003d9a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003da0:	e00a      	b.n	8003db8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	1c53      	adds	r3, r2, #1
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1c59      	adds	r1, r3, #1
 8003dac:	60f9      	str	r1, [r7, #12]
 8003dae:	7812      	ldrb	r2, [r2, #0]
 8003db0:	701a      	strb	r2, [r3, #0]
    n++;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	3301      	adds	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d3f0      	bcc.n	8003da2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003dee:	1cfb      	adds	r3, r7, #3
 8003df0:	2201      	movs	r2, #1
 8003df2:	4619      	mov	r1, r3
 8003df4:	2001      	movs	r0, #1
 8003df6:	f7ff fdb7 	bl	8003968 <SEGGER_RTT_ReadNoLock>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	dd4c      	ble.n	8003e9e <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	2b07      	cmp	r3, #7
 8003e08:	dc16      	bgt.n	8003e38 <_HandleIncomingPacket+0x50>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dd3c      	ble.n	8003e88 <_HandleIncomingPacket+0xa0>
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	2b06      	cmp	r3, #6
 8003e12:	d839      	bhi.n	8003e88 <_HandleIncomingPacket+0xa0>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <_HandleIncomingPacket+0x34>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e3f 	.word	0x08003e3f
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e4b 	.word	0x08003e4b
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e5d 	.word	0x08003e5d
 8003e34:	08003e63 	.word	0x08003e63
 8003e38:	2b80      	cmp	r3, #128	; 0x80
 8003e3a:	d015      	beq.n	8003e68 <_HandleIncomingPacket+0x80>
 8003e3c:	e024      	b.n	8003e88 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003e3e:	f000 fc33 	bl	80046a8 <SEGGER_SYSVIEW_Start>
      break;
 8003e42:	e031      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003e44:	f000 fcec 	bl	8004820 <SEGGER_SYSVIEW_Stop>
      break;
 8003e48:	e02e      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003e4a:	f000 fec7 	bl	8004bdc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003e4e:	e02b      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003e50:	f000 fe8c 	bl	8004b6c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003e54:	e028      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003e56:	f000 fd09 	bl	800486c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003e5a:	e025      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003e5c:	f001 f962 	bl	8005124 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003e60:	e022      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003e62:	f001 f941 	bl	80050e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003e66:	e01f      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e68:	1cfb      	adds	r3, r7, #3
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f7ff fd7a 	bl	8003968 <SEGGER_RTT_ReadNoLock>
 8003e74:	4603      	mov	r3, r0
 8003e76:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dd11      	ble.n	8003ea2 <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f8b1 	bl	8004fe8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003e86:	e00c      	b.n	8003ea2 <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da0a      	bge.n	8003ea6 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e90:	1cfb      	adds	r3, r7, #3
 8003e92:	2201      	movs	r2, #1
 8003e94:	4619      	mov	r1, r3
 8003e96:	2001      	movs	r0, #1
 8003e98:	f7ff fd66 	bl	8003968 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003e9c:	e003      	b.n	8003ea6 <_HandleIncomingPacket+0xbe>
    }
  }
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <_HandleIncomingPacket+0xc0>
      break;
 8003ea6:	bf00      	nop
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec4:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <_TrySendOverflowPacket+0xd8>)
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eca:	e00b      	b.n	8003ee4 <_TrySendOverflowPacket+0x34>
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	09db      	lsrs	r3, r3, #7
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee8:	d8f0      	bhi.n	8003ecc <_TrySendOverflowPacket+0x1c>
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <_TrySendOverflowPacket+0xdc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <_TrySendOverflowPacket+0xd8>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	e00b      	b.n	8003f2c <_TrySendOverflowPacket+0x7c>
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	1c59      	adds	r1, r3, #1
 8003f1c:	6279      	str	r1, [r7, #36]	; 0x24
 8003f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	09db      	lsrs	r3, r3, #7
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f30:	d8f0      	bhi.n	8003f14 <_TrySendOverflowPacket+0x64>
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	627a      	str	r2, [r7, #36]	; 0x24
 8003f38:	6a3a      	ldr	r2, [r7, #32]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f7ff fd8c 	bl	8003a6c <SEGGER_RTT_WriteSkipNoLock>
 8003f54:	4603      	mov	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <_TrySendOverflowPacket+0xd8>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <_TrySendOverflowPacket+0xd8>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <_TrySendOverflowPacket+0xd8>)
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	e004      	b.n	8003f7c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <_TrySendOverflowPacket+0xd8>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a03      	ldr	r2, [pc, #12]	; (8003f88 <_TrySendOverflowPacket+0xd8>)
 8003f7a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003f7c:	693b      	ldr	r3, [r7, #16]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3730      	adds	r7, #48	; 0x30
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200173ac 	.word	0x200173ac
 8003f8c:	e0001004 	.word	0xe0001004

08003f90 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003f9c:	4b63      	ldr	r3, [pc, #396]	; (800412c <_SendPacket+0x19c>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d010      	beq.n	8003fc6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <_SendPacket+0x19c>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a1 	beq.w	80040f0 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003fae:	4b5f      	ldr	r3, [pc, #380]	; (800412c <_SendPacket+0x19c>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d109      	bne.n	8003fca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003fb6:	f7ff ff7b 	bl	8003eb0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003fba:	4b5c      	ldr	r3, [pc, #368]	; (800412c <_SendPacket+0x19c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	f040 8098 	bne.w	80040f4 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8003fc4:	e001      	b.n	8003fca <_SendPacket+0x3a>
    goto Send;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <_SendPacket+0x3c>
Send:
 8003fca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b1f      	cmp	r3, #31
 8003fd0:	d809      	bhi.n	8003fe6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003fd2:	4b56      	ldr	r3, [pc, #344]	; (800412c <_SendPacket+0x19c>)
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8089 	bne.w	80040f8 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b17      	cmp	r3, #23
 8003fea:	d807      	bhi.n	8003ffc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e03d      	b.n	8004078 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b7f      	cmp	r3, #127	; 0x7f
 8004008:	d912      	bls.n	8004030 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	09da      	lsrs	r2, r3, #7
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	3a01      	subs	r2, #1
 8004022:	60fa      	str	r2, [r7, #12]
 8004024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e006      	b.n	800403e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b01      	subs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b7f      	cmp	r3, #127	; 0x7f
 8004042:	d912      	bls.n	800406a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	09da      	lsrs	r2, r3, #7
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b01      	subs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	3a01      	subs	r2, #1
 800405c:	60fa      	str	r2, [r7, #12]
 800405e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e006      	b.n	8004078 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b01      	subs	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004078:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <_SendPacket+0x1a0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <_SendPacket+0x19c>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	e00b      	b.n	80040aa <_SendPacket+0x11a>
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	6279      	str	r1, [r7, #36]	; 0x24
 800409c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	09db      	lsrs	r3, r3, #7
 80040a8:	623b      	str	r3, [r7, #32]
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	2b7f      	cmp	r3, #127	; 0x7f
 80040ae:	d8f0      	bhi.n	8004092 <_SendPacket+0x102>
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	627a      	str	r2, [r7, #36]	; 0x24
 80040b6:	6a3a      	ldr	r2, [r7, #32]
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7ff fcce 	bl	8003a6c <SEGGER_RTT_WriteSkipNoLock>
 80040d0:	4603      	mov	r3, r0
 80040d2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <_SendPacket+0x19c>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	60d3      	str	r3, [r2, #12]
 80040e0:	e00b      	b.n	80040fa <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <_SendPacket+0x19c>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <_SendPacket+0x19c>)
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e004      	b.n	80040fa <_SendPacket+0x16a>
    goto SendDone;
 80040f0:	bf00      	nop
 80040f2:	e002      	b.n	80040fa <_SendPacket+0x16a>
      goto SendDone;
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <_SendPacket+0x16a>
      goto SendDone;
 80040f8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <_SendPacket+0x1a4>)
 80040fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <_SendPacket+0x1a4>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	429a      	cmp	r2, r3
 8004108:	d00b      	beq.n	8004122 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <_SendPacket+0x19c>)
 800410c:	789b      	ldrb	r3, [r3, #2]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d107      	bne.n	8004122 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <_SendPacket+0x19c>)
 8004114:	2201      	movs	r2, #1
 8004116:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004118:	f7ff fe66 	bl	8003de8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <_SendPacket+0x19c>)
 800411e:	2200      	movs	r2, #0
 8004120:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004122:	bf00      	nop
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200173ac 	.word	0x200173ac
 8004130:	e0001004 	.word	0xe0001004
 8004134:	20017628 	.word	0x20017628

08004138 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800414e:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <SEGGER_SYSVIEW_Init+0x68>)
 8004150:	4914      	ldr	r1, [pc, #80]	; (80041a4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004152:	2001      	movs	r0, #1
 8004154:	f7ff fd1a 	bl	8003b8c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2308      	movs	r3, #8
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <SEGGER_SYSVIEW_Init+0x70>)
 8004160:	4910      	ldr	r1, [pc, #64]	; (80041a4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004162:	2001      	movs	r0, #1
 8004164:	f7ff fd7c 	bl	8003c60 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <SEGGER_SYSVIEW_Init+0x74>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <SEGGER_SYSVIEW_Init+0x78>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <SEGGER_SYSVIEW_Init+0x74>)
 8004176:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004178:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <SEGGER_SYSVIEW_Init+0x74>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800417e:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <SEGGER_SYSVIEW_Init+0x74>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004184:	4a09      	ldr	r2, [pc, #36]	; (80041ac <SEGGER_SYSVIEW_Init+0x74>)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800418a:	4a08      	ldr	r2, [pc, #32]	; (80041ac <SEGGER_SYSVIEW_Init+0x74>)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <SEGGER_SYSVIEW_Init+0x74>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200133a4 	.word	0x200133a4
 80041a4:	08006680 	.word	0x08006680
 80041a8:	200173a4 	.word	0x200173a4
 80041ac:	200173ac 	.word	0x200173ac
 80041b0:	e0001004 	.word	0xe0001004

080041b4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6113      	str	r3, [r2, #16]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	200173ac 	.word	0x200173ac

080041d4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041dc:	f3ef 8311 	mrs	r3, BASEPRI
 80041e0:	f04f 0120 	mov.w	r1, #32
 80041e4:	f381 8811 	msr	BASEPRI, r1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	4808      	ldr	r0, [pc, #32]	; (800420c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80041ec:	f7ff fdef 	bl	8003dce <_PreparePacket>
 80041f0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	68b8      	ldr	r0, [r7, #8]
 80041f8:	f7ff feca 	bl	8003f90 <_SendPacket>
  RECORD_END();
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f383 8811 	msr	BASEPRI, r3
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200173dc 	.word	0x200173dc

08004210 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800421a:	f3ef 8311 	mrs	r3, BASEPRI
 800421e:	f04f 0120 	mov.w	r1, #32
 8004222:	f381 8811 	msr	BASEPRI, r1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	4816      	ldr	r0, [pc, #88]	; (8004284 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800422a:	f7ff fdd0 	bl	8003dce <_PreparePacket>
 800422e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e00b      	b.n	8004256 <SEGGER_SYSVIEW_RecordU32+0x46>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	1c59      	adds	r1, r3, #1
 8004246:	61f9      	str	r1, [r7, #28]
 8004248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	09db      	lsrs	r3, r3, #7
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b7f      	cmp	r3, #127	; 0x7f
 800425a:	d8f0      	bhi.n	800423e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	61fa      	str	r2, [r7, #28]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	6938      	ldr	r0, [r7, #16]
 8004272:	f7ff fe8d 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f383 8811 	msr	BASEPRI, r3
}
 800427c:	bf00      	nop
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	200173dc 	.word	0x200173dc

08004288 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004294:	f3ef 8311 	mrs	r3, BASEPRI
 8004298:	f04f 0120 	mov.w	r1, #32
 800429c:	f381 8811 	msr	BASEPRI, r1
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	4825      	ldr	r0, [pc, #148]	; (8004338 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80042a4:	f7ff fd93 	bl	8003dce <_PreparePacket>
 80042a8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b6:	e00b      	b.n	80042d0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	1c59      	adds	r1, r3, #1
 80042c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	09db      	lsrs	r3, r3, #7
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	2b7f      	cmp	r3, #127	; 0x7f
 80042d4:	d8f0      	bhi.n	80042b8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	e00b      	b.n	8004308 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	6279      	str	r1, [r7, #36]	; 0x24
 80042fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2b7f      	cmp	r3, #127	; 0x7f
 800430c:	d8f0      	bhi.n	80042f0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	627a      	str	r2, [r7, #36]	; 0x24
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6979      	ldr	r1, [r7, #20]
 8004322:	69b8      	ldr	r0, [r7, #24]
 8004324:	f7ff fe34 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f383 8811 	msr	BASEPRI, r3
}
 800432e:	bf00      	nop
 8004330:	3730      	adds	r7, #48	; 0x30
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200173dc 	.word	0x200173dc

0800433c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b08e      	sub	sp, #56	; 0x38
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800434a:	f3ef 8311 	mrs	r3, BASEPRI
 800434e:	f04f 0120 	mov.w	r1, #32
 8004352:	f381 8811 	msr	BASEPRI, r1
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	4832      	ldr	r0, [pc, #200]	; (8004424 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800435a:	f7ff fd38 	bl	8003dce <_PreparePacket>
 800435e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
 800436c:	e00b      	b.n	8004386 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	b2da      	uxtb	r2, r3
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	1c59      	adds	r1, r3, #1
 8004376:	6379      	str	r1, [r7, #52]	; 0x34
 8004378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	09db      	lsrs	r3, r3, #7
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2b7f      	cmp	r3, #127	; 0x7f
 800438a:	d8f0      	bhi.n	800436e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	637a      	str	r2, [r7, #52]	; 0x34
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a4:	e00b      	b.n	80043be <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	1c59      	adds	r1, r3, #1
 80043ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	09db      	lsrs	r3, r3, #7
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2b7f      	cmp	r3, #127	; 0x7f
 80043c2:	d8f0      	bhi.n	80043a6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	e00b      	b.n	80043f6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	6279      	str	r1, [r7, #36]	; 0x24
 80043e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	09db      	lsrs	r3, r3, #7
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b7f      	cmp	r3, #127	; 0x7f
 80043fa:	d8f0      	bhi.n	80043de <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	627a      	str	r2, [r7, #36]	; 0x24
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	69b8      	ldr	r0, [r7, #24]
 8004412:	f7ff fdbd 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f383 8811 	msr	BASEPRI, r3
}
 800441c:	bf00      	nop
 800441e:	3738      	adds	r7, #56	; 0x38
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200173dc 	.word	0x200173dc

08004428 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b090      	sub	sp, #64	; 0x40
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004436:	f3ef 8311 	mrs	r3, BASEPRI
 800443a:	f04f 0120 	mov.w	r1, #32
 800443e:	f381 8811 	msr	BASEPRI, r1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	4840      	ldr	r0, [pc, #256]	; (8004548 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004446:	f7ff fcc2 	bl	8003dce <_PreparePacket>
 800444a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
 8004458:	e00b      	b.n	8004472 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	b2da      	uxtb	r2, r3
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	1c59      	adds	r1, r3, #1
 8004462:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	09db      	lsrs	r3, r3, #7
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	2b7f      	cmp	r3, #127	; 0x7f
 8004476:	d8f0      	bhi.n	800445a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800447e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
 8004490:	e00b      	b.n	80044aa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	b2da      	uxtb	r2, r3
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	6379      	str	r1, [r7, #52]	; 0x34
 800449c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	09db      	lsrs	r3, r3, #7
 80044a8:	633b      	str	r3, [r7, #48]	; 0x30
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2b7f      	cmp	r3, #127	; 0x7f
 80044ae:	d8f0      	bhi.n	8004492 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	637a      	str	r2, [r7, #52]	; 0x34
 80044b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c8:	e00b      	b.n	80044e2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	1c59      	adds	r1, r3, #1
 80044d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	09db      	lsrs	r3, r3, #7
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	2b7f      	cmp	r3, #127	; 0x7f
 80044e6:	d8f0      	bhi.n	80044ca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	e00b      	b.n	800451a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	1c59      	adds	r1, r3, #1
 800450a:	6279      	str	r1, [r7, #36]	; 0x24
 800450c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	09db      	lsrs	r3, r3, #7
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2b7f      	cmp	r3, #127	; 0x7f
 800451e:	d8f0      	bhi.n	8004502 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	627a      	str	r2, [r7, #36]	; 0x24
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	69b8      	ldr	r0, [r7, #24]
 8004536:	f7ff fd2b 	bl	8003f90 <_SendPacket>
  RECORD_END();
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f383 8811 	msr	BASEPRI, r3
}
 8004540:	bf00      	nop
 8004542:	3740      	adds	r7, #64	; 0x40
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	200173dc 	.word	0x200173dc

0800454c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b092      	sub	sp, #72	; 0x48
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800455a:	f3ef 8311 	mrs	r3, BASEPRI
 800455e:	f04f 0120 	mov.w	r1, #32
 8004562:	f381 8811 	msr	BASEPRI, r1
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	484e      	ldr	r0, [pc, #312]	; (80046a4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800456a:	f7ff fc30 	bl	8003dce <_PreparePacket>
 800456e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	643b      	str	r3, [r7, #64]	; 0x40
 800457c:	e00b      	b.n	8004596 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800457e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004580:	b2da      	uxtb	r2, r3
 8004582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004584:	1c59      	adds	r1, r3, #1
 8004586:	6479      	str	r1, [r7, #68]	; 0x44
 8004588:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004592:	09db      	lsrs	r3, r3, #7
 8004594:	643b      	str	r3, [r7, #64]	; 0x40
 8004596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004598:	2b7f      	cmp	r3, #127	; 0x7f
 800459a:	d8f0      	bhi.n	800457e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	647a      	str	r2, [r7, #68]	; 0x44
 80045a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b4:	e00b      	b.n	80045ce <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80045c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	09db      	lsrs	r3, r3, #7
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	2b7f      	cmp	r3, #127	; 0x7f
 80045d2:	d8f0      	bhi.n	80045b6 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80045d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
 80045ec:	e00b      	b.n	8004606 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	1c59      	adds	r1, r3, #1
 80045f6:	6379      	str	r1, [r7, #52]	; 0x34
 80045f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	09db      	lsrs	r3, r3, #7
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2b7f      	cmp	r3, #127	; 0x7f
 800460a:	d8f0      	bhi.n	80045ee <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	637a      	str	r2, [r7, #52]	; 0x34
 8004612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
 8004624:	e00b      	b.n	800463e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	b2da      	uxtb	r2, r3
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	1c59      	adds	r1, r3, #1
 800462e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	09db      	lsrs	r3, r3, #7
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	2b7f      	cmp	r3, #127	; 0x7f
 8004642:	d8f0      	bhi.n	8004626 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800464a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	e00b      	b.n	8004676 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1c59      	adds	r1, r3, #1
 8004666:	6279      	str	r1, [r7, #36]	; 0x24
 8004668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	09db      	lsrs	r3, r3, #7
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b7f      	cmp	r3, #127	; 0x7f
 800467a:	d8f0      	bhi.n	800465e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	627a      	str	r2, [r7, #36]	; 0x24
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	6979      	ldr	r1, [r7, #20]
 8004690:	69b8      	ldr	r0, [r7, #24]
 8004692:	f7ff fc7d 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f383 8811 	msr	BASEPRI, r3
}
 800469c:	bf00      	nop
 800469e:	3748      	adds	r7, #72	; 0x48
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200173dc 	.word	0x200173dc

080046a8 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80046ae:	4b59      	ldr	r3, [pc, #356]	; (8004814 <SEGGER_SYSVIEW_Start+0x16c>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 80aa 	bne.w	800480c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80046b8:	4b56      	ldr	r3, [pc, #344]	; (8004814 <SEGGER_SYSVIEW_Start+0x16c>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046be:	f3ef 8311 	mrs	r3, BASEPRI
 80046c2:	f04f 0120 	mov.w	r1, #32
 80046c6:	f381 8811 	msr	BASEPRI, r1
 80046ca:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80046cc:	220a      	movs	r2, #10
 80046ce:	4952      	ldr	r1, [pc, #328]	; (8004818 <SEGGER_SYSVIEW_Start+0x170>)
 80046d0:	2001      	movs	r0, #1
 80046d2:	f7ff f9cb 	bl	8003a6c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80046dc:	200a      	movs	r0, #10
 80046de:	f7ff fd79 	bl	80041d4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046e2:	f3ef 8311 	mrs	r3, BASEPRI
 80046e6:	f04f 0120 	mov.w	r1, #32
 80046ea:	f381 8811 	msr	BASEPRI, r1
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	484a      	ldr	r0, [pc, #296]	; (800481c <SEGGER_SYSVIEW_Start+0x174>)
 80046f2:	f7ff fb6c 	bl	8003dce <_PreparePacket>
 80046f6:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004700:	4b44      	ldr	r3, [pc, #272]	; (8004814 <SEGGER_SYSVIEW_Start+0x16c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
 8004706:	e00b      	b.n	8004720 <SEGGER_SYSVIEW_Start+0x78>
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	b2da      	uxtb	r2, r3
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	1c59      	adds	r1, r3, #1
 8004710:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	09db      	lsrs	r3, r3, #7
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b7f      	cmp	r3, #127	; 0x7f
 8004724:	d8f0      	bhi.n	8004708 <SEGGER_SYSVIEW_Start+0x60>
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800472c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <SEGGER_SYSVIEW_Start+0x16c>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	e00b      	b.n	800475a <SEGGER_SYSVIEW_Start+0xb2>
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	1c59      	adds	r1, r3, #1
 800474a:	6279      	str	r1, [r7, #36]	; 0x24
 800474c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	09db      	lsrs	r3, r3, #7
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2b7f      	cmp	r3, #127	; 0x7f
 800475e:	d8f0      	bhi.n	8004742 <SEGGER_SYSVIEW_Start+0x9a>
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	627a      	str	r2, [r7, #36]	; 0x24
 8004766:	6a3a      	ldr	r2, [r7, #32]
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	4b27      	ldr	r3, [pc, #156]	; (8004814 <SEGGER_SYSVIEW_Start+0x16c>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	e00b      	b.n	8004794 <SEGGER_SYSVIEW_Start+0xec>
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	b2da      	uxtb	r2, r3
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1c59      	adds	r1, r3, #1
 8004784:	61f9      	str	r1, [r7, #28]
 8004786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	09db      	lsrs	r3, r3, #7
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b7f      	cmp	r3, #127	; 0x7f
 8004798:	d8f0      	bhi.n	800477c <SEGGER_SYSVIEW_Start+0xd4>
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	61fa      	str	r2, [r7, #28]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	2302      	movs	r3, #2
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e00b      	b.n	80047cc <SEGGER_SYSVIEW_Start+0x124>
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	6179      	str	r1, [r7, #20]
 80047be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	09db      	lsrs	r3, r3, #7
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b7f      	cmp	r3, #127	; 0x7f
 80047d0:	d8f0      	bhi.n	80047b4 <SEGGER_SYSVIEW_Start+0x10c>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	617a      	str	r2, [r7, #20]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047e2:	2218      	movs	r2, #24
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fbd2 	bl	8003f90 <_SendPacket>
      RECORD_END();
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <SEGGER_SYSVIEW_Start+0x16c>)
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <SEGGER_SYSVIEW_Start+0x16c>)
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004800:	f000 f9ec 	bl	8004bdc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004804:	f000 f9b2 	bl	8004b6c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004808:	f000 fc8c 	bl	8005124 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800480c:	bf00      	nop
 800480e:	3730      	adds	r7, #48	; 0x30
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	200173ac 	.word	0x200173ac
 8004818:	08006798 	.word	0x08006798
 800481c:	200173dc 	.word	0x200173dc

08004820 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004826:	f3ef 8311 	mrs	r3, BASEPRI
 800482a:	f04f 0120 	mov.w	r1, #32
 800482e:	f381 8811 	msr	BASEPRI, r1
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	480b      	ldr	r0, [pc, #44]	; (8004864 <SEGGER_SYSVIEW_Stop+0x44>)
 8004836:	f7ff faca 	bl	8003dce <_PreparePacket>
 800483a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <SEGGER_SYSVIEW_Stop+0x48>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004844:	220b      	movs	r2, #11
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	6838      	ldr	r0, [r7, #0]
 800484a:	f7ff fba1 	bl	8003f90 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <SEGGER_SYSVIEW_Stop+0x48>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f383 8811 	msr	BASEPRI, r3
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200173dc 	.word	0x200173dc
 8004868:	200173ac 	.word	0x200173ac

0800486c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b08c      	sub	sp, #48	; 0x30
 8004870:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004872:	f3ef 8311 	mrs	r3, BASEPRI
 8004876:	f04f 0120 	mov.w	r1, #32
 800487a:	f381 8811 	msr	BASEPRI, r1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	4845      	ldr	r0, [pc, #276]	; (8004998 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004882:	f7ff faa4 	bl	8003dce <_PreparePacket>
 8004886:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004890:	4b42      	ldr	r3, [pc, #264]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
 8004896:	e00b      	b.n	80048b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	b2da      	uxtb	r2, r3
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	09db      	lsrs	r3, r3, #7
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b7f      	cmp	r3, #127	; 0x7f
 80048b4:	d8f0      	bhi.n	8004898 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	4b34      	ldr	r3, [pc, #208]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	e00b      	b.n	80048ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	1c59      	adds	r1, r3, #1
 80048da:	6279      	str	r1, [r7, #36]	; 0x24
 80048dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	09db      	lsrs	r3, r3, #7
 80048e8:	623b      	str	r3, [r7, #32]
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	2b7f      	cmp	r3, #127	; 0x7f
 80048ee:	d8f0      	bhi.n	80048d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	627a      	str	r2, [r7, #36]	; 0x24
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e00b      	b.n	8004924 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	1c59      	adds	r1, r3, #1
 8004914:	61f9      	str	r1, [r7, #28]
 8004916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	09db      	lsrs	r3, r3, #7
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b7f      	cmp	r3, #127	; 0x7f
 8004928:	d8f0      	bhi.n	800490c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	61fa      	str	r2, [r7, #28]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	2302      	movs	r3, #2
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e00b      	b.n	800495c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	6179      	str	r1, [r7, #20]
 800494e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	09db      	lsrs	r3, r3, #7
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b7f      	cmp	r3, #127	; 0x7f
 8004960:	d8f0      	bhi.n	8004944 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	617a      	str	r2, [r7, #20]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004972:	2218      	movs	r2, #24
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	68b8      	ldr	r0, [r7, #8]
 8004978:	f7ff fb0a 	bl	8003f90 <_SendPacket>
  RECORD_END();
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	4798      	blx	r3
  }
}
 8004990:	bf00      	nop
 8004992:	3730      	adds	r7, #48	; 0x30
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200173dc 	.word	0x200173dc
 800499c:	200173ac 	.word	0x200173ac

080049a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b092      	sub	sp, #72	; 0x48
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049a8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ac:	f04f 0120 	mov.w	r1, #32
 80049b0:	f381 8811 	msr	BASEPRI, r1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	486b      	ldr	r0, [pc, #428]	; (8004b64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049b8:	f7ff fa09 	bl	8003dce <_PreparePacket>
 80049bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b67      	ldr	r3, [pc, #412]	; (8004b68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	643b      	str	r3, [r7, #64]	; 0x40
 80049d4:	e00b      	b.n	80049ee <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80049d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049dc:	1c59      	adds	r1, r3, #1
 80049de:	6479      	str	r1, [r7, #68]	; 0x44
 80049e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ea:	09db      	lsrs	r3, r3, #7
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	2b7f      	cmp	r3, #127	; 0x7f
 80049f2:	d8f0      	bhi.n	80049d6 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	647a      	str	r2, [r7, #68]	; 0x44
 80049fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a0e:	e00b      	b.n	8004a28 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a16:	1c59      	adds	r1, r3, #1
 8004a18:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	09db      	lsrs	r3, r3, #7
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2c:	d8f0      	bhi.n	8004a10 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8004a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	4619      	mov	r1, r3
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff f974 	bl	8003d34 <_EncodeStr>
 8004a4c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a4e:	2209      	movs	r2, #9
 8004a50:	68f9      	ldr	r1, [r7, #12]
 8004a52:	6938      	ldr	r0, [r7, #16]
 8004a54:	f7ff fa9c 	bl	8003f90 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	e00b      	b.n	8004a88 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	1c59      	adds	r1, r3, #1
 8004a78:	6379      	str	r1, [r7, #52]	; 0x34
 8004a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	09db      	lsrs	r3, r3, #7
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8c:	d8f0      	bhi.n	8004a70 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	637a      	str	r2, [r7, #52]	; 0x34
 8004a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa8:	e00b      	b.n	8004ac2 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	09db      	lsrs	r3, r3, #7
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac6:	d8f0      	bhi.n	8004aaa <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	623b      	str	r3, [r7, #32]
 8004ae2:	e00b      	b.n	8004afc <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	6279      	str	r1, [r7, #36]	; 0x24
 8004aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	09db      	lsrs	r3, r3, #7
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2b7f      	cmp	r3, #127	; 0x7f
 8004b00:	d8f0      	bhi.n	8004ae4 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	627a      	str	r2, [r7, #36]	; 0x24
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e00b      	b.n	8004b34 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	61f9      	str	r1, [r7, #28]
 8004b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	09db      	lsrs	r3, r3, #7
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b7f      	cmp	r3, #127	; 0x7f
 8004b38:	d8f0      	bhi.n	8004b1c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	61fa      	str	r2, [r7, #28]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b4a:	2215      	movs	r2, #21
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	6938      	ldr	r0, [r7, #16]
 8004b50:	f7ff fa1e 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f383 8811 	msr	BASEPRI, r3
}
 8004b5a:	bf00      	nop
 8004b5c:	3748      	adds	r7, #72	; 0x48
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200173dc 	.word	0x200173dc
 8004b68:	200173ac 	.word	0x200173ac

08004b6c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b82:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4798      	blx	r3
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	200173ac 	.word	0x200173ac

08004b94 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba0:	f04f 0120 	mov.w	r1, #32
 8004ba4:	f381 8811 	msr	BASEPRI, r1
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	480b      	ldr	r0, [pc, #44]	; (8004bd8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004bac:	f7ff f90f 	bl	8003dce <_PreparePacket>
 8004bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	6938      	ldr	r0, [r7, #16]
 8004bb8:	f7ff f8bc 	bl	8003d34 <_EncodeStr>
 8004bbc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004bbe:	220e      	movs	r2, #14
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	6938      	ldr	r0, [r7, #16]
 8004bc4:	f7ff f9e4 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f383 8811 	msr	BASEPRI, r3
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	200173dc 	.word	0x200173dc

08004bdc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01a      	beq.n	8004c20 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004bf4:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4798      	blx	r3
 8004bfc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c00:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	000a      	movs	r2, r1
 8004c10:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c12:	4613      	mov	r3, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4621      	mov	r1, r4
 8004c18:	200d      	movs	r0, #13
 8004c1a:	f7ff fb35 	bl	8004288 <SEGGER_SYSVIEW_RecordU32x2>
 8004c1e:	e006      	b.n	8004c2e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	200c      	movs	r0, #12
 8004c28:	f7ff faf2 	bl	8004210 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd90      	pop	{r4, r7, pc}
 8004c36:	bf00      	nop
 8004c38:	200173ac 	.word	0x200173ac
 8004c3c:	e0001004 	.word	0xe0001004

08004c40 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c46:	f3ef 8311 	mrs	r3, BASEPRI
 8004c4a:	f04f 0120 	mov.w	r1, #32
 8004c4e:	f381 8811 	msr	BASEPRI, r1
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	4819      	ldr	r0, [pc, #100]	; (8004cbc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c56:	f7ff f8ba 	bl	8003dce <_PreparePacket>
 8004c5a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004c60:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e00b      	b.n	8004c8c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	6179      	str	r1, [r7, #20]
 8004c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	09db      	lsrs	r3, r3, #7
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c90:	d8f0      	bhi.n	8004c74 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	617a      	str	r2, [r7, #20]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	f7ff f972 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f383 8811 	msr	BASEPRI, r3
}
 8004cb2:	bf00      	nop
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200173dc 	.word	0x200173dc
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cca:	f3ef 8311 	mrs	r3, BASEPRI
 8004cce:	f04f 0120 	mov.w	r1, #32
 8004cd2:	f381 8811 	msr	BASEPRI, r1
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	4807      	ldr	r0, [pc, #28]	; (8004cf8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004cda:	f7ff f878 	bl	8003dce <_PreparePacket>
 8004cde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6838      	ldr	r0, [r7, #0]
 8004ce6:	f7ff f953 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f383 8811 	msr	BASEPRI, r3
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	200173dc 	.word	0x200173dc

08004cfc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d02:	f3ef 8311 	mrs	r3, BASEPRI
 8004d06:	f04f 0120 	mov.w	r1, #32
 8004d0a:	f381 8811 	msr	BASEPRI, r1
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	4807      	ldr	r0, [pc, #28]	; (8004d30 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d12:	f7ff f85c 	bl	8003dce <_PreparePacket>
 8004d16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d18:	2212      	movs	r2, #18
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f7ff f937 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f383 8811 	msr	BASEPRI, r3
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200173dc 	.word	0x200173dc

08004d34 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d3e:	f04f 0120 	mov.w	r1, #32
 8004d42:	f381 8811 	msr	BASEPRI, r1
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	4807      	ldr	r0, [pc, #28]	; (8004d68 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d4a:	f7ff f840 	bl	8003dce <_PreparePacket>
 8004d4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d50:	2211      	movs	r2, #17
 8004d52:	6839      	ldr	r1, [r7, #0]
 8004d54:	6838      	ldr	r0, [r7, #0]
 8004d56:	f7ff f91b 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f383 8811 	msr	BASEPRI, r3
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	200173dc 	.word	0x200173dc

08004d6c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d74:	f3ef 8311 	mrs	r3, BASEPRI
 8004d78:	f04f 0120 	mov.w	r1, #32
 8004d7c:	f381 8811 	msr	BASEPRI, r1
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	481a      	ldr	r0, [pc, #104]	; (8004dec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004d84:	f7ff f823 	bl	8003dce <_PreparePacket>
 8004d88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d8e:	4b18      	ldr	r3, [pc, #96]	; (8004df0 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e00b      	b.n	8004dbc <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	61f9      	str	r1, [r7, #28]
 8004dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	09db      	lsrs	r3, r3, #7
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc0:	d8f0      	bhi.n	8004da4 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	61fa      	str	r2, [r7, #28]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	68f9      	ldr	r1, [r7, #12]
 8004dd6:	6938      	ldr	r0, [r7, #16]
 8004dd8:	f7ff f8da 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f383 8811 	msr	BASEPRI, r3
}
 8004de2:	bf00      	nop
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200173dc 	.word	0x200173dc
 8004df0:	200173ac 	.word	0x200173ac

08004df4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004e00:	f04f 0120 	mov.w	r1, #32
 8004e04:	f381 8811 	msr	BASEPRI, r1
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	481a      	ldr	r0, [pc, #104]	; (8004e74 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e0c:	f7fe ffdf 	bl	8003dce <_PreparePacket>
 8004e10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e16:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	e00b      	b.n	8004e44 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	61f9      	str	r1, [r7, #28]
 8004e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	09db      	lsrs	r3, r3, #7
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b7f      	cmp	r3, #127	; 0x7f
 8004e48:	d8f0      	bhi.n	8004e2c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	61fa      	str	r2, [r7, #28]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	6938      	ldr	r0, [r7, #16]
 8004e60:	f7ff f896 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f383 8811 	msr	BASEPRI, r3
}
 8004e6a:	bf00      	nop
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200173dc 	.word	0x200173dc
 8004e78:	200173ac 	.word	0x200173ac

08004e7c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e84:	f3ef 8311 	mrs	r3, BASEPRI
 8004e88:	f04f 0120 	mov.w	r1, #32
 8004e8c:	f381 8811 	msr	BASEPRI, r1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	481a      	ldr	r0, [pc, #104]	; (8004efc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004e94:	f7fe ff9b 	bl	8003dce <_PreparePacket>
 8004e98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e9e:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e00b      	b.n	8004ecc <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	1c59      	adds	r1, r3, #1
 8004ebc:	61f9      	str	r1, [r7, #28]
 8004ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	09db      	lsrs	r3, r3, #7
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed0:	d8f0      	bhi.n	8004eb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	61fa      	str	r2, [r7, #28]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004ee2:	2206      	movs	r2, #6
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	6938      	ldr	r0, [r7, #16]
 8004ee8:	f7ff f852 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f383 8811 	msr	BASEPRI, r3
}
 8004ef2:	bf00      	nop
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200173dc 	.word	0x200173dc
 8004f00:	200173ac 	.word	0x200173ac

08004f04 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f12:	f04f 0120 	mov.w	r1, #32
 8004f16:	f381 8811 	msr	BASEPRI, r1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	4827      	ldr	r0, [pc, #156]	; (8004fbc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004f1e:	f7fe ff56 	bl	8003dce <_PreparePacket>
 8004f22:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f28:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	e00b      	b.n	8004f56 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	1c59      	adds	r1, r3, #1
 8004f46:	6279      	str	r1, [r7, #36]	; 0x24
 8004f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	09db      	lsrs	r3, r3, #7
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5a:	d8f0      	bhi.n	8004f3e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	627a      	str	r2, [r7, #36]	; 0x24
 8004f62:	6a3a      	ldr	r2, [r7, #32]
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e00b      	b.n	8004f8e <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	1c59      	adds	r1, r3, #1
 8004f7e:	61f9      	str	r1, [r7, #28]
 8004f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	09db      	lsrs	r3, r3, #7
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b7f      	cmp	r3, #127	; 0x7f
 8004f92:	d8f0      	bhi.n	8004f76 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	61fa      	str	r2, [r7, #28]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	6938      	ldr	r0, [r7, #16]
 8004faa:	f7fe fff1 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f383 8811 	msr	BASEPRI, r3
}
 8004fb4:	bf00      	nop
 8004fb6:	3728      	adds	r7, #40	; 0x28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	200173dc 	.word	0x200173dc
 8004fc0:	200173ac 	.word	0x200173ac

08004fc4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	089b      	lsrs	r3, r3, #2
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	200173ac 	.word	0x200173ac

08004fe8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004ff2:	4b3b      	ldr	r3, [pc, #236]	; (80050e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d06d      	beq.n	80050d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005000:	2300      	movs	r3, #0
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
 8005004:	e008      	b.n	8005018 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	3301      	adds	r3, #1
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501c:	429a      	cmp	r2, r3
 800501e:	d3f2      	bcc.n	8005006 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005020:	e000      	b.n	8005024 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005022:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d055      	beq.n	80050d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800502a:	f3ef 8311 	mrs	r3, BASEPRI
 800502e:	f04f 0120 	mov.w	r1, #32
 8005032:	f381 8811 	msr	BASEPRI, r1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	482a      	ldr	r0, [pc, #168]	; (80050e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800503a:	f7fe fec8 	bl	8003dce <_PreparePacket>
 800503e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	e00b      	b.n	8005066 <SEGGER_SYSVIEW_SendModule+0x7e>
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	6279      	str	r1, [r7, #36]	; 0x24
 8005058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	09db      	lsrs	r3, r3, #7
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	2b7f      	cmp	r3, #127	; 0x7f
 800506a:	d8f0      	bhi.n	800504e <SEGGER_SYSVIEW_SendModule+0x66>
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	627a      	str	r2, [r7, #36]	; 0x24
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e00b      	b.n	80050a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	1c59      	adds	r1, r3, #1
 8005090:	61f9      	str	r1, [r7, #28]
 8005092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	09db      	lsrs	r3, r3, #7
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b7f      	cmp	r3, #127	; 0x7f
 80050a4:	d8f0      	bhi.n	8005088 <SEGGER_SYSVIEW_SendModule+0xa0>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	61fa      	str	r2, [r7, #28]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	4619      	mov	r1, r3
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7fe fe38 	bl	8003d34 <_EncodeStr>
 80050c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80050c6:	2216      	movs	r2, #22
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f7fe ff60 	bl	8003f90 <_SendPacket>
      RECORD_END();
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80050d6:	bf00      	nop
 80050d8:	3730      	adds	r7, #48	; 0x30
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200173d4 	.word	0x200173d4
 80050e4:	200173dc 	.word	0x200173dc

080050e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00f      	beq.n	8005116 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f2      	bne.n	80050fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	200173d4 	.word	0x200173d4

08005124 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800512a:	f3ef 8311 	mrs	r3, BASEPRI
 800512e:	f04f 0120 	mov.w	r1, #32
 8005132:	f381 8811 	msr	BASEPRI, r1
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	4817      	ldr	r0, [pc, #92]	; (8005198 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800513a:	f7fe fe48 	bl	8003dce <_PreparePacket>
 800513e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	4b14      	ldr	r3, [pc, #80]	; (800519c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	e00b      	b.n	8005168 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1c59      	adds	r1, r3, #1
 8005158:	6179      	str	r1, [r7, #20]
 800515a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b7f      	cmp	r3, #127	; 0x7f
 800516c:	d8f0      	bhi.n	8005150 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	617a      	str	r2, [r7, #20]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800517e:	221b      	movs	r2, #27
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	68b8      	ldr	r0, [r7, #8]
 8005184:	f7fe ff04 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200173dc 	.word	0x200173dc
 800519c:	200173d8 	.word	0x200173d8

080051a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051a8:	f3ef 8311 	mrs	r3, BASEPRI
 80051ac:	f04f 0120 	mov.w	r1, #32
 80051b0:	f381 8811 	msr	BASEPRI, r1
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	4827      	ldr	r0, [pc, #156]	; (8005254 <SEGGER_SYSVIEW_Warn+0xb4>)
 80051b8:	f7fe fe09 	bl	8003dce <_PreparePacket>
 80051bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	6938      	ldr	r0, [r7, #16]
 80051c4:	f7fe fdb6 	bl	8003d34 <_EncodeStr>
 80051c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	2301      	movs	r3, #1
 80051d0:	623b      	str	r3, [r7, #32]
 80051d2:	e00b      	b.n	80051ec <SEGGER_SYSVIEW_Warn+0x4c>
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	1c59      	adds	r1, r3, #1
 80051dc:	6279      	str	r1, [r7, #36]	; 0x24
 80051de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	09db      	lsrs	r3, r3, #7
 80051ea:	623b      	str	r3, [r7, #32]
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b7f      	cmp	r3, #127	; 0x7f
 80051f0:	d8f0      	bhi.n	80051d4 <SEGGER_SYSVIEW_Warn+0x34>
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	627a      	str	r2, [r7, #36]	; 0x24
 80051f8:	6a3a      	ldr	r2, [r7, #32]
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e00b      	b.n	8005224 <SEGGER_SYSVIEW_Warn+0x84>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	b2da      	uxtb	r2, r3
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	61f9      	str	r1, [r7, #28]
 8005216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	09db      	lsrs	r3, r3, #7
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b7f      	cmp	r3, #127	; 0x7f
 8005228:	d8f0      	bhi.n	800520c <SEGGER_SYSVIEW_Warn+0x6c>
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	61fa      	str	r2, [r7, #28]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800523a:	221a      	movs	r2, #26
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	6938      	ldr	r0, [r7, #16]
 8005240:	f7fe fea6 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f383 8811 	msr	BASEPRI, r3
}
 800524a:	bf00      	nop
 800524c:	3728      	adds	r7, #40	; 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200173dc 	.word	0x200173dc

08005258 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	4907      	ldr	r1, [pc, #28]	; (8005288 <NVIC_EnableIRQ+0x30>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2001      	movs	r0, #1
 8005272:	fa00 f202 	lsl.w	r2, r0, r2
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000e100 	.word	0xe000e100

0800528c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8005298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529c:	2b00      	cmp	r3, #0
 800529e:	da0b      	bge.n	80052b8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	490c      	ldr	r1, [pc, #48]	; (80052d8 <NVIC_SetPriority+0x4c>)
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	3b04      	subs	r3, #4
 80052ae:	0112      	lsls	r2, r2, #4
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	440b      	add	r3, r1
 80052b4:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b6:	e009      	b.n	80052cc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	4907      	ldr	r1, [pc, #28]	; (80052dc <NVIC_SetPriority+0x50>)
 80052be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	440b      	add	r3, r1
 80052c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000ed00 	.word	0xe000ed00
 80052dc:	e000e100 	.word	0xe000e100

080052e0 <main>:
#define LED_TOGGLE_STOP_COMMAND 		4
#define LED_READ_STATUS_COMMAND 		5
#define RTC_READ_DATE_TIME_COMMAND		6

int main(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af02      	add	r7, sp, #8
	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL for SEGGER Systemview Timestamp maintaining
 80052e6:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <main+0xd4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <main+0xd4>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	6013      	str	r3, [r2, #0]

	// Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 80052f2:	f7fb f907 	bl	8000504 <RCC_DeInit>

	// Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 80052f6:	f000 fb97 	bl	8005a28 <SystemCoreClockUpdate>

	prvSetupHardware();
 80052fa:	f000 f92d 	bl	8005558 <prvSetupHardware>

	sprintf(usr_msg, "\r\nThis is Queue Command Processing Demo\r\n");
 80052fe:	492e      	ldr	r1, [pc, #184]	; (80053b8 <main+0xd8>)
 8005300:	482e      	ldr	r0, [pc, #184]	; (80053bc <main+0xdc>)
 8005302:	f000 fd21 	bl	8005d48 <siprintf>
	printmsg(usr_msg);
 8005306:	482d      	ldr	r0, [pc, #180]	; (80053bc <main+0xdc>)
 8005308:	f000 f92e 	bl	8005568 <printmsg>

	// start recording
	SEGGER_SYSVIEW_Conf();
 800530c:	f7fe f9b6 	bl	800367c <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8005310:	f7ff f9ca 	bl	80046a8 <SEGGER_SYSVIEW_Start>

	//lets create command and write queues
	command_queue = xQueueCreate(10, sizeof(APP_CMD_t *));
 8005314:	2200      	movs	r2, #0
 8005316:	2104      	movs	r1, #4
 8005318:	200a      	movs	r0, #10
 800531a:	f7fb fd71 	bl	8000e00 <xQueueGenericCreate>
 800531e:	4603      	mov	r3, r0
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <main+0xe0>)
 8005322:	6013      	str	r3, [r2, #0]
	uart_write_queue = xQueueCreate(10, sizeof(char *));
 8005324:	2200      	movs	r2, #0
 8005326:	2104      	movs	r1, #4
 8005328:	200a      	movs	r0, #10
 800532a:	f7fb fd69 	bl	8000e00 <xQueueGenericCreate>
 800532e:	4603      	mov	r3, r0
 8005330:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <main+0xe4>)
 8005332:	6013      	str	r3, [r2, #0]

	if(command_queue && uart_write_queue){
 8005334:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <main+0xe0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d032      	beq.n	80053a2 <main+0xc2>
 800533c:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <main+0xe4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02e      	beq.n	80053a2 <main+0xc2>
		// lets create 4 tasks
		xTaskCreate(vTask1_menu_display, "TASK1-MENU", 500, NULL, 1, &xTaskHandle1 );
 8005344:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <main+0xe8>)
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	2301      	movs	r3, #1
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	2300      	movs	r3, #0
 800534e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005352:	491e      	ldr	r1, [pc, #120]	; (80053cc <main+0xec>)
 8005354:	481e      	ldr	r0, [pc, #120]	; (80053d0 <main+0xf0>)
 8005356:	f7fc fa11 	bl	800177c <xTaskCreate>

		xTaskCreate(vTask2_cmd_handling, "TASK2-CMD-HANDLING", 500, NULL, 2, &xTaskHandle2 );
 800535a:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <main+0xf4>)
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	2302      	movs	r3, #2
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005368:	491b      	ldr	r1, [pc, #108]	; (80053d8 <main+0xf8>)
 800536a:	481c      	ldr	r0, [pc, #112]	; (80053dc <main+0xfc>)
 800536c:	f7fc fa06 	bl	800177c <xTaskCreate>

		xTaskCreate(vTask3_cmd_processing, "TASK3-CMD-PROCESSING", 500, NULL, 2, &xTaskHandle3 );
 8005370:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <main+0x100>)
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	2302      	movs	r3, #2
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800537e:	4919      	ldr	r1, [pc, #100]	; (80053e4 <main+0x104>)
 8005380:	4819      	ldr	r0, [pc, #100]	; (80053e8 <main+0x108>)
 8005382:	f7fc f9fb 	bl	800177c <xTaskCreate>

		xTaskCreate(vTask4_uart_write, "TASK4-UART-WRITE", 500, NULL, 2, &xTaskHandle4 );
 8005386:	4b19      	ldr	r3, [pc, #100]	; (80053ec <main+0x10c>)
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	2302      	movs	r3, #2
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	2300      	movs	r3, #0
 8005390:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005394:	4916      	ldr	r1, [pc, #88]	; (80053f0 <main+0x110>)
 8005396:	4817      	ldr	r0, [pc, #92]	; (80053f4 <main+0x114>)
 8005398:	f7fc f9f0 	bl	800177c <xTaskCreate>

		// start the scheduler
		vTaskStartScheduler();
 800539c:	f7fc fb50 	bl	8001a40 <vTaskStartScheduler>
 80053a0:	e006      	b.n	80053b0 <main+0xd0>

	}
	else{
		sprintf(usr_msg, "Queue creation failed\r\n");
 80053a2:	4915      	ldr	r1, [pc, #84]	; (80053f8 <main+0x118>)
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <main+0xdc>)
 80053a6:	f000 fccf 	bl	8005d48 <siprintf>
		printmsg(usr_msg);
 80053aa:	4804      	ldr	r0, [pc, #16]	; (80053bc <main+0xdc>)
 80053ac:	f000 f8dc 	bl	8005568 <printmsg>
	}
	for(;;);
 80053b0:	e7fe      	b.n	80053b0 <main+0xd0>
 80053b2:	bf00      	nop
 80053b4:	e0001000 	.word	0xe0001000
 80053b8:	08006688 	.word	0x08006688
 80053bc:	200174c0 	.word	0x200174c0
 80053c0:	200175cc 	.word	0x200175cc
 80053c4:	200175d0 	.word	0x200175d0
 80053c8:	200175bc 	.word	0x200175bc
 80053cc:	080066b4 	.word	0x080066b4
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	200175c0 	.word	0x200175c0
 80053d8:	080066c0 	.word	0x080066c0
 80053dc:	08005435 	.word	0x08005435
 80053e0:	200175c4 	.word	0x200175c4
 80053e4:	080066d4 	.word	0x080066d4
 80053e8:	08005499 	.word	0x08005499
 80053ec:	200175c8 	.word	0x200175c8
 80053f0:	080066ec 	.word	0x080066ec
 80053f4:	0800552d 	.word	0x0800552d
 80053f8:	08006700 	.word	0x08006700

080053fc <vTask1_menu_display>:
}

//Task handler implementations
void vTask1_menu_display(void *params)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	char * pData = menu;
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <vTask1_menu_display+0x30>)
 8005406:	60fb      	str	r3, [r7, #12]

	while(1){
		xQueueSend(uart_write_queue, &pData, portMAX_DELAY);
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <vTask1_menu_display+0x34>)
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	f107 010c 	add.w	r1, r7, #12
 8005410:	2300      	movs	r3, #0
 8005412:	f04f 32ff 	mov.w	r2, #4294967295
 8005416:	f7fb fd59 	bl	8000ecc <xQueueGenericSend>

		//wait here until smn notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	2200      	movs	r2, #0
 8005420:	2100      	movs	r1, #0
 8005422:	2000      	movs	r0, #0
 8005424:	f7fc fffa 	bl	800241c <xTaskNotifyWait>
		xQueueSend(uart_write_queue, &pData, portMAX_DELAY);
 8005428:	e7ee      	b.n	8005408 <vTask1_menu_display+0xc>
 800542a:	bf00      	nop
 800542c:	20000014 	.word	0x20000014
 8005430:	200175d0 	.word	0x200175d0

08005434 <vTask2_cmd_handling>:
	}
}

void vTask2_cmd_handling(void *params)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	uint8_t command_code = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
	APP_CMD_t * new_cmd;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);		// should be blocked
 8005440:	f04f 33ff 	mov.w	r3, #4294967295
 8005444:	2200      	movs	r2, #0
 8005446:	2100      	movs	r1, #0
 8005448:	2000      	movs	r0, #0
 800544a:	f7fc ffe7 	bl	800241c <xTaskNotifyWait>

		new_cmd = (APP_CMD_t *)pvPortMalloc(sizeof(APP_CMD_t));
 800544e:	200b      	movs	r0, #11
 8005450:	f7fd ff2c 	bl	80032ac <pvPortMalloc>
 8005454:	4603      	mov	r3, r0
 8005456:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();			//solving race condition btw task and isr
 8005458:	f7fd fdfc 	bl	8003054 <vPortEnterCritical>
										//serializing the access to the shared resource
		command_code = getCommandCode(command_buffer);
 800545c:	480c      	ldr	r0, [pc, #48]	; (8005490 <vTask2_cmd_handling+0x5c>)
 800545e:	f000 f98f 	bl	8005780 <getCommandCode>
 8005462:	4603      	mov	r3, r0
 8005464:	73fb      	strb	r3, [r7, #15]
		new_cmd->COMMAND_NUM = command_code;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	701a      	strb	r2, [r3, #0]
		getArguments(new_cmd->COMMAND_ARGS);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	3301      	adds	r3, #1
 8005470:	4618      	mov	r0, r3
 8005472:	f000 f993 	bl	800579c <getArguments>
		taskEXIT_CRITICAL();
 8005476:	f7fd fe1d 	bl	80030b4 <vPortExitCritical>

		//send the command to the command queue
		xQueueSend(command_queue, &new_cmd, portMAX_DELAY);
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <vTask2_cmd_handling+0x60>)
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f107 0108 	add.w	r1, r7, #8
 8005482:	2300      	movs	r3, #0
 8005484:	f04f 32ff 	mov.w	r2, #4294967295
 8005488:	f7fb fd20 	bl	8000ecc <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);		// should be blocked
 800548c:	e7d8      	b.n	8005440 <vTask2_cmd_handling+0xc>
 800548e:	bf00      	nop
 8005490:	200176d0 	.word	0x200176d0
 8005494:	200175cc 	.word	0x200175cc

08005498 <vTask3_cmd_processing>:
	}
}

void vTask3_cmd_processing(void *params)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b092      	sub	sp, #72	; 0x48
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	APP_CMD_t * new_cmd;
	char task_msg[50];

	uint32_t toggle_duration = pdMS_TO_TICKS(500);
 80054a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44

	while(1){
		xQueueReceive(command_queue, (void *)&new_cmd, portMAX_DELAY);		//blocked
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <vTask3_cmd_processing+0x90>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80054ae:	f04f 32ff 	mov.w	r2, #4294967295
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fb fedc 	bl	8001270 <xQueueReceive>

		switch(new_cmd->COMMAND_NUM){
 80054b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d827      	bhi.n	8005512 <vTask3_cmd_processing+0x7a>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <vTask3_cmd_processing+0x30>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054e1 	.word	0x080054e1
 80054cc:	080054e7 	.word	0x080054e7
 80054d0:	080054ed 	.word	0x080054ed
 80054d4:	080054f5 	.word	0x080054f5
 80054d8:	080054fb 	.word	0x080054fb
 80054dc:	08005507 	.word	0x08005507
			case LED_ON_COMMAND:
				make_led_on();
 80054e0:	f000 f966 	bl	80057b0 <make_led_on>
				break;
 80054e4:	e01a      	b.n	800551c <vTask3_cmd_processing+0x84>
			case LED_OFF_COMMAND:
				make_led_off();
 80054e6:	f000 f96d 	bl	80057c4 <make_led_off>
				break;
 80054ea:	e017      	b.n	800551c <vTask3_cmd_processing+0x84>
			case LED_TOGGLE_COMMAND:
				led_toggle_start(toggle_duration);		//by taking the help of sw timers
 80054ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80054ee:	f000 f981 	bl	80057f4 <led_toggle_start>
				break;
 80054f2:	e013      	b.n	800551c <vTask3_cmd_processing+0x84>
			case LED_TOGGLE_STOP_COMMAND:
				led_toggle_stop();
 80054f4:	f000 f9b6 	bl	8005864 <led_toggle_stop>
				break;
 80054f8:	e010      	b.n	800551c <vTask3_cmd_processing+0x84>
			case LED_READ_STATUS_COMMAND:
				read_led_status(task_msg);
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f9c2 	bl	8005888 <read_led_status>
				break;
 8005504:	e00a      	b.n	800551c <vTask3_cmd_processing+0x84>
			case RTC_READ_DATE_TIME_COMMAND:
				read_rtc_info(task_msg);
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f9de 	bl	80058cc <read_rtc_info>
				break;
 8005510:	e004      	b.n	800551c <vTask3_cmd_processing+0x84>
			default:
				print_error_message(task_msg);
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fa0a 	bl	8005930 <print_error_message>
		}

		//lets free the allocated memory for the new command
		vPortFree(new_cmd);
 800551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551e:	4618      	mov	r0, r3
 8005520:	f7fd ff88 	bl	8003434 <vPortFree>
		xQueueReceive(command_queue, (void *)&new_cmd, portMAX_DELAY);		//blocked
 8005524:	e7bf      	b.n	80054a6 <vTask3_cmd_processing+0xe>
 8005526:	bf00      	nop
 8005528:	200175cc 	.word	0x200175cc

0800552c <vTask4_uart_write>:

	}
}

void vTask4_uart_write(void *params)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	char *pData = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
	while(1){
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8005538:	4b06      	ldr	r3, [pc, #24]	; (8005554 <vTask4_uart_write+0x28>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f107 010c 	add.w	r1, r7, #12
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	4618      	mov	r0, r3
 8005546:	f7fb fe93 	bl	8001270 <xQueueReceive>
		printmsg(pData);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 f80b 	bl	8005568 <printmsg>
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8005552:	e7f1      	b.n	8005538 <vTask4_uart_write+0xc>
 8005554:	200175d0 	.word	0x200175d0

08005558 <prvSetupHardware>:
	}
}

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	//Setup led and button
	prvSetupGpio();
 800555c:	f000 f88a 	bl	8005674 <prvSetupGpio>

	//Setup UART3
	prvSetupUart();
 8005560:	f000 f82c 	bl	80055bc <prvSetupUart>

}
 8005564:	bf00      	nop
 8005566:	bd80      	pop	{r7, pc}

08005568 <printmsg>:

void printmsg(char *msg)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++){
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e013      	b.n	800559e <printmsg+0x36>
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != SET);
 8005576:	bf00      	nop
 8005578:	2180      	movs	r1, #128	; 0x80
 800557a:	480f      	ldr	r0, [pc, #60]	; (80055b8 <printmsg+0x50>)
 800557c:	f7fb fb08 	bl	8000b90 <USART_GetFlagStatus>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d1f8      	bne.n	8005578 <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	4809      	ldr	r0, [pc, #36]	; (80055b8 <printmsg+0x50>)
 8005594:	f7fb fa92 	bl	8000abc <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++){
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fa fe36 	bl	8000210 <strlen>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d3e4      	bcc.n	8005576 <printmsg+0xe>
	}

}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40004800 	.word	0x40004800

080055bc <prvSetupUart>:

static void prvSetupUart(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80055c2:	2101      	movs	r1, #1
 80055c4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80055c8:	f7fb f8a2 	bl	8000710 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80055cc:	2101      	movs	r1, #1
 80055ce:	2008      	movs	r0, #8
 80055d0:	f7fb f87e 	bl	80006d0 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	2208      	movs	r2, #8
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fbab 	bl	8005d38 <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80055e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80055e6:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 80055e8:	2302      	movs	r3, #2
 80055ea:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 80055ec:	2301      	movs	r3, #1
 80055ee:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 80055f0:	f107 0310 	add.w	r3, r7, #16
 80055f4:	4619      	mov	r1, r3
 80055f6:	481d      	ldr	r0, [pc, #116]	; (800566c <prvSetupUart+0xb0>)
 80055f8:	f7fa fe62 	bl	80002c0 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 80055fc:	2207      	movs	r2, #7
 80055fe:	2108      	movs	r1, #8
 8005600:	481a      	ldr	r0, [pc, #104]	; (800566c <prvSetupUart+0xb0>)
 8005602:	f7fa ff36 	bl	8000472 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 8005606:	2207      	movs	r2, #7
 8005608:	2109      	movs	r1, #9
 800560a:	4818      	ldr	r0, [pc, #96]	; (800566c <prvSetupUart+0xb0>)
 800560c:	f7fa ff31 	bl	8000472 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 8005610:	463b      	mov	r3, r7
 8005612:	2210      	movs	r2, #16
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fb8e 	bl	8005d38 <memset>

	uart3_init.USART_BaudRate = 115200;
 800561c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005620:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005622:	2300      	movs	r3, #0
 8005624:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005626:	230c      	movs	r3, #12
 8005628:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 800562a:	2300      	movs	r3, #0
 800562c:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 800562e:	2300      	movs	r3, #0
 8005630:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 8005632:	2300      	movs	r3, #0
 8005634:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 8005636:	463b      	mov	r3, r7
 8005638:	4619      	mov	r1, r3
 800563a:	480d      	ldr	r0, [pc, #52]	; (8005670 <prvSetupUart+0xb4>)
 800563c:	f7fb f964 	bl	8000908 <USART_Init>

	//lets enable the UART byte  reception interrupt
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8005640:	2201      	movs	r2, #1
 8005642:	f240 5125 	movw	r1, #1317	; 0x525
 8005646:	480a      	ldr	r0, [pc, #40]	; (8005670 <prvSetupUart+0xb4>)
 8005648:	f7fb fa5a 	bl	8000b00 <USART_ITConfig>

	//set the priority in NVIC for the UART3 interrupt
	NVIC_SetPriority(USART3_IRQn, 5);
 800564c:	2105      	movs	r1, #5
 800564e:	2027      	movs	r0, #39	; 0x27
 8005650:	f7ff fe1c 	bl	800528c <NVIC_SetPriority>

	//enable the UART3 IRQ in the NVIC
	NVIC_EnableIRQ(USART3_IRQn);
 8005654:	2027      	movs	r0, #39	; 0x27
 8005656:	f7ff fdff 	bl	8005258 <NVIC_EnableIRQ>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 800565a:	2101      	movs	r1, #1
 800565c:	4804      	ldr	r0, [pc, #16]	; (8005670 <prvSetupUart+0xb4>)
 800565e:	f7fb fa0d 	bl	8000a7c <USART_Cmd>

}
 8005662:	bf00      	nop
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40020c00 	.word	0x40020c00
 8005670:	40004800 	.word	0x40004800

08005674 <prvSetupGpio>:

void prvSetupGpio(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800567a:	2101      	movs	r1, #1
 800567c:	2002      	movs	r0, #2
 800567e:	f7fb f827 	bl	80006d0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8005682:	2101      	movs	r1, #1
 8005684:	2004      	movs	r0, #4
 8005686:	f7fb f823 	bl	80006d0 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800568a:	2101      	movs	r1, #1
 800568c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005690:	f7fb f85e 	bl	8000750 <RCC_APB2PeriphClockCmd>

	led_init.GPIO_Pin = GPIO_Pin_0;
 8005694:	2301      	movs	r3, #1
 8005696:	60bb      	str	r3, [r7, #8]
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 8005698:	2301      	movs	r3, #1
 800569a:	733b      	strb	r3, [r7, #12]
	led_init.GPIO_OType = GPIO_OType_PP;
 800569c:	2300      	movs	r3, #0
 800569e:	73bb      	strb	r3, [r7, #14]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	73fb      	strb	r3, [r7, #15]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 80056a4:	2300      	movs	r3, #0
 80056a6:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &led_init);
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4619      	mov	r1, r3
 80056ae:	480a      	ldr	r0, [pc, #40]	; (80056d8 <prvSetupGpio+0x64>)
 80056b0:	f7fa fe06 	bl	80002c0 <GPIO_Init>

	button_init.GPIO_Pin = GPIO_Pin_13;
 80056b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b8:	603b      	str	r3, [r7, #0]
	button_init.GPIO_Mode = GPIO_Mode_IN;
 80056ba:	2300      	movs	r3, #0
 80056bc:	713b      	strb	r3, [r7, #4]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	71fb      	strb	r3, [r7, #7]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 80056c2:	2300      	movs	r3, #0
 80056c4:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOC, &button_init);
 80056c6:	463b      	mov	r3, r7
 80056c8:	4619      	mov	r1, r3
 80056ca:	4804      	ldr	r0, [pc, #16]	; (80056dc <prvSetupGpio+0x68>)
 80056cc:	f7fa fdf8 	bl	80002c0 <GPIO_Init>

}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40020400 	.word	0x40020400
 80056dc:	40020800 	.word	0x40020800

080056e0 <USART3_IRQHandler>:
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));

}

void USART3_IRQHandler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af02      	add	r7, sp, #8
	uint16_t data_byte;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	603b      	str	r3, [r7, #0]

	if(USART_GetFlagStatus(USART3, USART_FLAG_RXNE)){
 80056ea:	2120      	movs	r1, #32
 80056ec:	481e      	ldr	r0, [pc, #120]	; (8005768 <USART3_IRQHandler+0x88>)
 80056ee:	f7fb fa4f 	bl	8000b90 <USART_GetFlagStatus>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d032      	beq.n	800575e <USART3_IRQHandler+0x7e>
		//a data byte is received from the user
		data_byte = USART_ReceiveData(USART3);
 80056f8:	481b      	ldr	r0, [pc, #108]	; (8005768 <USART3_IRQHandler+0x88>)
 80056fa:	f7fb f9f1 	bl	8000ae0 <USART_ReceiveData>
 80056fe:	4603      	mov	r3, r0
 8005700:	80fb      	strh	r3, [r7, #6]

		command_buffer[command_len++] = data_byte & 0x0ff;
 8005702:	4b1a      	ldr	r3, [pc, #104]	; (800576c <USART3_IRQHandler+0x8c>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	b2d1      	uxtb	r1, r2
 800570a:	4a18      	ldr	r2, [pc, #96]	; (800576c <USART3_IRQHandler+0x8c>)
 800570c:	7011      	strb	r1, [r2, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	b2d9      	uxtb	r1, r3
 8005714:	4b16      	ldr	r3, [pc, #88]	; (8005770 <USART3_IRQHandler+0x90>)
 8005716:	5499      	strb	r1, [r3, r2]

		if(data_byte == '\r'){
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	2b0d      	cmp	r3, #13
 800571c:	d114      	bne.n	8005748 <USART3_IRQHandler+0x68>
			//user finished entering data

			//reset command_len variable
			command_len = 0;
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <USART3_IRQHandler+0x8c>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]

			//lets notify command handling task
			xTaskNotifyFromISR(xTaskHandle2, 0, eNoAction, &xHigherPriorityTaskWoken);
 8005724:	4b13      	ldr	r3, [pc, #76]	; (8005774 <USART3_IRQHandler+0x94>)
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	463b      	mov	r3, r7
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2300      	movs	r3, #0
 800572e:	2200      	movs	r2, #0
 8005730:	2100      	movs	r1, #0
 8005732:	f7fc fed7 	bl	80024e4 <xTaskGenericNotifyFromISR>

			xTaskNotifyFromISR(xTaskHandle1, 0, eNoAction, &xHigherPriorityTaskWoken);
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <USART3_IRQHandler+0x98>)
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	463b      	mov	r3, r7
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	2300      	movs	r3, #0
 8005740:	2200      	movs	r2, #0
 8005742:	2100      	movs	r1, #0
 8005744:	f7fc fece 	bl	80024e4 <xTaskGenericNotifyFromISR>
		}

		// if the above freertos apis wake up any higher priority task, then yield the processor to the
		//higher priority task which is just woken up.

		if(xHigherPriorityTaskWoken)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <USART3_IRQHandler+0x7e>
		{
			taskYIELD();
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <USART3_IRQHandler+0x9c>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
		}
	}
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40004800 	.word	0x40004800
 800576c:	200175d8 	.word	0x200175d8
 8005770:	200176d0 	.word	0x200176d0
 8005774:	200175c0 	.word	0x200175c0
 8005778:	200175bc 	.word	0x200175bc
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <getCommandCode>:

uint8_t getCommandCode(uint8_t * buffer)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	return buffer[0] - 48;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	3b30      	subs	r3, #48	; 0x30
 800578e:	b2db      	uxtb	r3, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <getArguments>:

void getArguments(uint8_t *buffer)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <make_led_on>:

void make_led_on(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOB, GPIO_Pin_0);
 80057b4:	2101      	movs	r1, #1
 80057b6:	4802      	ldr	r0, [pc, #8]	; (80057c0 <make_led_on+0x10>)
 80057b8:	f7fa fe2b 	bl	8000412 <GPIO_SetBits>
}
 80057bc:	bf00      	nop
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40020400 	.word	0x40020400

080057c4 <make_led_off>:

void make_led_off(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOB, GPIO_Pin_0);
 80057c8:	2101      	movs	r1, #1
 80057ca:	4802      	ldr	r0, [pc, #8]	; (80057d4 <make_led_off+0x10>)
 80057cc:	f7fa fe30 	bl	8000430 <GPIO_ResetBits>
}
 80057d0:	bf00      	nop
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40020400 	.word	0x40020400

080057d8 <led_toggle>:

void led_toggle(TimerHandle_t xTimer)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
 80057e0:	2101      	movs	r1, #1
 80057e2:	4803      	ldr	r0, [pc, #12]	; (80057f0 <led_toggle+0x18>)
 80057e4:	f7fa fe33 	bl	800044e <GPIO_ToggleBits>
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40020400 	.word	0x40020400

080057f4 <led_toggle_start>:

void led_toggle_start(uint32_t duration)			//by taking the help of sw timers
{
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	6078      	str	r0, [r7, #4]
	if(led_timer_handle == NULL){
 80057fc:	4b16      	ldr	r3, [pc, #88]	; (8005858 <led_toggle_start+0x64>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d118      	bne.n	8005836 <led_toggle_start+0x42>
		//lets create sw timer
		led_timer_handle = xTimerCreate("LED-TIMER", duration, pdTRUE, NULL, led_toggle);
 8005804:	4b15      	ldr	r3, [pc, #84]	; (800585c <led_toggle_start+0x68>)
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2300      	movs	r3, #0
 800580a:	2201      	movs	r2, #1
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4814      	ldr	r0, [pc, #80]	; (8005860 <led_toggle_start+0x6c>)
 8005810:	f7fd f800 	bl	8002814 <xTimerCreate>
 8005814:	4603      	mov	r3, r0
 8005816:	4a10      	ldr	r2, [pc, #64]	; (8005858 <led_toggle_start+0x64>)
 8005818:	6013      	str	r3, [r2, #0]

		//start the sw timer
		xTimerStart(led_timer_handle, portMAX_DELAY);
 800581a:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <led_toggle_start+0x64>)
 800581c:	681c      	ldr	r4, [r3, #0]
 800581e:	f7fc fa1b 	bl	8001c58 <xTaskGetTickCount>
 8005822:	4602      	mov	r2, r0
 8005824:	f04f 33ff 	mov.w	r3, #4294967295
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2300      	movs	r3, #0
 800582c:	2101      	movs	r1, #1
 800582e:	4620      	mov	r0, r4
 8005830:	f7fd f840 	bl	80028b4 <xTimerGenericCommand>
	else{
		//start the sw timer
		xTimerStart(led_timer_handle, portMAX_DELAY);
	}

}
 8005834:	e00c      	b.n	8005850 <led_toggle_start+0x5c>
		xTimerStart(led_timer_handle, portMAX_DELAY);
 8005836:	4b08      	ldr	r3, [pc, #32]	; (8005858 <led_toggle_start+0x64>)
 8005838:	681c      	ldr	r4, [r3, #0]
 800583a:	f7fc fa0d 	bl	8001c58 <xTaskGetTickCount>
 800583e:	4602      	mov	r2, r0
 8005840:	f04f 33ff 	mov.w	r3, #4294967295
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	2101      	movs	r1, #1
 800584a:	4620      	mov	r0, r4
 800584c:	f7fd f832 	bl	80028b4 <xTimerGenericCommand>
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	bd90      	pop	{r4, r7, pc}
 8005858:	200175d4 	.word	0x200175d4
 800585c:	080057d9 	.word	0x080057d9
 8005860:	08006718 	.word	0x08006718

08005864 <led_toggle_stop>:

void led_toggle_stop(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af02      	add	r7, sp, #8
	xTimerStop(led_timer_handle, portMAX_DELAY);
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <led_toggle_stop+0x20>)
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	2200      	movs	r2, #0
 8005878:	2103      	movs	r1, #3
 800587a:	f7fd f81b 	bl	80028b4 <xTimerGenericCommand>
}
 800587e:	bf00      	nop
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	200175d4 	.word	0x200175d4

08005888 <read_led_status>:


void read_led_status(char *task_msg)
{
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	sprintf(task_msg, "\r\nLED status is : %d\r\n", GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0));
 8005890:	687c      	ldr	r4, [r7, #4]
 8005892:	2101      	movs	r1, #1
 8005894:	480a      	ldr	r0, [pc, #40]	; (80058c0 <read_led_status+0x38>)
 8005896:	f7fa fda2 	bl	80003de <GPIO_ReadOutputDataBit>
 800589a:	4603      	mov	r3, r0
 800589c:	461a      	mov	r2, r3
 800589e:	4909      	ldr	r1, [pc, #36]	; (80058c4 <read_led_status+0x3c>)
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fa51 	bl	8005d48 <siprintf>
	xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <read_led_status+0x40>)
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	1d39      	adds	r1, r7, #4
 80058ac:	2300      	movs	r3, #0
 80058ae:	f04f 32ff 	mov.w	r2, #4294967295
 80058b2:	f7fb fb0b 	bl	8000ecc <xQueueGenericSend>
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	bf00      	nop
 80058c0:	40020400 	.word	0x40020400
 80058c4:	08006724 	.word	0x08006724
 80058c8:	200175d0 	.word	0x200175d0

080058cc <read_rtc_info>:

void read_rtc_info(char *task_msg)
{
 80058cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ce:	b089      	sub	sp, #36	; 0x24
 80058d0:	af04      	add	r7, sp, #16
 80058d2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef RTC_time;
	RTC_DateTypeDef RTC_date;
	//read time and date from RTC peripheral of the microcontroller
	RTC_GetTime(RTC_Format_BIN, &RTC_time);
 80058d4:	f107 030c 	add.w	r3, r7, #12
 80058d8:	4619      	mov	r1, r3
 80058da:	2000      	movs	r0, #0
 80058dc:	f7fa ff58 	bl	8000790 <RTC_GetTime>
	RTC_GetDate(RTC_Format_BIN, &RTC_date);
 80058e0:	f107 0308 	add.w	r3, r7, #8
 80058e4:	4619      	mov	r1, r3
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7fa ffa4 	bl	8000834 <RTC_GetDate>

	sprintf(task_msg,"\r\nTime: %02d:%02d:%02d \r\n Date : %02d-%2d-%2d \r\n",RTC_time.RTC_Hours,RTC_time.RTC_Minutes,RTC_time.RTC_Seconds, \
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	7b3b      	ldrb	r3, [r7, #12]
 80058f0:	461d      	mov	r5, r3
 80058f2:	7b7b      	ldrb	r3, [r7, #13]
 80058f4:	461e      	mov	r6, r3
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
									RTC_date.RTC_Date,RTC_date.RTC_Month,RTC_date.RTC_Year );
 80058f8:	7aba      	ldrb	r2, [r7, #10]
 80058fa:	7a79      	ldrb	r1, [r7, #9]
 80058fc:	7afc      	ldrb	r4, [r7, #11]
	sprintf(task_msg,"\r\nTime: %02d:%02d:%02d \r\n Date : %02d-%2d-%2d \r\n",RTC_time.RTC_Hours,RTC_time.RTC_Minutes,RTC_time.RTC_Seconds, \
 80058fe:	9403      	str	r4, [sp, #12]
 8005900:	9102      	str	r1, [sp, #8]
 8005902:	9201      	str	r2, [sp, #4]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4633      	mov	r3, r6
 8005908:	462a      	mov	r2, r5
 800590a:	4907      	ldr	r1, [pc, #28]	; (8005928 <read_rtc_info+0x5c>)
 800590c:	f000 fa1c 	bl	8005d48 <siprintf>
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <read_rtc_info+0x60>)
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	1d39      	adds	r1, r7, #4
 8005916:	2300      	movs	r3, #0
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	f7fb fad6 	bl	8000ecc <xQueueGenericSend>

}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005928:	0800673c 	.word	0x0800673c
 800592c:	200175d0 	.word	0x200175d0

08005930 <print_error_message>:

void print_error_message(char *task_msg)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	sprintf(task_msg, "\r\n\nInvalid command received.\r\n");
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4908      	ldr	r1, [pc, #32]	; (800595c <print_error_message+0x2c>)
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fa03 	bl	8005d48 <siprintf>
	xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <print_error_message+0x30>)
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	1d39      	adds	r1, r7, #4
 8005948:	2300      	movs	r3, #0
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	f7fb fabd 	bl	8000ecc <xQueueGenericSend>
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	08006770 	.word	0x08006770
 8005960:	200175d0 	.word	0x200175d0

08005964 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800596c:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <_sbrk+0x50>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <_sbrk+0x16>
		heap_end = &end;
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <_sbrk+0x50>)
 8005976:	4a10      	ldr	r2, [pc, #64]	; (80059b8 <_sbrk+0x54>)
 8005978:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800597a:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <_sbrk+0x50>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <_sbrk+0x50>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	466a      	mov	r2, sp
 800598a:	4293      	cmp	r3, r2
 800598c:	d907      	bls.n	800599e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800598e:	f000 f98d 	bl	8005cac <__errno>
 8005992:	4603      	mov	r3, r0
 8005994:	220c      	movs	r2, #12
 8005996:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005998:	f04f 33ff 	mov.w	r3, #4294967295
 800599c:	e006      	b.n	80059ac <_sbrk+0x48>
	}

	heap_end += incr;
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <_sbrk+0x50>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	4a03      	ldr	r2, [pc, #12]	; (80059b4 <_sbrk+0x50>)
 80059a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	200175dc 	.word	0x200175dc
 80059b8:	200176f8 	.word	0x200176f8

080059bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059c0:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <SystemInit+0x60>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <SystemInit+0x60>)
 80059c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <SystemInit+0x64>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <SystemInit+0x64>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <SystemInit+0x64>)
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80059e2:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <SystemInit+0x64>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a0e      	ldr	r2, [pc, #56]	; (8005a20 <SystemInit+0x64>)
 80059e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80059ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <SystemInit+0x64>)
 80059f4:	4a0b      	ldr	r2, [pc, #44]	; (8005a24 <SystemInit+0x68>)
 80059f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <SystemInit+0x64>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <SystemInit+0x64>)
 80059fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <SystemInit+0x64>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005a0a:	f000 f88f 	bl	8005b2c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a0e:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <SystemInit+0x60>)
 8005a10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a14:	609a      	str	r2, [r3, #8]
#endif
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	e000ed00 	.word	0xe000ed00
 8005a20:	40023800 	.word	0x40023800
 8005a24:	24003010 	.word	0x24003010

08005a28 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	2302      	movs	r3, #2
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	2302      	movs	r3, #2
 8005a40:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005a42:	4b35      	ldr	r3, [pc, #212]	; (8005b18 <SystemCoreClockUpdate+0xf0>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d011      	beq.n	8005a76 <SystemCoreClockUpdate+0x4e>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d844      	bhi.n	8005ae2 <SystemCoreClockUpdate+0xba>
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <SystemCoreClockUpdate+0x3e>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d004      	beq.n	8005a6e <SystemCoreClockUpdate+0x46>
 8005a64:	e03d      	b.n	8005ae2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005a66:	4b2d      	ldr	r3, [pc, #180]	; (8005b1c <SystemCoreClockUpdate+0xf4>)
 8005a68:	4a2d      	ldr	r2, [pc, #180]	; (8005b20 <SystemCoreClockUpdate+0xf8>)
 8005a6a:	601a      	str	r2, [r3, #0]
      break;
 8005a6c:	e03d      	b.n	8005aea <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005a6e:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <SystemCoreClockUpdate+0xf4>)
 8005a70:	4a2c      	ldr	r2, [pc, #176]	; (8005b24 <SystemCoreClockUpdate+0xfc>)
 8005a72:	601a      	str	r2, [r3, #0]
      break;
 8005a74:	e039      	b.n	8005aea <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005a76:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <SystemCoreClockUpdate+0xf0>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	0d9b      	lsrs	r3, r3, #22
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <SystemCoreClockUpdate+0xf0>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8a:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005a92:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <SystemCoreClockUpdate+0xfc>)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <SystemCoreClockUpdate+0xf0>)
 8005a9c:	6852      	ldr	r2, [r2, #4]
 8005a9e:	0992      	lsrs	r2, r2, #6
 8005aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e00b      	b.n	8005ac4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005aac:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <SystemCoreClockUpdate+0xf8>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <SystemCoreClockUpdate+0xf0>)
 8005ab6:	6852      	ldr	r2, [r2, #4]
 8005ab8:	0992      	lsrs	r2, r2, #6
 8005aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <SystemCoreClockUpdate+0xf0>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	4a0f      	ldr	r2, [pc, #60]	; (8005b1c <SystemCoreClockUpdate+0xf4>)
 8005ade:	6013      	str	r3, [r2, #0]
      break;
 8005ae0:	e003      	b.n	8005aea <SystemCoreClockUpdate+0xc2>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8005ae2:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <SystemCoreClockUpdate+0xf4>)
 8005ae4:	4a0e      	ldr	r2, [pc, #56]	; (8005b20 <SystemCoreClockUpdate+0xf8>)
 8005ae6:	601a      	str	r2, [r3, #0]
      break;
 8005ae8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <SystemCoreClockUpdate+0xf0>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <SystemCoreClockUpdate+0x100>)
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005afc:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <SystemCoreClockUpdate+0xf4>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	fa22 f303 	lsr.w	r3, r2, r3
 8005b06:	4a05      	ldr	r2, [pc, #20]	; (8005b1c <SystemCoreClockUpdate+0xf4>)
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	200000fc 	.word	0x200000fc
 8005b20:	00f42400 	.word	0x00f42400
 8005b24:	017d7840 	.word	0x017d7840
 8005b28:	20000100 	.word	0x20000100

08005b2c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	2300      	movs	r3, #0
 8005b38:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005b3a:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <SetSysClock+0x11c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a42      	ldr	r2, [pc, #264]	; (8005c48 <SetSysClock+0x11c>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005b46:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <SetSysClock+0x11c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3301      	adds	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <SetSysClock+0x38>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005b62:	d1f0      	bne.n	8005b46 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005b64:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <SetSysClock+0x11c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005b70:	2301      	movs	r3, #1
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	e001      	b.n	8005b7a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005b76:	2300      	movs	r3, #0
 8005b78:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d15c      	bne.n	8005c3a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005b80:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <SetSysClock+0x11c>)
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	4a30      	ldr	r2, [pc, #192]	; (8005c48 <SetSysClock+0x11c>)
 8005b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8005b8c:	4b2f      	ldr	r3, [pc, #188]	; (8005c4c <SetSysClock+0x120>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2e      	ldr	r2, [pc, #184]	; (8005c4c <SetSysClock+0x120>)
 8005b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b96:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005b98:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <SetSysClock+0x11c>)
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <SetSysClock+0x11c>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005ba0:	4b29      	ldr	r3, [pc, #164]	; (8005c48 <SetSysClock+0x11c>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <SetSysClock+0x11c>)
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005baa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005bac:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <SetSysClock+0x11c>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <SetSysClock+0x11c>)
 8005bb2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005bb6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005bb8:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <SetSysClock+0x11c>)
 8005bba:	4a25      	ldr	r2, [pc, #148]	; (8005c50 <SetSysClock+0x124>)
 8005bbc:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <SetSysClock+0x11c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <SetSysClock+0x11c>)
 8005bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005bca:	bf00      	nop
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <SetSysClock+0x11c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f9      	beq.n	8005bcc <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8005bd8:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <SetSysClock+0x120>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <SetSysClock+0x120>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8005be4:	bf00      	nop
 8005be6:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <SetSysClock+0x120>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f9      	beq.n	8005be6 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8005bf2:	4b16      	ldr	r3, [pc, #88]	; (8005c4c <SetSysClock+0x120>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <SetSysClock+0x120>)
 8005bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfc:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8005bfe:	bf00      	nop
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <SetSysClock+0x120>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f9      	beq.n	8005c00 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005c0c:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <SetSysClock+0x128>)
 8005c0e:	f240 7205 	movw	r2, #1797	; 0x705
 8005c12:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <SetSysClock+0x11c>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <SetSysClock+0x11c>)
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <SetSysClock+0x11c>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <SetSysClock+0x11c>)
 8005c26:	f043 0302 	orr.w	r3, r3, #2
 8005c2a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005c2c:	bf00      	nop
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <SetSysClock+0x11c>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 030c 	and.w	r3, r3, #12
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d1f9      	bne.n	8005c2e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40007000 	.word	0x40007000
 8005c50:	07405a19 	.word	0x07405a19
 8005c54:	40023c00 	.word	0x40023c00

08005c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c58:	480d      	ldr	r0, [pc, #52]	; (8005c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c5c:	480d      	ldr	r0, [pc, #52]	; (8005c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c5e:	490e      	ldr	r1, [pc, #56]	; (8005c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c60:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <LoopForever+0xe>)
  movs r3, #0
 8005c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c64:	e002      	b.n	8005c6c <LoopCopyDataInit>

08005c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c6a:	3304      	adds	r3, #4

08005c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c70:	d3f9      	bcc.n	8005c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c72:	4a0b      	ldr	r2, [pc, #44]	; (8005ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c74:	4c0b      	ldr	r4, [pc, #44]	; (8005ca4 <LoopForever+0x16>)
  movs r3, #0
 8005c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c78:	e001      	b.n	8005c7e <LoopFillZerobss>

08005c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c7c:	3204      	adds	r2, #4

08005c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c80:	d3fb      	bcc.n	8005c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005c82:	f7ff fe9b 	bl	80059bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005c86:	f000 f817 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c8a:	f7ff fb29 	bl	80052e0 <main>

08005c8e <LoopForever>:

LoopForever:
    b LoopForever
 8005c8e:	e7fe      	b.n	8005c8e <LoopForever>
  ldr   r0, =_estack
 8005c90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c98:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8005c9c:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8005ca0:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8005ca4:	200176f4 	.word	0x200176f4

08005ca8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ca8:	e7fe      	b.n	8005ca8 <ADC_IRQHandler>
	...

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000110 	.word	0x20000110

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f000 fc5c 	bl	8006588 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	080067d8 	.word	0x080067d8
 8005cf4:	080067d8 	.word	0x080067d8
 8005cf8:	080067d8 	.word	0x080067d8
 8005cfc:	080067dc 	.word	0x080067dc

08005d00 <memcmp>:
 8005d00:	b530      	push	{r4, r5, lr}
 8005d02:	3901      	subs	r1, #1
 8005d04:	2400      	movs	r4, #0
 8005d06:	42a2      	cmp	r2, r4
 8005d08:	d101      	bne.n	8005d0e <memcmp+0xe>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e005      	b.n	8005d1a <memcmp+0x1a>
 8005d0e:	5d03      	ldrb	r3, [r0, r4]
 8005d10:	3401      	adds	r4, #1
 8005d12:	5d0d      	ldrb	r5, [r1, r4]
 8005d14:	42ab      	cmp	r3, r5
 8005d16:	d0f6      	beq.n	8005d06 <memcmp+0x6>
 8005d18:	1b58      	subs	r0, r3, r5
 8005d1a:	bd30      	pop	{r4, r5, pc}

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d32:	4291      	cmp	r1, r2
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <memset>:
 8005d38:	4402      	add	r2, r0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d100      	bne.n	8005d42 <memset+0xa>
 8005d40:	4770      	bx	lr
 8005d42:	f803 1b01 	strb.w	r1, [r3], #1
 8005d46:	e7f9      	b.n	8005d3c <memset+0x4>

08005d48 <siprintf>:
 8005d48:	b40e      	push	{r1, r2, r3}
 8005d4a:	b500      	push	{lr}
 8005d4c:	b09c      	sub	sp, #112	; 0x70
 8005d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d50:	9002      	str	r0, [sp, #8]
 8005d52:	9006      	str	r0, [sp, #24]
 8005d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d58:	4809      	ldr	r0, [pc, #36]	; (8005d80 <siprintf+0x38>)
 8005d5a:	9107      	str	r1, [sp, #28]
 8005d5c:	9104      	str	r1, [sp, #16]
 8005d5e:	4909      	ldr	r1, [pc, #36]	; (8005d84 <siprintf+0x3c>)
 8005d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d64:	9105      	str	r1, [sp, #20]
 8005d66:	6800      	ldr	r0, [r0, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	a902      	add	r1, sp, #8
 8005d6c:	f000 f868 	bl	8005e40 <_svfiprintf_r>
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	b01c      	add	sp, #112	; 0x70
 8005d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d7c:	b003      	add	sp, #12
 8005d7e:	4770      	bx	lr
 8005d80:	20000110 	.word	0x20000110
 8005d84:	ffff0208 	.word	0xffff0208

08005d88 <__ssputs_r>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	688e      	ldr	r6, [r1, #8]
 8005d8e:	429e      	cmp	r6, r3
 8005d90:	4682      	mov	sl, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	4690      	mov	r8, r2
 8005d96:	461f      	mov	r7, r3
 8005d98:	d838      	bhi.n	8005e0c <__ssputs_r+0x84>
 8005d9a:	898a      	ldrh	r2, [r1, #12]
 8005d9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005da0:	d032      	beq.n	8005e08 <__ssputs_r+0x80>
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	6909      	ldr	r1, [r1, #16]
 8005da6:	eba5 0901 	sub.w	r9, r5, r1
 8005daa:	6965      	ldr	r5, [r4, #20]
 8005dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005db0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db4:	3301      	adds	r3, #1
 8005db6:	444b      	add	r3, r9
 8005db8:	106d      	asrs	r5, r5, #1
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	bf38      	it	cc
 8005dbe:	461d      	movcc	r5, r3
 8005dc0:	0553      	lsls	r3, r2, #21
 8005dc2:	d531      	bpl.n	8005e28 <__ssputs_r+0xa0>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f000 fb39 	bl	800643c <_malloc_r>
 8005dca:	4606      	mov	r6, r0
 8005dcc:	b950      	cbnz	r0, 8005de4 <__ssputs_r+0x5c>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	f8ca 3000 	str.w	r3, [sl]
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de4:	6921      	ldr	r1, [r4, #16]
 8005de6:	464a      	mov	r2, r9
 8005de8:	f7ff ff98 	bl	8005d1c <memcpy>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	6126      	str	r6, [r4, #16]
 8005dfa:	6165      	str	r5, [r4, #20]
 8005dfc:	444e      	add	r6, r9
 8005dfe:	eba5 0509 	sub.w	r5, r5, r9
 8005e02:	6026      	str	r6, [r4, #0]
 8005e04:	60a5      	str	r5, [r4, #8]
 8005e06:	463e      	mov	r6, r7
 8005e08:	42be      	cmp	r6, r7
 8005e0a:	d900      	bls.n	8005e0e <__ssputs_r+0x86>
 8005e0c:	463e      	mov	r6, r7
 8005e0e:	4632      	mov	r2, r6
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	4641      	mov	r1, r8
 8005e14:	f000 faa8 	bl	8006368 <memmove>
 8005e18:	68a3      	ldr	r3, [r4, #8]
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	4432      	add	r2, r6
 8005e20:	60a3      	str	r3, [r4, #8]
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	2000      	movs	r0, #0
 8005e26:	e7db      	b.n	8005de0 <__ssputs_r+0x58>
 8005e28:	462a      	mov	r2, r5
 8005e2a:	f000 fb61 	bl	80064f0 <_realloc_r>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d1e1      	bne.n	8005df8 <__ssputs_r+0x70>
 8005e34:	6921      	ldr	r1, [r4, #16]
 8005e36:	4650      	mov	r0, sl
 8005e38:	f000 fab0 	bl	800639c <_free_r>
 8005e3c:	e7c7      	b.n	8005dce <__ssputs_r+0x46>
	...

08005e40 <_svfiprintf_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4698      	mov	r8, r3
 8005e46:	898b      	ldrh	r3, [r1, #12]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	b09d      	sub	sp, #116	; 0x74
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	460d      	mov	r5, r1
 8005e50:	4614      	mov	r4, r2
 8005e52:	d50e      	bpl.n	8005e72 <_svfiprintf_r+0x32>
 8005e54:	690b      	ldr	r3, [r1, #16]
 8005e56:	b963      	cbnz	r3, 8005e72 <_svfiprintf_r+0x32>
 8005e58:	2140      	movs	r1, #64	; 0x40
 8005e5a:	f000 faef 	bl	800643c <_malloc_r>
 8005e5e:	6028      	str	r0, [r5, #0]
 8005e60:	6128      	str	r0, [r5, #16]
 8005e62:	b920      	cbnz	r0, 8005e6e <_svfiprintf_r+0x2e>
 8005e64:	230c      	movs	r3, #12
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	e0d1      	b.n	8006012 <_svfiprintf_r+0x1d2>
 8005e6e:	2340      	movs	r3, #64	; 0x40
 8005e70:	616b      	str	r3, [r5, #20]
 8005e72:	2300      	movs	r3, #0
 8005e74:	9309      	str	r3, [sp, #36]	; 0x24
 8005e76:	2320      	movs	r3, #32
 8005e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e80:	2330      	movs	r3, #48	; 0x30
 8005e82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800602c <_svfiprintf_r+0x1ec>
 8005e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e8a:	f04f 0901 	mov.w	r9, #1
 8005e8e:	4623      	mov	r3, r4
 8005e90:	469a      	mov	sl, r3
 8005e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e96:	b10a      	cbz	r2, 8005e9c <_svfiprintf_r+0x5c>
 8005e98:	2a25      	cmp	r2, #37	; 0x25
 8005e9a:	d1f9      	bne.n	8005e90 <_svfiprintf_r+0x50>
 8005e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea0:	d00b      	beq.n	8005eba <_svfiprintf_r+0x7a>
 8005ea2:	465b      	mov	r3, fp
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff ff6d 	bl	8005d88 <__ssputs_r>
 8005eae:	3001      	adds	r0, #1
 8005eb0:	f000 80aa 	beq.w	8006008 <_svfiprintf_r+0x1c8>
 8005eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb6:	445a      	add	r2, fp
 8005eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8005eba:	f89a 3000 	ldrb.w	r3, [sl]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80a2 	beq.w	8006008 <_svfiprintf_r+0x1c8>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ece:	f10a 0a01 	add.w	sl, sl, #1
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	9307      	str	r3, [sp, #28]
 8005ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eda:	931a      	str	r3, [sp, #104]	; 0x68
 8005edc:	4654      	mov	r4, sl
 8005ede:	2205      	movs	r2, #5
 8005ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee4:	4851      	ldr	r0, [pc, #324]	; (800602c <_svfiprintf_r+0x1ec>)
 8005ee6:	f7fa f99b 	bl	8000220 <memchr>
 8005eea:	9a04      	ldr	r2, [sp, #16]
 8005eec:	b9d8      	cbnz	r0, 8005f26 <_svfiprintf_r+0xe6>
 8005eee:	06d0      	lsls	r0, r2, #27
 8005ef0:	bf44      	itt	mi
 8005ef2:	2320      	movmi	r3, #32
 8005ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef8:	0711      	lsls	r1, r2, #28
 8005efa:	bf44      	itt	mi
 8005efc:	232b      	movmi	r3, #43	; 0x2b
 8005efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f02:	f89a 3000 	ldrb.w	r3, [sl]
 8005f06:	2b2a      	cmp	r3, #42	; 0x2a
 8005f08:	d015      	beq.n	8005f36 <_svfiprintf_r+0xf6>
 8005f0a:	9a07      	ldr	r2, [sp, #28]
 8005f0c:	4654      	mov	r4, sl
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f04f 0c0a 	mov.w	ip, #10
 8005f14:	4621      	mov	r1, r4
 8005f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f1a:	3b30      	subs	r3, #48	; 0x30
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d94e      	bls.n	8005fbe <_svfiprintf_r+0x17e>
 8005f20:	b1b0      	cbz	r0, 8005f50 <_svfiprintf_r+0x110>
 8005f22:	9207      	str	r2, [sp, #28]
 8005f24:	e014      	b.n	8005f50 <_svfiprintf_r+0x110>
 8005f26:	eba0 0308 	sub.w	r3, r0, r8
 8005f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	46a2      	mov	sl, r4
 8005f34:	e7d2      	b.n	8005edc <_svfiprintf_r+0x9c>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	1d19      	adds	r1, r3, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	9103      	str	r1, [sp, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfbb      	ittet	lt
 8005f42:	425b      	neglt	r3, r3
 8005f44:	f042 0202 	orrlt.w	r2, r2, #2
 8005f48:	9307      	strge	r3, [sp, #28]
 8005f4a:	9307      	strlt	r3, [sp, #28]
 8005f4c:	bfb8      	it	lt
 8005f4e:	9204      	strlt	r2, [sp, #16]
 8005f50:	7823      	ldrb	r3, [r4, #0]
 8005f52:	2b2e      	cmp	r3, #46	; 0x2e
 8005f54:	d10c      	bne.n	8005f70 <_svfiprintf_r+0x130>
 8005f56:	7863      	ldrb	r3, [r4, #1]
 8005f58:	2b2a      	cmp	r3, #42	; 0x2a
 8005f5a:	d135      	bne.n	8005fc8 <_svfiprintf_r+0x188>
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	1d1a      	adds	r2, r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	9203      	str	r2, [sp, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bfb8      	it	lt
 8005f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f6c:	3402      	adds	r4, #2
 8005f6e:	9305      	str	r3, [sp, #20]
 8005f70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800603c <_svfiprintf_r+0x1fc>
 8005f74:	7821      	ldrb	r1, [r4, #0]
 8005f76:	2203      	movs	r2, #3
 8005f78:	4650      	mov	r0, sl
 8005f7a:	f7fa f951 	bl	8000220 <memchr>
 8005f7e:	b140      	cbz	r0, 8005f92 <_svfiprintf_r+0x152>
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	eba0 000a 	sub.w	r0, r0, sl
 8005f86:	fa03 f000 	lsl.w	r0, r3, r0
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	4303      	orrs	r3, r0
 8005f8e:	3401      	adds	r4, #1
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f96:	4826      	ldr	r0, [pc, #152]	; (8006030 <_svfiprintf_r+0x1f0>)
 8005f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f9c:	2206      	movs	r2, #6
 8005f9e:	f7fa f93f 	bl	8000220 <memchr>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d038      	beq.n	8006018 <_svfiprintf_r+0x1d8>
 8005fa6:	4b23      	ldr	r3, [pc, #140]	; (8006034 <_svfiprintf_r+0x1f4>)
 8005fa8:	bb1b      	cbnz	r3, 8005ff2 <_svfiprintf_r+0x1b2>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	3307      	adds	r3, #7
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	9303      	str	r3, [sp, #12]
 8005fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb8:	4433      	add	r3, r6
 8005fba:	9309      	str	r3, [sp, #36]	; 0x24
 8005fbc:	e767      	b.n	8005e8e <_svfiprintf_r+0x4e>
 8005fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	e7a5      	b.n	8005f14 <_svfiprintf_r+0xd4>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	3401      	adds	r4, #1
 8005fcc:	9305      	str	r3, [sp, #20]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f04f 0c0a 	mov.w	ip, #10
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fda:	3a30      	subs	r2, #48	; 0x30
 8005fdc:	2a09      	cmp	r2, #9
 8005fde:	d903      	bls.n	8005fe8 <_svfiprintf_r+0x1a8>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0c5      	beq.n	8005f70 <_svfiprintf_r+0x130>
 8005fe4:	9105      	str	r1, [sp, #20]
 8005fe6:	e7c3      	b.n	8005f70 <_svfiprintf_r+0x130>
 8005fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fec:	4604      	mov	r4, r0
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e7f0      	b.n	8005fd4 <_svfiprintf_r+0x194>
 8005ff2:	ab03      	add	r3, sp, #12
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <_svfiprintf_r+0x1f8>)
 8005ffa:	a904      	add	r1, sp, #16
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f3af 8000 	nop.w
 8006002:	1c42      	adds	r2, r0, #1
 8006004:	4606      	mov	r6, r0
 8006006:	d1d6      	bne.n	8005fb6 <_svfiprintf_r+0x176>
 8006008:	89ab      	ldrh	r3, [r5, #12]
 800600a:	065b      	lsls	r3, r3, #25
 800600c:	f53f af2c 	bmi.w	8005e68 <_svfiprintf_r+0x28>
 8006010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006012:	b01d      	add	sp, #116	; 0x74
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	ab03      	add	r3, sp, #12
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	462a      	mov	r2, r5
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <_svfiprintf_r+0x1f8>)
 8006020:	a904      	add	r1, sp, #16
 8006022:	4638      	mov	r0, r7
 8006024:	f000 f87a 	bl	800611c <_printf_i>
 8006028:	e7eb      	b.n	8006002 <_svfiprintf_r+0x1c2>
 800602a:	bf00      	nop
 800602c:	080067a2 	.word	0x080067a2
 8006030:	080067ac 	.word	0x080067ac
 8006034:	00000000 	.word	0x00000000
 8006038:	08005d89 	.word	0x08005d89
 800603c:	080067a8 	.word	0x080067a8

08006040 <_printf_common>:
 8006040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006044:	4616      	mov	r6, r2
 8006046:	4699      	mov	r9, r3
 8006048:	688a      	ldr	r2, [r1, #8]
 800604a:	690b      	ldr	r3, [r1, #16]
 800604c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006050:	4293      	cmp	r3, r2
 8006052:	bfb8      	it	lt
 8006054:	4613      	movlt	r3, r2
 8006056:	6033      	str	r3, [r6, #0]
 8006058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800605c:	4607      	mov	r7, r0
 800605e:	460c      	mov	r4, r1
 8006060:	b10a      	cbz	r2, 8006066 <_printf_common+0x26>
 8006062:	3301      	adds	r3, #1
 8006064:	6033      	str	r3, [r6, #0]
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	0699      	lsls	r1, r3, #26
 800606a:	bf42      	ittt	mi
 800606c:	6833      	ldrmi	r3, [r6, #0]
 800606e:	3302      	addmi	r3, #2
 8006070:	6033      	strmi	r3, [r6, #0]
 8006072:	6825      	ldr	r5, [r4, #0]
 8006074:	f015 0506 	ands.w	r5, r5, #6
 8006078:	d106      	bne.n	8006088 <_printf_common+0x48>
 800607a:	f104 0a19 	add.w	sl, r4, #25
 800607e:	68e3      	ldr	r3, [r4, #12]
 8006080:	6832      	ldr	r2, [r6, #0]
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	42ab      	cmp	r3, r5
 8006086:	dc26      	bgt.n	80060d6 <_printf_common+0x96>
 8006088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800608c:	1e13      	subs	r3, r2, #0
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	bf18      	it	ne
 8006092:	2301      	movne	r3, #1
 8006094:	0692      	lsls	r2, r2, #26
 8006096:	d42b      	bmi.n	80060f0 <_printf_common+0xb0>
 8006098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800609c:	4649      	mov	r1, r9
 800609e:	4638      	mov	r0, r7
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d01e      	beq.n	80060e4 <_printf_common+0xa4>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	68e5      	ldr	r5, [r4, #12]
 80060aa:	6832      	ldr	r2, [r6, #0]
 80060ac:	f003 0306 	and.w	r3, r3, #6
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	bf08      	it	eq
 80060b4:	1aad      	subeq	r5, r5, r2
 80060b6:	68a3      	ldr	r3, [r4, #8]
 80060b8:	6922      	ldr	r2, [r4, #16]
 80060ba:	bf0c      	ite	eq
 80060bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060c0:	2500      	movne	r5, #0
 80060c2:	4293      	cmp	r3, r2
 80060c4:	bfc4      	itt	gt
 80060c6:	1a9b      	subgt	r3, r3, r2
 80060c8:	18ed      	addgt	r5, r5, r3
 80060ca:	2600      	movs	r6, #0
 80060cc:	341a      	adds	r4, #26
 80060ce:	42b5      	cmp	r5, r6
 80060d0:	d11a      	bne.n	8006108 <_printf_common+0xc8>
 80060d2:	2000      	movs	r0, #0
 80060d4:	e008      	b.n	80060e8 <_printf_common+0xa8>
 80060d6:	2301      	movs	r3, #1
 80060d8:	4652      	mov	r2, sl
 80060da:	4649      	mov	r1, r9
 80060dc:	4638      	mov	r0, r7
 80060de:	47c0      	blx	r8
 80060e0:	3001      	adds	r0, #1
 80060e2:	d103      	bne.n	80060ec <_printf_common+0xac>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ec:	3501      	adds	r5, #1
 80060ee:	e7c6      	b.n	800607e <_printf_common+0x3e>
 80060f0:	18e1      	adds	r1, r4, r3
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	2030      	movs	r0, #48	; 0x30
 80060f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060fa:	4422      	add	r2, r4
 80060fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006104:	3302      	adds	r3, #2
 8006106:	e7c7      	b.n	8006098 <_printf_common+0x58>
 8006108:	2301      	movs	r3, #1
 800610a:	4622      	mov	r2, r4
 800610c:	4649      	mov	r1, r9
 800610e:	4638      	mov	r0, r7
 8006110:	47c0      	blx	r8
 8006112:	3001      	adds	r0, #1
 8006114:	d0e6      	beq.n	80060e4 <_printf_common+0xa4>
 8006116:	3601      	adds	r6, #1
 8006118:	e7d9      	b.n	80060ce <_printf_common+0x8e>
	...

0800611c <_printf_i>:
 800611c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006120:	460c      	mov	r4, r1
 8006122:	4691      	mov	r9, r2
 8006124:	7e27      	ldrb	r7, [r4, #24]
 8006126:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006128:	2f78      	cmp	r7, #120	; 0x78
 800612a:	4680      	mov	r8, r0
 800612c:	469a      	mov	sl, r3
 800612e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006132:	d807      	bhi.n	8006144 <_printf_i+0x28>
 8006134:	2f62      	cmp	r7, #98	; 0x62
 8006136:	d80a      	bhi.n	800614e <_printf_i+0x32>
 8006138:	2f00      	cmp	r7, #0
 800613a:	f000 80d8 	beq.w	80062ee <_printf_i+0x1d2>
 800613e:	2f58      	cmp	r7, #88	; 0x58
 8006140:	f000 80a3 	beq.w	800628a <_printf_i+0x16e>
 8006144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800614c:	e03a      	b.n	80061c4 <_printf_i+0xa8>
 800614e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006152:	2b15      	cmp	r3, #21
 8006154:	d8f6      	bhi.n	8006144 <_printf_i+0x28>
 8006156:	a001      	add	r0, pc, #4	; (adr r0, 800615c <_printf_i+0x40>)
 8006158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800615c:	080061b5 	.word	0x080061b5
 8006160:	080061c9 	.word	0x080061c9
 8006164:	08006145 	.word	0x08006145
 8006168:	08006145 	.word	0x08006145
 800616c:	08006145 	.word	0x08006145
 8006170:	08006145 	.word	0x08006145
 8006174:	080061c9 	.word	0x080061c9
 8006178:	08006145 	.word	0x08006145
 800617c:	08006145 	.word	0x08006145
 8006180:	08006145 	.word	0x08006145
 8006184:	08006145 	.word	0x08006145
 8006188:	080062d5 	.word	0x080062d5
 800618c:	080061f9 	.word	0x080061f9
 8006190:	080062b7 	.word	0x080062b7
 8006194:	08006145 	.word	0x08006145
 8006198:	08006145 	.word	0x08006145
 800619c:	080062f7 	.word	0x080062f7
 80061a0:	08006145 	.word	0x08006145
 80061a4:	080061f9 	.word	0x080061f9
 80061a8:	08006145 	.word	0x08006145
 80061ac:	08006145 	.word	0x08006145
 80061b0:	080062bf 	.word	0x080062bf
 80061b4:	680b      	ldr	r3, [r1, #0]
 80061b6:	1d1a      	adds	r2, r3, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	600a      	str	r2, [r1, #0]
 80061bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061c4:	2301      	movs	r3, #1
 80061c6:	e0a3      	b.n	8006310 <_printf_i+0x1f4>
 80061c8:	6825      	ldr	r5, [r4, #0]
 80061ca:	6808      	ldr	r0, [r1, #0]
 80061cc:	062e      	lsls	r6, r5, #24
 80061ce:	f100 0304 	add.w	r3, r0, #4
 80061d2:	d50a      	bpl.n	80061ea <_printf_i+0xce>
 80061d4:	6805      	ldr	r5, [r0, #0]
 80061d6:	600b      	str	r3, [r1, #0]
 80061d8:	2d00      	cmp	r5, #0
 80061da:	da03      	bge.n	80061e4 <_printf_i+0xc8>
 80061dc:	232d      	movs	r3, #45	; 0x2d
 80061de:	426d      	negs	r5, r5
 80061e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e4:	485e      	ldr	r0, [pc, #376]	; (8006360 <_printf_i+0x244>)
 80061e6:	230a      	movs	r3, #10
 80061e8:	e019      	b.n	800621e <_printf_i+0x102>
 80061ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061ee:	6805      	ldr	r5, [r0, #0]
 80061f0:	600b      	str	r3, [r1, #0]
 80061f2:	bf18      	it	ne
 80061f4:	b22d      	sxthne	r5, r5
 80061f6:	e7ef      	b.n	80061d8 <_printf_i+0xbc>
 80061f8:	680b      	ldr	r3, [r1, #0]
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	1d18      	adds	r0, r3, #4
 80061fe:	6008      	str	r0, [r1, #0]
 8006200:	0628      	lsls	r0, r5, #24
 8006202:	d501      	bpl.n	8006208 <_printf_i+0xec>
 8006204:	681d      	ldr	r5, [r3, #0]
 8006206:	e002      	b.n	800620e <_printf_i+0xf2>
 8006208:	0669      	lsls	r1, r5, #25
 800620a:	d5fb      	bpl.n	8006204 <_printf_i+0xe8>
 800620c:	881d      	ldrh	r5, [r3, #0]
 800620e:	4854      	ldr	r0, [pc, #336]	; (8006360 <_printf_i+0x244>)
 8006210:	2f6f      	cmp	r7, #111	; 0x6f
 8006212:	bf0c      	ite	eq
 8006214:	2308      	moveq	r3, #8
 8006216:	230a      	movne	r3, #10
 8006218:	2100      	movs	r1, #0
 800621a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800621e:	6866      	ldr	r6, [r4, #4]
 8006220:	60a6      	str	r6, [r4, #8]
 8006222:	2e00      	cmp	r6, #0
 8006224:	bfa2      	ittt	ge
 8006226:	6821      	ldrge	r1, [r4, #0]
 8006228:	f021 0104 	bicge.w	r1, r1, #4
 800622c:	6021      	strge	r1, [r4, #0]
 800622e:	b90d      	cbnz	r5, 8006234 <_printf_i+0x118>
 8006230:	2e00      	cmp	r6, #0
 8006232:	d04d      	beq.n	80062d0 <_printf_i+0x1b4>
 8006234:	4616      	mov	r6, r2
 8006236:	fbb5 f1f3 	udiv	r1, r5, r3
 800623a:	fb03 5711 	mls	r7, r3, r1, r5
 800623e:	5dc7      	ldrb	r7, [r0, r7]
 8006240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006244:	462f      	mov	r7, r5
 8006246:	42bb      	cmp	r3, r7
 8006248:	460d      	mov	r5, r1
 800624a:	d9f4      	bls.n	8006236 <_printf_i+0x11a>
 800624c:	2b08      	cmp	r3, #8
 800624e:	d10b      	bne.n	8006268 <_printf_i+0x14c>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	07df      	lsls	r7, r3, #31
 8006254:	d508      	bpl.n	8006268 <_printf_i+0x14c>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	6861      	ldr	r1, [r4, #4]
 800625a:	4299      	cmp	r1, r3
 800625c:	bfde      	ittt	le
 800625e:	2330      	movle	r3, #48	; 0x30
 8006260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006268:	1b92      	subs	r2, r2, r6
 800626a:	6122      	str	r2, [r4, #16]
 800626c:	f8cd a000 	str.w	sl, [sp]
 8006270:	464b      	mov	r3, r9
 8006272:	aa03      	add	r2, sp, #12
 8006274:	4621      	mov	r1, r4
 8006276:	4640      	mov	r0, r8
 8006278:	f7ff fee2 	bl	8006040 <_printf_common>
 800627c:	3001      	adds	r0, #1
 800627e:	d14c      	bne.n	800631a <_printf_i+0x1fe>
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	b004      	add	sp, #16
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	4835      	ldr	r0, [pc, #212]	; (8006360 <_printf_i+0x244>)
 800628c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	680e      	ldr	r6, [r1, #0]
 8006294:	061f      	lsls	r7, r3, #24
 8006296:	f856 5b04 	ldr.w	r5, [r6], #4
 800629a:	600e      	str	r6, [r1, #0]
 800629c:	d514      	bpl.n	80062c8 <_printf_i+0x1ac>
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	bf44      	itt	mi
 80062a2:	f043 0320 	orrmi.w	r3, r3, #32
 80062a6:	6023      	strmi	r3, [r4, #0]
 80062a8:	b91d      	cbnz	r5, 80062b2 <_printf_i+0x196>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	f023 0320 	bic.w	r3, r3, #32
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	2310      	movs	r3, #16
 80062b4:	e7b0      	b.n	8006218 <_printf_i+0xfc>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	f043 0320 	orr.w	r3, r3, #32
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	2378      	movs	r3, #120	; 0x78
 80062c0:	4828      	ldr	r0, [pc, #160]	; (8006364 <_printf_i+0x248>)
 80062c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062c6:	e7e3      	b.n	8006290 <_printf_i+0x174>
 80062c8:	065e      	lsls	r6, r3, #25
 80062ca:	bf48      	it	mi
 80062cc:	b2ad      	uxthmi	r5, r5
 80062ce:	e7e6      	b.n	800629e <_printf_i+0x182>
 80062d0:	4616      	mov	r6, r2
 80062d2:	e7bb      	b.n	800624c <_printf_i+0x130>
 80062d4:	680b      	ldr	r3, [r1, #0]
 80062d6:	6826      	ldr	r6, [r4, #0]
 80062d8:	6960      	ldr	r0, [r4, #20]
 80062da:	1d1d      	adds	r5, r3, #4
 80062dc:	600d      	str	r5, [r1, #0]
 80062de:	0635      	lsls	r5, r6, #24
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	d501      	bpl.n	80062e8 <_printf_i+0x1cc>
 80062e4:	6018      	str	r0, [r3, #0]
 80062e6:	e002      	b.n	80062ee <_printf_i+0x1d2>
 80062e8:	0671      	lsls	r1, r6, #25
 80062ea:	d5fb      	bpl.n	80062e4 <_printf_i+0x1c8>
 80062ec:	8018      	strh	r0, [r3, #0]
 80062ee:	2300      	movs	r3, #0
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	4616      	mov	r6, r2
 80062f4:	e7ba      	b.n	800626c <_printf_i+0x150>
 80062f6:	680b      	ldr	r3, [r1, #0]
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	600a      	str	r2, [r1, #0]
 80062fc:	681e      	ldr	r6, [r3, #0]
 80062fe:	6862      	ldr	r2, [r4, #4]
 8006300:	2100      	movs	r1, #0
 8006302:	4630      	mov	r0, r6
 8006304:	f7f9 ff8c 	bl	8000220 <memchr>
 8006308:	b108      	cbz	r0, 800630e <_printf_i+0x1f2>
 800630a:	1b80      	subs	r0, r0, r6
 800630c:	6060      	str	r0, [r4, #4]
 800630e:	6863      	ldr	r3, [r4, #4]
 8006310:	6123      	str	r3, [r4, #16]
 8006312:	2300      	movs	r3, #0
 8006314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006318:	e7a8      	b.n	800626c <_printf_i+0x150>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	4632      	mov	r2, r6
 800631e:	4649      	mov	r1, r9
 8006320:	4640      	mov	r0, r8
 8006322:	47d0      	blx	sl
 8006324:	3001      	adds	r0, #1
 8006326:	d0ab      	beq.n	8006280 <_printf_i+0x164>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	079b      	lsls	r3, r3, #30
 800632c:	d413      	bmi.n	8006356 <_printf_i+0x23a>
 800632e:	68e0      	ldr	r0, [r4, #12]
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	4298      	cmp	r0, r3
 8006334:	bfb8      	it	lt
 8006336:	4618      	movlt	r0, r3
 8006338:	e7a4      	b.n	8006284 <_printf_i+0x168>
 800633a:	2301      	movs	r3, #1
 800633c:	4632      	mov	r2, r6
 800633e:	4649      	mov	r1, r9
 8006340:	4640      	mov	r0, r8
 8006342:	47d0      	blx	sl
 8006344:	3001      	adds	r0, #1
 8006346:	d09b      	beq.n	8006280 <_printf_i+0x164>
 8006348:	3501      	adds	r5, #1
 800634a:	68e3      	ldr	r3, [r4, #12]
 800634c:	9903      	ldr	r1, [sp, #12]
 800634e:	1a5b      	subs	r3, r3, r1
 8006350:	42ab      	cmp	r3, r5
 8006352:	dcf2      	bgt.n	800633a <_printf_i+0x21e>
 8006354:	e7eb      	b.n	800632e <_printf_i+0x212>
 8006356:	2500      	movs	r5, #0
 8006358:	f104 0619 	add.w	r6, r4, #25
 800635c:	e7f5      	b.n	800634a <_printf_i+0x22e>
 800635e:	bf00      	nop
 8006360:	080067b3 	.word	0x080067b3
 8006364:	080067c4 	.word	0x080067c4

08006368 <memmove>:
 8006368:	4288      	cmp	r0, r1
 800636a:	b510      	push	{r4, lr}
 800636c:	eb01 0402 	add.w	r4, r1, r2
 8006370:	d902      	bls.n	8006378 <memmove+0x10>
 8006372:	4284      	cmp	r4, r0
 8006374:	4623      	mov	r3, r4
 8006376:	d807      	bhi.n	8006388 <memmove+0x20>
 8006378:	1e43      	subs	r3, r0, #1
 800637a:	42a1      	cmp	r1, r4
 800637c:	d008      	beq.n	8006390 <memmove+0x28>
 800637e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006386:	e7f8      	b.n	800637a <memmove+0x12>
 8006388:	4402      	add	r2, r0
 800638a:	4601      	mov	r1, r0
 800638c:	428a      	cmp	r2, r1
 800638e:	d100      	bne.n	8006392 <memmove+0x2a>
 8006390:	bd10      	pop	{r4, pc}
 8006392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800639a:	e7f7      	b.n	800638c <memmove+0x24>

0800639c <_free_r>:
 800639c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639e:	2900      	cmp	r1, #0
 80063a0:	d048      	beq.n	8006434 <_free_r+0x98>
 80063a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a6:	9001      	str	r0, [sp, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f1a1 0404 	sub.w	r4, r1, #4
 80063ae:	bfb8      	it	lt
 80063b0:	18e4      	addlt	r4, r4, r3
 80063b2:	f000 f8d3 	bl	800655c <__malloc_lock>
 80063b6:	4a20      	ldr	r2, [pc, #128]	; (8006438 <_free_r+0x9c>)
 80063b8:	9801      	ldr	r0, [sp, #4]
 80063ba:	6813      	ldr	r3, [r2, #0]
 80063bc:	4615      	mov	r5, r2
 80063be:	b933      	cbnz	r3, 80063ce <_free_r+0x32>
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6014      	str	r4, [r2, #0]
 80063c4:	b003      	add	sp, #12
 80063c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ca:	f000 b8cd 	b.w	8006568 <__malloc_unlock>
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	d90b      	bls.n	80063ea <_free_r+0x4e>
 80063d2:	6821      	ldr	r1, [r4, #0]
 80063d4:	1862      	adds	r2, r4, r1
 80063d6:	4293      	cmp	r3, r2
 80063d8:	bf04      	itt	eq
 80063da:	681a      	ldreq	r2, [r3, #0]
 80063dc:	685b      	ldreq	r3, [r3, #4]
 80063de:	6063      	str	r3, [r4, #4]
 80063e0:	bf04      	itt	eq
 80063e2:	1852      	addeq	r2, r2, r1
 80063e4:	6022      	streq	r2, [r4, #0]
 80063e6:	602c      	str	r4, [r5, #0]
 80063e8:	e7ec      	b.n	80063c4 <_free_r+0x28>
 80063ea:	461a      	mov	r2, r3
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	b10b      	cbz	r3, 80063f4 <_free_r+0x58>
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d9fa      	bls.n	80063ea <_free_r+0x4e>
 80063f4:	6811      	ldr	r1, [r2, #0]
 80063f6:	1855      	adds	r5, r2, r1
 80063f8:	42a5      	cmp	r5, r4
 80063fa:	d10b      	bne.n	8006414 <_free_r+0x78>
 80063fc:	6824      	ldr	r4, [r4, #0]
 80063fe:	4421      	add	r1, r4
 8006400:	1854      	adds	r4, r2, r1
 8006402:	42a3      	cmp	r3, r4
 8006404:	6011      	str	r1, [r2, #0]
 8006406:	d1dd      	bne.n	80063c4 <_free_r+0x28>
 8006408:	681c      	ldr	r4, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	6053      	str	r3, [r2, #4]
 800640e:	4421      	add	r1, r4
 8006410:	6011      	str	r1, [r2, #0]
 8006412:	e7d7      	b.n	80063c4 <_free_r+0x28>
 8006414:	d902      	bls.n	800641c <_free_r+0x80>
 8006416:	230c      	movs	r3, #12
 8006418:	6003      	str	r3, [r0, #0]
 800641a:	e7d3      	b.n	80063c4 <_free_r+0x28>
 800641c:	6825      	ldr	r5, [r4, #0]
 800641e:	1961      	adds	r1, r4, r5
 8006420:	428b      	cmp	r3, r1
 8006422:	bf04      	itt	eq
 8006424:	6819      	ldreq	r1, [r3, #0]
 8006426:	685b      	ldreq	r3, [r3, #4]
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	bf04      	itt	eq
 800642c:	1949      	addeq	r1, r1, r5
 800642e:	6021      	streq	r1, [r4, #0]
 8006430:	6054      	str	r4, [r2, #4]
 8006432:	e7c7      	b.n	80063c4 <_free_r+0x28>
 8006434:	b003      	add	sp, #12
 8006436:	bd30      	pop	{r4, r5, pc}
 8006438:	200175e0 	.word	0x200175e0

0800643c <_malloc_r>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	1ccd      	adds	r5, r1, #3
 8006440:	f025 0503 	bic.w	r5, r5, #3
 8006444:	3508      	adds	r5, #8
 8006446:	2d0c      	cmp	r5, #12
 8006448:	bf38      	it	cc
 800644a:	250c      	movcc	r5, #12
 800644c:	2d00      	cmp	r5, #0
 800644e:	4606      	mov	r6, r0
 8006450:	db01      	blt.n	8006456 <_malloc_r+0x1a>
 8006452:	42a9      	cmp	r1, r5
 8006454:	d903      	bls.n	800645e <_malloc_r+0x22>
 8006456:	230c      	movs	r3, #12
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	2000      	movs	r0, #0
 800645c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645e:	f000 f87d 	bl	800655c <__malloc_lock>
 8006462:	4921      	ldr	r1, [pc, #132]	; (80064e8 <_malloc_r+0xac>)
 8006464:	680a      	ldr	r2, [r1, #0]
 8006466:	4614      	mov	r4, r2
 8006468:	b99c      	cbnz	r4, 8006492 <_malloc_r+0x56>
 800646a:	4f20      	ldr	r7, [pc, #128]	; (80064ec <_malloc_r+0xb0>)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	b923      	cbnz	r3, 800647a <_malloc_r+0x3e>
 8006470:	4621      	mov	r1, r4
 8006472:	4630      	mov	r0, r6
 8006474:	f000 f862 	bl	800653c <_sbrk_r>
 8006478:	6038      	str	r0, [r7, #0]
 800647a:	4629      	mov	r1, r5
 800647c:	4630      	mov	r0, r6
 800647e:	f000 f85d 	bl	800653c <_sbrk_r>
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	d123      	bne.n	80064ce <_malloc_r+0x92>
 8006486:	230c      	movs	r3, #12
 8006488:	6033      	str	r3, [r6, #0]
 800648a:	4630      	mov	r0, r6
 800648c:	f000 f86c 	bl	8006568 <__malloc_unlock>
 8006490:	e7e3      	b.n	800645a <_malloc_r+0x1e>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	1b5b      	subs	r3, r3, r5
 8006496:	d417      	bmi.n	80064c8 <_malloc_r+0x8c>
 8006498:	2b0b      	cmp	r3, #11
 800649a:	d903      	bls.n	80064a4 <_malloc_r+0x68>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	441c      	add	r4, r3
 80064a0:	6025      	str	r5, [r4, #0]
 80064a2:	e004      	b.n	80064ae <_malloc_r+0x72>
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	42a2      	cmp	r2, r4
 80064a8:	bf0c      	ite	eq
 80064aa:	600b      	streq	r3, [r1, #0]
 80064ac:	6053      	strne	r3, [r2, #4]
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f85a 	bl	8006568 <__malloc_unlock>
 80064b4:	f104 000b 	add.w	r0, r4, #11
 80064b8:	1d23      	adds	r3, r4, #4
 80064ba:	f020 0007 	bic.w	r0, r0, #7
 80064be:	1ac2      	subs	r2, r0, r3
 80064c0:	d0cc      	beq.n	800645c <_malloc_r+0x20>
 80064c2:	1a1b      	subs	r3, r3, r0
 80064c4:	50a3      	str	r3, [r4, r2]
 80064c6:	e7c9      	b.n	800645c <_malloc_r+0x20>
 80064c8:	4622      	mov	r2, r4
 80064ca:	6864      	ldr	r4, [r4, #4]
 80064cc:	e7cc      	b.n	8006468 <_malloc_r+0x2c>
 80064ce:	1cc4      	adds	r4, r0, #3
 80064d0:	f024 0403 	bic.w	r4, r4, #3
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d0e3      	beq.n	80064a0 <_malloc_r+0x64>
 80064d8:	1a21      	subs	r1, r4, r0
 80064da:	4630      	mov	r0, r6
 80064dc:	f000 f82e 	bl	800653c <_sbrk_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d1dd      	bne.n	80064a0 <_malloc_r+0x64>
 80064e4:	e7cf      	b.n	8006486 <_malloc_r+0x4a>
 80064e6:	bf00      	nop
 80064e8:	200175e0 	.word	0x200175e0
 80064ec:	200175e4 	.word	0x200175e4

080064f0 <_realloc_r>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	4607      	mov	r7, r0
 80064f4:	4614      	mov	r4, r2
 80064f6:	460e      	mov	r6, r1
 80064f8:	b921      	cbnz	r1, 8006504 <_realloc_r+0x14>
 80064fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064fe:	4611      	mov	r1, r2
 8006500:	f7ff bf9c 	b.w	800643c <_malloc_r>
 8006504:	b922      	cbnz	r2, 8006510 <_realloc_r+0x20>
 8006506:	f7ff ff49 	bl	800639c <_free_r>
 800650a:	4625      	mov	r5, r4
 800650c:	4628      	mov	r0, r5
 800650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006510:	f000 f830 	bl	8006574 <_malloc_usable_size_r>
 8006514:	42a0      	cmp	r0, r4
 8006516:	d20f      	bcs.n	8006538 <_realloc_r+0x48>
 8006518:	4621      	mov	r1, r4
 800651a:	4638      	mov	r0, r7
 800651c:	f7ff ff8e 	bl	800643c <_malloc_r>
 8006520:	4605      	mov	r5, r0
 8006522:	2800      	cmp	r0, #0
 8006524:	d0f2      	beq.n	800650c <_realloc_r+0x1c>
 8006526:	4631      	mov	r1, r6
 8006528:	4622      	mov	r2, r4
 800652a:	f7ff fbf7 	bl	8005d1c <memcpy>
 800652e:	4631      	mov	r1, r6
 8006530:	4638      	mov	r0, r7
 8006532:	f7ff ff33 	bl	800639c <_free_r>
 8006536:	e7e9      	b.n	800650c <_realloc_r+0x1c>
 8006538:	4635      	mov	r5, r6
 800653a:	e7e7      	b.n	800650c <_realloc_r+0x1c>

0800653c <_sbrk_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d06      	ldr	r5, [pc, #24]	; (8006558 <_sbrk_r+0x1c>)
 8006540:	2300      	movs	r3, #0
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7ff fa0c 	bl	8005964 <_sbrk>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_sbrk_r+0x1a>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_sbrk_r+0x1a>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	200176e4 	.word	0x200176e4

0800655c <__malloc_lock>:
 800655c:	4801      	ldr	r0, [pc, #4]	; (8006564 <__malloc_lock+0x8>)
 800655e:	f000 b811 	b.w	8006584 <__retarget_lock_acquire_recursive>
 8006562:	bf00      	nop
 8006564:	200176ec 	.word	0x200176ec

08006568 <__malloc_unlock>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__malloc_unlock+0x8>)
 800656a:	f000 b80c 	b.w	8006586 <__retarget_lock_release_recursive>
 800656e:	bf00      	nop
 8006570:	200176ec 	.word	0x200176ec

08006574 <_malloc_usable_size_r>:
 8006574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006578:	1f18      	subs	r0, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	bfbc      	itt	lt
 800657e:	580b      	ldrlt	r3, [r1, r0]
 8006580:	18c0      	addlt	r0, r0, r3
 8006582:	4770      	bx	lr

08006584 <__retarget_lock_acquire_recursive>:
 8006584:	4770      	bx	lr

08006586 <__retarget_lock_release_recursive>:
 8006586:	4770      	bx	lr

08006588 <_init>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	bf00      	nop
 800658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658e:	bc08      	pop	{r3}
 8006590:	469e      	mov	lr, r3
 8006592:	4770      	bx	lr

08006594 <_fini>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr
