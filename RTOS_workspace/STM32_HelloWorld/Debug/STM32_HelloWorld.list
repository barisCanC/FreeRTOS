
STM32_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005094  08005094  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08005094  08005094  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005094  08005094  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800509c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015538  2000002c  080050c8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015564  080050c8  00025564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010823  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e7  00000000  00000000  0003087f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  00032968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  00033638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f97  00000000  00000000  00034210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2a3  00000000  00000000  000371a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076ffb  00000000  00000000  0004244a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b9445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036dc  00000000  00000000  000b94c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f18 	.word	0x08004f18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000030 	.word	0x20000030
 800020c:	08004f18 	.word	0x08004f18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e076      	b.n	800032a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800023c:	2201      	movs	r2, #1
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	fa02 f303 	lsl.w	r3, r2, r3
 8000244:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d165      	bne.n	8000324 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	2103      	movs	r1, #3
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	401a      	ands	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	791b      	ldrb	r3, [r3, #4]
 8000276:	4619      	mov	r1, r3
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d003      	beq.n	8000296 <GPIO_Init+0x76>
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d12e      	bne.n	80002f4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2103      	movs	r1, #3
 80002a0:	fa01 f303 	lsl.w	r3, r1, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	401a      	ands	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	795b      	ldrb	r3, [r3, #5]
 80002b4:	4619      	mov	r1, r3
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	431a      	orrs	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	2301      	movs	r3, #1
 80002d0:	408b      	lsls	r3, r1
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	7992      	ldrb	r2, [r2, #6]
 80002e2:	4611      	mov	r1, r2
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	b292      	uxth	r2, r2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	b292      	uxth	r2, r2
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68da      	ldr	r2, [r3, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	2103      	movs	r1, #3
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	43db      	mvns	r3, r3
 8000306:	401a      	ands	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68da      	ldr	r2, [r3, #12]
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	79db      	ldrb	r3, [r3, #7]
 8000314:	4619      	mov	r1, r3
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	3301      	adds	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	d985      	bls.n	800023c <GPIO_Init+0x1c>
    }
  }
}
 8000330:	bf00      	nop
 8000332:	371c      	adds	r7, #28
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
 8000348:	4613      	mov	r3, r2
 800034a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000354:	787a      	ldrb	r2, [r7, #1]
 8000356:	887b      	ldrh	r3, [r7, #2]
 8000358:	f003 0307 	and.w	r3, r3, #7
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b29b      	uxth	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3208      	adds	r2, #8
 8000370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000374:	887b      	ldrh	r3, [r7, #2]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	8879      	ldrh	r1, [r7, #2]
 8000386:	08c9      	lsrs	r1, r1, #3
 8000388:	b289      	uxth	r1, r1
 800038a:	4608      	mov	r0, r1
 800038c:	ea02 0103 	and.w	r1, r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f100 0208 	add.w	r2, r0, #8
 8000396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800039a:	887b      	ldrh	r3, [r7, #2]
 800039c:	08db      	lsrs	r3, r3, #3
 800039e:	b29b      	uxth	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3208      	adds	r2, #8
 80003a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003b0:	887b      	ldrh	r3, [r7, #2]
 80003b2:	08db      	lsrs	r3, r3, #3
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3208      	adds	r2, #8
 80003bc:	68b9      	ldr	r1, [r7, #8]
 80003be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <RCC_DeInit+0x60>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <RCC_DeInit+0x60>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <RCC_DeInit+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <RCC_DeInit+0x60>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <RCC_DeInit+0x60>)
 80003ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80003f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80003f4:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <RCC_DeInit+0x60>)
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <RCC_DeInit+0x64>)
 80003fa:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <RCC_DeInit+0x60>)
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <RCC_DeInit+0x68>)
 8000400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <RCC_DeInit+0x60>)
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <RCC_DeInit+0x6c>)
 8000408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <RCC_DeInit+0x60>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a07      	ldr	r2, [pc, #28]	; (8000430 <RCC_DeInit+0x60>)
 8000412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000416:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <RCC_DeInit+0x60>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <RCC_DeInit+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800
 8000434:	24003010 	.word	0x24003010
 8000438:	20003000 	.word	0x20003000
 800043c:	24003000 	.word	0x24003000

08000440 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000440:	b480      	push	{r7}
 8000442:	b089      	sub	sp, #36	; 0x24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
 8000454:	2302      	movs	r3, #2
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	2302      	movs	r3, #2
 800045e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000460:	4b47      	ldr	r3, [pc, #284]	; (8000580 <RCC_GetClocksFreq+0x140>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f003 030c 	and.w	r3, r3, #12
 8000468:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	2b04      	cmp	r3, #4
 800046e:	d007      	beq.n	8000480 <RCC_GetClocksFreq+0x40>
 8000470:	2b08      	cmp	r3, #8
 8000472:	d009      	beq.n	8000488 <RCC_GetClocksFreq+0x48>
 8000474:	2b00      	cmp	r3, #0
 8000476:	d13d      	bne.n	80004f4 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a42      	ldr	r2, [pc, #264]	; (8000584 <RCC_GetClocksFreq+0x144>)
 800047c:	601a      	str	r2, [r3, #0]
    break;
 800047e:	e03d      	b.n	80004fc <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a41      	ldr	r2, [pc, #260]	; (8000588 <RCC_GetClocksFreq+0x148>)
 8000484:	601a      	str	r2, [r3, #0]
    break;
 8000486:	e039      	b.n	80004fc <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000488:	4b3d      	ldr	r3, [pc, #244]	; (8000580 <RCC_GetClocksFreq+0x140>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	0d9b      	lsrs	r3, r3, #22
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000494:	4b3a      	ldr	r3, [pc, #232]	; (8000580 <RCC_GetClocksFreq+0x140>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800049c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00c      	beq.n	80004be <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004a4:	4a38      	ldr	r2, [pc, #224]	; (8000588 <RCC_GetClocksFreq+0x148>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ac:	4a34      	ldr	r2, [pc, #208]	; (8000580 <RCC_GetClocksFreq+0x140>)
 80004ae:	6852      	ldr	r2, [r2, #4]
 80004b0:	0992      	lsrs	r2, r2, #6
 80004b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004b6:	fb02 f303 	mul.w	r3, r2, r3
 80004ba:	61fb      	str	r3, [r7, #28]
 80004bc:	e00b      	b.n	80004d6 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004be:	4a31      	ldr	r2, [pc, #196]	; (8000584 <RCC_GetClocksFreq+0x144>)
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c6:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <RCC_GetClocksFreq+0x140>)
 80004c8:	6852      	ldr	r2, [r2, #4]
 80004ca:	0992      	lsrs	r2, r2, #6
 80004cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <RCC_GetClocksFreq+0x140>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	0c1b      	lsrs	r3, r3, #16
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	3301      	adds	r3, #1
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
    break;
 80004f2:	e003      	b.n	80004fc <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a23      	ldr	r2, [pc, #140]	; (8000584 <RCC_GetClocksFreq+0x144>)
 80004f8:	601a      	str	r2, [r3, #0]
    break;
 80004fa:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <RCC_GetClocksFreq+0x140>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000504:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	091b      	lsrs	r3, r3, #4
 800050a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800050c:	4a1f      	ldr	r2, [pc, #124]	; (800058c <RCC_GetClocksFreq+0x14c>)
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	40da      	lsrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <RCC_GetClocksFreq+0x140>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800052c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	0a9b      	lsrs	r3, r3, #10
 8000532:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000534:	4a15      	ldr	r2, [pc, #84]	; (800058c <RCC_GetClocksFreq+0x14c>)
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	4413      	add	r3, r2
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	40da      	lsrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <RCC_GetClocksFreq+0x140>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000554:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	0b5b      	lsrs	r3, r3, #13
 800055a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <RCC_GetClocksFreq+0x14c>)
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	40da      	lsrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	60da      	str	r2, [r3, #12]
}
 8000574:	bf00      	nop
 8000576:	3724      	adds	r7, #36	; 0x24
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40023800 	.word	0x40023800
 8000584:	00f42400 	.word	0x00f42400
 8000588:	017d7840 	.word	0x017d7840
 800058c:	20000000 	.word	0x20000000

08000590 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a6:	4909      	ldr	r1, [pc, #36]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005ae:	e006      	b.n	80005be <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	4904      	ldr	r1, [pc, #16]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005ba:	4013      	ands	r3, r2
 80005bc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <RCC_APB1PeriphClockCmd+0x3c>)
 80005e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e6:	4909      	ldr	r1, [pc, #36]	; (800060c <RCC_APB1PeriphClockCmd+0x3c>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80005ee:	e006      	b.n	80005fe <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <RCC_APB1PeriphClockCmd+0x3c>)
 80005f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4904      	ldr	r1, [pc, #16]	; (800060c <RCC_APB1PeriphClockCmd+0x3c>)
 80005fa:	4013      	ands	r3, r2
 80005fc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	8a1b      	ldrh	r3, [r3, #16]
 800062e:	b29b      	uxth	r3, r3
 8000630:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	88db      	ldrh	r3, [r3, #6]
 800063e:	461a      	mov	r2, r3
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	4313      	orrs	r3, r2
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	b29a      	uxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	899b      	ldrh	r3, [r3, #12]
 8000652:	b29b      	uxth	r3, r3
 8000654:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800065c:	f023 030c 	bic.w	r3, r3, #12
 8000660:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	889a      	ldrh	r2, [r3, #4]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	891b      	ldrh	r3, [r3, #8]
 800066a:	4313      	orrs	r3, r2
 800066c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000672:	4313      	orrs	r3, r2
 8000674:	b29b      	uxth	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	4313      	orrs	r3, r2
 800067c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	8a9b      	ldrh	r3, [r3, #20]
 800068a:	b29b      	uxth	r3, r3
 800068c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000694:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	899b      	ldrh	r3, [r3, #12]
 800069a:	461a      	mov	r2, r3
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	4313      	orrs	r3, r2
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80006a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fec6 	bl	8000440 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a30      	ldr	r2, [pc, #192]	; (8000778 <USART_Init+0x168>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d003      	beq.n	80006c4 <USART_Init+0xb4>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a2f      	ldr	r2, [pc, #188]	; (800077c <USART_Init+0x16c>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d102      	bne.n	80006ca <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	623b      	str	r3, [r7, #32]
 80006c8:	e001      	b.n	80006ce <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	899b      	ldrh	r3, [r3, #12]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da0c      	bge.n	80006f4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80006da:	6a3a      	ldr	r2, [r7, #32]
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	009a      	lsls	r2, r3, #2
 80006e4:	441a      	add	r2, r3
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	e00b      	b.n	800070c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80006f4:	6a3a      	ldr	r2, [r7, #32]
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	009a      	lsls	r2, r3, #2
 80006fe:	441a      	add	r2, r3
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <USART_Init+0x170>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	095b      	lsrs	r3, r3, #5
 8000716:	011b      	lsls	r3, r3, #4
 8000718:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071c:	091b      	lsrs	r3, r3, #4
 800071e:	2264      	movs	r2, #100	; 0x64
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	69fa      	ldr	r2, [r7, #28]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	899b      	ldrh	r3, [r3, #12]
 800072e:	b29b      	uxth	r3, r3
 8000730:	b21b      	sxth	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	da0c      	bge.n	8000750 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	3332      	adds	r3, #50	; 0x32
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <USART_Init+0x170>)
 800073e:	fba2 2303 	umull	r2, r3, r2, r3
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074a:	4313      	orrs	r3, r2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
 800074e:	e00b      	b.n	8000768 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	3332      	adds	r3, #50	; 0x32
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <USART_Init+0x170>)
 8000758:	fba2 2303 	umull	r2, r3, r2, r3
 800075c:	095b      	lsrs	r3, r3, #5
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000764:	4313      	orrs	r3, r2
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	811a      	strh	r2, [r3, #8]
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40011000 	.word	0x40011000
 800077c:	40011400 	.word	0x40011400
 8000780:	51eb851f 	.word	0x51eb851f

08000784 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d008      	beq.n	80007a8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	899b      	ldrh	r3, [r3, #12]
 800079a:	b29b      	uxth	r3, r3
 800079c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80007a6:	e007      	b.n	80007b8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	899b      	ldrh	r3, [r3, #12]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	819a      	strh	r2, [r3, #12]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	809a      	strh	r2, [r3, #4]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	4013      	ands	r3, r2
 8000802:	b29b      	uxth	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000808:	2301      	movs	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e001      	b.n	8000812 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000812:	7bfb      	ldrb	r3, [r7, #15]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f103 0208 	add.w	r2, r3, #8
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f103 0208 	add.w	r2, r3, #8
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f103 0208 	add.w	r2, r3, #8
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80008c2:	b480      	push	{r7}
 80008c4:	b085      	sub	sp, #20
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d103      	bne.n	80008e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e00c      	b.n	80008fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3308      	adds	r3, #8
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e002      	b.n	80008f0 <vListInsert+0x2e>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d2f6      	bcs.n	80008ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6892      	ldr	r2, [r2, #8]
 800094a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6852      	ldr	r2, [r2, #4]
 8000954:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	d103      	bne.n	8000968 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d109      	bne.n	80009b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800099c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a0:	f383 8811 	msr	BASEPRI, r3
 80009a4:	f3bf 8f6f 	isb	sy
 80009a8:	f3bf 8f4f 	dsb	sy
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	e7fe      	b.n	80009ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80009b0:	f001 ffb4 	bl	800291c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009bc:	68f9      	ldr	r1, [r7, #12]
 80009be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80009c0:	fb01 f303 	mul.w	r3, r1, r3
 80009c4:	441a      	add	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2200      	movs	r2, #0
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009e0:	3b01      	subs	r3, #1
 80009e2:	68f9      	ldr	r1, [r7, #12]
 80009e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80009e6:	fb01 f303 	mul.w	r3, r1, r3
 80009ea:	441a      	add	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d114      	bne.n	8000a30 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d01a      	beq.n	8000a44 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3310      	adds	r3, #16
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 f8d8 	bl	8001bc8 <xTaskRemoveFromEventList>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d012      	beq.n	8000a44 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <xQueueGenericReset+0xcc>)
 8000a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	f3bf 8f6f 	isb	sy
 8000a2e:	e009      	b.n	8000a44 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3310      	adds	r3, #16
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fef3 	bl	8000820 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3324      	adds	r3, #36	; 0x24
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff feee 	bl	8000820 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000a44:	f001 ff98 	bl	8002978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000ed04 	.word	0xe000ed04

08000a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	4613      	mov	r3, r2
 8000a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <xQueueGenericCreate+0x28>
 8000a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a70:	f383 8811 	msr	BASEPRI, r3
 8000a74:	f3bf 8f6f 	isb	sy
 8000a78:	f3bf 8f4f 	dsb	sy
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	e7fe      	b.n	8000a7e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	e004      	b.n	8000a96 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3350      	adds	r3, #80	; 0x50
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 f860 	bl	8002b60 <pvPortMalloc>
 8000aa0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00d      	beq.n	8000ac4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3350      	adds	r3, #80	; 0x50
 8000ab0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 f805 	bl	8000ace <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000ac4:	69bb      	ldr	r3, [r7, #24]
	}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3720      	adds	r7, #32
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e002      	b.n	8000af0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000afc:	2101      	movs	r1, #1
 8000afe:	69b8      	ldr	r0, [r7, #24]
 8000b00:	f7ff ff42 	bl	8000988 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	78fa      	ldrb	r2, [r7, #3]
 8000b08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	68f9      	ldr	r1, [r7, #12]
 8000b12:	2073      	movs	r0, #115	; 0x73
 8000b14:	f003 f860 	bl	8003bd8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b090      	sub	sp, #64	; 0x40
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d109      	bne.n	8000b50 <xQueueGenericSend+0x30>
 8000b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b40:	f383 8811 	msr	BASEPRI, r3
 8000b44:	f3bf 8f6f 	isb	sy
 8000b48:	f3bf 8f4f 	dsb	sy
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b4e:	e7fe      	b.n	8000b4e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <xQueueGenericSend+0x3e>
 8000b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <xQueueGenericSend+0x42>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e000      	b.n	8000b64 <xQueueGenericSend+0x44>
 8000b62:	2300      	movs	r3, #0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d109      	bne.n	8000b7c <xQueueGenericSend+0x5c>
 8000b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b6c:	f383 8811 	msr	BASEPRI, r3
 8000b70:	f3bf 8f6f 	isb	sy
 8000b74:	f3bf 8f4f 	dsb	sy
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7a:	e7fe      	b.n	8000b7a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d103      	bne.n	8000b8a <xQueueGenericSend+0x6a>
 8000b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <xQueueGenericSend+0x6e>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <xQueueGenericSend+0x70>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <xQueueGenericSend+0x88>
 8000b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b98:	f383 8811 	msr	BASEPRI, r3
 8000b9c:	f3bf 8f6f 	isb	sy
 8000ba0:	f3bf 8f4f 	dsb	sy
 8000ba4:	623b      	str	r3, [r7, #32]
 8000ba6:	e7fe      	b.n	8000ba6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ba8:	f001 f9aa 	bl	8001f00 <xTaskGetSchedulerState>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <xQueueGenericSend+0x98>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <xQueueGenericSend+0x9c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <xQueueGenericSend+0x9e>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d109      	bne.n	8000bd6 <xQueueGenericSend+0xb6>
 8000bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc6:	f383 8811 	msr	BASEPRI, r3
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	f3bf 8f4f 	dsb	sy
 8000bd2:	61fb      	str	r3, [r7, #28]
 8000bd4:	e7fe      	b.n	8000bd4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000bd6:	f001 fea1 	bl	800291c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d302      	bcc.n	8000bec <xQueueGenericSend+0xcc>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d136      	bne.n	8000c5a <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fd86 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4601      	mov	r1, r0
 8000c00:	205a      	movs	r0, #90	; 0x5a
 8000c02:	f003 f85f 	bl	8003cc4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c0c:	f000 fa66 	bl	80010dc <prvCopyDataToQueue>
 8000c10:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d010      	beq.n	8000c3c <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1c:	3324      	adds	r3, #36	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 ffd2 	bl	8001bc8 <xTaskRemoveFromEventList>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d013      	beq.n	8000c52 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000c2a:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <xQueueGenericSend+0x240>)
 8000c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	f3bf 8f4f 	dsb	sy
 8000c36:	f3bf 8f6f 	isb	sy
 8000c3a:	e00a      	b.n	8000c52 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000c42:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <xQueueGenericSend+0x240>)
 8000c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000c52:	f001 fe91 	bl	8002978 <vPortExitCritical>
				return pdPASS;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e07d      	b.n	8000d56 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d110      	bne.n	8000c82 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000c60:	f001 fe8a 	bl	8002978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fd4a 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	460b      	mov	r3, r1
 8000c76:	4601      	mov	r1, r0
 8000c78:	205a      	movs	r0, #90	; 0x5a
 8000c7a:	f003 f823 	bl	8003cc4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e069      	b.n	8000d56 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d106      	bne.n	8000c96 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 f801 	bl	8001c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000c96:	f001 fe6f 	bl	8002978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000c9a:	f000 fd4f 	bl	800173c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000c9e:	f001 fe3d 	bl	800291c <vPortEnterCritical>
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cae:	d103      	bne.n	8000cb8 <xQueueGenericSend+0x198>
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d103      	bne.n	8000cce <xQueueGenericSend+0x1ae>
 8000cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000cce:	f001 fe53 	bl	8002978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000cd2:	1d3a      	adds	r2, r7, #4
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fff0 	bl	8001cc0 <xTaskCheckForTimeOut>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d124      	bne.n	8000d30 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ce8:	f000 faf0 	bl	80012cc <prvIsQueueFull>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d018      	beq.n	8000d24 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	3310      	adds	r3, #16
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 ff12 	bl	8001b24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d02:	f000 fa7b 	bl	80011fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000d06:	f000 fd27 	bl	8001758 <xTaskResumeAll>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f47f af62 	bne.w	8000bd6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <xQueueGenericSend+0x240>)
 8000d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	f3bf 8f6f 	isb	sy
 8000d22:	e758      	b.n	8000bd6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d26:	f000 fa69 	bl	80011fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000d2a:	f000 fd15 	bl	8001758 <xTaskResumeAll>
 8000d2e:	e752      	b.n	8000bd6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d32:	f000 fa63 	bl	80011fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000d36:	f000 fd0f 	bl	8001758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8000d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fcdf 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	205a      	movs	r0, #90	; 0x5a
 8000d50:	f002 ffb8 	bl	8003cc4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8000d54:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3738      	adds	r7, #56	; 0x38
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000ed04 	.word	0xe000ed04

08000d64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d109      	bne.n	8000d90 <xQueueGenericSendFromISR+0x2c>
 8000d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d80:	f383 8811 	msr	BASEPRI, r3
 8000d84:	f3bf 8f6f 	isb	sy
 8000d88:	f3bf 8f4f 	dsb	sy
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8e:	e7fe      	b.n	8000d8e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d103      	bne.n	8000d9e <xQueueGenericSendFromISR+0x3a>
 8000d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <xQueueGenericSendFromISR+0x3e>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <xQueueGenericSendFromISR+0x40>
 8000da2:	2300      	movs	r3, #0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d109      	bne.n	8000dbc <xQueueGenericSendFromISR+0x58>
 8000da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dac:	f383 8811 	msr	BASEPRI, r3
 8000db0:	f3bf 8f6f 	isb	sy
 8000db4:	f3bf 8f4f 	dsb	sy
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	e7fe      	b.n	8000dba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d103      	bne.n	8000dca <xQueueGenericSendFromISR+0x66>
 8000dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <xQueueGenericSendFromISR+0x6a>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <xQueueGenericSendFromISR+0x6c>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d109      	bne.n	8000de8 <xQueueGenericSendFromISR+0x84>
 8000dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	f3bf 8f4f 	dsb	sy
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e7fe      	b.n	8000de6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000de8:	f001 fe7c 	bl	8002ae4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000dec:	f3ef 8211 	mrs	r2, BASEPRI
 8000df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df4:	f383 8811 	msr	BASEPRI, r3
 8000df8:	f3bf 8f6f 	isb	sy
 8000dfc:	f3bf 8f4f 	dsb	sy
 8000e00:	61ba      	str	r2, [r7, #24]
 8000e02:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e04:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d302      	bcc.n	8000e1a <xQueueGenericSendFromISR+0xb6>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d136      	bne.n	8000e88 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fc6a 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2060      	movs	r0, #96	; 0x60
 8000e34:	f002 fe76 	bl	8003b24 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e3e:	f000 f94d 	bl	80010dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000e42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d112      	bne.n	8000e72 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d016      	beq.n	8000e82 <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e56:	3324      	adds	r3, #36	; 0x24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 feb5 	bl	8001bc8 <xTaskRemoveFromEventList>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00e      	beq.n	8000e82 <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00b      	beq.n	8000e82 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e007      	b.n	8000e82 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000e72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000e82:	2301      	movs	r3, #1
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000e86:	e00b      	b.n	8000ea0 <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fc38 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000e90:	4601      	mov	r1, r0
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	461a      	mov	r2, r3
 8000e96:	2060      	movs	r0, #96	; 0x60
 8000e98:	f002 fe44 	bl	8003b24 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b08f      	sub	sp, #60	; 0x3c
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <xQueueReceive+0x2e>
	__asm volatile
 8000ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed2:	f383 8811 	msr	BASEPRI, r3
 8000ed6:	f3bf 8f6f 	isb	sy
 8000eda:	f3bf 8f4f 	dsb	sy
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	e7fe      	b.n	8000ee0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <xQueueReceive+0x3c>
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <xQueueReceive+0x40>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <xQueueReceive+0x42>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <xQueueReceive+0x5a>
 8000efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	f3bf 8f6f 	isb	sy
 8000f06:	f3bf 8f4f 	dsb	sy
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	e7fe      	b.n	8000f0c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f0e:	f000 fff7 	bl	8001f00 <xTaskGetSchedulerState>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <xQueueReceive+0x6a>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <xQueueReceive+0x6e>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <xQueueReceive+0x70>
 8000f22:	2300      	movs	r3, #0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d109      	bne.n	8000f3c <xQueueReceive+0x88>
 8000f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2c:	f383 8811 	msr	BASEPRI, r3
 8000f30:	f3bf 8f6f 	isb	sy
 8000f34:	f3bf 8f4f 	dsb	sy
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	e7fe      	b.n	8000f3a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f3c:	f001 fcee 	bl	800291c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d031      	beq.n	8000fb0 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f50:	f000 f92e 	bl	80011b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fbd2 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000f5c:	4604      	mov	r4, r0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f003 fbce 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000f64:	4601      	mov	r1, r0
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	4621      	mov	r1, r4
 8000f72:	205c      	movs	r0, #92	; 0x5c
 8000f74:	f002 fea6 	bl	8003cc4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00f      	beq.n	8000fa8 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fe1b 	bl	8001bc8 <xTaskRemoveFromEventList>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <xQueueReceive+0x224>)
 8000f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	f3bf 8f4f 	dsb	sy
 8000fa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000fa8:	f001 fce6 	bl	8002978 <vPortExitCritical>
				return pdPASS;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e08e      	b.n	80010ce <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d115      	bne.n	8000fe2 <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000fb6:	f001 fcdf 	bl	8002978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fb9f 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f003 fb9b 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8000fca:	4601      	mov	r1, r0
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	205c      	movs	r0, #92	; 0x5c
 8000fda:	f002 fe73 	bl	8003cc4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e075      	b.n	80010ce <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fe51 	bl	8001c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ff6:	f001 fcbf 	bl	8002978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ffa:	f000 fb9f 	bl	800173c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ffe:	f001 fc8d 	bl	800291c <vPortEnterCritical>
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100e:	d103      	bne.n	8001018 <xQueueReceive+0x164>
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800101e:	b25b      	sxtb	r3, r3
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d103      	bne.n	800102e <xQueueReceive+0x17a>
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800102e:	f001 fca3 	bl	8002978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001032:	1d3a      	adds	r2, r7, #4
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fe40 	bl	8001cc0 <xTaskCheckForTimeOut>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d124      	bne.n	8001090 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001048:	f000 f92a 	bl	80012a0 <prvIsQueueEmpty>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d018      	beq.n	8001084 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001054:	3324      	adds	r3, #36	; 0x24
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fd62 	bl	8001b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001062:	f000 f8cb 	bl	80011fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001066:	f000 fb77 	bl	8001758 <xTaskResumeAll>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	f47f af65 	bne.w	8000f3c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <xQueueReceive+0x224>)
 8001074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	f3bf 8f6f 	isb	sy
 8001082:	e75b      	b.n	8000f3c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001086:	f000 f8b9 	bl	80011fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800108a:	f000 fb65 	bl	8001758 <xTaskResumeAll>
 800108e:	e755      	b.n	8000f3c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001092:	f000 f8b3 	bl	80011fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001096:	f000 fb5f 	bl	8001758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800109a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800109c:	f000 f900 	bl	80012a0 <prvIsQueueEmpty>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f43f af4a 	beq.w	8000f3c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80010a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fb28 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 80010b0:	4604      	mov	r4, r0
 80010b2:	2000      	movs	r0, #0
 80010b4:	f003 fb24 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 80010b8:	4601      	mov	r1, r0
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	2301      	movs	r3, #1
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	460a      	mov	r2, r1
 80010c4:	4621      	mov	r1, r4
 80010c6:	205c      	movs	r0, #92	; 0x5c
 80010c8:	f002 fdfc 	bl	8003cc4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80010cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3734      	adds	r7, #52	; 0x34
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000ed04 	.word	0xe000ed04

080010dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10d      	bne.n	8001116 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d14d      	bne.n	800119e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 ff18 	bl	8001f3c <xTaskPriorityDisinherit>
 800110c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e043      	b.n	800119e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d119      	bne.n	8001150 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6858      	ldr	r0, [r3, #4]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	461a      	mov	r2, r3
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	f003 fee3 	bl	8004ef2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	441a      	add	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d32b      	bcc.n	800119e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	e026      	b.n	800119e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	68d8      	ldr	r0, [r3, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	461a      	mov	r2, r3
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	f003 fec9 	bl	8004ef2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	425b      	negs	r3, r3
 800116a:	441a      	add	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	425b      	negs	r3, r3
 8001186:	441a      	add	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d105      	bne.n	800119e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	3b01      	subs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80011a6:	697b      	ldr	r3, [r7, #20]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d018      	beq.n	80011f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	441a      	add	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d303      	bcc.n	80011e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68d9      	ldr	r1, [r3, #12]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	461a      	mov	r2, r3
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f003 fe7f 	bl	8004ef2 <memcpy>
	}
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001204:	f001 fb8a 	bl	800291c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800120e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001210:	e011      	b.n	8001236 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2b00      	cmp	r3, #0
 8001218:	d012      	beq.n	8001240 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3324      	adds	r3, #36	; 0x24
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fcd2 	bl	8001bc8 <xTaskRemoveFromEventList>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800122a:	f000 fda9 	bl	8001d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3b01      	subs	r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	dce9      	bgt.n	8001212 <prvUnlockQueue+0x16>
 800123e:	e000      	b.n	8001242 <prvUnlockQueue+0x46>
					break;
 8001240:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	22ff      	movs	r2, #255	; 0xff
 8001246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800124a:	f001 fb95 	bl	8002978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800124e:	f001 fb65 	bl	800291c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001258:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800125a:	e011      	b.n	8001280 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d012      	beq.n	800128a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3310      	adds	r3, #16
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fcad 	bl	8001bc8 <xTaskRemoveFromEventList>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001274:	f000 fd84 	bl	8001d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	3b01      	subs	r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dce9      	bgt.n	800125c <prvUnlockQueue+0x60>
 8001288:	e000      	b.n	800128c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800128a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001294:	f001 fb70 	bl	8002978 <vPortExitCritical>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80012a8:	f001 fb38 	bl	800291c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e001      	b.n	80012be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80012be:	f001 fb5b 	bl	8002978 <vPortExitCritical>

	return xReturn;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80012d4:	f001 fb22 	bl	800291c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d102      	bne.n	80012ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80012e4:	2301      	movs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	e001      	b.n	80012ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80012ee:	f001 fb43 	bl	8002978 <vPortExitCritical>

	return xReturn;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	e01e      	b.n	800134a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <vQueueAddToRegistry+0x5c>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d115      	bne.n	8001344 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001318:	490f      	ldr	r1, [pc, #60]	; (8001358 <vQueueAddToRegistry+0x5c>)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <vQueueAddToRegistry+0x5c>)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	f003 f9e5 	bl	8004700 <SEGGER_SYSVIEW_ShrinkId>
 8001336:	4601      	mov	r1, r0
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	2071      	movs	r0, #113	; 0x71
 800133e:	f002 fbf1 	bl	8003b24 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8001342:	e005      	b.n	8001350 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d9dd      	bls.n	800130c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2001547c 	.word	0x2001547c

0800135c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800136c:	f001 fad6 	bl	800291c <vPortEnterCritical>
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001376:	b25b      	sxtb	r3, r3
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d103      	bne.n	8001386 <vQueueWaitForMessageRestricted+0x2a>
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800138c:	b25b      	sxtb	r3, r3
 800138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001392:	d103      	bne.n	800139c <vQueueWaitForMessageRestricted+0x40>
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800139c:	f001 faec 	bl	8002978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3324      	adds	r3, #36	; 0x24
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fbdb 	bl	8001b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff20 	bl	80011fc <prvUnlockQueue>
	}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4613      	mov	r3, r2
 80013d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fbc1 	bl	8002b60 <pvPortMalloc>
 80013de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00e      	beq.n	8001404 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80013e6:	2058      	movs	r0, #88	; 0x58
 80013e8:	f001 fbba 	bl	8002b60 <pvPortMalloc>
 80013ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
 80013fa:	e005      	b.n	8001408 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f001 fc71 	bl	8002ce4 <vPortFree>
 8001402:	e001      	b.n	8001408 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d013      	beq.n	8001436 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	2300      	movs	r3, #0
 8001412:	9303      	str	r3, [sp, #12]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 f80e 	bl	8001446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800142a:	69f8      	ldr	r0, [r7, #28]
 800142c:	f000 f89e 	bl	800156c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	e002      	b.n	800143c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800143c:	69bb      	ldr	r3, [r7, #24]
	}
 800143e:	4618      	mov	r0, r3
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b088      	sub	sp, #32
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <prvInitialiseNewTask+0x28>
 800145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e7fe      	b.n	800146c <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001470:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	461a      	mov	r2, r3
 8001478:	21a5      	movs	r1, #165	; 0xa5
 800147a:	f003 fd45 	bl	8004f08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001488:	3b01      	subs	r3, #1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	f023 0307 	bic.w	r3, r3, #7
 8001496:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <prvInitialiseNewTask+0x70>
 80014a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a6:	f383 8811 	msr	BASEPRI, r3
 80014aa:	f3bf 8f6f 	isb	sy
 80014ae:	f3bf 8f4f 	dsb	sy
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	e7fe      	b.n	80014b4 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e012      	b.n	80014e2 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	7819      	ldrb	r1, [r3, #0]
 80014c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	3334      	adds	r3, #52	; 0x34
 80014cc:	460a      	mov	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	3301      	adds	r3, #1
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d9e9      	bls.n	80014bc <prvInitialiseNewTask+0x76>
 80014e8:	e000      	b.n	80014ec <prvInitialiseNewTask+0xa6>
		{
			break;
 80014ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d901      	bls.n	80014fe <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80014fa:	2304      	movs	r3, #4
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80014fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001508:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150c:	2200      	movs	r2, #0
 800150e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001512:	3304      	adds	r3, #4
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f9a3 	bl	8000860 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151c:	3318      	adds	r3, #24
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f99e 	bl	8000860 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152c:	f1c3 0205 	rsb	r2, r3, #5
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153c:	2200      	movs	r2, #0
 800153e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	69b8      	ldr	r0, [r7, #24]
 800154e:	f001 f8c1 	bl	80026d4 <pxPortInitialiseStack>
 8001552:	4602      	mov	r2, r0
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001562:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af02      	add	r7, sp, #8
 8001572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001574:	f001 f9d2 	bl	800291c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001578:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <prvAddNewTaskToReadyList+0xfc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	4a3a      	ldr	r2, [pc, #232]	; (8001668 <prvAddNewTaskToReadyList+0xfc>)
 8001580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <prvAddNewTaskToReadyList+0x100>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800158a:	4a38      	ldr	r2, [pc, #224]	; (800166c <prvAddNewTaskToReadyList+0x100>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <prvAddNewTaskToReadyList+0xfc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d110      	bne.n	80015ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001598:	f000 fc16 	bl	8001dc8 <prvInitialiseTaskLists>
 800159c:	e00d      	b.n	80015ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <prvAddNewTaskToReadyList+0x104>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <prvAddNewTaskToReadyList+0x100>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d802      	bhi.n	80015ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <prvAddNewTaskToReadyList+0x100>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <prvAddNewTaskToReadyList+0x108>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <prvAddNewTaskToReadyList+0x108>)
 80015c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <prvAddNewTaskToReadyList+0x108>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <prvAddNewTaskToReadyList+0x94>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 ff67 	bl	80044a8 <SEGGER_SYSVIEW_OnTaskCreate>
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	461d      	mov	r5, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	461c      	mov	r4, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	1ae3      	subs	r3, r4, r3
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	462b      	mov	r3, r5
 80015fc:	f001 fd2e 	bl	800305c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f002 ffd8 	bl	80045b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	2201      	movs	r2, #1
 800160e:	409a      	lsls	r2, r3
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <prvAddNewTaskToReadyList+0x10c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	4a18      	ldr	r2, [pc, #96]	; (8001678 <prvAddNewTaskToReadyList+0x10c>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <prvAddNewTaskToReadyList+0x110>)
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3304      	adds	r3, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4610      	mov	r0, r2
 8001632:	f7ff f922 	bl	800087a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001636:	f001 f99f 	bl	8002978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <prvAddNewTaskToReadyList+0x104>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00e      	beq.n	8001660 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <prvAddNewTaskToReadyList+0x100>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <prvAddNewTaskToReadyList+0x114>)
 8001652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f3bf 8f4f 	dsb	sy
 800165c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bdb0      	pop	{r4, r5, r7, pc}
 8001668:	20000120 	.word	0x20000120
 800166c:	20000048 	.word	0x20000048
 8001670:	2000012c 	.word	0x2000012c
 8001674:	2000013c 	.word	0x2000013c
 8001678:	20000128 	.word	0x20000128
 800167c:	2000004c 	.word	0x2000004c
 8001680:	e000ed04 	.word	0xe000ed04

08001684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <vTaskStartScheduler+0x9c>)
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2300      	movs	r3, #0
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2282      	movs	r2, #130	; 0x82
 8001696:	4923      	ldr	r1, [pc, #140]	; (8001724 <vTaskStartScheduler+0xa0>)
 8001698:	4823      	ldr	r0, [pc, #140]	; (8001728 <vTaskStartScheduler+0xa4>)
 800169a:	f7ff fe93 	bl	80013c4 <xTaskCreate>
 800169e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d102      	bne.n	80016ac <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80016a6:	f000 fd49 	bl	800213c <xTimerCreateTimerTask>
 80016aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d123      	bne.n	80016fa <vTaskStartScheduler+0x76>
 80016b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <vTaskStartScheduler+0xa8>)
 80016c6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <vTaskStartScheduler+0xac>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <vTaskStartScheduler+0xb0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <vTaskStartScheduler+0xb4>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <vTaskStartScheduler+0x9c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d102      	bne.n	80016ea <vTaskStartScheduler+0x66>
 80016e4:	f002 fec4 	bl	8004470 <SEGGER_SYSVIEW_OnIdle>
 80016e8:	e004      	b.n	80016f4 <vTaskStartScheduler+0x70>
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <vTaskStartScheduler+0xb4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 ff1e 	bl	8004530 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80016f4:	f001 f874 	bl	80027e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80016f8:	e00d      	b.n	8001716 <vTaskStartScheduler+0x92>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d109      	bne.n	8001716 <vTaskStartScheduler+0x92>
 8001702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	e7fe      	b.n	8001714 <vTaskStartScheduler+0x90>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000144 	.word	0x20000144
 8001724:	08004f30 	.word	0x08004f30
 8001728:	08001d99 	.word	0x08001d99
 800172c:	20000140 	.word	0x20000140
 8001730:	2000012c 	.word	0x2000012c
 8001734:	20000124 	.word	0x20000124
 8001738:	20000048 	.word	0x20000048

0800173c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <vTaskSuspendAll+0x18>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	4a03      	ldr	r2, [pc, #12]	; (8001754 <vTaskSuspendAll+0x18>)
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000148 	.word	0x20000148

08001758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <xTaskResumeAll+0x11c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <xTaskResumeAll+0x2a>
 800176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001772:	f383 8811 	msr	BASEPRI, r3
 8001776:	f3bf 8f6f 	isb	sy
 800177a:	f3bf 8f4f 	dsb	sy
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	e7fe      	b.n	8001780 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001782:	f001 f8cb 	bl	800291c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <xTaskResumeAll+0x11c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3b01      	subs	r3, #1
 800178c:	4a39      	ldr	r2, [pc, #228]	; (8001874 <xTaskResumeAll+0x11c>)
 800178e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <xTaskResumeAll+0x11c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d165      	bne.n	8001864 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <xTaskResumeAll+0x120>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d061      	beq.n	8001864 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80017a0:	e032      	b.n	8001808 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <xTaskResumeAll+0x124>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3318      	adds	r3, #24
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f8c0 	bl	8000934 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3304      	adds	r3, #4
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff f8bb 	bl	8000934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fef9 	bl	80045b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	2201      	movs	r2, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <xTaskResumeAll+0x128>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <xTaskResumeAll+0x128>)
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <xTaskResumeAll+0x12c>)
 80017e6:	441a      	add	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3304      	adds	r3, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4610      	mov	r0, r2
 80017f0:	f7ff f843 	bl	800087a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <xTaskResumeAll+0x130>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	429a      	cmp	r2, r3
 8001800:	d302      	bcc.n	8001808 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <xTaskResumeAll+0x134>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <xTaskResumeAll+0x124>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1c8      	bne.n	80017a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001816:	f000 fb53 	bl	8001ec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <xTaskResumeAll+0x138>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d010      	beq.n	8001848 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001826:	f000 f859 	bl	80018dc <xTaskIncrementTick>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <xTaskResumeAll+0x134>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3b01      	subs	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f1      	bne.n	8001826 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <xTaskResumeAll+0x138>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <xTaskResumeAll+0x134>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001850:	2301      	movs	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <xTaskResumeAll+0x13c>)
 8001856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f3bf 8f4f 	dsb	sy
 8001860:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001864:	f001 f888 	bl	8002978 <vPortExitCritical>

	return xAlreadyYielded;
 8001868:	68bb      	ldr	r3, [r7, #8]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000148 	.word	0x20000148
 8001878:	20000120 	.word	0x20000120
 800187c:	200000e0 	.word	0x200000e0
 8001880:	20000128 	.word	0x20000128
 8001884:	2000004c 	.word	0x2000004c
 8001888:	20000048 	.word	0x20000048
 800188c:	20000134 	.word	0x20000134
 8001890:	20000130 	.word	0x20000130
 8001894:	e000ed04 	.word	0xe000ed04

08001898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <xTaskGetTickCount+0x1c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000124 	.word	0x20000124

080018b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80018be:	f001 f911 	bl	8002ae4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <xTaskGetTickCountFromISR+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80018cc:	683b      	ldr	r3, [r7, #0]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000124 	.word	0x20000124

080018dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <xTaskIncrementTick+0x14c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 808b 	bne.w	8001a06 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80018f0:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <xTaskIncrementTick+0x150>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <xTaskIncrementTick+0x150>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d11f      	bne.n	8001944 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <xTaskIncrementTick+0x154>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <xTaskIncrementTick+0x46>
 800190e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001912:	f383 8811 	msr	BASEPRI, r3
 8001916:	f3bf 8f6f 	isb	sy
 800191a:	f3bf 8f4f 	dsb	sy
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	e7fe      	b.n	8001920 <xTaskIncrementTick+0x44>
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <xTaskIncrementTick+0x154>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <xTaskIncrementTick+0x158>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a40      	ldr	r2, [pc, #256]	; (8001a30 <xTaskIncrementTick+0x154>)
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <xTaskIncrementTick+0x158>)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <xTaskIncrementTick+0x15c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a3e      	ldr	r2, [pc, #248]	; (8001a38 <xTaskIncrementTick+0x15c>)
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	f000 fabe 	bl	8001ec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <xTaskIncrementTick+0x160>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	429a      	cmp	r2, r3
 800194c:	d34c      	bcc.n	80019e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <xTaskIncrementTick+0x154>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d104      	bne.n	8001962 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <xTaskIncrementTick+0x160>)
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	601a      	str	r2, [r3, #0]
					break;
 8001960:	e042      	b.n	80019e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <xTaskIncrementTick+0x154>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	d203      	bcs.n	8001982 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800197a:	4a30      	ldr	r2, [pc, #192]	; (8001a3c <xTaskIncrementTick+0x160>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001980:	e032      	b.n	80019e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3304      	adds	r3, #4
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe ffd4 	bl	8000934 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3318      	adds	r3, #24
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe ffcb 	bl	8000934 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fe09 	bl	80045b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	2201      	movs	r2, #1
 80019ac:	409a      	lsls	r2, r3
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <xTaskIncrementTick+0x164>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <xTaskIncrementTick+0x164>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <xTaskIncrementTick+0x168>)
 80019c6:	441a      	add	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3304      	adds	r3, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f7fe ff53 	bl	800087a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <xTaskIncrementTick+0x16c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3b5      	bcc.n	800194e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019e6:	e7b2      	b.n	800194e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <xTaskIncrementTick+0x16c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ee:	4915      	ldr	r1, [pc, #84]	; (8001a44 <xTaskIncrementTick+0x168>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d907      	bls.n	8001a10 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	e004      	b.n	8001a10 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <xTaskIncrementTick+0x170>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <xTaskIncrementTick+0x170>)
 8001a0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <xTaskIncrementTick+0x174>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001a1c:	697b      	ldr	r3, [r7, #20]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000148 	.word	0x20000148
 8001a2c:	20000124 	.word	0x20000124
 8001a30:	200000d8 	.word	0x200000d8
 8001a34:	200000dc 	.word	0x200000dc
 8001a38:	20000138 	.word	0x20000138
 8001a3c:	20000140 	.word	0x20000140
 8001a40:	20000128 	.word	0x20000128
 8001a44:	2000004c 	.word	0x2000004c
 8001a48:	20000048 	.word	0x20000048
 8001a4c:	20000130 	.word	0x20000130
 8001a50:	20000134 	.word	0x20000134

08001a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <vTaskSwitchContext+0xb8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <vTaskSwitchContext+0xbc>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001a68:	e04c      	b.n	8001b04 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <vTaskSwitchContext+0xbc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <vTaskSwitchContext+0xc0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	f1c3 031f 	rsb	r3, r3, #31
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	4924      	ldr	r1, [pc, #144]	; (8001b18 <vTaskSwitchContext+0xc4>)
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <vTaskSwitchContext+0x5a>
	__asm volatile
 8001a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9e:	f383 8811 	msr	BASEPRI, r3
 8001aa2:	f3bf 8f6f 	isb	sy
 8001aa6:	f3bf 8f4f 	dsb	sy
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	e7fe      	b.n	8001aac <vTaskSwitchContext+0x58>
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <vTaskSwitchContext+0xc4>)
 8001aba:	4413      	add	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d104      	bne.n	8001ade <vTaskSwitchContext+0x8a>
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <vTaskSwitchContext+0xc8>)
 8001ae6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <vTaskSwitchContext+0xc8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <vTaskSwitchContext+0xcc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d102      	bne.n	8001afa <vTaskSwitchContext+0xa6>
 8001af4:	f002 fcbc 	bl	8004470 <SEGGER_SYSVIEW_OnIdle>
}
 8001af8:	e004      	b.n	8001b04 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <vTaskSwitchContext+0xc8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fd16 	bl	8004530 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000148 	.word	0x20000148
 8001b10:	20000134 	.word	0x20000134
 8001b14:	20000128 	.word	0x20000128
 8001b18:	2000004c 	.word	0x2000004c
 8001b1c:	20000048 	.word	0x20000048
 8001b20:	20000144 	.word	0x20000144

08001b24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <vTaskPlaceOnEventList+0x24>
 8001b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b38:	f383 8811 	msr	BASEPRI, r3
 8001b3c:	f3bf 8f6f 	isb	sy
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	e7fe      	b.n	8001b46 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <vTaskPlaceOnEventList+0x44>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe feb6 	bl	80008c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b56:	2101      	movs	r1, #1
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f000 fa77 	bl	800204c <prvAddCurrentTaskToDelayedList>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000048 	.word	0x20000048

08001b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <vTaskPlaceOnEventListRestricted+0x26>
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e7fe      	b.n	8001b90 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <vTaskPlaceOnEventListRestricted+0x58>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3318      	adds	r3, #24
 8001b98:	4619      	mov	r1, r3
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7fe fe6d 	bl	800087a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001bac:	2024      	movs	r0, #36	; 0x24
 8001bae:	f001 ff5f 	bl	8003a70 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	68b8      	ldr	r0, [r7, #8]
 8001bb6:	f000 fa49 	bl	800204c <prvAddCurrentTaskToDelayedList>
	}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000048 	.word	0x20000048

08001bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <xTaskRemoveFromEventList+0x2a>
 8001bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be2:	f383 8811 	msr	BASEPRI, r3
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	f3bf 8f4f 	dsb	sy
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e7fe      	b.n	8001bf0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fe9c 	bl	8000934 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <xTaskRemoveFromEventList+0xb4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d120      	bne.n	8001c46 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fe93 	bl	8000934 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fcd1 	bl	80045b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <xTaskRemoveFromEventList+0xb8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <xTaskRemoveFromEventList+0xb8>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <xTaskRemoveFromEventList+0xbc>)
 8001c36:	441a      	add	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4610      	mov	r0, r2
 8001c40:	f7fe fe1b 	bl	800087a <vListInsertEnd>
 8001c44:	e005      	b.n	8001c52 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	3318      	adds	r3, #24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480e      	ldr	r0, [pc, #56]	; (8001c88 <xTaskRemoveFromEventList+0xc0>)
 8001c4e:	f7fe fe14 	bl	800087a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <xTaskRemoveFromEventList+0xc4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d905      	bls.n	8001c6c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001c60:	2301      	movs	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <xTaskRemoveFromEventList+0xc8>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e001      	b.n	8001c70 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001c70:	697b      	ldr	r3, [r7, #20]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000148 	.word	0x20000148
 8001c80:	20000128 	.word	0x20000128
 8001c84:	2000004c 	.word	0x2000004c
 8001c88:	200000e0 	.word	0x200000e0
 8001c8c:	20000048 	.word	0x20000048
 8001c90:	20000134 	.word	0x20000134

08001c94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <vTaskInternalSetTimeOutState+0x24>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <vTaskInternalSetTimeOutState+0x28>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000138 	.word	0x20000138
 8001cbc:	20000124 	.word	0x20000124

08001cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <xTaskCheckForTimeOut+0x24>
 8001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e7fe      	b.n	8001ce2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <xTaskCheckForTimeOut+0x3e>
 8001cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e7fe      	b.n	8001cfc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001cfe:	f000 fe0d 	bl	800291c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <xTaskCheckForTimeOut+0xb8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d102      	bne.n	8001d22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	e023      	b.n	8001d6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <xTaskCheckForTimeOut+0xbc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d007      	beq.n	8001d3e <xTaskCheckForTimeOut+0x7e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d302      	bcc.n	8001d3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	e015      	b.n	8001d6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d20b      	bcs.n	8001d60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	1ad2      	subs	r2, r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff9d 	bl	8001c94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e004      	b.n	8001d6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001d6a:	f000 fe05 	bl	8002978 <vPortExitCritical>

	return xReturn;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000124 	.word	0x20000124
 8001d7c:	20000138 	.word	0x20000138

08001d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <vTaskMissedYield+0x14>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20000134 	.word	0x20000134

08001d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001da0:	f000 f852 	bl	8001e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <prvIdleTask+0x28>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d9f9      	bls.n	8001da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <prvIdleTask+0x2c>)
 8001dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001dbc:	e7f0      	b.n	8001da0 <prvIdleTask+0x8>
 8001dbe:	bf00      	nop
 8001dc0:	2000004c 	.word	0x2000004c
 8001dc4:	e000ed04 	.word	0xe000ed04

08001dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	e00c      	b.n	8001dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <prvInitialiseTaskLists+0x60>)
 8001de0:	4413      	add	r3, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fd1c 	bl	8000820 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3301      	adds	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d9ef      	bls.n	8001dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <prvInitialiseTaskLists+0x64>)
 8001df6:	f7fe fd13 	bl	8000820 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <prvInitialiseTaskLists+0x68>)
 8001dfc:	f7fe fd10 	bl	8000820 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <prvInitialiseTaskLists+0x6c>)
 8001e02:	f7fe fd0d 	bl	8000820 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001e06:	480c      	ldr	r0, [pc, #48]	; (8001e38 <prvInitialiseTaskLists+0x70>)
 8001e08:	f7fe fd0a 	bl	8000820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001e0c:	480b      	ldr	r0, [pc, #44]	; (8001e3c <prvInitialiseTaskLists+0x74>)
 8001e0e:	f7fe fd07 	bl	8000820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <prvInitialiseTaskLists+0x78>)
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <prvInitialiseTaskLists+0x64>)
 8001e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <prvInitialiseTaskLists+0x7c>)
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <prvInitialiseTaskLists+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000004c 	.word	0x2000004c
 8001e2c:	200000b0 	.word	0x200000b0
 8001e30:	200000c4 	.word	0x200000c4
 8001e34:	200000e0 	.word	0x200000e0
 8001e38:	200000f4 	.word	0x200000f4
 8001e3c:	2000010c 	.word	0x2000010c
 8001e40:	200000d8 	.word	0x200000d8
 8001e44:	200000dc 	.word	0x200000dc

08001e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e4e:	e019      	b.n	8001e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001e50:	f000 fd64 	bl	800291c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <prvCheckTasksWaitingTermination+0x4c>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fd67 	bl	8000934 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <prvCheckTasksWaitingTermination+0x50>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <prvCheckTasksWaitingTermination+0x50>)
 8001e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <prvCheckTasksWaitingTermination+0x54>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <prvCheckTasksWaitingTermination+0x54>)
 8001e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001e7a:	f000 fd7d 	bl	8002978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f80e 	bl	8001ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <prvCheckTasksWaitingTermination+0x54>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e1      	bne.n	8001e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200000f4 	.word	0x200000f4
 8001e98:	20000120 	.word	0x20000120
 8001e9c:	20000108 	.word	0x20000108

08001ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 ff19 	bl	8002ce4 <vPortFree>
			vPortFree( pxTCB );
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 ff16 	bl	8002ce4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <prvResetNextTaskUnblockTime+0x38>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <prvResetNextTaskUnblockTime+0x3c>)
 8001ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ed8:	e008      	b.n	8001eec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <prvResetNextTaskUnblockTime+0x38>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <prvResetNextTaskUnblockTime+0x3c>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	200000d8 	.word	0x200000d8
 8001efc:	20000140 	.word	0x20000140

08001f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <xTaskGetSchedulerState+0x34>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	e008      	b.n	8001f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <xTaskGetSchedulerState+0x38>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	e001      	b.n	8001f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001f26:	687b      	ldr	r3, [r7, #4]
	}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	2000012c 	.word	0x2000012c
 8001f38:	20000148 	.word	0x20000148

08001f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d071      	beq.n	8002036 <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <xTaskPriorityDisinherit+0x104>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d009      	beq.n	8001f70 <xTaskPriorityDisinherit+0x34>
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e7fe      	b.n	8001f6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <xTaskPriorityDisinherit+0x50>
 8001f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	e7fe      	b.n	8001f8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d049      	beq.n	8002036 <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d145      	bne.n	8002036 <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fcc0 	bl	8000934 <uxListRemove>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d115      	bne.n	8001fe6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbe:	4921      	ldr	r1, [pc, #132]	; (8002044 <xTaskPriorityDisinherit+0x108>)
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <xTaskPriorityDisinherit+0xaa>
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <xTaskPriorityDisinherit+0x10c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	4a19      	ldr	r2, [pc, #100]	; (8002048 <xTaskPriorityDisinherit+0x10c>)
 8001fe4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	204a      	movs	r0, #74	; 0x4a
 8001fec:	f001 fd5e 	bl	8003aac <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f1c3 0205 	rsb	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	2201      	movs	r2, #1
 800200a:	409a      	lsls	r2, r3
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <xTaskPriorityDisinherit+0x10c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <xTaskPriorityDisinherit+0x10c>)
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <xTaskPriorityDisinherit+0x108>)
 8002024:	441a      	add	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	3304      	adds	r3, #4
 800202a:	4619      	mov	r1, r3
 800202c:	4610      	mov	r0, r2
 800202e:	f7fe fc24 	bl	800087a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002032:	2301      	movs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002036:	697b      	ldr	r3, [r7, #20]
	}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000048 	.word	0x20000048
 8002044:	2000004c 	.word	0x2000004c
 8002048:	20000128 	.word	0x20000128

0800204c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002056:	4b32      	ldr	r3, [pc, #200]	; (8002120 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3304      	adds	r3, #4
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fc66 	bl	8000934 <uxListRemove>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10b      	bne.n	8002086 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2201      	movs	r2, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <prvAddCurrentTaskToDelayedList+0xdc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4013      	ands	r3, r2
 8002082:	4a29      	ldr	r2, [pc, #164]	; (8002128 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002084:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d110      	bne.n	80020b0 <prvAddCurrentTaskToDelayedList+0x64>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	211b      	movs	r1, #27
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fad0 	bl	8004640 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3304      	adds	r3, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4820      	ldr	r0, [pc, #128]	; (800212c <prvAddCurrentTaskToDelayedList+0xe0>)
 80020aa:	f7fe fbe6 	bl	800087a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80020ae:	e032      	b.n	8002116 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d20f      	bcs.n	80020e8 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2104      	movs	r1, #4
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fab6 	bl	8004640 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <prvAddCurrentTaskToDelayedList+0xe4>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3304      	adds	r3, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe fbee 	bl	80008c2 <vListInsert>
}
 80020e6:	e016      	b.n	8002116 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2104      	movs	r1, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 faa6 	bl	8004640 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <prvAddCurrentTaskToDelayedList+0xe8>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3304      	adds	r3, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f7fe fbde 	bl	80008c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <prvAddCurrentTaskToDelayedList+0xec>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d202      	bcs.n	8002116 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8002110:	4a09      	ldr	r2, [pc, #36]	; (8002138 <prvAddCurrentTaskToDelayedList+0xec>)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6013      	str	r3, [r2, #0]
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000124 	.word	0x20000124
 8002124:	20000048 	.word	0x20000048
 8002128:	20000128 	.word	0x20000128
 800212c:	2000010c 	.word	0x2000010c
 8002130:	200000dc 	.word	0x200000dc
 8002134:	200000d8 	.word	0x200000d8
 8002138:	20000140 	.word	0x20000140

0800213c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002146:	f000 fa8f 	bl	8002668 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <xTimerCreateTimerTask+0x54>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <xTimerCreateTimerTask+0x58>)
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	2302      	movs	r3, #2
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2300      	movs	r3, #0
 800215c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002160:	490d      	ldr	r1, [pc, #52]	; (8002198 <xTimerCreateTimerTask+0x5c>)
 8002162:	480e      	ldr	r0, [pc, #56]	; (800219c <xTimerCreateTimerTask+0x60>)
 8002164:	f7ff f92e 	bl	80013c4 <xTaskCreate>
 8002168:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <xTimerCreateTimerTask+0x48>
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	e7fe      	b.n	8002182 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000017c 	.word	0x2000017c
 8002194:	20000180 	.word	0x20000180
 8002198:	08004f38 	.word	0x08004f38
 800219c:	080022b9 	.word	0x080022b9

080021a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <xTimerGenericCommand+0x2c>
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	623b      	str	r3, [r7, #32]
 80021ca:	e7fe      	b.n	80021ca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <xTimerGenericCommand+0x94>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d02a      	beq.n	800222a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	dc18      	bgt.n	8002218 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80021e6:	f7ff fe8b 	bl	8001f00 <xTaskGetSchedulerState>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d109      	bne.n	8002204 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <xTimerGenericCommand+0x94>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f107 0114 	add.w	r1, r7, #20
 80021f8:	2300      	movs	r3, #0
 80021fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fc:	f7fe fc90 	bl	8000b20 <xQueueGenericSend>
 8002200:	6278      	str	r0, [r7, #36]	; 0x24
 8002202:	e012      	b.n	800222a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <xTimerGenericCommand+0x94>)
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	f107 0114 	add.w	r1, r7, #20
 800220c:	2300      	movs	r3, #0
 800220e:	2200      	movs	r2, #0
 8002210:	f7fe fc86 	bl	8000b20 <xQueueGenericSend>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24
 8002216:	e008      	b.n	800222a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <xTimerGenericCommand+0x94>)
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	f107 0114 	add.w	r1, r7, #20
 8002220:	2300      	movs	r3, #0
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	f7fe fd9e 	bl	8000d64 <xQueueGenericSendFromISR>
 8002228:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800222c:	4618      	mov	r0, r3
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000017c 	.word	0x2000017c

08002238 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af02      	add	r7, sp, #8
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <prvProcessExpiredTimer+0x7c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3304      	adds	r3, #4
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fb6f 	bl	8000934 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d121      	bne.n	80022a2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	18d1      	adds	r1, r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f000 f8c8 	bl	8002400 <prvInsertTimerInActiveList>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d015      	beq.n	80022a2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002276:	2300      	movs	r3, #0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	2100      	movs	r1, #0
 8002280:	6978      	ldr	r0, [r7, #20]
 8002282:	f7ff ff8d 	bl	80021a0 <xTimerGenericCommand>
 8002286:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <prvProcessExpiredTimer+0x6a>
 800228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e7fe      	b.n	80022a0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	4798      	blx	r3
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000174 	.word	0x20000174

080022b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f857 	bl	8002378 <prvGetNextExpireTime>
 80022ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4619      	mov	r1, r3
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f803 	bl	80022dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80022d6:	f000 f8d5 	bl	8002484 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022da:	e7f1      	b.n	80022c0 <prvTimerTask+0x8>

080022dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80022e6:	f7ff fa29 	bl	800173c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f866 	bl	80023c0 <prvSampleTimeNow>
 80022f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d130      	bne.n	800235e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <prvProcessTimerOrBlockTask+0x3c>
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	d806      	bhi.n	8002318 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800230a:	f7ff fa25 	bl	8001758 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800230e:	68f9      	ldr	r1, [r7, #12]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff91 	bl	8002238 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002316:	e024      	b.n	8002362 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <prvProcessTimerOrBlockTask+0x90>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <prvProcessTimerOrBlockTask+0x50>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <prvProcessTimerOrBlockTask+0x52>
 800232c:	2300      	movs	r3, #0
 800232e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <prvProcessTimerOrBlockTask+0x94>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	f7ff f80d 	bl	800135c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002342:	f7ff fa09 	bl	8001758 <xTaskResumeAll>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <prvProcessTimerOrBlockTask+0x98>)
 800234e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	f3bf 8f6f 	isb	sy
}
 800235c:	e001      	b.n	8002362 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800235e:	f7ff f9fb 	bl	8001758 <xTaskResumeAll>
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000178 	.word	0x20000178
 8002370:	2000017c 	.word	0x2000017c
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <prvGetNextExpireTime+0x44>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <prvGetNextExpireTime+0x16>
 800238a:	2201      	movs	r2, #1
 800238c:	e000      	b.n	8002390 <prvGetNextExpireTime+0x18>
 800238e:	2200      	movs	r2, #0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <prvGetNextExpireTime+0x44>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e001      	b.n	80023ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000174 	.word	0x20000174

080023c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80023c8:	f7ff fa66 	bl	8001898 <xTaskGetTickCount>
 80023cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <prvSampleTimeNow+0x3c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d205      	bcs.n	80023e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80023d8:	f000 f8e6 	bl	80025a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e002      	b.n	80023ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <prvSampleTimeNow+0x3c>)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80023f0:	68fb      	ldr	r3, [r7, #12]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000184 	.word	0x20000184

08002400 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	d812      	bhi.n	800244c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	429a      	cmp	r2, r3
 8002432:	d302      	bcc.n	800243a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002434:	2301      	movs	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e01b      	b.n	8002472 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <prvInsertTimerInActiveList+0x7c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3304      	adds	r3, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4610      	mov	r0, r2
 8002446:	f7fe fa3c 	bl	80008c2 <vListInsert>
 800244a:	e012      	b.n	8002472 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d206      	bcs.n	8002462 <prvInsertTimerInActiveList+0x62>
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d302      	bcc.n	8002462 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e007      	b.n	8002472 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <prvInsertTimerInActiveList+0x80>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3304      	adds	r3, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7fe fa28 	bl	80008c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002472:	697b      	ldr	r3, [r7, #20]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000178 	.word	0x20000178
 8002480:	20000174 	.word	0x20000174

08002484 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800248a:	e07a      	b.n	8002582 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db76      	blt.n	8002580 <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	3304      	adds	r3, #4
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fa46 	bl	8000934 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff88 	bl	80023c0 <prvSampleTimeNow>
 80024b0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d864      	bhi.n	8002582 <prvProcessReceivedCommands+0xfe>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <prvProcessReceivedCommands+0x3c>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024e9 	.word	0x080024e9
 80024c4:	080024e9 	.word	0x080024e9
 80024c8:	080024e9 	.word	0x080024e9
 80024cc:	08002583 	.word	0x08002583
 80024d0:	08002543 	.word	0x08002543
 80024d4:	08002579 	.word	0x08002579
 80024d8:	080024e9 	.word	0x080024e9
 80024dc:	080024e9 	.word	0x080024e9
 80024e0:	08002583 	.word	0x08002583
 80024e4:	08002543 	.word	0x08002543
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	18d1      	adds	r1, r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a3a      	ldr	r2, [r7, #32]
 80024f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024f6:	f7ff ff83 	bl	8002400 <prvInsertTimerInActiveList>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d040      	beq.n	8002582 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002506:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d138      	bne.n	8002582 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	441a      	add	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2300      	movs	r3, #0
 800251e:	2100      	movs	r1, #0
 8002520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002522:	f7ff fe3d 	bl	80021a0 <xTimerGenericCommand>
 8002526:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d129      	bne.n	8002582 <prvProcessReceivedCommands+0xfe>
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e7fe      	b.n	8002540 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <prvProcessReceivedCommands+0xe0>
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e7fe      	b.n	8002562 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	18d1      	adds	r1, r2, r3
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	6a3a      	ldr	r2, [r7, #32]
 8002570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002572:	f7ff ff45 	bl	8002400 <prvInsertTimerInActiveList>
					break;
 8002576:	e004      	b.n	8002582 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800257a:	f000 fbb3 	bl	8002ce4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800257e:	e000      	b.n	8002582 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002580:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <prvProcessReceivedCommands+0x120>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f107 0108 	add.w	r1, r7, #8
 800258a:	2200      	movs	r2, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fc91 	bl	8000eb4 <xQueueReceive>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f af79 	bne.w	800248c <prvProcessReceivedCommands+0x8>
	}
}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000017c 	.word	0x2000017c

080025a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80025ae:	e044      	b.n	800263a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <prvSwitchTimerLists+0xb8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <prvSwitchTimerLists+0xb8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe f9b3 	bl	8000934 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d12d      	bne.n	800263a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d90e      	bls.n	800260e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <prvSwitchTimerLists+0xb8>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7fe f95b 	bl	80008c2 <vListInsert>
 800260c:	e015      	b.n	800263a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	2100      	movs	r1, #0
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff fdc1 	bl	80021a0 <xTimerGenericCommand>
 800261e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <prvSwitchTimerLists+0x92>
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	e7fe      	b.n	8002638 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <prvSwitchTimerLists+0xb8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1b5      	bne.n	80025b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <prvSwitchTimerLists+0xb8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <prvSwitchTimerLists+0xbc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <prvSwitchTimerLists+0xb8>)
 8002650:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <prvSwitchTimerLists+0xbc>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000174 	.word	0x20000174
 8002664:	20000178 	.word	0x20000178

08002668 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800266c:	f000 f956 	bl	800291c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <prvCheckForValidListAndQueue+0x54>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11d      	bne.n	80026b4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002678:	4811      	ldr	r0, [pc, #68]	; (80026c0 <prvCheckForValidListAndQueue+0x58>)
 800267a:	f7fe f8d1 	bl	8000820 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800267e:	4811      	ldr	r0, [pc, #68]	; (80026c4 <prvCheckForValidListAndQueue+0x5c>)
 8002680:	f7fe f8ce 	bl	8000820 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <prvCheckForValidListAndQueue+0x60>)
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <prvCheckForValidListAndQueue+0x58>)
 8002688:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <prvCheckForValidListAndQueue+0x64>)
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <prvCheckForValidListAndQueue+0x5c>)
 800268e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002690:	2200      	movs	r2, #0
 8002692:	210c      	movs	r1, #12
 8002694:	200a      	movs	r0, #10
 8002696:	f7fe f9df 	bl	8000a58 <xQueueGenericCreate>
 800269a:	4602      	mov	r2, r0
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <prvCheckForValidListAndQueue+0x54>)
 800269e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <prvCheckForValidListAndQueue+0x54>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <prvCheckForValidListAndQueue+0x54>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4908      	ldr	r1, [pc, #32]	; (80026d0 <prvCheckForValidListAndQueue+0x68>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fe24 	bl	80012fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026b4:	f000 f960 	bl	8002978 <vPortExitCritical>
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000017c 	.word	0x2000017c
 80026c0:	2000014c 	.word	0x2000014c
 80026c4:	20000160 	.word	0x20000160
 80026c8:	20000174 	.word	0x20000174
 80026cc:	20000178 	.word	0x20000178
 80026d0:	08004f40 	.word	0x08004f40

080026d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3b04      	subs	r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3b04      	subs	r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f023 0201 	bic.w	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3b04      	subs	r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002704:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <pxPortInitialiseStack+0x64>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3b14      	subs	r3, #20
 800270e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3b04      	subs	r3, #4
 800271a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f06f 0202 	mvn.w	r2, #2
 8002722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3b20      	subs	r3, #32
 8002728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800272a:	68fb      	ldr	r3, [r7, #12]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	0800273d 	.word	0x0800273d

0800273c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <prvTaskExitError+0x50>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d009      	beq.n	8002764 <prvTaskExitError+0x28>
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e7fe      	b.n	8002762 <prvTaskExitError+0x26>
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002776:	bf00      	nop
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0fc      	beq.n	8002778 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000010 	.word	0x20000010

08002790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <pxCurrentTCBConst2>)
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	6808      	ldr	r0, [r1, #0]
 8002796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279a:	f380 8809 	msr	PSP, r0
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f380 8811 	msr	BASEPRI, r0
 80027aa:	4770      	bx	lr
 80027ac:	f3af 8000 	nop.w

080027b0 <pxCurrentTCBConst2>:
 80027b0:	20000048 	.word	0x20000048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop

080027b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027b8:	4808      	ldr	r0, [pc, #32]	; (80027dc <prvPortStartFirstTask+0x24>)
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	6800      	ldr	r0, [r0, #0]
 80027be:	f380 8808 	msr	MSP, r0
 80027c2:	f04f 0000 	mov.w	r0, #0
 80027c6:	f380 8814 	msr	CONTROL, r0
 80027ca:	b662      	cpsie	i
 80027cc:	b661      	cpsie	f
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	df00      	svc	0
 80027d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80027da:	bf00      	nop
 80027dc:	e000ed08 	.word	0xe000ed08

080027e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80027e6:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <xPortStartScheduler+0x118>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a44      	ldr	r2, [pc, #272]	; (80028fc <xPortStartScheduler+0x11c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d109      	bne.n	8002804 <xPortStartScheduler+0x24>
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	e7fe      	b.n	8002802 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002804:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <xPortStartScheduler+0x118>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3d      	ldr	r2, [pc, #244]	; (8002900 <xPortStartScheduler+0x120>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d109      	bne.n	8002822 <xPortStartScheduler+0x42>
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e7fe      	b.n	8002820 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <xPortStartScheduler+0x124>)
 8002824:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	22ff      	movs	r2, #255	; 0xff
 8002832:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <xPortStartScheduler+0x128>)
 8002848:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <xPortStartScheduler+0x12c>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002850:	e009      	b.n	8002866 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <xPortStartScheduler+0x12c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3b01      	subs	r3, #1
 8002858:	4a2c      	ldr	r2, [pc, #176]	; (800290c <xPortStartScheduler+0x12c>)
 800285a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d0ef      	beq.n	8002852 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <xPortStartScheduler+0x12c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1c3 0307 	rsb	r3, r3, #7
 800287a:	2b04      	cmp	r3, #4
 800287c:	d009      	beq.n	8002892 <xPortStartScheduler+0xb2>
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	e7fe      	b.n	8002890 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <xPortStartScheduler+0x12c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <xPortStartScheduler+0x12c>)
 800289a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <xPortStartScheduler+0x12c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <xPortStartScheduler+0x12c>)
 80028a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <xPortStartScheduler+0x130>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <xPortStartScheduler+0x130>)
 80028b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <xPortStartScheduler+0x130>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <xPortStartScheduler+0x130>)
 80028c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028c8:	f000 f8de 	bl	8002a88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <xPortStartScheduler+0x134>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80028d2:	f000 f8fd 	bl	8002ad0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <xPortStartScheduler+0x138>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <xPortStartScheduler+0x138>)
 80028dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80028e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80028e2:	f7ff ff69 	bl	80027b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80028e6:	f7ff f8b5 	bl	8001a54 <vTaskSwitchContext>
	prvTaskExitError();
 80028ea:	f7ff ff27 	bl	800273c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	e000ed00 	.word	0xe000ed00
 80028fc:	410fc271 	.word	0x410fc271
 8002900:	410fc270 	.word	0x410fc270
 8002904:	e000e400 	.word	0xe000e400
 8002908:	20000188 	.word	0x20000188
 800290c:	2000018c 	.word	0x2000018c
 8002910:	e000ed20 	.word	0xe000ed20
 8002914:	20000010 	.word	0x20000010
 8002918:	e000ef34 	.word	0xe000ef34

0800291c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <vPortEnterCritical+0x54>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <vPortEnterCritical+0x54>)
 800293c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <vPortEnterCritical+0x54>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10e      	bne.n	8002964 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <vPortEnterCritical+0x58>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <vPortEnterCritical+0x48>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	e7fe      	b.n	8002962 <vPortEnterCritical+0x46>
	}
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	20000010 	.word	0x20000010
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <vPortExitCritical+0x4c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <vPortExitCritical+0x22>
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	e7fe      	b.n	8002998 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <vPortExitCritical+0x4c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3b01      	subs	r3, #1
 80029a0:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <vPortExitCritical+0x4c>)
 80029a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <vPortExitCritical+0x4c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <vPortExitCritical+0x3e>
 80029ac:	2300      	movs	r3, #0
 80029ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000010 	.word	0x20000010
	...

080029d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80029d0:	f3ef 8009 	mrs	r0, PSP
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <pxCurrentTCBConst>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f01e 0f10 	tst.w	lr, #16
 80029e0:	bf08      	it	eq
 80029e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80029e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ea:	6010      	str	r0, [r2, #0]
 80029ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80029f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80029f4:	f380 8811 	msr	BASEPRI, r0
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f7ff f828 	bl	8001a54 <vTaskSwitchContext>
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	f380 8811 	msr	BASEPRI, r0
 8002a0c:	bc09      	pop	{r0, r3}
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	6808      	ldr	r0, [r1, #0]
 8002a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a16:	f01e 0f10 	tst.w	lr, #16
 8002a1a:	bf08      	it	eq
 8002a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a20:	f380 8809 	msr	PSP, r0
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	f3af 8000 	nop.w

08002a30 <pxCurrentTCBConst>:
 8002a30:	20000048 	.word	0x20000048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop

08002a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002a50:	f001 fc94 	bl	800437c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a54:	f7fe ff42 	bl	80018dc <xTaskIncrementTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8002a5e:	f001 fceb 	bl	8004438 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <SysTick_Handler+0x4c>)
 8002a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e001      	b.n	8002a70 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8002a6c:	f001 fcc8 	bl	8004400 <SEGGER_SYSVIEW_RecordExitISR>
 8002a70:	2300      	movs	r3, #0
 8002a72:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	e000ed04 	.word	0xe000ed04

08002a88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <vPortSetupTimerInterrupt+0x34>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <vPortSetupTimerInterrupt+0x38>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <vPortSetupTimerInterrupt+0x3c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <vPortSetupTimerInterrupt+0x40>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	4a09      	ldr	r2, [pc, #36]	; (8002acc <vPortSetupTimerInterrupt+0x44>)
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <vPortSetupTimerInterrupt+0x34>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	601a      	str	r2, [r3, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000e010 	.word	0xe000e010
 8002ac0:	e000e018 	.word	0xe000e018
 8002ac4:	20000018 	.word	0x20000018
 8002ac8:	10624dd3 	.word	0x10624dd3
 8002acc:	e000e014 	.word	0xe000e014

08002ad0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ad0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ae0 <vPortEnableVFP+0x10>
 8002ad4:	6801      	ldr	r1, [r0, #0]
 8002ad6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ada:	6001      	str	r1, [r0, #0]
 8002adc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ade:	bf00      	nop
 8002ae0:	e000ed88 	.word	0xe000ed88

08002ae4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002aea:	f3ef 8305 	mrs	r3, IPSR
 8002aee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	d913      	bls.n	8002b1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <vPortValidateInterruptPriority+0x6c>)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <vPortValidateInterruptPriority+0x70>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	7afa      	ldrb	r2, [r7, #11]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d209      	bcs.n	8002b1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e7fe      	b.n	8002b1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <vPortValidateInterruptPriority+0x74>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <vPortValidateInterruptPriority+0x78>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d909      	bls.n	8002b42 <vPortValidateInterruptPriority+0x5e>
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	e7fe      	b.n	8002b40 <vPortValidateInterruptPriority+0x5c>
	}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e3f0 	.word	0xe000e3f0
 8002b54:	20000188 	.word	0x20000188
 8002b58:	e000ed0c 	.word	0xe000ed0c
 8002b5c:	2000018c 	.word	0x2000018c

08002b60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002b6c:	f7fe fde6 	bl	800173c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <pvPortMalloc+0x170>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002b78:	f000 f90c 	bl	8002d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b7c:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <pvPortMalloc+0x174>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 808c 	bne.w	8002ca2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01c      	beq.n	8002bca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002b90:	2208      	movs	r2, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f023 0307 	bic.w	r3, r3, #7
 8002ba8:	3308      	adds	r3, #8
 8002baa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <pvPortMalloc+0x6a>
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e7fe      	b.n	8002bc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d068      	beq.n	8002ca2 <pvPortMalloc+0x142>
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <pvPortMalloc+0x178>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d863      	bhi.n	8002ca2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <pvPortMalloc+0x17c>)
 8002bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <pvPortMalloc+0x17c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002be4:	e004      	b.n	8002bf0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d903      	bls.n	8002c02 <pvPortMalloc+0xa2>
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f1      	bne.n	8002be6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002c02:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <pvPortMalloc+0x170>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d04a      	beq.n	8002ca2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2208      	movs	r2, #8
 8002c12:	4413      	add	r3, r2
 8002c14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	1ad2      	subs	r2, r2, r3
 8002c26:	2308      	movs	r3, #8
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d91e      	bls.n	8002c6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <pvPortMalloc+0xf4>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e7fe      	b.n	8002c52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c66:	69b8      	ldr	r0, [r7, #24]
 8002c68:	f000 f8f6 	bl	8002e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <pvPortMalloc+0x178>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <pvPortMalloc+0x178>)
 8002c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <pvPortMalloc+0x178>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <pvPortMalloc+0x180>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d203      	bcs.n	8002c8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <pvPortMalloc+0x178>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <pvPortMalloc+0x180>)
 8002c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <pvPortMalloc+0x174>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002ca2:	f7fe fd59 	bl	8001758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <pvPortMalloc+0x164>
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e7fe      	b.n	8002cc2 <pvPortMalloc+0x162>
	return pvReturn;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20012d98 	.word	0x20012d98
 8002cd4:	20012da4 	.word	0x20012da4
 8002cd8:	20012d9c 	.word	0x20012d9c
 8002cdc:	20012d90 	.word	0x20012d90
 8002ce0:	20012da0 	.word	0x20012da0

08002ce4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d046      	beq.n	8002d84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	425b      	negs	r3, r3
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <vPortFree+0xa8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <vPortFree+0x42>
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e7fe      	b.n	8002d24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <vPortFree+0x5e>
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	e7fe      	b.n	8002d40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <vPortFree+0xa8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d019      	beq.n	8002d84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d115      	bne.n	8002d84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <vPortFree+0xa8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002d68:	f7fe fce8 	bl	800173c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <vPortFree+0xac>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <vPortFree+0xac>)
 8002d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d7a:	6938      	ldr	r0, [r7, #16]
 8002d7c:	f000 f86c 	bl	8002e58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002d80:	f7fe fcea 	bl	8001758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20012da4 	.word	0x20012da4
 8002d90:	20012d9c 	.word	0x20012d9c

08002d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d9a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <prvHeapInit+0xac>)
 8002da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3307      	adds	r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0307 	bic.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <prvHeapInit+0xac>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <prvHeapInit+0xb0>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <prvHeapInit+0xb0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	4413      	add	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002de0:	2208      	movs	r2, #8
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0307 	bic.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <prvHeapInit+0xb4>)
 8002df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <prvHeapInit+0xb4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <prvHeapInit+0xb4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	1ad2      	subs	r2, r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <prvHeapInit+0xb4>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <prvHeapInit+0xb8>)
 8002e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <prvHeapInit+0xbc>)
 8002e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <prvHeapInit+0xc0>)
 8002e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	20000190 	.word	0x20000190
 8002e44:	20012d90 	.word	0x20012d90
 8002e48:	20012d98 	.word	0x20012d98
 8002e4c:	20012da0 	.word	0x20012da0
 8002e50:	20012d9c 	.word	0x20012d9c
 8002e54:	20012da4 	.word	0x20012da4

08002e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <prvInsertBlockIntoFreeList+0xac>)
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e002      	b.n	8002e6c <prvInsertBlockIntoFreeList+0x14>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d8f7      	bhi.n	8002e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4413      	add	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d108      	bne.n	8002e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	441a      	add	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d118      	bne.n	8002ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <prvInsertBlockIntoFreeList+0xb0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d00d      	beq.n	8002ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e008      	b.n	8002ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <prvInsertBlockIntoFreeList+0xb0>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e003      	b.n	8002ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d002      	beq.n	8002ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20012d90 	.word	0x20012d90
 8002f08:	20012d98 	.word	0x20012d98

08002f0c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <_cbSendSystemDesc+0x14>)
 8002f12:	f001 f9df 	bl	80042d4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002f16:	4803      	ldr	r0, [pc, #12]	; (8002f24 <_cbSendSystemDesc+0x18>)
 8002f18:	f001 f9dc 	bl	80042d4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	08004f48 	.word	0x08004f48
 8002f24:	08004f8c 	.word	0x08004f8c

08002f28 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <SEGGER_SYSVIEW_Conf+0x20>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <SEGGER_SYSVIEW_Conf+0x20>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <SEGGER_SYSVIEW_Conf+0x24>)
 8002f36:	4a06      	ldr	r2, [pc, #24]	; (8002f50 <SEGGER_SYSVIEW_Conf+0x28>)
 8002f38:	f000 fd4c 	bl	80039d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002f3c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002f40:	f000 fd86 	bl	8003a50 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000018 	.word	0x20000018
 8002f4c:	08002f0d 	.word	0x08002f0d
 8002f50:	08005080 	.word	0x08005080

08002f54 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	e034      	b.n	8002fca <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002f60:	491e      	ldr	r1, [pc, #120]	; (8002fdc <_cbSendTaskList+0x88>)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	491a      	ldr	r1, [pc, #104]	; (8002fdc <_cbSendTaskList+0x88>)
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3304      	adds	r3, #4
 8002f80:	681c      	ldr	r4, [r3, #0]
 8002f82:	4916      	ldr	r1, [pc, #88]	; (8002fdc <_cbSendTaskList+0x88>)
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3308      	adds	r3, #8
 8002f92:	681d      	ldr	r5, [r3, #0]
 8002f94:	4911      	ldr	r1, [pc, #68]	; (8002fdc <_cbSendTaskList+0x88>)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	681e      	ldr	r6, [r3, #0]
 8002fa6:	490d      	ldr	r1, [pc, #52]	; (8002fdc <_cbSendTaskList+0x88>)
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4633      	mov	r3, r6
 8002fbc:	462a      	mov	r2, r5
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	f000 f8b4 	bl	800312c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <_cbSendTaskList+0x8c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3c5      	bcc.n	8002f60 <_cbSendTaskList+0xc>
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fdc:	20012da8 	.word	0x20012da8
 8002fe0:	20012e48 	.word	0x20012e48

08002fe4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002fea:	f7fe fc65 	bl	80018b8 <xTaskGetTickCountFromISR>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f04f 0400 	mov.w	r4, #0
 8002ff4:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002ff8:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	4634      	mov	r4, r6
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	0162      	lsls	r2, r4, #5
 800300a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800300e:	0159      	lsls	r1, r3, #5
 8003010:	460b      	mov	r3, r1
 8003012:	4614      	mov	r4, r2
 8003014:	1b5b      	subs	r3, r3, r5
 8003016:	eb64 0406 	sbc.w	r4, r4, r6
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	00a2      	lsls	r2, r4, #2
 8003024:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003028:	0099      	lsls	r1, r3, #2
 800302a:	460b      	mov	r3, r1
 800302c:	4614      	mov	r4, r2
 800302e:	195b      	adds	r3, r3, r5
 8003030:	eb44 0406 	adc.w	r4, r4, r6
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	00e2      	lsls	r2, r4, #3
 800303e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003042:	00d9      	lsls	r1, r3, #3
 8003044:	460b      	mov	r3, r1
 8003046:	4614      	mov	r4, r2
 8003048:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800304c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003050:	4618      	mov	r0, r3
 8003052:	4621      	mov	r1, r4
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800305c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800306a:	2205      	movs	r2, #5
 800306c:	492b      	ldr	r1, [pc, #172]	; (800311c <SYSVIEW_AddTask+0xc0>)
 800306e:	68b8      	ldr	r0, [r7, #8]
 8003070:	f001 ff30 	bl	8004ed4 <memcmp>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04b      	beq.n	8003112 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b07      	cmp	r3, #7
 8003080:	d903      	bls.n	800308a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003082:	4828      	ldr	r0, [pc, #160]	; (8003124 <SYSVIEW_AddTask+0xc8>)
 8003084:	f001 fc2a 	bl	80048dc <SEGGER_SYSVIEW_Warn>
    return;
 8003088:	e044      	b.n	8003114 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4926      	ldr	r1, [pc, #152]	; (8003128 <SYSVIEW_AddTask+0xcc>)
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4921      	ldr	r1, [pc, #132]	; (8003128 <SYSVIEW_AddTask+0xcc>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3304      	adds	r3, #4
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	491b      	ldr	r1, [pc, #108]	; (8003128 <SYSVIEW_AddTask+0xcc>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3308      	adds	r3, #8
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4916      	ldr	r1, [pc, #88]	; (8003128 <SYSVIEW_AddTask+0xcc>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	330c      	adds	r3, #12
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4910      	ldr	r1, [pc, #64]	; (8003128 <SYSVIEW_AddTask+0xcc>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3310      	adds	r3, #16
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3301      	adds	r3, #1
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <SYSVIEW_AddTask+0xc4>)
 80030fe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f80e 	bl	800312c <SYSVIEW_SendTaskInfo>
 8003110:	e000      	b.n	8003114 <SYSVIEW_AddTask+0xb8>
    return;
 8003112:	bf00      	nop

}
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	08004f9c 	.word	0x08004f9c
 8003120:	20012e48 	.word	0x20012e48
 8003124:	08004fa4 	.word	0x08004fa4
 8003128:	20012da8 	.word	0x20012da8

0800312c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	2214      	movs	r2, #20
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f001 fee0 	bl	8004f08 <memset>
  TaskInfo.TaskID     = TaskID;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4618      	mov	r0, r3
 8003162:	f000 ffbd 	bl	80040e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003176:	4b21      	ldr	r3, [pc, #132]	; (80031fc <_DoInit+0x8c>)
 8003178:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2203      	movs	r2, #3
 8003184:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <_DoInit+0x90>)
 800318a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <_DoInit+0x94>)
 8003190:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003198:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a14      	ldr	r2, [pc, #80]	; (8003200 <_DoInit+0x90>)
 80031b0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <_DoInit+0x98>)
 80031b6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2210      	movs	r2, #16
 80031bc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3307      	adds	r3, #7
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <_DoInit+0x9c>)
 80031d6:	6810      	ldr	r0, [r2, #0]
 80031d8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <_DoInit+0xa0>)
 80031de:	6810      	ldr	r0, [r2, #0]
 80031e0:	6018      	str	r0, [r3, #0]
 80031e2:	8891      	ldrh	r1, [r2, #4]
 80031e4:	7992      	ldrb	r2, [r2, #6]
 80031e6:	8099      	strh	r1, [r3, #4]
 80031e8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	719a      	strb	r2, [r3, #6]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	200154bc 	.word	0x200154bc
 8003200:	08004ff4 	.word	0x08004ff4
 8003204:	20012e4c 	.word	0x20012e4c
 8003208:	2001324c 	.word	0x2001324c
 800320c:	08005000 	.word	0x08005000
 8003210:	08005004 	.word	0x08005004

08003214 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003220:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <SEGGER_RTT_ReadNoLock+0x100>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <SEGGER_RTT_ReadNoLock+0x18>
 8003228:	f7ff ffa2 	bl	8003170 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	3360      	adds	r3, #96	; 0x60
 8003238:	4a36      	ldr	r2, [pc, #216]	; (8003314 <SEGGER_RTT_ReadNoLock+0x100>)
 800323a:	4413      	add	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	429a      	cmp	r2, r3
 8003258:	d92a      	bls.n	80032b0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4293      	cmp	r3, r2
 800326a:	bf28      	it	cs
 800326c:	4613      	movcs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	4413      	add	r3, r2
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4619      	mov	r1, r3
 800327c:	69f8      	ldr	r0, [r7, #28]
 800327e:	f001 fe38 	bl	8004ef2 <memcpy>
    NumBytesRead += NumBytesRem;
 8003282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800329a:	6a3a      	ldr	r2, [r7, #32]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	6a3a      	ldr	r2, [r7, #32]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d101      	bne.n	80032b0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80032ac:	2300      	movs	r3, #0
 80032ae:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4293      	cmp	r3, r2
 80032be:	bf28      	it	cs
 80032c0:	4613      	movcs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d018      	beq.n	80032fc <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	4413      	add	r3, r2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4619      	mov	r1, r3
 80032d6:	69f8      	ldr	r0, [r7, #28]
 80032d8:	f001 fe0b 	bl	8004ef2 <memcpy>
    NumBytesRead += NumBytesRem;
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800330a:	4618      	mov	r0, r3
 800330c:	3728      	adds	r7, #40	; 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200154bc 	.word	0x200154bc

08003318 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4a3f      	ldr	r2, [pc, #252]	; (8003434 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8003336:	4413      	add	r3, r2
 8003338:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	429a      	cmp	r2, r3
 800334c:	d854      	bhi.n	80033f8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	429a      	cmp	r2, r3
 8003360:	d30f      	bcc.n	8003382 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4413      	add	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fdbf 	bl	8004ef2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	441a      	add	r2, r3
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800337e:	2301      	movs	r3, #1
 8003380:	e054      	b.n	800342c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	4413      	add	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d34b      	bcc.n	800342a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d90e      	bls.n	80033c2 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4413      	add	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 fd9e 	bl	8004ef2 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	441a      	add	r2, r3
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e018      	b.n	80033f4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fd8f 	bl	8004ef2 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	6858      	ldr	r0, [r3, #4]
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	18d1      	adds	r1, r2, r3
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	f001 fd84 	bl	8004ef2 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad2      	subs	r2, r2, r3
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e019      	b.n	800342c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d30f      	bcc.n	800342a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4413      	add	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fd6b 	bl	8004ef2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	441a      	add	r2, r3
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200154bc 	.word	0x200154bc

08003438 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003446:	4b30      	ldr	r3, [pc, #192]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800344e:	f7ff fe8f 	bl	8003170 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003452:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4293      	cmp	r3, r2
 800345c:	d24c      	bcs.n	80034f8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800345e:	f3ef 8311 	mrs	r3, BASEPRI
 8003462:	f04f 0120 	mov.w	r1, #32
 8003466:	f381 8811 	msr	BASEPRI, r1
 800346a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d032      	beq.n	80034d8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003472:	4925      	ldr	r1, [pc, #148]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003486:	4920      	ldr	r1, [pc, #128]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	3304      	adds	r3, #4
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800349c:	491a      	ldr	r1, [pc, #104]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	3320      	adds	r3, #32
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80034b0:	4915      	ldr	r1, [pc, #84]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	3328      	adds	r3, #40	; 0x28
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80034c4:	4910      	ldr	r1, [pc, #64]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	3324      	adds	r3, #36	; 0x24
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80034d8:	490b      	ldr	r1, [pc, #44]	; (8003508 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	332c      	adds	r3, #44	; 0x2c
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e002      	b.n	80034fe <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80034fe:	697b      	ldr	r3, [r7, #20]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200154bc 	.word	0x200154bc

0800350c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800351a:	4b30      	ldr	r3, [pc, #192]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003522:	f7ff fe25 	bl	8003170 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003526:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4293      	cmp	r3, r2
 8003530:	d24b      	bcs.n	80035ca <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003532:	f3ef 8311 	mrs	r3, BASEPRI
 8003536:	f04f 0120 	mov.w	r1, #32
 800353a:	f381 8811 	msr	BASEPRI, r1
 800353e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d031      	beq.n	80035aa <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003546:	4925      	ldr	r1, [pc, #148]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	3360      	adds	r3, #96	; 0x60
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800355a:	4920      	ldr	r1, [pc, #128]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	3364      	adds	r3, #100	; 0x64
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800356e:	491b      	ldr	r1, [pc, #108]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	3368      	adds	r3, #104	; 0x68
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003582:	4916      	ldr	r1, [pc, #88]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	3370      	adds	r3, #112	; 0x70
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003596:	4911      	ldr	r1, [pc, #68]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	336c      	adds	r3, #108	; 0x6c
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80035aa:	490c      	ldr	r1, [pc, #48]	; (80035dc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	3374      	adds	r3, #116	; 0x74
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e002      	b.n	80035d0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	617b      	str	r3, [r7, #20]
  }
  return r;
 80035d0:	697b      	ldr	r3, [r7, #20]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200154bc 	.word	0x200154bc

080035e0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035f0:	e002      	b.n	80035f8 <_EncodeStr+0x18>
    Len++;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3301      	adds	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f6      	bne.n	80035f2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	d901      	bls.n	8003610 <_EncodeStr+0x30>
    Len = Limit;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2bfe      	cmp	r3, #254	; 0xfe
 8003614:	d806      	bhi.n	8003624 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	60fa      	str	r2, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e011      	b.n	8003648 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	60fa      	str	r2, [r7, #12]
 800362a:	22ff      	movs	r2, #255	; 0xff
 800362c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	60fa      	str	r2, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	0a19      	lsrs	r1, r3, #8
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	60fa      	str	r2, [r7, #12]
 8003644:	b2ca      	uxtb	r2, r1
 8003646:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800364c:	e00a      	b.n	8003664 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	1c53      	adds	r3, r2, #1
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	60f9      	str	r1, [r7, #12]
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	701a      	strb	r2, [r3, #0]
    n++;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3301      	adds	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d3f0      	bcc.n	800364e <_EncodeStr+0x6e>
  }
  return pPayload;
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003698:	1cfb      	adds	r3, r7, #3
 800369a:	2201      	movs	r2, #1
 800369c:	4619      	mov	r1, r3
 800369e:	2001      	movs	r0, #1
 80036a0:	f7ff fdb8 	bl	8003214 <SEGGER_RTT_ReadNoLock>
 80036a4:	4603      	mov	r3, r0
 80036a6:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	dd44      	ble.n	8003738 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d01a      	beq.n	80036ea <_HandleIncomingPacket+0x58>
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	dc06      	bgt.n	80036c6 <_HandleIncomingPacket+0x34>
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d010      	beq.n	80036de <_HandleIncomingPacket+0x4c>
 80036bc:	2b02      	cmp	r3, #2
 80036be:	dc11      	bgt.n	80036e4 <_HandleIncomingPacket+0x52>
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d009      	beq.n	80036d8 <_HandleIncomingPacket+0x46>
 80036c4:	e02d      	b.n	8003722 <_HandleIncomingPacket+0x90>
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d015      	beq.n	80036f6 <_HandleIncomingPacket+0x64>
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	db10      	blt.n	80036f0 <_HandleIncomingPacket+0x5e>
 80036ce:	2b07      	cmp	r3, #7
 80036d0:	d014      	beq.n	80036fc <_HandleIncomingPacket+0x6a>
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d015      	beq.n	8003702 <_HandleIncomingPacket+0x70>
 80036d6:	e024      	b.n	8003722 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80036d8:	f000 fb86 	bl	8003de8 <SEGGER_SYSVIEW_Start>
      break;
 80036dc:	e031      	b.n	8003742 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80036de:	f000 fc3f 	bl	8003f60 <SEGGER_SYSVIEW_Stop>
      break;
 80036e2:	e02e      	b.n	8003742 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80036e4:	f000 fe1a 	bl	800431c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80036e8:	e02b      	b.n	8003742 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80036ea:	f000 fddf 	bl	80042ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 80036ee:	e028      	b.n	8003742 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80036f0:	f000 fc5c 	bl	8003fac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80036f4:	e025      	b.n	8003742 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80036f6:	f001 f8b3 	bl	8004860 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80036fa:	e022      	b.n	8003742 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80036fc:	f001 f892 	bl	8004824 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003700:	e01f      	b.n	8003742 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003702:	1cfb      	adds	r3, r7, #3
 8003704:	2201      	movs	r2, #1
 8003706:	4619      	mov	r1, r3
 8003708:	2001      	movs	r0, #1
 800370a:	f7ff fd83 	bl	8003214 <SEGGER_RTT_ReadNoLock>
 800370e:	4603      	mov	r3, r0
 8003710:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	dd11      	ble.n	800373c <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f802 	bl	8004724 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003720:	e00c      	b.n	800373c <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	b25b      	sxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0a      	bge.n	8003740 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800372a:	1cfb      	adds	r3, r7, #3
 800372c:	2201      	movs	r2, #1
 800372e:	4619      	mov	r1, r3
 8003730:	2001      	movs	r0, #1
 8003732:	f7ff fd6f 	bl	8003214 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003736:	e003      	b.n	8003740 <_HandleIncomingPacket+0xae>
    }
  }
 8003738:	bf00      	nop
 800373a:	e002      	b.n	8003742 <_HandleIncomingPacket+0xb0>
      break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <_HandleIncomingPacket+0xb0>
      break;
 8003740:	bf00      	nop
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003752:	2301      	movs	r3, #1
 8003754:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	3301      	adds	r3, #1
 800375a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003760:	4b30      	ldr	r3, [pc, #192]	; (8003824 <_TrySendOverflowPacket+0xd8>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	e00b      	b.n	8003780 <_TrySendOverflowPacket+0x34>
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	b2da      	uxtb	r2, r3
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	1c59      	adds	r1, r3, #1
 8003770:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	09db      	lsrs	r3, r3, #7
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	2b7f      	cmp	r3, #127	; 0x7f
 8003784:	d8f0      	bhi.n	8003768 <_TrySendOverflowPacket+0x1c>
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800378c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <_TrySendOverflowPacket+0xdc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800379c:	4b21      	ldr	r3, [pc, #132]	; (8003824 <_TrySendOverflowPacket+0xd8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	e00b      	b.n	80037c8 <_TrySendOverflowPacket+0x7c>
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	6279      	str	r1, [r7, #36]	; 0x24
 80037ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	09db      	lsrs	r3, r3, #7
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2b7f      	cmp	r3, #127	; 0x7f
 80037cc:	d8f0      	bhi.n	80037b0 <_TrySendOverflowPacket+0x64>
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	627a      	str	r2, [r7, #36]	; 0x24
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7ff fd94 	bl	8003318 <SEGGER_RTT_WriteSkipNoLock>
 80037f0:	4603      	mov	r3, r0
 80037f2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <_TrySendOverflowPacket+0xd8>)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <_TrySendOverflowPacket+0xd8>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <_TrySendOverflowPacket+0xd8>)
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e004      	b.n	8003818 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <_TrySendOverflowPacket+0xd8>)
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	3301      	adds	r3, #1
 8003814:	4a03      	ldr	r2, [pc, #12]	; (8003824 <_TrySendOverflowPacket+0xd8>)
 8003816:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003818:	693b      	ldr	r3, [r7, #16]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3730      	adds	r7, #48	; 0x30
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20015264 	.word	0x20015264
 8003828:	e0001004 	.word	0xe0001004

0800382c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003838:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <_SendPacket+0x19c>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d010      	beq.n	8003862 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003840:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <_SendPacket+0x19c>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a1 	beq.w	800398c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <_SendPacket+0x19c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d109      	bne.n	8003866 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003852:	f7ff ff7b 	bl	800374c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003856:	4b5c      	ldr	r3, [pc, #368]	; (80039c8 <_SendPacket+0x19c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	f040 8098 	bne.w	8003990 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8003860:	e001      	b.n	8003866 <_SendPacket+0x3a>
    goto Send;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <_SendPacket+0x3c>
Send:
 8003866:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b1f      	cmp	r3, #31
 800386c:	d809      	bhi.n	8003882 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800386e:	4b56      	ldr	r3, [pc, #344]	; (80039c8 <_SendPacket+0x19c>)
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8089 	bne.w	8003994 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b17      	cmp	r3, #23
 8003886:	d807      	bhi.n	8003898 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3b01      	subs	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e03d      	b.n	8003914 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b7f      	cmp	r3, #127	; 0x7f
 80038a4:	d912      	bls.n	80038cc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	09da      	lsrs	r2, r3, #7
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	3a01      	subs	r2, #1
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e006      	b.n	80038da <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b7f      	cmp	r3, #127	; 0x7f
 80038de:	d912      	bls.n	8003906 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	09da      	lsrs	r2, r3, #7
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	3a01      	subs	r2, #1
 80038f8:	60fa      	str	r2, [r7, #12]
 80038fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e006      	b.n	8003914 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3b01      	subs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003914:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <_SendPacket+0x1a0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <_SendPacket+0x19c>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	e00b      	b.n	8003946 <_SendPacket+0x11a>
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	6279      	str	r1, [r7, #36]	; 0x24
 8003938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	09db      	lsrs	r3, r3, #7
 8003944:	623b      	str	r3, [r7, #32]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b7f      	cmp	r3, #127	; 0x7f
 800394a:	d8f0      	bhi.n	800392e <_SendPacket+0x102>
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	627a      	str	r2, [r7, #36]	; 0x24
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	461a      	mov	r2, r3
 8003964:	68f9      	ldr	r1, [r7, #12]
 8003966:	2001      	movs	r0, #1
 8003968:	f7ff fcd6 	bl	8003318 <SEGGER_RTT_WriteSkipNoLock>
 800396c:	4603      	mov	r3, r0
 800396e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <_SendPacket+0x19c>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	60d3      	str	r3, [r2, #12]
 800397c:	e00b      	b.n	8003996 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <_SendPacket+0x19c>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <_SendPacket+0x19c>)
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	e004      	b.n	8003996 <_SendPacket+0x16a>
    goto SendDone;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <_SendPacket+0x16a>
      goto SendDone;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <_SendPacket+0x16a>
      goto SendDone;
 8003994:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <_SendPacket+0x1a4>)
 8003998:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <_SendPacket+0x1a4>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d00b      	beq.n	80039be <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <_SendPacket+0x19c>)
 80039a8:	789b      	ldrb	r3, [r3, #2]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d107      	bne.n	80039be <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <_SendPacket+0x19c>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80039b4:	f7ff fe6d 	bl	8003692 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <_SendPacket+0x19c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80039be:	bf00      	nop
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20015264 	.word	0x20015264
 80039cc:	e0001004 	.word	0xe0001004
 80039d0:	200154bc 	.word	0x200154bc

080039d4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80039e2:	2300      	movs	r3, #0
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <SEGGER_SYSVIEW_Init+0x68>)
 80039ec:	4914      	ldr	r1, [pc, #80]	; (8003a40 <SEGGER_SYSVIEW_Init+0x6c>)
 80039ee:	2001      	movs	r0, #1
 80039f0:	f7ff fd22 	bl	8003438 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80039f4:	2300      	movs	r3, #0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2308      	movs	r3, #8
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <SEGGER_SYSVIEW_Init+0x70>)
 80039fc:	4910      	ldr	r1, [pc, #64]	; (8003a40 <SEGGER_SYSVIEW_Init+0x6c>)
 80039fe:	2001      	movs	r0, #1
 8003a00:	f7ff fd84 	bl	800350c <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <SEGGER_SYSVIEW_Init+0x74>)
 8003a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <SEGGER_SYSVIEW_Init+0x78>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <SEGGER_SYSVIEW_Init+0x74>)
 8003a12:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003a14:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <SEGGER_SYSVIEW_Init+0x74>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <SEGGER_SYSVIEW_Init+0x74>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003a20:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <SEGGER_SYSVIEW_Init+0x74>)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <SEGGER_SYSVIEW_Init+0x74>)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <SEGGER_SYSVIEW_Init+0x74>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	2001325c 	.word	0x2001325c
 8003a40:	0800500c 	.word	0x0800500c
 8003a44:	2001525c 	.word	0x2001525c
 8003a48:	20015264 	.word	0x20015264
 8003a4c:	e0001004 	.word	0xe0001004

08003a50 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003a58:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6113      	str	r3, [r2, #16]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20015264 	.word	0x20015264

08003a70 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a78:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7c:	f04f 0120 	mov.w	r1, #32
 8003a80:	f381 8811 	msr	BASEPRI, r1
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4808      	ldr	r0, [pc, #32]	; (8003aa8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003a88:	f7ff fdf7 	bl	800367a <_PreparePacket>
 8003a8c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68b8      	ldr	r0, [r7, #8]
 8003a94:	f7ff feca 	bl	800382c <_SendPacket>
  RECORD_END();
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f383 8811 	msr	BASEPRI, r3
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20015294 	.word	0x20015294

08003aac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8003aba:	f04f 0120 	mov.w	r1, #32
 8003abe:	f381 8811 	msr	BASEPRI, r1
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	4816      	ldr	r0, [pc, #88]	; (8003b20 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003ac6:	f7ff fdd8 	bl	800367a <_PreparePacket>
 8003aca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e00b      	b.n	8003af2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	1c59      	adds	r1, r3, #1
 8003ae2:	61f9      	str	r1, [r7, #28]
 8003ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	09db      	lsrs	r3, r3, #7
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b7f      	cmp	r3, #127	; 0x7f
 8003af6:	d8f0      	bhi.n	8003ada <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	61fa      	str	r2, [r7, #28]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68f9      	ldr	r1, [r7, #12]
 8003b0c:	6938      	ldr	r0, [r7, #16]
 8003b0e:	f7ff fe8d 	bl	800382c <_SendPacket>
  RECORD_END();
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f383 8811 	msr	BASEPRI, r3
}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20015294 	.word	0x20015294

08003b24 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b30:	f3ef 8311 	mrs	r3, BASEPRI
 8003b34:	f04f 0120 	mov.w	r1, #32
 8003b38:	f381 8811 	msr	BASEPRI, r1
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	4825      	ldr	r0, [pc, #148]	; (8003bd4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003b40:	f7ff fd9b 	bl	800367a <_PreparePacket>
 8003b44:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b52:	e00b      	b.n	8003b6c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	09db      	lsrs	r3, r3, #7
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b70:	d8f0      	bhi.n	8003b54 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	e00b      	b.n	8003ba4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	6279      	str	r1, [r7, #36]	; 0x24
 8003b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	09db      	lsrs	r3, r3, #7
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ba8:	d8f0      	bhi.n	8003b8c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	627a      	str	r2, [r7, #36]	; 0x24
 8003bb0:	6a3a      	ldr	r2, [r7, #32]
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	6979      	ldr	r1, [r7, #20]
 8003bbe:	69b8      	ldr	r0, [r7, #24]
 8003bc0:	f7ff fe34 	bl	800382c <_SendPacket>
  RECORD_END();
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f383 8811 	msr	BASEPRI, r3
}
 8003bca:	bf00      	nop
 8003bcc:	3730      	adds	r7, #48	; 0x30
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20015294 	.word	0x20015294

08003bd8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003be6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bea:	f04f 0120 	mov.w	r1, #32
 8003bee:	f381 8811 	msr	BASEPRI, r1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	4832      	ldr	r0, [pc, #200]	; (8003cc0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003bf6:	f7ff fd40 	bl	800367a <_PreparePacket>
 8003bfa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
 8003c08:	e00b      	b.n	8003c22 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	1c59      	adds	r1, r3, #1
 8003c12:	6379      	str	r1, [r7, #52]	; 0x34
 8003c14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	09db      	lsrs	r3, r3, #7
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2b7f      	cmp	r3, #127	; 0x7f
 8003c26:	d8f0      	bhi.n	8003c0a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	637a      	str	r2, [r7, #52]	; 0x34
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c40:	e00b      	b.n	8003c5a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	1c59      	adds	r1, r3, #1
 8003c4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	09db      	lsrs	r3, r3, #7
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c5e:	d8f0      	bhi.n	8003c42 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	e00b      	b.n	8003c92 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	1c59      	adds	r1, r3, #1
 8003c82:	6279      	str	r1, [r7, #36]	; 0x24
 8003c84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	09db      	lsrs	r3, r3, #7
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	2b7f      	cmp	r3, #127	; 0x7f
 8003c96:	d8f0      	bhi.n	8003c7a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	6979      	ldr	r1, [r7, #20]
 8003cac:	69b8      	ldr	r0, [r7, #24]
 8003cae:	f7ff fdbd 	bl	800382c <_SendPacket>
  RECORD_END();
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f383 8811 	msr	BASEPRI, r3
}
 8003cb8:	bf00      	nop
 8003cba:	3738      	adds	r7, #56	; 0x38
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20015294 	.word	0x20015294

08003cc4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b090      	sub	sp, #64	; 0x40
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8003cd6:	f04f 0120 	mov.w	r1, #32
 8003cda:	f381 8811 	msr	BASEPRI, r1
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	4840      	ldr	r0, [pc, #256]	; (8003de4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003ce2:	f7ff fcca 	bl	800367a <_PreparePacket>
 8003ce6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf4:	e00b      	b.n	8003d0e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	1c59      	adds	r1, r3, #1
 8003cfe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	09db      	lsrs	r3, r3, #7
 8003d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	2b7f      	cmp	r3, #127	; 0x7f
 8003d12:	d8f0      	bhi.n	8003cf6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2c:	e00b      	b.n	8003d46 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	1c59      	adds	r1, r3, #1
 8003d36:	6379      	str	r1, [r7, #52]	; 0x34
 8003d38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	09db      	lsrs	r3, r3, #7
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	2b7f      	cmp	r3, #127	; 0x7f
 8003d4a:	d8f0      	bhi.n	8003d2e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	637a      	str	r2, [r7, #52]	; 0x34
 8003d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d64:	e00b      	b.n	8003d7e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	1c59      	adds	r1, r3, #1
 8003d6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	09db      	lsrs	r3, r3, #7
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	2b7f      	cmp	r3, #127	; 0x7f
 8003d82:	d8f0      	bhi.n	8003d66 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
 8003d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	e00b      	b.n	8003db6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	1c59      	adds	r1, r3, #1
 8003da6:	6279      	str	r1, [r7, #36]	; 0x24
 8003da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	09db      	lsrs	r3, r3, #7
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dba:	d8f0      	bhi.n	8003d9e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8003dc2:	6a3a      	ldr	r2, [r7, #32]
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	6979      	ldr	r1, [r7, #20]
 8003dd0:	69b8      	ldr	r0, [r7, #24]
 8003dd2:	f7ff fd2b 	bl	800382c <_SendPacket>
  RECORD_END();
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f383 8811 	msr	BASEPRI, r3
}
 8003ddc:	bf00      	nop
 8003dde:	3740      	adds	r7, #64	; 0x40
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20015294 	.word	0x20015294

08003de8 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003dee:	4b59      	ldr	r3, [pc, #356]	; (8003f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 80aa 	bne.w	8003f4c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003df8:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8003e02:	f04f 0120 	mov.w	r1, #32
 8003e06:	f381 8811 	msr	BASEPRI, r1
 8003e0a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003e0c:	220a      	movs	r2, #10
 8003e0e:	4952      	ldr	r1, [pc, #328]	; (8003f58 <SEGGER_SYSVIEW_Start+0x170>)
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7ff fa81 	bl	8003318 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003e1c:	200a      	movs	r0, #10
 8003e1e:	f7ff fe27 	bl	8003a70 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e22:	f3ef 8311 	mrs	r3, BASEPRI
 8003e26:	f04f 0120 	mov.w	r1, #32
 8003e2a:	f381 8811 	msr	BASEPRI, r1
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	484a      	ldr	r0, [pc, #296]	; (8003f5c <SEGGER_SYSVIEW_Start+0x174>)
 8003e32:	f7ff fc22 	bl	800367a <_PreparePacket>
 8003e36:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e40:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e46:	e00b      	b.n	8003e60 <SEGGER_SYSVIEW_Start+0x78>
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	09db      	lsrs	r3, r3, #7
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	2b7f      	cmp	r3, #127	; 0x7f
 8003e64:	d8f0      	bhi.n	8003e48 <SEGGER_SYSVIEW_Start+0x60>
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	623b      	str	r3, [r7, #32]
 8003e80:	e00b      	b.n	8003e9a <SEGGER_SYSVIEW_Start+0xb2>
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	1c59      	adds	r1, r3, #1
 8003e8a:	6279      	str	r1, [r7, #36]	; 0x24
 8003e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	09db      	lsrs	r3, r3, #7
 8003e98:	623b      	str	r3, [r7, #32]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e9e:	d8f0      	bhi.n	8003e82 <SEGGER_SYSVIEW_Start+0x9a>
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ea6:	6a3a      	ldr	r2, [r7, #32]
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e00b      	b.n	8003ed4 <SEGGER_SYSVIEW_Start+0xec>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	1c59      	adds	r1, r3, #1
 8003ec4:	61f9      	str	r1, [r7, #28]
 8003ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	09db      	lsrs	r3, r3, #7
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed8:	d8f0      	bhi.n	8003ebc <SEGGER_SYSVIEW_Start+0xd4>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	61fa      	str	r2, [r7, #28]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	2302      	movs	r3, #2
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e00b      	b.n	8003f0c <SEGGER_SYSVIEW_Start+0x124>
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1c59      	adds	r1, r3, #1
 8003efc:	6179      	str	r1, [r7, #20]
 8003efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	09db      	lsrs	r3, r3, #7
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f10:	d8f0      	bhi.n	8003ef4 <SEGGER_SYSVIEW_Start+0x10c>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	617a      	str	r2, [r7, #20]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003f22:	2218      	movs	r2, #24
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fc80 	bl	800382c <_SendPacket>
      RECORD_END();
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003f40:	f000 f9ec 	bl	800431c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003f44:	f000 f9b2 	bl	80042ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003f48:	f000 fc8a 	bl	8004860 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3730      	adds	r7, #48	; 0x30
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20015264 	.word	0x20015264
 8003f58:	08005088 	.word	0x08005088
 8003f5c:	20015294 	.word	0x20015294

08003f60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f66:	f3ef 8311 	mrs	r3, BASEPRI
 8003f6a:	f04f 0120 	mov.w	r1, #32
 8003f6e:	f381 8811 	msr	BASEPRI, r1
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	480b      	ldr	r0, [pc, #44]	; (8003fa4 <SEGGER_SYSVIEW_Stop+0x44>)
 8003f76:	f7ff fb80 	bl	800367a <_PreparePacket>
 8003f7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <SEGGER_SYSVIEW_Stop+0x48>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003f84:	220b      	movs	r2, #11
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	6838      	ldr	r0, [r7, #0]
 8003f8a:	f7ff fc4f 	bl	800382c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <SEGGER_SYSVIEW_Stop+0x48>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f383 8811 	msr	BASEPRI, r3
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20015294 	.word	0x20015294
 8003fa8:	20015264 	.word	0x20015264

08003fac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08c      	sub	sp, #48	; 0x30
 8003fb0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb6:	f04f 0120 	mov.w	r1, #32
 8003fba:	f381 8811 	msr	BASEPRI, r1
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	4845      	ldr	r0, [pc, #276]	; (80040d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003fc2:	f7ff fb5a 	bl	800367a <_PreparePacket>
 8003fc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd0:	4b42      	ldr	r3, [pc, #264]	; (80040dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd6:	e00b      	b.n	8003ff0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	09db      	lsrs	r3, r3, #7
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ff4:	d8f0      	bhi.n	8003fd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
 800400a:	4b34      	ldr	r3, [pc, #208]	; (80040dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	e00b      	b.n	800402a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1c59      	adds	r1, r3, #1
 800401a:	6279      	str	r1, [r7, #36]	; 0x24
 800401c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	09db      	lsrs	r3, r3, #7
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	2b7f      	cmp	r3, #127	; 0x7f
 800402e:	d8f0      	bhi.n	8004012 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	627a      	str	r2, [r7, #36]	; 0x24
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e00b      	b.n	8004064 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	1c59      	adds	r1, r3, #1
 8004054:	61f9      	str	r1, [r7, #28]
 8004056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	09db      	lsrs	r3, r3, #7
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b7f      	cmp	r3, #127	; 0x7f
 8004068:	d8f0      	bhi.n	800404c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	61fa      	str	r2, [r7, #28]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	2302      	movs	r3, #2
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	e00b      	b.n	800409c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	6179      	str	r1, [r7, #20]
 800408e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	09db      	lsrs	r3, r3, #7
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b7f      	cmp	r3, #127	; 0x7f
 80040a0:	d8f0      	bhi.n	8004084 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	617a      	str	r2, [r7, #20]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80040b2:	2218      	movs	r2, #24
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	68b8      	ldr	r0, [r7, #8]
 80040b8:	f7ff fbb8 	bl	800382c <_SendPacket>
  RECORD_END();
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	4798      	blx	r3
  }
}
 80040d0:	bf00      	nop
 80040d2:	3730      	adds	r7, #48	; 0x30
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20015294 	.word	0x20015294
 80040dc:	20015264 	.word	0x20015264

080040e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b092      	sub	sp, #72	; 0x48
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80040e8:	f3ef 8311 	mrs	r3, BASEPRI
 80040ec:	f04f 0120 	mov.w	r1, #32
 80040f0:	f381 8811 	msr	BASEPRI, r1
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	486b      	ldr	r0, [pc, #428]	; (80042a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80040f8:	f7ff fabf 	bl	800367a <_PreparePacket>
 80040fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	647b      	str	r3, [r7, #68]	; 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	643b      	str	r3, [r7, #64]	; 0x40
 8004114:	e00b      	b.n	800412e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8004116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004118:	b2da      	uxtb	r2, r3
 800411a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411c:	1c59      	adds	r1, r3, #1
 800411e:	6479      	str	r1, [r7, #68]	; 0x44
 8004120:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412a:	09db      	lsrs	r3, r3, #7
 800412c:	643b      	str	r3, [r7, #64]	; 0x40
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	2b7f      	cmp	r3, #127	; 0x7f
 8004132:	d8f0      	bhi.n	8004116 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	647a      	str	r2, [r7, #68]	; 0x44
 800413a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004142:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	63bb      	str	r3, [r7, #56]	; 0x38
 800414e:	e00b      	b.n	8004168 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	b2da      	uxtb	r2, r3
 8004154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004156:	1c59      	adds	r1, r3, #1
 8004158:	63f9      	str	r1, [r7, #60]	; 0x3c
 800415a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	09db      	lsrs	r3, r3, #7
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	2b7f      	cmp	r3, #127	; 0x7f
 800416c:	d8f0      	bhi.n	8004150 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	4619      	mov	r1, r3
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff fa2a 	bl	80035e0 <_EncodeStr>
 800418c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800418e:	2209      	movs	r2, #9
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	6938      	ldr	r0, [r7, #16]
 8004194:	f7ff fb4a 	bl	800382c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	e00b      	b.n	80041c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	1c59      	adds	r1, r3, #1
 80041b8:	6379      	str	r1, [r7, #52]	; 0x34
 80041ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	09db      	lsrs	r3, r3, #7
 80041c6:	633b      	str	r3, [r7, #48]	; 0x30
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	2b7f      	cmp	r3, #127	; 0x7f
 80041cc:	d8f0      	bhi.n	80041b0 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	637a      	str	r2, [r7, #52]	; 0x34
 80041d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e8:	e00b      	b.n	8004202 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	1c59      	adds	r1, r3, #1
 80041f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	09db      	lsrs	r3, r3, #7
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	2b7f      	cmp	r3, #127	; 0x7f
 8004206:	d8f0      	bhi.n	80041ea <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	623b      	str	r3, [r7, #32]
 8004222:	e00b      	b.n	800423c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	6279      	str	r1, [r7, #36]	; 0x24
 800422e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	09db      	lsrs	r3, r3, #7
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b7f      	cmp	r3, #127	; 0x7f
 8004240:	d8f0      	bhi.n	8004224 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	627a      	str	r2, [r7, #36]	; 0x24
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e00b      	b.n	8004274 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	61f9      	str	r1, [r7, #28]
 8004266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	09db      	lsrs	r3, r3, #7
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b7f      	cmp	r3, #127	; 0x7f
 8004278:	d8f0      	bhi.n	800425c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800428a:	2215      	movs	r2, #21
 800428c:	68f9      	ldr	r1, [r7, #12]
 800428e:	6938      	ldr	r0, [r7, #16]
 8004290:	f7ff facc 	bl	800382c <_SendPacket>
  RECORD_END();
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f383 8811 	msr	BASEPRI, r3
}
 800429a:	bf00      	nop
 800429c:	3748      	adds	r7, #72	; 0x48
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20015294 	.word	0x20015294
 80042a8:	20015264 	.word	0x20015264

080042ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80042c2:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4798      	blx	r3
  }
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20015264 	.word	0x20015264

080042d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042dc:	f3ef 8311 	mrs	r3, BASEPRI
 80042e0:	f04f 0120 	mov.w	r1, #32
 80042e4:	f381 8811 	msr	BASEPRI, r1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	480b      	ldr	r0, [pc, #44]	; (8004318 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80042ec:	f7ff f9c5 	bl	800367a <_PreparePacket>
 80042f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	6938      	ldr	r0, [r7, #16]
 80042f8:	f7ff f972 	bl	80035e0 <_EncodeStr>
 80042fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80042fe:	220e      	movs	r2, #14
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	6938      	ldr	r0, [r7, #16]
 8004304:	f7ff fa92 	bl	800382c <_SendPacket>
  RECORD_END();
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f383 8811 	msr	BASEPRI, r3
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20015294 	.word	0x20015294

0800431c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d019      	beq.n	800435e <SEGGER_SYSVIEW_RecordSystime+0x42>
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d014      	beq.n	800435e <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4798      	blx	r3
 800433c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004340:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004342:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	f04f 0400 	mov.w	r4, #0
 800434e:	0013      	movs	r3, r2
 8004350:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004352:	461a      	mov	r2, r3
 8004354:	4601      	mov	r1, r0
 8004356:	200d      	movs	r0, #13
 8004358:	f7ff fbe4 	bl	8003b24 <SEGGER_SYSVIEW_RecordU32x2>
 800435c:	e005      	b.n	800436a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4619      	mov	r1, r3
 8004364:	200c      	movs	r0, #12
 8004366:	f7ff fba1 	bl	8003aac <SEGGER_SYSVIEW_RecordU32>
  }
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}
 8004372:	bf00      	nop
 8004374:	20015264 	.word	0x20015264
 8004378:	e0001004 	.word	0xe0001004

0800437c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004382:	f3ef 8311 	mrs	r3, BASEPRI
 8004386:	f04f 0120 	mov.w	r1, #32
 800438a:	f381 8811 	msr	BASEPRI, r1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	4819      	ldr	r0, [pc, #100]	; (80043f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004392:	f7ff f972 	bl	800367a <_PreparePacket>
 8004396:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800439c:	4b17      	ldr	r3, [pc, #92]	; (80043fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	e00b      	b.n	80043c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	6179      	str	r1, [r7, #20]
 80043ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b7f      	cmp	r3, #127	; 0x7f
 80043cc:	d8f0      	bhi.n	80043b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	617a      	str	r2, [r7, #20]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80043de:	2202      	movs	r2, #2
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	68b8      	ldr	r0, [r7, #8]
 80043e4:	f7ff fa22 	bl	800382c <_SendPacket>
  RECORD_END();
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f383 8811 	msr	BASEPRI, r3
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20015294 	.word	0x20015294
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004406:	f3ef 8311 	mrs	r3, BASEPRI
 800440a:	f04f 0120 	mov.w	r1, #32
 800440e:	f381 8811 	msr	BASEPRI, r1
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	4807      	ldr	r0, [pc, #28]	; (8004434 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004416:	f7ff f930 	bl	800367a <_PreparePacket>
 800441a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800441c:	2203      	movs	r2, #3
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	6838      	ldr	r0, [r7, #0]
 8004422:	f7ff fa03 	bl	800382c <_SendPacket>
  RECORD_END();
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f383 8811 	msr	BASEPRI, r3
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20015294 	.word	0x20015294

08004438 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800443e:	f3ef 8311 	mrs	r3, BASEPRI
 8004442:	f04f 0120 	mov.w	r1, #32
 8004446:	f381 8811 	msr	BASEPRI, r1
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	4807      	ldr	r0, [pc, #28]	; (800446c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800444e:	f7ff f914 	bl	800367a <_PreparePacket>
 8004452:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004454:	2212      	movs	r2, #18
 8004456:	6839      	ldr	r1, [r7, #0]
 8004458:	6838      	ldr	r0, [r7, #0]
 800445a:	f7ff f9e7 	bl	800382c <_SendPacket>
  RECORD_END();
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f383 8811 	msr	BASEPRI, r3
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20015294 	.word	0x20015294

08004470 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004476:	f3ef 8311 	mrs	r3, BASEPRI
 800447a:	f04f 0120 	mov.w	r1, #32
 800447e:	f381 8811 	msr	BASEPRI, r1
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	4807      	ldr	r0, [pc, #28]	; (80044a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004486:	f7ff f8f8 	bl	800367a <_PreparePacket>
 800448a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800448c:	2211      	movs	r2, #17
 800448e:	6839      	ldr	r1, [r7, #0]
 8004490:	6838      	ldr	r0, [r7, #0]
 8004492:	f7ff f9cb 	bl	800382c <_SendPacket>
  RECORD_END();
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f383 8811 	msr	BASEPRI, r3
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20015294 	.word	0x20015294

080044a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044b0:	f3ef 8311 	mrs	r3, BASEPRI
 80044b4:	f04f 0120 	mov.w	r1, #32
 80044b8:	f381 8811 	msr	BASEPRI, r1
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	481a      	ldr	r0, [pc, #104]	; (8004528 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80044c0:	f7ff f8db 	bl	800367a <_PreparePacket>
 80044c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80044ca:	4b18      	ldr	r3, [pc, #96]	; (800452c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	089b      	lsrs	r3, r3, #2
 80044d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e00b      	b.n	80044f8 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	61f9      	str	r1, [r7, #28]
 80044ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	09db      	lsrs	r3, r3, #7
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b7f      	cmp	r3, #127	; 0x7f
 80044fc:	d8f0      	bhi.n	80044e0 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	61fa      	str	r2, [r7, #28]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800450e:	2208      	movs	r2, #8
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	6938      	ldr	r0, [r7, #16]
 8004514:	f7ff f98a 	bl	800382c <_SendPacket>
  RECORD_END();
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f383 8811 	msr	BASEPRI, r3
}
 800451e:	bf00      	nop
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20015294 	.word	0x20015294
 800452c:	20015264 	.word	0x20015264

08004530 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004538:	f3ef 8311 	mrs	r3, BASEPRI
 800453c:	f04f 0120 	mov.w	r1, #32
 8004540:	f381 8811 	msr	BASEPRI, r1
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	481a      	ldr	r0, [pc, #104]	; (80045b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004548:	f7ff f897 	bl	800367a <_PreparePacket>
 800454c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	089b      	lsrs	r3, r3, #2
 800455c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e00b      	b.n	8004580 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	1c59      	adds	r1, r3, #1
 8004570:	61f9      	str	r1, [r7, #28]
 8004572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	09db      	lsrs	r3, r3, #7
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b7f      	cmp	r3, #127	; 0x7f
 8004584:	d8f0      	bhi.n	8004568 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	61fa      	str	r2, [r7, #28]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004596:	2204      	movs	r2, #4
 8004598:	68f9      	ldr	r1, [r7, #12]
 800459a:	6938      	ldr	r0, [r7, #16]
 800459c:	f7ff f946 	bl	800382c <_SendPacket>
  RECORD_END();
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f383 8811 	msr	BASEPRI, r3
}
 80045a6:	bf00      	nop
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20015294 	.word	0x20015294
 80045b4:	20015264 	.word	0x20015264

080045b8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045c0:	f3ef 8311 	mrs	r3, BASEPRI
 80045c4:	f04f 0120 	mov.w	r1, #32
 80045c8:	f381 8811 	msr	BASEPRI, r1
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	481a      	ldr	r0, [pc, #104]	; (8004638 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80045d0:	f7ff f853 	bl	800367a <_PreparePacket>
 80045d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80045da:	4b18      	ldr	r3, [pc, #96]	; (800463c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	e00b      	b.n	8004608 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	61f9      	str	r1, [r7, #28]
 80045fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	09db      	lsrs	r3, r3, #7
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b7f      	cmp	r3, #127	; 0x7f
 800460c:	d8f0      	bhi.n	80045f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	61fa      	str	r2, [r7, #28]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800461e:	2206      	movs	r2, #6
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	6938      	ldr	r0, [r7, #16]
 8004624:	f7ff f902 	bl	800382c <_SendPacket>
  RECORD_END();
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f383 8811 	msr	BASEPRI, r3
}
 800462e:	bf00      	nop
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20015294 	.word	0x20015294
 800463c:	20015264 	.word	0x20015264

08004640 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800464a:	f3ef 8311 	mrs	r3, BASEPRI
 800464e:	f04f 0120 	mov.w	r1, #32
 8004652:	f381 8811 	msr	BASEPRI, r1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	4827      	ldr	r0, [pc, #156]	; (80046f8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800465a:	f7ff f80e 	bl	800367a <_PreparePacket>
 800465e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004664:	4b25      	ldr	r3, [pc, #148]	; (80046fc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	089b      	lsrs	r3, r3, #2
 800466e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	e00b      	b.n	8004692 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1c59      	adds	r1, r3, #1
 8004682:	6279      	str	r1, [r7, #36]	; 0x24
 8004684:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	09db      	lsrs	r3, r3, #7
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	2b7f      	cmp	r3, #127	; 0x7f
 8004696:	d8f0      	bhi.n	800467a <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	627a      	str	r2, [r7, #36]	; 0x24
 800469e:	6a3a      	ldr	r2, [r7, #32]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e00b      	b.n	80046ca <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	1c59      	adds	r1, r3, #1
 80046ba:	61f9      	str	r1, [r7, #28]
 80046bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	09db      	lsrs	r3, r3, #7
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b7f      	cmp	r3, #127	; 0x7f
 80046ce:	d8f0      	bhi.n	80046b2 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	61fa      	str	r2, [r7, #28]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80046e0:	2207      	movs	r2, #7
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6938      	ldr	r0, [r7, #16]
 80046e6:	f7ff f8a1 	bl	800382c <_SendPacket>
  RECORD_END();
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f383 8811 	msr	BASEPRI, r3
}
 80046f0:	bf00      	nop
 80046f2:	3728      	adds	r7, #40	; 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20015294 	.word	0x20015294
 80046fc:	20015264 	.word	0x20015264

08004700 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	089b      	lsrs	r3, r3, #2
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20015264 	.word	0x20015264

08004724 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	; 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800472e:	4b3b      	ldr	r3, [pc, #236]	; (800481c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d06d      	beq.n	8004812 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800473c:	2300      	movs	r3, #0
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004740:	e008      	b.n	8004754 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	3301      	adds	r3, #1
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004758:	429a      	cmp	r2, r3
 800475a:	d3f2      	bcc.n	8004742 <SEGGER_SYSVIEW_SendModule+0x1e>
 800475c:	e000      	b.n	8004760 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800475e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d055      	beq.n	8004812 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004766:	f3ef 8311 	mrs	r3, BASEPRI
 800476a:	f04f 0120 	mov.w	r1, #32
 800476e:	f381 8811 	msr	BASEPRI, r1
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	482a      	ldr	r0, [pc, #168]	; (8004820 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004776:	f7fe ff80 	bl	800367a <_PreparePacket>
 800477a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	e00b      	b.n	80047a2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	6279      	str	r1, [r7, #36]	; 0x24
 8004794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	09db      	lsrs	r3, r3, #7
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	2b7f      	cmp	r3, #127	; 0x7f
 80047a6:	d8f0      	bhi.n	800478a <SEGGER_SYSVIEW_SendModule+0x66>
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	627a      	str	r2, [r7, #36]	; 0x24
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e00b      	b.n	80047dc <SEGGER_SYSVIEW_SendModule+0xb8>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	61f9      	str	r1, [r7, #28]
 80047ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	09db      	lsrs	r3, r3, #7
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b7f      	cmp	r3, #127	; 0x7f
 80047e0:	d8f0      	bhi.n	80047c4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	61fa      	str	r2, [r7, #28]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	4619      	mov	r1, r3
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7fe fef0 	bl	80035e0 <_EncodeStr>
 8004800:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004802:	2216      	movs	r2, #22
 8004804:	68f9      	ldr	r1, [r7, #12]
 8004806:	6938      	ldr	r0, [r7, #16]
 8004808:	f7ff f810 	bl	800382c <_SendPacket>
      RECORD_END();
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004812:	bf00      	nop
 8004814:	3730      	adds	r7, #48	; 0x30
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2001528c 	.word	0x2001528c
 8004820:	20015294 	.word	0x20015294

08004824 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00f      	beq.n	8004852 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f2      	bne.n	8004838 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	2001528c 	.word	0x2001528c

08004860 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004866:	f3ef 8311 	mrs	r3, BASEPRI
 800486a:	f04f 0120 	mov.w	r1, #32
 800486e:	f381 8811 	msr	BASEPRI, r1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	4817      	ldr	r0, [pc, #92]	; (80048d4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004876:	f7fe ff00 	bl	800367a <_PreparePacket>
 800487a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e00b      	b.n	80048a4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	6179      	str	r1, [r7, #20]
 8004896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	09db      	lsrs	r3, r3, #7
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b7f      	cmp	r3, #127	; 0x7f
 80048a8:	d8f0      	bhi.n	800488c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	617a      	str	r2, [r7, #20]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80048ba:	221b      	movs	r2, #27
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	f7fe ffb4 	bl	800382c <_SendPacket>
  RECORD_END();
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f383 8811 	msr	BASEPRI, r3
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20015294 	.word	0x20015294
 80048d8:	20015290 	.word	0x20015290

080048dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048e4:	f3ef 8311 	mrs	r3, BASEPRI
 80048e8:	f04f 0120 	mov.w	r1, #32
 80048ec:	f381 8811 	msr	BASEPRI, r1
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	4827      	ldr	r0, [pc, #156]	; (8004990 <SEGGER_SYSVIEW_Warn+0xb4>)
 80048f4:	f7fe fec1 	bl	800367a <_PreparePacket>
 80048f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048fa:	2280      	movs	r2, #128	; 0x80
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	6938      	ldr	r0, [r7, #16]
 8004900:	f7fe fe6e 	bl	80035e0 <_EncodeStr>
 8004904:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	2301      	movs	r3, #1
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	e00b      	b.n	8004928 <SEGGER_SYSVIEW_Warn+0x4c>
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	6279      	str	r1, [r7, #36]	; 0x24
 800491a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	09db      	lsrs	r3, r3, #7
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b7f      	cmp	r3, #127	; 0x7f
 800492c:	d8f0      	bhi.n	8004910 <SEGGER_SYSVIEW_Warn+0x34>
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	627a      	str	r2, [r7, #36]	; 0x24
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e00b      	b.n	8004960 <SEGGER_SYSVIEW_Warn+0x84>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	61f9      	str	r1, [r7, #28]
 8004952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	09db      	lsrs	r3, r3, #7
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b7f      	cmp	r3, #127	; 0x7f
 8004964:	d8f0      	bhi.n	8004948 <SEGGER_SYSVIEW_Warn+0x6c>
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	61fa      	str	r2, [r7, #28]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004976:	221a      	movs	r2, #26
 8004978:	68f9      	ldr	r1, [r7, #12]
 800497a:	6938      	ldr	r0, [r7, #16]
 800497c:	f7fe ff56 	bl	800382c <_SendPacket>
  RECORD_END();
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f383 8811 	msr	BASEPRI, r3
}
 8004986:	bf00      	nop
 8004988:	3728      	adds	r7, #40	; 0x28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20015294 	.word	0x20015294

08004994 <main>:
//GLOBAL variable section
char usr_msg[250] = {0};
uint8_t UART_ACCESS_KEY = AVAILABLE;

int main(void)
{
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af02      	add	r7, sp, #8
#ifdef USE_SEMIHOSTING
	initialise_monitor_handles();
	puts("This is hello world example code");
#endif

	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL
 800499a:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <main+0x78>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <main+0x78>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6013      	str	r3, [r2, #0]

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 80049a6:	f7fb fd13 	bl	80003d0 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 80049aa:	f000 f933 	bl	8004c14 <SystemCoreClockUpdate>

	prvSetupHardware();
 80049ae:	f000 f8cd 	bl	8004b4c <prvSetupHardware>

	sprintf(usr_msg, "This is hello world app starting\r\n");
 80049b2:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <main+0x7c>)
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <main+0x80>)
 80049b6:	4614      	mov	r4, r2
 80049b8:	461d      	mov	r5, r3
 80049ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	8022      	strh	r2, [r4, #0]
 80049c8:	3402      	adds	r4, #2
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	7023      	strb	r3, [r4, #0]
	printmsg(usr_msg);
 80049ce:	4810      	ldr	r0, [pc, #64]	; (8004a10 <main+0x7c>)
 80049d0:	f000 f8c2 	bl	8004b58 <printmsg>

	//start recording
	SEGGER_SYSVIEW_Conf();
 80049d4:	f7fe faa8 	bl	8002f28 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80049d8:	f7ff fa06 	bl	8003de8 <SEGGER_SYSVIEW_Start>

	//3. lets create 2 tasks, task-1 and task-2
	xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle1 );
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <main+0x84>)
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	2302      	movs	r3, #2
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	2282      	movs	r2, #130	; 0x82
 80049e8:	490c      	ldr	r1, [pc, #48]	; (8004a1c <main+0x88>)
 80049ea:	480d      	ldr	r0, [pc, #52]	; (8004a20 <main+0x8c>)
 80049ec:	f7fc fcea 	bl	80013c4 <xTaskCreate>

	xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle2 );
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <main+0x90>)
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	2302      	movs	r3, #2
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	2282      	movs	r2, #130	; 0x82
 80049fc:	490a      	ldr	r1, [pc, #40]	; (8004a28 <main+0x94>)
 80049fe:	480b      	ldr	r0, [pc, #44]	; (8004a2c <main+0x98>)
 8004a00:	f7fc fce0 	bl	80013c4 <xTaskCreate>

	//4. start the scheduler
	vTaskStartScheduler();
 8004a04:	f7fc fe3e 	bl	8001684 <vTaskStartScheduler>


	//you will never return here
	for(;;);
 8004a08:	e7fe      	b.n	8004a08 <main+0x74>
 8004a0a:	bf00      	nop
 8004a0c:	e0001000 	.word	0xe0001000
 8004a10:	20015380 	.word	0x20015380
 8004a14:	08005014 	.word	0x08005014
 8004a18:	20015378 	.word	0x20015378
 8004a1c:	08005038 	.word	0x08005038
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	2001537c 	.word	0x2001537c
 8004a28:	08005040 	.word	0x08005040
 8004a2c:	08004a71 	.word	0x08004a71

08004a30 <vTask1_handler>:
}


void vTask1_handler (void *params)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	while(1){	//added key for not corruption btw task1 and task2
		if(UART_ACCESS_KEY == AVAILABLE){
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vTask1_handler+0x34>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d1fb      	bne.n	8004a38 <vTask1_handler+0x8>
			UART_ACCESS_KEY = NOT_AVAILABLE;
 8004a40:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <vTask1_handler+0x34>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
			printmsg("Hello world: from task1\r\n");
 8004a46:	4808      	ldr	r0, [pc, #32]	; (8004a68 <vTask1_handler+0x38>)
 8004a48:	f000 f886 	bl	8004b58 <printmsg>
			UART_ACCESS_KEY = AVAILABLE;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <vTask1_handler+0x34>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
			//taskyield yapılmasının sebebi sadece task1 çalışıyordu
			//ve belki de key, available olduğunda task2 task1 ı preempt etmiyordu
			taskYIELD();	// leaving CPU by manually triggering the context switch
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <vTask1_handler+0x3c>)
 8004a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == AVAILABLE){
 8004a62:	e7e9      	b.n	8004a38 <vTask1_handler+0x8>
 8004a64:	20000014 	.word	0x20000014
 8004a68:	08005048 	.word	0x08005048
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <vTask2_handler>:
		}
	}
}

void vTask2_handler (void *params)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	while(1){
		if(UART_ACCESS_KEY == AVAILABLE){
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <vTask2_handler+0x34>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d1fb      	bne.n	8004a78 <vTask2_handler+0x8>
			UART_ACCESS_KEY = NOT_AVAILABLE;
 8004a80:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <vTask2_handler+0x34>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
			printmsg("Hello world: from task2\r\n");
 8004a86:	4808      	ldr	r0, [pc, #32]	; (8004aa8 <vTask2_handler+0x38>)
 8004a88:	f000 f866 	bl	8004b58 <printmsg>
			UART_ACCESS_KEY = AVAILABLE;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <vTask2_handler+0x34>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <vTask2_handler+0x3c>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == AVAILABLE){
 8004aa2:	e7e9      	b.n	8004a78 <vTask2_handler+0x8>
 8004aa4:	20000014 	.word	0x20000014
 8004aa8:	08005064 	.word	0x08005064
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <prvSetupUart>:
		}
	}
}

static void prvSetupUart(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004abc:	f7fb fd88 	bl	80005d0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	2008      	movs	r0, #8
 8004ac4:	f7fb fd64 	bl	8000590 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	2208      	movs	r2, #8
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fa19 	bl	8004f08 <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8004ad6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ada:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 8004adc:	2302      	movs	r3, #2
 8004ade:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4816      	ldr	r0, [pc, #88]	; (8004b44 <prvSetupUart+0x94>)
 8004aec:	f7fb fb98 	bl	8000220 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PA8
 8004af0:	2207      	movs	r2, #7
 8004af2:	2108      	movs	r1, #8
 8004af4:	4813      	ldr	r0, [pc, #76]	; (8004b44 <prvSetupUart+0x94>)
 8004af6:	f7fb fc21 	bl	800033c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PA9
 8004afa:	2207      	movs	r2, #7
 8004afc:	2109      	movs	r1, #9
 8004afe:	4811      	ldr	r0, [pc, #68]	; (8004b44 <prvSetupUart+0x94>)
 8004b00:	f7fb fc1c 	bl	800033c <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 8004b04:	463b      	mov	r3, r7
 8004b06:	2210      	movs	r2, #16
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f9fc 	bl	8004f08 <memset>

	uart3_init.USART_BaudRate = 115200;
 8004b10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004b14:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004b16:	2300      	movs	r3, #0
 8004b18:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004b1a:	230c      	movs	r3, #12
 8004b1c:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 8004b22:	2300      	movs	r3, #0
 8004b24:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 8004b26:	2300      	movs	r3, #0
 8004b28:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4806      	ldr	r0, [pc, #24]	; (8004b48 <prvSetupUart+0x98>)
 8004b30:	f7fb fd6e 	bl	8000610 <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 8004b34:	2101      	movs	r1, #1
 8004b36:	4804      	ldr	r0, [pc, #16]	; (8004b48 <prvSetupUart+0x98>)
 8004b38:	f7fb fe24 	bl	8000784 <USART_Cmd>

}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40020c00 	.word	0x40020c00
 8004b48:	40004800 	.word	0x40004800

08004b4c <prvSetupHardware>:

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
	//Setup UART3
	prvSetupUart();
 8004b50:	f7ff ffae 	bl	8004ab0 <prvSetupUart>

}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <printmsg>:

void printmsg(char *msg)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++){
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e013      	b.n	8004b8e <printmsg+0x36>
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != SET);
 8004b66:	bf00      	nop
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	480e      	ldr	r0, [pc, #56]	; (8004ba4 <printmsg+0x4c>)
 8004b6c:	f7fb fe3c 	bl	80007e8 <USART_GetFlagStatus>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d1f8      	bne.n	8004b68 <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4619      	mov	r1, r3
 8004b82:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <printmsg+0x4c>)
 8004b84:	f7fb fe1e 	bl	80007c4 <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++){
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fb fb3e 	bl	8000210 <strlen>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d3e4      	bcc.n	8004b66 <printmsg+0xe>
	}

}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40004800 	.word	0x40004800

08004ba8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bac:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <SystemInit+0x60>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <SystemInit+0x60>)
 8004bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004bbc:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <SystemInit+0x64>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <SystemInit+0x64>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <SystemInit+0x64>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <SystemInit+0x64>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <SystemInit+0x64>)
 8004bd4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <SystemInit+0x64>)
 8004be0:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <SystemInit+0x68>)
 8004be2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <SystemInit+0x64>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <SystemInit+0x64>)
 8004bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <SystemInit+0x64>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004bf6:	f000 f889 	bl	8004d0c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bfa:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <SystemInit+0x60>)
 8004bfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c00:	609a      	str	r2, [r3, #8]
#endif
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	e000ed00 	.word	0xe000ed00
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	24003010 	.word	0x24003010

08004c14 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	2302      	movs	r3, #2
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004c2e:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <SystemCoreClockUpdate+0xe4>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d007      	beq.n	8004c4e <SystemCoreClockUpdate+0x3a>
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d009      	beq.n	8004c56 <SystemCoreClockUpdate+0x42>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d13d      	bne.n	8004cc2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004c46:	4b2d      	ldr	r3, [pc, #180]	; (8004cfc <SystemCoreClockUpdate+0xe8>)
 8004c48:	4a2d      	ldr	r2, [pc, #180]	; (8004d00 <SystemCoreClockUpdate+0xec>)
 8004c4a:	601a      	str	r2, [r3, #0]
      break;
 8004c4c:	e03d      	b.n	8004cca <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004c4e:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <SystemCoreClockUpdate+0xe8>)
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <SystemCoreClockUpdate+0xf0>)
 8004c52:	601a      	str	r2, [r3, #0]
      break;
 8004c54:	e039      	b.n	8004cca <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <SystemCoreClockUpdate+0xe4>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	0d9b      	lsrs	r3, r3, #22
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c62:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <SystemCoreClockUpdate+0xe4>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c6a:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004c72:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <SystemCoreClockUpdate+0xf0>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <SystemCoreClockUpdate+0xe4>)
 8004c7c:	6852      	ldr	r2, [r2, #4]
 8004c7e:	0992      	lsrs	r2, r2, #6
 8004c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e00b      	b.n	8004ca4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <SystemCoreClockUpdate+0xec>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <SystemCoreClockUpdate+0xe4>)
 8004c96:	6852      	ldr	r2, [r2, #4]
 8004c98:	0992      	lsrs	r2, r2, #6
 8004c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <SystemCoreClockUpdate+0xe4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	4a0f      	ldr	r2, [pc, #60]	; (8004cfc <SystemCoreClockUpdate+0xe8>)
 8004cbe:	6013      	str	r3, [r2, #0]
      break;
 8004cc0:	e003      	b.n	8004cca <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <SystemCoreClockUpdate+0xe8>)
 8004cc4:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <SystemCoreClockUpdate+0xec>)
 8004cc6:	601a      	str	r2, [r3, #0]
      break;
 8004cc8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <SystemCoreClockUpdate+0xe4>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <SystemCoreClockUpdate+0xf4>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <SystemCoreClockUpdate+0xe8>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <SystemCoreClockUpdate+0xe8>)
 8004ce8:	6013      	str	r3, [r2, #0]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	20000018 	.word	0x20000018
 8004d00:	00f42400 	.word	0x00f42400
 8004d04:	017d7840 	.word	0x017d7840
 8004d08:	2000001c 	.word	0x2000001c

08004d0c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	2300      	movs	r3, #0
 8004d18:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004d1a:	4b43      	ldr	r3, [pc, #268]	; (8004e28 <SetSysClock+0x11c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a42      	ldr	r2, [pc, #264]	; (8004e28 <SetSysClock+0x11c>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004d26:	4b40      	ldr	r3, [pc, #256]	; (8004e28 <SetSysClock+0x11c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3301      	adds	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <SetSysClock+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004d42:	d1f0      	bne.n	8004d26 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004d44:	4b38      	ldr	r3, [pc, #224]	; (8004e28 <SetSysClock+0x11c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004d50:	2301      	movs	r3, #1
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	e001      	b.n	8004d5a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004d56:	2300      	movs	r3, #0
 8004d58:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d15c      	bne.n	8004e1a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004d60:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <SetSysClock+0x11c>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <SetSysClock+0x11c>)
 8004d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8004d6c:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <SetSysClock+0x120>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2e      	ldr	r2, [pc, #184]	; (8004e2c <SetSysClock+0x120>)
 8004d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d76:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004d78:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <SetSysClock+0x11c>)
 8004d7a:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <SetSysClock+0x11c>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004d80:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <SetSysClock+0x11c>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a28      	ldr	r2, [pc, #160]	; (8004e28 <SetSysClock+0x11c>)
 8004d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004d8c:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <SetSysClock+0x11c>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <SetSysClock+0x11c>)
 8004d92:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004d96:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004d98:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <SetSysClock+0x11c>)
 8004d9a:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <SetSysClock+0x124>)
 8004d9c:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004d9e:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <SetSysClock+0x11c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <SetSysClock+0x11c>)
 8004da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004da8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004daa:	bf00      	nop
 8004dac:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <SetSysClock+0x11c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f9      	beq.n	8004dac <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <SetSysClock+0x120>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	; (8004e2c <SetSysClock+0x120>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8004dc4:	bf00      	nop
 8004dc6:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <SetSysClock+0x120>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f9      	beq.n	8004dc6 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8004dd2:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <SetSysClock+0x120>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a15      	ldr	r2, [pc, #84]	; (8004e2c <SetSysClock+0x120>)
 8004dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ddc:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8004dde:	bf00      	nop
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <SetSysClock+0x120>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f9      	beq.n	8004de0 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <SetSysClock+0x128>)
 8004dee:	f240 7205 	movw	r2, #1797	; 0x705
 8004df2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <SetSysClock+0x11c>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <SetSysClock+0x11c>)
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <SetSysClock+0x11c>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <SetSysClock+0x11c>)
 8004e06:	f043 0302 	orr.w	r3, r3, #2
 8004e0a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004e0c:	bf00      	nop
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <SetSysClock+0x11c>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d1f9      	bne.n	8004e0e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	07405a19 	.word	0x07405a19
 8004e34:	40023c00 	.word	0x40023c00

08004e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004e38:	480d      	ldr	r0, [pc, #52]	; (8004e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004e3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e3c:	480d      	ldr	r0, [pc, #52]	; (8004e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e3e:	490e      	ldr	r1, [pc, #56]	; (8004e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e40:	4a0e      	ldr	r2, [pc, #56]	; (8004e7c <LoopForever+0xe>)
  movs r3, #0
 8004e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e44:	e002      	b.n	8004e4c <LoopCopyDataInit>

08004e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e4a:	3304      	adds	r3, #4

08004e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e50:	d3f9      	bcc.n	8004e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e52:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e54:	4c0b      	ldr	r4, [pc, #44]	; (8004e84 <LoopForever+0x16>)
  movs r3, #0
 8004e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e58:	e001      	b.n	8004e5e <LoopFillZerobss>

08004e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e5c:	3204      	adds	r2, #4

08004e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e60:	d3fb      	bcc.n	8004e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004e62:	f7ff fea1 	bl	8004ba8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004e66:	f000 f811 	bl	8004e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e6a:	f7ff fd93 	bl	8004994 <main>

08004e6e <LoopForever>:

LoopForever:
    b LoopForever
 8004e6e:	e7fe      	b.n	8004e6e <LoopForever>
  ldr   r0, =_estack
 8004e70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e78:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8004e7c:	0800509c 	.word	0x0800509c
  ldr r2, =_sbss
 8004e80:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8004e84:	20015564 	.word	0x20015564

08004e88 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e88:	e7fe      	b.n	8004e88 <ADC_IRQHandler>
	...

08004e8c <__libc_init_array>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4e0d      	ldr	r6, [pc, #52]	; (8004ec4 <__libc_init_array+0x38>)
 8004e90:	4c0d      	ldr	r4, [pc, #52]	; (8004ec8 <__libc_init_array+0x3c>)
 8004e92:	1ba4      	subs	r4, r4, r6
 8004e94:	10a4      	asrs	r4, r4, #2
 8004e96:	2500      	movs	r5, #0
 8004e98:	42a5      	cmp	r5, r4
 8004e9a:	d109      	bne.n	8004eb0 <__libc_init_array+0x24>
 8004e9c:	4e0b      	ldr	r6, [pc, #44]	; (8004ecc <__libc_init_array+0x40>)
 8004e9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ed0 <__libc_init_array+0x44>)
 8004ea0:	f000 f83a 	bl	8004f18 <_init>
 8004ea4:	1ba4      	subs	r4, r4, r6
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	2500      	movs	r5, #0
 8004eaa:	42a5      	cmp	r5, r4
 8004eac:	d105      	bne.n	8004eba <__libc_init_array+0x2e>
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eb4:	4798      	blx	r3
 8004eb6:	3501      	adds	r5, #1
 8004eb8:	e7ee      	b.n	8004e98 <__libc_init_array+0xc>
 8004eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ebe:	4798      	blx	r3
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	e7f2      	b.n	8004eaa <__libc_init_array+0x1e>
 8004ec4:	08005094 	.word	0x08005094
 8004ec8:	08005094 	.word	0x08005094
 8004ecc:	08005094 	.word	0x08005094
 8004ed0:	08005098 	.word	0x08005098

08004ed4 <memcmp>:
 8004ed4:	b530      	push	{r4, r5, lr}
 8004ed6:	2400      	movs	r4, #0
 8004ed8:	42a2      	cmp	r2, r4
 8004eda:	d101      	bne.n	8004ee0 <memcmp+0xc>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e007      	b.n	8004ef0 <memcmp+0x1c>
 8004ee0:	5d03      	ldrb	r3, [r0, r4]
 8004ee2:	3401      	adds	r4, #1
 8004ee4:	190d      	adds	r5, r1, r4
 8004ee6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004eea:	42ab      	cmp	r3, r5
 8004eec:	d0f4      	beq.n	8004ed8 <memcmp+0x4>
 8004eee:	1b58      	subs	r0, r3, r5
 8004ef0:	bd30      	pop	{r4, r5, pc}

08004ef2 <memcpy>:
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	1e43      	subs	r3, r0, #1
 8004ef6:	440a      	add	r2, r1
 8004ef8:	4291      	cmp	r1, r2
 8004efa:	d100      	bne.n	8004efe <memcpy+0xc>
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f06:	e7f7      	b.n	8004ef8 <memcpy+0x6>

08004f08 <memset>:
 8004f08:	4402      	add	r2, r0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d100      	bne.n	8004f12 <memset+0xa>
 8004f10:	4770      	bx	lr
 8004f12:	f803 1b01 	strb.w	r1, [r3], #1
 8004f16:	e7f9      	b.n	8004f0c <memset+0x4>

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
