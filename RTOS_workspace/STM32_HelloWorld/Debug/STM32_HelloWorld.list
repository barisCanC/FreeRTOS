
STM32_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f4  080041f4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080041f4  080041f4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041f4  080041f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080041fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000154d8  20000090  0800428c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015568  0800428c  00025568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de39  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d56  00000000  00000000  0002def9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a06  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5be  00000000  00000000  00033b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075d2d  00000000  00000000  0003f0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4df9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d8  00000000  00000000  000b4e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004054 	.word	0x08004054

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08004054 	.word	0x08004054

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	460b      	mov	r3, r1
 80003e8:	807b      	strh	r3, [r7, #2]
 80003ea:	4613      	mov	r3, r2
 80003ec:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003f6:	787a      	ldrb	r2, [r7, #1]
 80003f8:	887b      	ldrh	r3, [r7, #2]
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	fa02 f303 	lsl.w	r3, r2, r3
 8000404:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000406:	887b      	ldrh	r3, [r7, #2]
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b29b      	uxth	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3208      	adds	r2, #8
 8000412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000416:	887b      	ldrh	r3, [r7, #2]
 8000418:	f003 0307 	and.w	r3, r3, #7
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	210f      	movs	r1, #15
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	43db      	mvns	r3, r3
 8000426:	8879      	ldrh	r1, [r7, #2]
 8000428:	08c9      	lsrs	r1, r1, #3
 800042a:	b289      	uxth	r1, r1
 800042c:	4608      	mov	r0, r1
 800042e:	ea02 0103 	and.w	r1, r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f100 0208 	add.w	r2, r0, #8
 8000438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800043c:	887b      	ldrh	r3, [r7, #2]
 800043e:	08db      	lsrs	r3, r3, #3
 8000440:	b29b      	uxth	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3208      	adds	r2, #8
 8000448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	4313      	orrs	r3, r2
 8000450:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000452:	887b      	ldrh	r3, [r7, #2]
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	b29b      	uxth	r3, r3
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3208      	adds	r2, #8
 800045e:	68b9      	ldr	r1, [r7, #8]
 8000460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <RCC_DeInit+0x60>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <RCC_DeInit+0x60>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <RCC_DeInit+0x60>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <RCC_DeInit+0x60>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <RCC_DeInit+0x60>)
 800048c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000490:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000494:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <RCC_DeInit+0x60>)
 8000498:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <RCC_DeInit+0x64>)
 800049a:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <RCC_DeInit+0x60>)
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <RCC_DeInit+0x68>)
 80004a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <RCC_DeInit+0x60>)
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <RCC_DeInit+0x6c>)
 80004a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <RCC_DeInit+0x60>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <RCC_DeInit+0x60>)
 80004b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <RCC_DeInit+0x60>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <RCC_DeInit+0x60>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800
 80004d4:	24003010 	.word	0x24003010
 80004d8:	20003000 	.word	0x20003000
 80004dc:	24003000 	.word	0x24003000

080004e0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b089      	sub	sp, #36	; 0x24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
 80004f4:	2302      	movs	r3, #2
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	2302      	movs	r3, #2
 80004fe:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <RCC_GetClocksFreq+0x14c>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	2b08      	cmp	r3, #8
 800050e:	d011      	beq.n	8000534 <RCC_GetClocksFreq+0x54>
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	2b08      	cmp	r3, #8
 8000514:	d844      	bhi.n	80005a0 <RCC_GetClocksFreq+0xc0>
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d003      	beq.n	8000524 <RCC_GetClocksFreq+0x44>
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	2b04      	cmp	r3, #4
 8000520:	d004      	beq.n	800052c <RCC_GetClocksFreq+0x4c>
 8000522:	e03d      	b.n	80005a0 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a42      	ldr	r2, [pc, #264]	; (8000630 <RCC_GetClocksFreq+0x150>)
 8000528:	601a      	str	r2, [r3, #0]
    break;
 800052a:	e03d      	b.n	80005a8 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a41      	ldr	r2, [pc, #260]	; (8000634 <RCC_GetClocksFreq+0x154>)
 8000530:	601a      	str	r2, [r3, #0]
    break;
 8000532:	e039      	b.n	80005a8 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000534:	4b3d      	ldr	r3, [pc, #244]	; (800062c <RCC_GetClocksFreq+0x14c>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	0d9b      	lsrs	r3, r3, #22
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000540:	4b3a      	ldr	r3, [pc, #232]	; (800062c <RCC_GetClocksFreq+0x14c>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000548:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00c      	beq.n	800056a <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000550:	4a38      	ldr	r2, [pc, #224]	; (8000634 <RCC_GetClocksFreq+0x154>)
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	fbb2 f3f3 	udiv	r3, r2, r3
 8000558:	4a34      	ldr	r2, [pc, #208]	; (800062c <RCC_GetClocksFreq+0x14c>)
 800055a:	6852      	ldr	r2, [r2, #4]
 800055c:	0992      	lsrs	r2, r2, #6
 800055e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	61fb      	str	r3, [r7, #28]
 8000568:	e00b      	b.n	8000582 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800056a:	4a31      	ldr	r2, [pc, #196]	; (8000630 <RCC_GetClocksFreq+0x150>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4a2e      	ldr	r2, [pc, #184]	; (800062c <RCC_GetClocksFreq+0x14c>)
 8000574:	6852      	ldr	r2, [r2, #4]
 8000576:	0992      	lsrs	r2, r2, #6
 8000578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800057c:	fb02 f303 	mul.w	r3, r2, r3
 8000580:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000582:	4b2a      	ldr	r3, [pc, #168]	; (800062c <RCC_GetClocksFreq+0x14c>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	0c1b      	lsrs	r3, r3, #16
 8000588:	f003 0303 	and.w	r3, r3, #3
 800058c:	3301      	adds	r3, #1
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000592:	69fa      	ldr	r2, [r7, #28]
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	fbb2 f2f3 	udiv	r2, r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
    break;
 800059e:	e003      	b.n	80005a8 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a23      	ldr	r2, [pc, #140]	; (8000630 <RCC_GetClocksFreq+0x150>)
 80005a4:	601a      	str	r2, [r3, #0]
    break;
 80005a6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <RCC_GetClocksFreq+0x14c>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	091b      	lsrs	r3, r3, #4
 80005b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005b8:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <RCC_GetClocksFreq+0x158>)
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	40da      	lsrs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <RCC_GetClocksFreq+0x14c>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80005d8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	0a9b      	lsrs	r3, r3, #10
 80005de:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005e0:	4a15      	ldr	r2, [pc, #84]	; (8000638 <RCC_GetClocksFreq+0x158>)
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <RCC_GetClocksFreq+0x14c>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000600:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	0b5b      	lsrs	r3, r3, #13
 8000606:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <RCC_GetClocksFreq+0x158>)
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	40da      	lsrs	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	60da      	str	r2, [r3, #12]
}
 8000620:	bf00      	nop
 8000622:	3724      	adds	r7, #36	; 0x24
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40023800 	.word	0x40023800
 8000630:	00f42400 	.word	0x00f42400
 8000634:	017d7840 	.word	0x017d7840
 8000638:	20000000 	.word	0x20000000

0800063c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4313      	orrs	r3, r2
 8000658:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800065a:	e006      	b.n	800066a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <RCC_AHB1PeriphClockCmd+0x3c>)
 800065e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	43db      	mvns	r3, r3
 8000664:	4904      	ldr	r1, [pc, #16]	; (8000678 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000666:	4013      	ands	r3, r2
 8000668:	630b      	str	r3, [r1, #48]	; 0x30
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4313      	orrs	r3, r2
 8000698:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800069a:	e006      	b.n	80006aa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <RCC_APB1PeriphClockCmd+0x3c>)
 800069e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4904      	ldr	r1, [pc, #16]	; (80006b8 <RCC_APB1PeriphClockCmd+0x3c>)
 80006a6:	4013      	ands	r3, r2
 80006a8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	8a1b      	ldrh	r3, [r3, #16]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	88db      	ldrh	r3, [r3, #6]
 80006ea:	461a      	mov	r2, r3
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	4313      	orrs	r3, r2
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	899b      	ldrh	r3, [r3, #12]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000708:	f023 030c 	bic.w	r3, r3, #12
 800070c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	889a      	ldrh	r2, [r3, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	891b      	ldrh	r3, [r3, #8]
 8000716:	4313      	orrs	r3, r2
 8000718:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800071e:	4313      	orrs	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	4313      	orrs	r3, r2
 8000728:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072c:	b29a      	uxth	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	8a9b      	ldrh	r3, [r3, #20]
 8000736:	b29b      	uxth	r3, r3
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000740:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	461a      	mov	r2, r3
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	4313      	orrs	r3, r2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fec0 	bl	80004e0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a30      	ldr	r2, [pc, #192]	; (8000824 <USART_Init+0x168>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d003      	beq.n	8000770 <USART_Init+0xb4>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <USART_Init+0x16c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d102      	bne.n	8000776 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	e001      	b.n	800077a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	899b      	ldrh	r3, [r3, #12]
 800077e:	b29b      	uxth	r3, r3
 8000780:	b21b      	sxth	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	da0c      	bge.n	80007a0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000786:	6a3a      	ldr	r2, [r7, #32]
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	009a      	lsls	r2, r3, #2
 8000790:	441a      	add	r2, r3
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	fbb2 f3f3 	udiv	r3, r2, r3
 800079c:	61fb      	str	r3, [r7, #28]
 800079e:	e00b      	b.n	80007b8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80007a0:	6a3a      	ldr	r2, [r7, #32]
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	009a      	lsls	r2, r3, #2
 80007aa:	441a      	add	r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <USART_Init+0x170>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	095b      	lsrs	r3, r3, #5
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	091b      	lsrs	r3, r3, #4
 80007ca:	2264      	movs	r2, #100	; 0x64
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	69fa      	ldr	r2, [r7, #28]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b21b      	sxth	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da0c      	bge.n	80007fc <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	3332      	adds	r3, #50	; 0x32
 80007e8:	4a10      	ldr	r2, [pc, #64]	; (800082c <USART_Init+0x170>)
 80007ea:	fba2 2303 	umull	r2, r3, r2, r3
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007f6:	4313      	orrs	r3, r2
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
 80007fa:	e00b      	b.n	8000814 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	3332      	adds	r3, #50	; 0x32
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <USART_Init+0x170>)
 8000804:	fba2 2303 	umull	r2, r3, r2, r3
 8000808:	095b      	lsrs	r3, r3, #5
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000810:	4313      	orrs	r3, r2
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	b29a      	uxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	811a      	strh	r2, [r3, #8]
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40011000 	.word	0x40011000
 8000828:	40011400 	.word	0x40011400
 800082c:	51eb851f 	.word	0x51eb851f

08000830 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d008      	beq.n	8000854 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	899b      	ldrh	r3, [r3, #12]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084c:	b29a      	uxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000852:	e007      	b.n	8000864 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	899b      	ldrh	r3, [r3, #12]
 8000858:	b29b      	uxth	r3, r3
 800085a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800085e:	b29a      	uxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	819a      	strh	r2, [r3, #12]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000882:	b29a      	uxth	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	809a      	strh	r2, [r3, #4]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	4013      	ands	r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	e001      	b.n	80008be <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f103 0208 	add.w	r2, r3, #8
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295
 80008e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f103 0208 	add.w	r2, r3, #8
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f103 0208 	add.w	r2, r3, #8
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	6892      	ldr	r2, [r2, #8]
 8000984:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	6852      	ldr	r2, [r2, #4]
 800098e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	d103      	bne.n	80009a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1e5a      	subs	r2, r3, #1
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b08c      	sub	sp, #48	; 0x30
 80009c6:	af04      	add	r7, sp, #16
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4613      	mov	r3, r2
 80009d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fe9e 	bl	8001718 <pvPortMalloc>
 80009dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00e      	beq.n	8000a02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80009e4:	2058      	movs	r0, #88	; 0x58
 80009e6:	f000 fe97 	bl	8001718 <pvPortMalloc>
 80009ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
 80009f8:	e005      	b.n	8000a06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f000 ff50 	bl	80018a0 <vPortFree>
 8000a00:	e001      	b.n	8000a06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d013      	beq.n	8000a34 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a0c:	88fa      	ldrh	r2, [r7, #6]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9303      	str	r3, [sp, #12]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f80e 	bl	8000a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000a28:	69f8      	ldr	r0, [r7, #28]
 8000a2a:	f000 f8a1 	bl	8000b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	e002      	b.n	8000a3a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10a      	bne.n	8000a6e <prvInitialiseNewTask+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5c:	f383 8811 	msr	BASEPRI, r3
 8000a60:	f3bf 8f6f 	isb	sy
 8000a64:	f3bf 8f4f 	dsb	sy
 8000a68:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a6a:	bf00      	nop
 8000a6c:	e7fe      	b.n	8000a6c <prvInitialiseNewTask+0x28>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	461a      	mov	r2, r3
 8000a78:	21a5      	movs	r1, #165	; 0xa5
 8000a7a:	f002 feb5 	bl	80037e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	f023 0307 	bic.w	r3, r3, #7
 8000a96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00a      	beq.n	8000ab8 <prvInitialiseNewTask+0x74>
	__asm volatile
 8000aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa6:	f383 8811 	msr	BASEPRI, r3
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	f3bf 8f4f 	dsb	sy
 8000ab2:	613b      	str	r3, [r7, #16]
}
 8000ab4:	bf00      	nop
 8000ab6:	e7fe      	b.n	8000ab6 <prvInitialiseNewTask+0x72>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	e012      	b.n	8000ae4 <prvInitialiseNewTask+0xa0>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	7819      	ldrb	r1, [r3, #0]
 8000ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	4413      	add	r3, r2
 8000acc:	3334      	adds	r3, #52	; 0x34
 8000ace:	460a      	mov	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <prvInitialiseNewTask+0xa8>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	2b09      	cmp	r3, #9
 8000ae8:	d9e9      	bls.n	8000abe <prvInitialiseNewTask+0x7a>
 8000aea:	e000      	b.n	8000aee <prvInitialiseNewTask+0xaa>
		{
			break;
 8000aec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d901      	bls.n	8000b00 <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000afc:	2304      	movs	r3, #4
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b0a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0e:	2200      	movs	r2, #0
 8000b10:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b14:	3304      	adds	r3, #4
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fef8 	bl	800090c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1e:	3318      	adds	r3, #24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fef3 	bl	800090c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	f1c3 0205 	rsb	r2, r3, #5
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3e:	2200      	movs	r2, #0
 8000b40:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	68f9      	ldr	r1, [r7, #12]
 8000b4e:	69b8      	ldr	r0, [r7, #24]
 8000b50:	f000 fb8e 	bl	8001270 <pxPortInitialiseStack>
 8000b54:	4602      	mov	r2, r0
 8000b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b58:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000b70:	b5b0      	push	{r4, r5, r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000b78:	f000 fca4 	bl	80014c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <prvAddNewTaskToReadyList+0xfc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a3a      	ldr	r2, [pc, #232]	; (8000c6c <prvAddNewTaskToReadyList+0xfc>)
 8000b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <prvAddNewTaskToReadyList+0x100>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d109      	bne.n	8000ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000b8e:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <prvAddNewTaskToReadyList+0x100>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <prvAddNewTaskToReadyList+0xfc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d110      	bne.n	8000bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000b9c:	f000 faca 	bl	8001134 <prvInitialiseTaskLists>
 8000ba0:	e00d      	b.n	8000bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000ba2:	4b34      	ldr	r3, [pc, #208]	; (8000c74 <prvAddNewTaskToReadyList+0x104>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d109      	bne.n	8000bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <prvAddNewTaskToReadyList+0x100>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d802      	bhi.n	8000bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <prvAddNewTaskToReadyList+0x100>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <prvAddNewTaskToReadyList+0x108>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <prvAddNewTaskToReadyList+0x108>)
 8000bc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <prvAddNewTaskToReadyList+0x108>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d016      	beq.n	8000c04 <prvAddNewTaskToReadyList+0x94>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f947 	bl	8002e6c <SEGGER_SYSVIEW_OnTaskCreate>
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	461d      	mov	r5, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	1ae3      	subs	r3, r4, r3
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	462b      	mov	r3, r5
 8000c00:	f001 f80c 	bl	8001c1c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 f9b8 	bl	8002f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c10:	2201      	movs	r2, #1
 8000c12:	409a      	lsls	r2, r3
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <prvAddNewTaskToReadyList+0x10c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <prvAddNewTaskToReadyList+0x10c>)
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <prvAddNewTaskToReadyList+0x110>)
 8000c2c:	441a      	add	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3304      	adds	r3, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4610      	mov	r0, r2
 8000c36:	f7ff fe76 	bl	8000926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000c3a:	f000 fc73 	bl	8001524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <prvAddNewTaskToReadyList+0x104>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00e      	beq.n	8000c64 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <prvAddNewTaskToReadyList+0x100>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <prvAddNewTaskToReadyList+0x114>)
 8000c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	f3bf 8f4f 	dsb	sy
 8000c60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6c:	20000184 	.word	0x20000184
 8000c70:	200000ac 	.word	0x200000ac
 8000c74:	20000190 	.word	0x20000190
 8000c78:	200001a0 	.word	0x200001a0
 8000c7c:	2000018c 	.word	0x2000018c
 8000c80:	200000b0 	.word	0x200000b0
 8000c84:	e000ed04 	.word	0xe000ed04

08000c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <vTaskStartScheduler+0x94>)
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	2300      	movs	r3, #0
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2300      	movs	r3, #0
 8000c98:	2282      	movs	r2, #130	; 0x82
 8000c9a:	4921      	ldr	r1, [pc, #132]	; (8000d20 <vTaskStartScheduler+0x98>)
 8000c9c:	4821      	ldr	r0, [pc, #132]	; (8000d24 <vTaskStartScheduler+0x9c>)
 8000c9e:	f7ff fe90 	bl	80009c2 <xTaskCreate>
 8000ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d124      	bne.n	8000cf4 <vTaskStartScheduler+0x6c>
	__asm volatile
 8000caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cae:	f383 8811 	msr	BASEPRI, r3
 8000cb2:	f3bf 8f6f 	isb	sy
 8000cb6:	f3bf 8f4f 	dsb	sy
 8000cba:	60bb      	str	r3, [r7, #8]
}
 8000cbc:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <vTaskStartScheduler+0xa0>)
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <vTaskStartScheduler+0xa4>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <vTaskStartScheduler+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <vTaskStartScheduler+0xac>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <vTaskStartScheduler+0x94>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d102      	bne.n	8000ce4 <vTaskStartScheduler+0x5c>
 8000cde:	f002 f8a9 	bl	8002e34 <SEGGER_SYSVIEW_OnIdle>
 8000ce2:	e004      	b.n	8000cee <vTaskStartScheduler+0x66>
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <vTaskStartScheduler+0xac>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 f903 	bl	8002ef4 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000cee:	f000 fb47 	bl	8001380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000cf2:	e00e      	b.n	8000d12 <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfa:	d10a      	bne.n	8000d12 <vTaskStartScheduler+0x8a>
	__asm volatile
 8000cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d00:	f383 8811 	msr	BASEPRI, r3
 8000d04:	f3bf 8f6f 	isb	sy
 8000d08:	f3bf 8f4f 	dsb	sy
 8000d0c:	607b      	str	r3, [r7, #4]
}
 8000d0e:	bf00      	nop
 8000d10:	e7fe      	b.n	8000d10 <vTaskStartScheduler+0x88>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001a8 	.word	0x200001a8
 8000d20:	0800406c 	.word	0x0800406c
 8000d24:	08001105 	.word	0x08001105
 8000d28:	200001a4 	.word	0x200001a4
 8000d2c:	20000190 	.word	0x20000190
 8000d30:	20000188 	.word	0x20000188
 8000d34:	200000ac 	.word	0x200000ac

08000d38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <vTaskSuspendAll+0x18>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <vTaskSuspendAll+0x18>)
 8000d44:	6013      	str	r3, [r2, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200001ac 	.word	0x200001ac

08000d54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <xTaskResumeAll+0x11c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <xTaskResumeAll+0x2c>
	__asm volatile
 8000d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6e:	f383 8811 	msr	BASEPRI, r3
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	603b      	str	r3, [r7, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	e7fe      	b.n	8000d7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000d80:	f000 fba0 	bl	80014c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000d84:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <xTaskResumeAll+0x11c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a39      	ldr	r2, [pc, #228]	; (8000e70 <xTaskResumeAll+0x11c>)
 8000d8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d8e:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <xTaskResumeAll+0x11c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d165      	bne.n	8000e62 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d96:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <xTaskResumeAll+0x120>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d061      	beq.n	8000e62 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d9e:	e032      	b.n	8000e06 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000da0:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <xTaskResumeAll+0x124>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3318      	adds	r3, #24
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fdde 	bl	800096e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3304      	adds	r3, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fdd9 	bl	800096e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 f8dc 	bl	8002f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	2201      	movs	r2, #1
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <xTaskResumeAll+0x128>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4a2a      	ldr	r2, [pc, #168]	; (8000e7c <xTaskResumeAll+0x128>)
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <xTaskResumeAll+0x12c>)
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4610      	mov	r0, r2
 8000dee:	f7ff fd9a 	bl	8000926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <xTaskResumeAll+0x130>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d302      	bcc.n	8000e06 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <xTaskResumeAll+0x134>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <xTaskResumeAll+0x124>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1c8      	bne.n	8000da0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000e14:	f000 fa0c 	bl	8001230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <xTaskResumeAll+0x138>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d010      	beq.n	8000e46 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000e24:	f000 f848 	bl	8000eb8 <xTaskIncrementTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <xTaskResumeAll+0x134>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f1      	bne.n	8000e24 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <xTaskResumeAll+0x138>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <xTaskResumeAll+0x134>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d009      	beq.n	8000e62 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <xTaskResumeAll+0x13c>)
 8000e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	f3bf 8f4f 	dsb	sy
 8000e5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000e62:	f000 fb5f 	bl	8001524 <vPortExitCritical>

	return xAlreadyYielded;
 8000e66:	68bb      	ldr	r3, [r7, #8]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200001ac 	.word	0x200001ac
 8000e74:	20000184 	.word	0x20000184
 8000e78:	20000144 	.word	0x20000144
 8000e7c:	2000018c 	.word	0x2000018c
 8000e80:	200000b0 	.word	0x200000b0
 8000e84:	200000ac 	.word	0x200000ac
 8000e88:	20000198 	.word	0x20000198
 8000e8c:	20000194 	.word	0x20000194
 8000e90:	e000ed04 	.word	0xe000ed04

08000e94 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e9a:	f000 fbfd 	bl	8001698 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <xTaskGetTickCountFromISR+0x20>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000ea8:	683b      	ldr	r3, [r7, #0]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000188 	.word	0x20000188

08000eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ec2:	4b50      	ldr	r3, [pc, #320]	; (8001004 <xTaskIncrementTick+0x14c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 808c 	bne.w	8000fe4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <xTaskIncrementTick+0x150>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000ed4:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <xTaskIncrementTick+0x150>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d120      	bne.n	8000f22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8000ee0:	4b4a      	ldr	r3, [pc, #296]	; (800100c <xTaskIncrementTick+0x154>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00a      	beq.n	8000f00 <xTaskIncrementTick+0x48>
	__asm volatile
 8000eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eee:	f383 8811 	msr	BASEPRI, r3
 8000ef2:	f3bf 8f6f 	isb	sy
 8000ef6:	f3bf 8f4f 	dsb	sy
 8000efa:	603b      	str	r3, [r7, #0]
}
 8000efc:	bf00      	nop
 8000efe:	e7fe      	b.n	8000efe <xTaskIncrementTick+0x46>
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <xTaskIncrementTick+0x154>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b42      	ldr	r3, [pc, #264]	; (8001010 <xTaskIncrementTick+0x158>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a40      	ldr	r2, [pc, #256]	; (800100c <xTaskIncrementTick+0x154>)
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4a40      	ldr	r2, [pc, #256]	; (8001010 <xTaskIncrementTick+0x158>)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <xTaskIncrementTick+0x15c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <xTaskIncrementTick+0x15c>)
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	f000 f987 	bl	8001230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000f22:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <xTaskIncrementTick+0x160>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d34c      	bcc.n	8000fc6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <xTaskIncrementTick+0x154>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d104      	bne.n	8000f40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <xTaskIncrementTick+0x160>)
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	601a      	str	r2, [r3, #0]
					break;
 8000f3e:	e042      	b.n	8000fc6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <xTaskIncrementTick+0x154>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d203      	bcs.n	8000f60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000f58:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <xTaskIncrementTick+0x160>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000f5e:	e032      	b.n	8000fc6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3304      	adds	r3, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fd02 	bl	800096e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3318      	adds	r3, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fcf9 	bl	800096e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fffc 	bl	8002f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	2201      	movs	r2, #1
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <xTaskIncrementTick+0x164>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <xTaskIncrementTick+0x164>)
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <xTaskIncrementTick+0x168>)
 8000fa4:	441a      	add	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f7ff fcba 	bl	8000926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <xTaskIncrementTick+0x16c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3b5      	bcc.n	8000f2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fc4:	e7b2      	b.n	8000f2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <xTaskIncrementTick+0x16c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	4914      	ldr	r1, [pc, #80]	; (8001020 <xTaskIncrementTick+0x168>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d907      	bls.n	8000fee <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e004      	b.n	8000fee <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <xTaskIncrementTick+0x170>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <xTaskIncrementTick+0x170>)
 8000fec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <xTaskIncrementTick+0x174>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000ffa:	697b      	ldr	r3, [r7, #20]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200001ac 	.word	0x200001ac
 8001008:	20000188 	.word	0x20000188
 800100c:	2000013c 	.word	0x2000013c
 8001010:	20000140 	.word	0x20000140
 8001014:	2000019c 	.word	0x2000019c
 8001018:	200001a4 	.word	0x200001a4
 800101c:	2000018c 	.word	0x2000018c
 8001020:	200000b0 	.word	0x200000b0
 8001024:	200000ac 	.word	0x200000ac
 8001028:	20000194 	.word	0x20000194
 800102c:	20000198 	.word	0x20000198

08001030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <vTaskSwitchContext+0xbc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <vTaskSwitchContext+0xc0>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001044:	e04d      	b.n	80010e2 <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <vTaskSwitchContext+0xc0>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <vTaskSwitchContext+0xc4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	f1c3 031f 	rsb	r3, r3, #31
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	4925      	ldr	r1, [pc, #148]	; (80010f8 <vTaskSwitchContext+0xc8>)
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10a      	bne.n	800108c <vTaskSwitchContext+0x5c>
	__asm volatile
 8001076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107a:	f383 8811 	msr	BASEPRI, r3
 800107e:	f3bf 8f6f 	isb	sy
 8001082:	f3bf 8f4f 	dsb	sy
 8001086:	607b      	str	r3, [r7, #4]
}
 8001088:	bf00      	nop
 800108a:	e7fe      	b.n	800108a <vTaskSwitchContext+0x5a>
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <vTaskSwitchContext+0xc8>)
 8001098:	4413      	add	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	3308      	adds	r3, #8
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d104      	bne.n	80010bc <vTaskSwitchContext+0x8c>
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <vTaskSwitchContext+0xcc>)
 80010c4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <vTaskSwitchContext+0xcc>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <vTaskSwitchContext+0xd0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d102      	bne.n	80010d8 <vTaskSwitchContext+0xa8>
 80010d2:	f001 feaf 	bl	8002e34 <SEGGER_SYSVIEW_OnIdle>
}
 80010d6:	e004      	b.n	80010e2 <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <vTaskSwitchContext+0xcc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 ff09 	bl	8002ef4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001ac 	.word	0x200001ac
 80010f0:	20000198 	.word	0x20000198
 80010f4:	2000018c 	.word	0x2000018c
 80010f8:	200000b0 	.word	0x200000b0
 80010fc:	200000ac 	.word	0x200000ac
 8001100:	200001a8 	.word	0x200001a8

08001104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800110c:	f000 f852 	bl	80011b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <prvIdleTask+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d9f9      	bls.n	800110c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <prvIdleTask+0x2c>)
 800111a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001128:	e7f0      	b.n	800110c <prvIdleTask+0x8>
 800112a:	bf00      	nop
 800112c:	200000b0 	.word	0x200000b0
 8001130:	e000ed04 	.word	0xe000ed04

08001134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e00c      	b.n	800115a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <prvInitialiseTaskLists+0x60>)
 800114c:	4413      	add	r3, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fbbc 	bl	80008cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3301      	adds	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d9ef      	bls.n	8001140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <prvInitialiseTaskLists+0x64>)
 8001162:	f7ff fbb3 	bl	80008cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <prvInitialiseTaskLists+0x68>)
 8001168:	f7ff fbb0 	bl	80008cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <prvInitialiseTaskLists+0x6c>)
 800116e:	f7ff fbad 	bl	80008cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <prvInitialiseTaskLists+0x70>)
 8001174:	f7ff fbaa 	bl	80008cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <prvInitialiseTaskLists+0x74>)
 800117a:	f7ff fba7 	bl	80008cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <prvInitialiseTaskLists+0x78>)
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <prvInitialiseTaskLists+0x64>)
 8001182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <prvInitialiseTaskLists+0x7c>)
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <prvInitialiseTaskLists+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000b0 	.word	0x200000b0
 8001198:	20000114 	.word	0x20000114
 800119c:	20000128 	.word	0x20000128
 80011a0:	20000144 	.word	0x20000144
 80011a4:	20000158 	.word	0x20000158
 80011a8:	20000170 	.word	0x20000170
 80011ac:	2000013c 	.word	0x2000013c
 80011b0:	20000140 	.word	0x20000140

080011b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80011ba:	e019      	b.n	80011f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80011bc:	f000 f982 	bl	80014c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <prvCheckTasksWaitingTermination+0x50>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3304      	adds	r3, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fbce 	bl	800096e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <prvCheckTasksWaitingTermination+0x54>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <prvCheckTasksWaitingTermination+0x54>)
 80011da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <prvCheckTasksWaitingTermination+0x58>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <prvCheckTasksWaitingTermination+0x58>)
 80011e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80011e6:	f000 f99d 	bl	8001524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f810 	bl	8001210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <prvCheckTasksWaitingTermination+0x58>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e1      	bne.n	80011bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000158 	.word	0x20000158
 8001208:	20000184 	.word	0x20000184
 800120c:	2000016c 	.word	0x2000016c

08001210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fb3f 	bl	80018a0 <vPortFree>
			vPortFree( pxTCB );
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fb3c 	bl	80018a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <prvResetNextTaskUnblockTime+0x38>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d104      	bne.n	800124a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <prvResetNextTaskUnblockTime+0x3c>)
 8001242:	f04f 32ff 	mov.w	r2, #4294967295
 8001246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001248:	e008      	b.n	800125c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <prvResetNextTaskUnblockTime+0x38>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <prvResetNextTaskUnblockTime+0x3c>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	2000013c 	.word	0x2000013c
 800126c:	200001a4 	.word	0x200001a4

08001270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3b04      	subs	r3, #4
 8001280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3b04      	subs	r3, #4
 800128e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f023 0201 	bic.w	r2, r3, #1
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3b04      	subs	r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <pxPortInitialiseStack+0x64>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3b14      	subs	r3, #20
 80012aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3b04      	subs	r3, #4
 80012b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f06f 0202 	mvn.w	r2, #2
 80012be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3b20      	subs	r3, #32
 80012c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	080012d9 	.word	0x080012d9

080012d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <prvTaskExitError+0x54>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ea:	d00a      	beq.n	8001302 <prvTaskExitError+0x2a>
	__asm volatile
 80012ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f0:	f383 8811 	msr	BASEPRI, r3
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	f3bf 8f4f 	dsb	sy
 80012fc:	60fb      	str	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	e7fe      	b.n	8001300 <prvTaskExitError+0x28>
	__asm volatile
 8001302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
 8001312:	60bb      	str	r3, [r7, #8]
}
 8001314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001316:	bf00      	nop
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0fc      	beq.n	8001318 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	20000010 	.word	0x20000010

08001330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <pxCurrentTCBConst2>)
 8001332:	6819      	ldr	r1, [r3, #0]
 8001334:	6808      	ldr	r0, [r1, #0]
 8001336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800133a:	f380 8809 	msr	PSP, r0
 800133e:	f3bf 8f6f 	isb	sy
 8001342:	f04f 0000 	mov.w	r0, #0
 8001346:	f380 8811 	msr	BASEPRI, r0
 800134a:	4770      	bx	lr
 800134c:	f3af 8000 	nop.w

08001350 <pxCurrentTCBConst2>:
 8001350:	200000ac 	.word	0x200000ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop

08001358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <prvPortStartFirstTask+0x24>)
 800135a:	6800      	ldr	r0, [r0, #0]
 800135c:	6800      	ldr	r0, [r0, #0]
 800135e:	f380 8808 	msr	MSP, r0
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	f380 8814 	msr	CONTROL, r0
 800136a:	b662      	cpsie	i
 800136c:	b661      	cpsie	f
 800136e:	f3bf 8f4f 	dsb	sy
 8001372:	f3bf 8f6f 	isb	sy
 8001376:	df00      	svc	0
 8001378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800137a:	bf00      	nop
 800137c:	e000ed08 	.word	0xe000ed08

08001380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <xPortStartScheduler+0x120>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <xPortStartScheduler+0x124>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d10a      	bne.n	80013a6 <xPortStartScheduler+0x26>
	__asm volatile
 8001390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	613b      	str	r3, [r7, #16]
}
 80013a2:	bf00      	nop
 80013a4:	e7fe      	b.n	80013a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <xPortStartScheduler+0x120>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a3f      	ldr	r2, [pc, #252]	; (80014a8 <xPortStartScheduler+0x128>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d10a      	bne.n	80013c6 <xPortStartScheduler+0x46>
	__asm volatile
 80013b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b4:	f383 8811 	msr	BASEPRI, r3
 80013b8:	f3bf 8f6f 	isb	sy
 80013bc:	f3bf 8f4f 	dsb	sy
 80013c0:	60fb      	str	r3, [r7, #12]
}
 80013c2:	bf00      	nop
 80013c4:	e7fe      	b.n	80013c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <xPortStartScheduler+0x12c>)
 80013c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <xPortStartScheduler+0x130>)
 80013ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <xPortStartScheduler+0x134>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80013f4:	e009      	b.n	800140a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <xPortStartScheduler+0x134>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a2d      	ldr	r2, [pc, #180]	; (80014b4 <xPortStartScheduler+0x134>)
 80013fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	2b80      	cmp	r3, #128	; 0x80
 8001414:	d0ef      	beq.n	80013f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <xPortStartScheduler+0x134>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00a      	beq.n	8001438 <xPortStartScheduler+0xb8>
	__asm volatile
 8001422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001426:	f383 8811 	msr	BASEPRI, r3
 800142a:	f3bf 8f6f 	isb	sy
 800142e:	f3bf 8f4f 	dsb	sy
 8001432:	60bb      	str	r3, [r7, #8]
}
 8001434:	bf00      	nop
 8001436:	e7fe      	b.n	8001436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <xPortStartScheduler+0x134>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <xPortStartScheduler+0x134>)
 8001440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <xPortStartScheduler+0x134>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800144a:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <xPortStartScheduler+0x134>)
 800144c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <xPortStartScheduler+0x138>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <xPortStartScheduler+0x138>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <xPortStartScheduler+0x138>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <xPortStartScheduler+0x138>)
 8001468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800146c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800146e:	f000 f8e5 	bl	800163c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <xPortStartScheduler+0x13c>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001478:	f000 f904 	bl	8001684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <xPortStartScheduler+0x140>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <xPortStartScheduler+0x140>)
 8001482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001488:	f7ff ff66 	bl	8001358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800148c:	f7ff fdd0 	bl	8001030 <vTaskSwitchContext>
	prvTaskExitError();
 8001490:	f7ff ff22 	bl	80012d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	410fc271 	.word	0x410fc271
 80014a8:	410fc270 	.word	0x410fc270
 80014ac:	e000e400 	.word	0xe000e400
 80014b0:	200001b0 	.word	0x200001b0
 80014b4:	200001b4 	.word	0x200001b4
 80014b8:	e000ed20 	.word	0xe000ed20
 80014bc:	20000010 	.word	0x20000010
 80014c0:	e000ef34 	.word	0xe000ef34

080014c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	__asm volatile
 80014ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ce:	f383 8811 	msr	BASEPRI, r3
 80014d2:	f3bf 8f6f 	isb	sy
 80014d6:	f3bf 8f4f 	dsb	sy
 80014da:	607b      	str	r3, [r7, #4]
}
 80014dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <vPortEnterCritical+0x58>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <vPortEnterCritical+0x58>)
 80014e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <vPortEnterCritical+0x58>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10f      	bne.n	8001510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <vPortEnterCritical+0x5c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <vPortEnterCritical+0x4c>
	__asm volatile
 80014fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	603b      	str	r3, [r7, #0]
}
 800150c:	bf00      	nop
 800150e:	e7fe      	b.n	800150e <vPortEnterCritical+0x4a>
	}
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000010 	.word	0x20000010
 8001520:	e000ed04 	.word	0xe000ed04

08001524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <vPortExitCritical+0x50>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10a      	bne.n	8001548 <vPortExitCritical+0x24>
	__asm volatile
 8001532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	f3bf 8f6f 	isb	sy
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	607b      	str	r3, [r7, #4]
}
 8001544:	bf00      	nop
 8001546:	e7fe      	b.n	8001546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <vPortExitCritical+0x50>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <vPortExitCritical+0x50>)
 8001550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <vPortExitCritical+0x50>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <vPortExitCritical+0x42>
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000010 	.word	0x20000010
	...

08001580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001580:	f3ef 8009 	mrs	r0, PSP
 8001584:	f3bf 8f6f 	isb	sy
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <pxCurrentTCBConst>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f01e 0f10 	tst.w	lr, #16
 8001590:	bf08      	it	eq
 8001592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800159a:	6010      	str	r0, [r2, #0]
 800159c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80015a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015a4:	f380 8811 	msr	BASEPRI, r0
 80015a8:	f3bf 8f4f 	dsb	sy
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f7ff fd3e 	bl	8001030 <vTaskSwitchContext>
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f380 8811 	msr	BASEPRI, r0
 80015bc:	bc09      	pop	{r0, r3}
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	6808      	ldr	r0, [r1, #0]
 80015c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c6:	f01e 0f10 	tst.w	lr, #16
 80015ca:	bf08      	it	eq
 80015cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015d0:	f380 8809 	msr	PSP, r0
 80015d4:	f3bf 8f6f 	isb	sy
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w

080015e0 <pxCurrentTCBConst>:
 80015e0:	200000ac 	.word	0x200000ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop

080015e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	__asm volatile
 80015ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f2:	f383 8811 	msr	BASEPRI, r3
 80015f6:	f3bf 8f6f 	isb	sy
 80015fa:	f3bf 8f4f 	dsb	sy
 80015fe:	607b      	str	r3, [r7, #4]
}
 8001600:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001602:	f001 fb9d 	bl	8002d40 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001606:	f7ff fc57 	bl	8000eb8 <xTaskIncrementTick>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8001610:	f001 fbf4 	bl	8002dfc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <SysTick_Handler+0x50>)
 8001616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e001      	b.n	8001622 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800161e:	f001 fbd1 	bl	8002dc4 <SEGGER_SYSVIEW_RecordExitISR>
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f383 8811 	msr	BASEPRI, r3
}
 800162c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000ed04 	.word	0xe000ed04

0800163c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <vPortSetupTimerInterrupt+0x34>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <vPortSetupTimerInterrupt+0x38>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <vPortSetupTimerInterrupt+0x3c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <vPortSetupTimerInterrupt+0x40>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	4a09      	ldr	r2, [pc, #36]	; (8001680 <vPortSetupTimerInterrupt+0x44>)
 800165a:	3b01      	subs	r3, #1
 800165c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <vPortSetupTimerInterrupt+0x34>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010
 8001674:	e000e018 	.word	0xe000e018
 8001678:	20000018 	.word	0x20000018
 800167c:	10624dd3 	.word	0x10624dd3
 8001680:	e000e014 	.word	0xe000e014

08001684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001694 <vPortEnableVFP+0x10>
 8001688:	6801      	ldr	r1, [r0, #0]
 800168a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800168e:	6001      	str	r1, [r0, #0]
 8001690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001692:	bf00      	nop
 8001694:	e000ed88 	.word	0xe000ed88

08001698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800169e:	f3ef 8305 	mrs	r3, IPSR
 80016a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b0f      	cmp	r3, #15
 80016a8:	d914      	bls.n	80016d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <vPortValidateInterruptPriority+0x70>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <vPortValidateInterruptPriority+0x74>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	7afa      	ldrb	r2, [r7, #11]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d20a      	bcs.n	80016d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80016be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c2:	f383 8811 	msr	BASEPRI, r3
 80016c6:	f3bf 8f6f 	isb	sy
 80016ca:	f3bf 8f4f 	dsb	sy
 80016ce:	607b      	str	r3, [r7, #4]
}
 80016d0:	bf00      	nop
 80016d2:	e7fe      	b.n	80016d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <vPortValidateInterruptPriority+0x78>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <vPortValidateInterruptPriority+0x7c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d90a      	bls.n	80016fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80016e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e8:	f383 8811 	msr	BASEPRI, r3
 80016ec:	f3bf 8f6f 	isb	sy
 80016f0:	f3bf 8f4f 	dsb	sy
 80016f4:	603b      	str	r3, [r7, #0]
}
 80016f6:	bf00      	nop
 80016f8:	e7fe      	b.n	80016f8 <vPortValidateInterruptPriority+0x60>
	}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e3f0 	.word	0xe000e3f0
 800170c:	200001b0 	.word	0x200001b0
 8001710:	e000ed0c 	.word	0xe000ed0c
 8001714:	200001b4 	.word	0x200001b4

08001718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001724:	f7ff fb08 	bl	8000d38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001728:	4b58      	ldr	r3, [pc, #352]	; (800188c <pvPortMalloc+0x174>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001730:	f000 f910 	bl	8001954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <pvPortMalloc+0x178>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	f040 808e 	bne.w	800185e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01d      	beq.n	8001784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001748:	2208      	movs	r2, #8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	2b00      	cmp	r3, #0
 8001758:	d014      	beq.n	8001784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f023 0307 	bic.w	r3, r3, #7
 8001760:	3308      	adds	r3, #8
 8001762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <pvPortMalloc+0x6c>
	__asm volatile
 800176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001772:	f383 8811 	msr	BASEPRI, r3
 8001776:	f3bf 8f6f 	isb	sy
 800177a:	f3bf 8f4f 	dsb	sy
 800177e:	617b      	str	r3, [r7, #20]
}
 8001780:	bf00      	nop
 8001782:	e7fe      	b.n	8001782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d069      	beq.n	800185e <pvPortMalloc+0x146>
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <pvPortMalloc+0x17c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	d864      	bhi.n	800185e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001794:	4b40      	ldr	r3, [pc, #256]	; (8001898 <pvPortMalloc+0x180>)
 8001796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <pvPortMalloc+0x180>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800179e:	e004      	b.n	80017aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d903      	bls.n	80017bc <pvPortMalloc+0xa4>
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f1      	bne.n	80017a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <pvPortMalloc+0x174>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d04b      	beq.n	800185e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2208      	movs	r2, #8
 80017cc:	4413      	add	r3, r2
 80017ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	1ad2      	subs	r2, r2, r3
 80017e0:	2308      	movs	r3, #8
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d91f      	bls.n	8001828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <pvPortMalloc+0xf8>
	__asm volatile
 80017fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fe:	f383 8811 	msr	BASEPRI, r3
 8001802:	f3bf 8f6f 	isb	sy
 8001806:	f3bf 8f4f 	dsb	sy
 800180a:	613b      	str	r3, [r7, #16]
}
 800180c:	bf00      	nop
 800180e:	e7fe      	b.n	800180e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	1ad2      	subs	r2, r2, r3
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001822:	69b8      	ldr	r0, [r7, #24]
 8001824:	f000 f8f8 	bl	8001a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <pvPortMalloc+0x17c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <pvPortMalloc+0x17c>)
 8001834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <pvPortMalloc+0x17c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <pvPortMalloc+0x184>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d203      	bcs.n	800184a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <pvPortMalloc+0x17c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <pvPortMalloc+0x184>)
 8001848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <pvPortMalloc+0x178>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	431a      	orrs	r2, r3
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800185e:	f7ff fa79 	bl	8000d54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <pvPortMalloc+0x16a>
	__asm volatile
 800186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001870:	f383 8811 	msr	BASEPRI, r3
 8001874:	f3bf 8f6f 	isb	sy
 8001878:	f3bf 8f4f 	dsb	sy
 800187c:	60fb      	str	r3, [r7, #12]
}
 800187e:	bf00      	nop
 8001880:	e7fe      	b.n	8001880 <pvPortMalloc+0x168>
	return pvReturn;
 8001882:	69fb      	ldr	r3, [r7, #28]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20012dc0 	.word	0x20012dc0
 8001890:	20012dcc 	.word	0x20012dcc
 8001894:	20012dc4 	.word	0x20012dc4
 8001898:	20012db8 	.word	0x20012db8
 800189c:	20012dc8 	.word	0x20012dc8

080018a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d048      	beq.n	8001944 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80018b2:	2308      	movs	r3, #8
 80018b4:	425b      	negs	r3, r3
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <vPortFree+0xac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10a      	bne.n	80018e4 <vPortFree+0x44>
	__asm volatile
 80018ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d2:	f383 8811 	msr	BASEPRI, r3
 80018d6:	f3bf 8f6f 	isb	sy
 80018da:	f3bf 8f4f 	dsb	sy
 80018de:	60fb      	str	r3, [r7, #12]
}
 80018e0:	bf00      	nop
 80018e2:	e7fe      	b.n	80018e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00a      	beq.n	8001902 <vPortFree+0x62>
	__asm volatile
 80018ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	60bb      	str	r3, [r7, #8]
}
 80018fe:	bf00      	nop
 8001900:	e7fe      	b.n	8001900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <vPortFree+0xac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d019      	beq.n	8001944 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d115      	bne.n	8001944 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <vPortFree+0xac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001928:	f7ff fa06 	bl	8000d38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <vPortFree+0xb0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4413      	add	r3, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <vPortFree+0xb0>)
 8001938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800193a:	6938      	ldr	r0, [r7, #16]
 800193c:	f000 f86c 	bl	8001a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001940:	f7ff fa08 	bl	8000d54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20012dcc 	.word	0x20012dcc
 8001950:	20012dc4 	.word	0x20012dc4

08001954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800195a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800195e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <prvHeapInit+0xac>)
 8001962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3307      	adds	r3, #7
 8001972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 0307 	bic.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <prvHeapInit+0xac>)
 8001984:	4413      	add	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800198c:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <prvHeapInit+0xb0>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <prvHeapInit+0xb0>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	4413      	add	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80019a0:	2208      	movs	r2, #8
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 0307 	bic.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <prvHeapInit+0xb4>)
 80019b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <prvHeapInit+0xb4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <prvHeapInit+0xb4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	1ad2      	subs	r2, r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <prvHeapInit+0xb4>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <prvHeapInit+0xb8>)
 80019e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <prvHeapInit+0xbc>)
 80019ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <prvHeapInit+0xc0>)
 80019ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	200001b8 	.word	0x200001b8
 8001a04:	20012db8 	.word	0x20012db8
 8001a08:	20012dc0 	.word	0x20012dc0
 8001a0c:	20012dc8 	.word	0x20012dc8
 8001a10:	20012dc4 	.word	0x20012dc4
 8001a14:	20012dcc 	.word	0x20012dcc

08001a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <prvInsertBlockIntoFreeList+0xac>)
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e002      	b.n	8001a2c <prvInsertBlockIntoFreeList+0x14>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d8f7      	bhi.n	8001a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4413      	add	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d108      	bne.n	8001a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	441a      	add	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	441a      	add	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d118      	bne.n	8001aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d00d      	beq.n	8001a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	441a      	add	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e008      	b.n	8001aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e003      	b.n	8001aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d002      	beq.n	8001ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20012db8 	.word	0x20012db8
 8001ac8:	20012dc0 	.word	0x20012dc0

08001acc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <_cbSendSystemDesc+0x14>)
 8001ad2:	f001 f8df 	bl	8002c94 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ad6:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <_cbSendSystemDesc+0x18>)
 8001ad8:	f001 f8dc 	bl	8002c94 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	08004074 	.word	0x08004074
 8001ae4:	080040b8 	.word	0x080040b8

08001ae8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SEGGER_SYSVIEW_Conf+0x20>)
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SEGGER_SYSVIEW_Conf+0x20>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SEGGER_SYSVIEW_Conf+0x24>)
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <SEGGER_SYSVIEW_Conf+0x28>)
 8001af8:	f000 fd54 	bl	80025a4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001afc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001b00:	f000 fd8e 	bl	8002620 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	08001acd 	.word	0x08001acd
 8001b10:	080041ac 	.word	0x080041ac

08001b14 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e033      	b.n	8001b88 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001b20:	491e      	ldr	r1, [pc, #120]	; (8001b9c <_cbSendTaskList+0x88>)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <_cbSendTaskList+0x88>)
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3304      	adds	r3, #4
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	4c16      	ldr	r4, [pc, #88]	; (8001b9c <_cbSendTaskList+0x88>)
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4423      	add	r3, r4
 8001b50:	3308      	adds	r3, #8
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	4d11      	ldr	r5, [pc, #68]	; (8001b9c <_cbSendTaskList+0x88>)
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	442b      	add	r3, r5
 8001b62:	330c      	adds	r3, #12
 8001b64:	681d      	ldr	r5, [r3, #0]
 8001b66:	4e0d      	ldr	r6, [pc, #52]	; (8001b9c <_cbSendTaskList+0x88>)
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4433      	add	r3, r6
 8001b74:	3310      	adds	r3, #16
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	f000 f8b5 	bl	8001cec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3301      	adds	r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <_cbSendTaskList+0x8c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3c6      	bcc.n	8001b20 <_cbSendTaskList+0xc>
  }
}
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9c:	20012dd0 	.word	0x20012dd0
 8001ba0:	20012e70 	.word	0x20012e70

08001ba4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001baa:	f7ff f973 	bl	8000e94 <xTaskGetTickCountFromISR>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	f04f 0500 	mov.w	r5, #0
 8001bca:	015d      	lsls	r5, r3, #5
 8001bcc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001bd0:	0154      	lsls	r4, r2, #5
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	1a12      	subs	r2, r2, r0
 8001bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bdc:	f04f 0400 	mov.w	r4, #0
 8001be0:	f04f 0500 	mov.w	r5, #0
 8001be4:	009d      	lsls	r5, r3, #2
 8001be6:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001bea:	0094      	lsls	r4, r2, #2
 8001bec:	4622      	mov	r2, r4
 8001bee:	462b      	mov	r3, r5
 8001bf0:	1812      	adds	r2, r2, r0
 8001bf2:	eb41 0303 	adc.w	r3, r1, r3
 8001bf6:	f04f 0000 	mov.w	r0, #0
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	00d9      	lsls	r1, r3, #3
 8001c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c04:	00d0      	lsls	r0, r2, #3
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bdb0      	pop	{r4, r5, r7, pc}

08001c1c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	492b      	ldr	r1, [pc, #172]	; (8001cdc <SYSVIEW_AddTask+0xc0>)
 8001c2e:	68b8      	ldr	r0, [r7, #8]
 8001c30:	f001 fdbe 	bl	80037b0 <memcmp>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04b      	beq.n	8001cd2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	d903      	bls.n	8001c4a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001c42:	4828      	ldr	r0, [pc, #160]	; (8001ce4 <SYSVIEW_AddTask+0xc8>)
 8001c44:	f001 faba 	bl	80031bc <SEGGER_SYSVIEW_Warn>
    return;
 8001c48:	e044      	b.n	8001cd4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4926      	ldr	r1, [pc, #152]	; (8001ce8 <SYSVIEW_AddTask+0xcc>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4921      	ldr	r1, [pc, #132]	; (8001ce8 <SYSVIEW_AddTask+0xcc>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3304      	adds	r3, #4
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	491b      	ldr	r1, [pc, #108]	; (8001ce8 <SYSVIEW_AddTask+0xcc>)
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	3308      	adds	r3, #8
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <SYSVIEW_AddTask+0xcc>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	330c      	adds	r3, #12
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <SYSVIEW_AddTask+0xcc>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	3310      	adds	r3, #16
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <SYSVIEW_AddTask+0xc4>)
 8001cbe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f80e 	bl	8001cec <SYSVIEW_SendTaskInfo>
 8001cd0:	e000      	b.n	8001cd4 <SYSVIEW_AddTask+0xb8>
    return;
 8001cd2:	bf00      	nop

}
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	080040c8 	.word	0x080040c8
 8001ce0:	20012e70 	.word	0x20012e70
 8001ce4:	080040d0 	.word	0x080040d0
 8001ce8:	20012dd0 	.word	0x20012dd0

08001cec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	2214      	movs	r2, #20
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fd70 	bl	80037e8 <memset>
  TaskInfo.TaskID     = TaskID;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 febd 	bl	8002aa0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <_DoInit+0x8c>)
 8001d38:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <_DoInit+0x90>)
 8001d4a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <_DoInit+0x94>)
 8001d50:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d58:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_DoInit+0x90>)
 8001d70:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_DoInit+0x98>)
 8001d76:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3307      	adds	r3, #7
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <_DoInit+0x9c>)
 8001d96:	6810      	ldr	r0, [r2, #0]
 8001d98:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <_DoInit+0xa0>)
 8001d9e:	6810      	ldr	r0, [r2, #0]
 8001da0:	6018      	str	r0, [r3, #0]
 8001da2:	8891      	ldrh	r1, [r2, #4]
 8001da4:	7992      	ldrb	r2, [r2, #6]
 8001da6:	8099      	strh	r1, [r3, #4]
 8001da8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2220      	movs	r2, #32
 8001dae:	719a      	strb	r2, [r3, #6]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	200154b0 	.word	0x200154b0
 8001dc0:	08004120 	.word	0x08004120
 8001dc4:	20012e74 	.word	0x20012e74
 8001dc8:	20013274 	.word	0x20013274
 8001dcc:	0800412c 	.word	0x0800412c
 8001dd0:	08004130 	.word	0x08004130

08001dd4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001de0:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <SEGGER_RTT_ReadNoLock+0x100>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <SEGGER_RTT_ReadNoLock+0x18>
 8001de8:	f7ff ffa2 	bl	8001d30 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	3360      	adds	r3, #96	; 0x60
 8001df8:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <SEGGER_RTT_ReadNoLock+0x100>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d92a      	bls.n	8001e70 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf28      	it	cs
 8001e2c:	4613      	movcs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	4413      	add	r3, r2
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	69f8      	ldr	r0, [r7, #28]
 8001e3e:	f001 fcc5 	bl	80037cc <memcpy>
    NumBytesRead += NumBytesRem;
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001e5a:	6a3a      	ldr	r2, [r7, #32]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d101      	bne.n	8001e70 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bf28      	it	cs
 8001e80:	4613      	movcs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d018      	beq.n	8001ebc <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4619      	mov	r1, r3
 8001e96:	69f8      	ldr	r0, [r7, #28]
 8001e98:	f001 fc98 	bl	80037cc <memcpy>
    NumBytesRead += NumBytesRem;
 8001e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6a3a      	ldr	r2, [r7, #32]
 8001ec6:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200154b0 	.word	0x200154b0

08001ed8 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4a3f      	ldr	r2, [pc, #252]	; (8001ff4 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d854      	bhi.n	8001fb8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d30f      	bcc.n	8001f42 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4413      	add	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 fc4c 	bl	80037cc <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	441a      	add	r2, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e054      	b.n	8001fec <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d34b      	bcc.n	8001fea <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d90e      	bls.n	8001f82 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 fc2b 	bl	80037cc <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	441a      	add	r2, r3
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	e018      	b.n	8001fb4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 fc1c 	bl	80037cc <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	6858      	ldr	r0, [r3, #4]
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	18d1      	adds	r1, r2, r3
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f001 fc11 	bl	80037cc <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad2      	subs	r2, r2, r3
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e019      	b.n	8001fec <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d30f      	bcc.n	8001fea <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 fbf8 	bl	80037cc <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	441a      	add	r2, r3
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200154b0 	.word	0x200154b0

08001ff8 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800200e:	f7ff fe8f 	bl	8001d30 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4293      	cmp	r3, r2
 800201c:	d24c      	bcs.n	80020b8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800201e:	f3ef 8311 	mrs	r3, BASEPRI
 8002022:	f04f 0120 	mov.w	r1, #32
 8002026:	f381 8811 	msr	BASEPRI, r1
 800202a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d032      	beq.n	8002098 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002032:	4925      	ldr	r1, [pc, #148]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002046:	4920      	ldr	r1, [pc, #128]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3304      	adds	r3, #4
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800205c:	491a      	ldr	r1, [pc, #104]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3320      	adds	r3, #32
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002070:	4915      	ldr	r1, [pc, #84]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	3328      	adds	r3, #40	; 0x28
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002084:	4910      	ldr	r1, [pc, #64]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	3324      	adds	r3, #36	; 0x24
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002098:	490b      	ldr	r1, [pc, #44]	; (80020c8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	332c      	adds	r3, #44	; 0x2c
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e002      	b.n	80020be <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
 80020bc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80020be:	697b      	ldr	r3, [r7, #20]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200154b0 	.word	0x200154b0

080020cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80020e2:	f7ff fe25 	bl	8001d30 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d24b      	bcs.n	800218a <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80020f2:	f3ef 8311 	mrs	r3, BASEPRI
 80020f6:	f04f 0120 	mov.w	r1, #32
 80020fa:	f381 8811 	msr	BASEPRI, r1
 80020fe:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d031      	beq.n	800216a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002106:	4925      	ldr	r1, [pc, #148]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	3360      	adds	r3, #96	; 0x60
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800211a:	4920      	ldr	r1, [pc, #128]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	3364      	adds	r3, #100	; 0x64
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800212e:	491b      	ldr	r1, [pc, #108]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	3368      	adds	r3, #104	; 0x68
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002142:	4916      	ldr	r1, [pc, #88]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	3370      	adds	r3, #112	; 0x70
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002156:	4911      	ldr	r1, [pc, #68]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	336c      	adds	r3, #108	; 0x6c
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800216a:	490c      	ldr	r1, [pc, #48]	; (800219c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3374      	adds	r3, #116	; 0x74
 800217a:	6a3a      	ldr	r2, [r7, #32]
 800217c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e002      	b.n	8002190 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002190:	697b      	ldr	r3, [r7, #20]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200154b0 	.word	0x200154b0

080021a0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80021b0:	e002      	b.n	80021b8 <_EncodeStr+0x18>
    Len++;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	3301      	adds	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f6      	bne.n	80021b2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d901      	bls.n	80021d0 <_EncodeStr+0x30>
    Len = Limit;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2bfe      	cmp	r3, #254	; 0xfe
 80021d4:	d806      	bhi.n	80021e4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60fa      	str	r2, [r7, #12]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e011      	b.n	8002208 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60fa      	str	r2, [r7, #12]
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	60fa      	str	r2, [r7, #12]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	0a19      	lsrs	r1, r3, #8
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	60fa      	str	r2, [r7, #12]
 8002204:	b2ca      	uxtb	r2, r1
 8002206:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800220c:	e00a      	b.n	8002224 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	1c53      	adds	r3, r2, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1c59      	adds	r1, r3, #1
 8002218:	60f9      	str	r1, [r7, #12]
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	701a      	strb	r2, [r3, #0]
    n++;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3f0      	bcc.n	800220e <_EncodeStr+0x6e>
  }
  return pPayload;
 800222c:	68fb      	ldr	r3, [r7, #12]
}
 800222e:	4618      	mov	r0, r3
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800225a:	1cfb      	adds	r3, r7, #3
 800225c:	2201      	movs	r2, #1
 800225e:	4619      	mov	r1, r3
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff fdb7 	bl	8001dd4 <SEGGER_RTT_ReadNoLock>
 8002266:	4603      	mov	r3, r0
 8002268:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	dd4c      	ble.n	800230a <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	2b07      	cmp	r3, #7
 8002274:	dc16      	bgt.n	80022a4 <_HandleIncomingPacket+0x50>
 8002276:	2b00      	cmp	r3, #0
 8002278:	dd3c      	ble.n	80022f4 <_HandleIncomingPacket+0xa0>
 800227a:	3b01      	subs	r3, #1
 800227c:	2b06      	cmp	r3, #6
 800227e:	d839      	bhi.n	80022f4 <_HandleIncomingPacket+0xa0>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <_HandleIncomingPacket+0x34>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	080022ab 	.word	0x080022ab
 800228c:	080022b1 	.word	0x080022b1
 8002290:	080022b7 	.word	0x080022b7
 8002294:	080022bd 	.word	0x080022bd
 8002298:	080022c3 	.word	0x080022c3
 800229c:	080022c9 	.word	0x080022c9
 80022a0:	080022cf 	.word	0x080022cf
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d015      	beq.n	80022d4 <_HandleIncomingPacket+0x80>
 80022a8:	e024      	b.n	80022f4 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80022aa:	f000 fa7d 	bl	80027a8 <SEGGER_SYSVIEW_Start>
      break;
 80022ae:	e031      	b.n	8002314 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80022b0:	f000 fb36 	bl	8002920 <SEGGER_SYSVIEW_Stop>
      break;
 80022b4:	e02e      	b.n	8002314 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80022b6:	f000 fd11 	bl	8002cdc <SEGGER_SYSVIEW_RecordSystime>
      break;
 80022ba:	e02b      	b.n	8002314 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80022bc:	f000 fcd6 	bl	8002c6c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80022c0:	e028      	b.n	8002314 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80022c2:	f000 fb53 	bl	800296c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80022c6:	e025      	b.n	8002314 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80022c8:	f000 ff3a 	bl	8003140 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80022cc:	e022      	b.n	8002314 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80022ce:	f000 ff19 	bl	8003104 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80022d2:	e01f      	b.n	8002314 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80022d4:	1cfb      	adds	r3, r7, #3
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	2001      	movs	r0, #1
 80022dc:	f7ff fd7a 	bl	8001dd4 <SEGGER_RTT_ReadNoLock>
 80022e0:	4603      	mov	r3, r0
 80022e2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	dd11      	ble.n	800230e <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fe89 	bl	8003004 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80022f2:	e00c      	b.n	800230e <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	b25b      	sxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da0a      	bge.n	8002312 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80022fc:	1cfb      	adds	r3, r7, #3
 80022fe:	2201      	movs	r2, #1
 8002300:	4619      	mov	r1, r3
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff fd66 	bl	8001dd4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002308:	e003      	b.n	8002312 <_HandleIncomingPacket+0xbe>
    }
  }
 800230a:	bf00      	nop
 800230c:	e002      	b.n	8002314 <_HandleIncomingPacket+0xc0>
      break;
 800230e:	bf00      	nop
 8002310:	e000      	b.n	8002314 <_HandleIncomingPacket+0xc0>
      break;
 8002312:	bf00      	nop
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002322:	2301      	movs	r3, #1
 8002324:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <_TrySendOverflowPacket+0xd8>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
 8002336:	e00b      	b.n	8002350 <_TrySendOverflowPacket+0x34>
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	b2da      	uxtb	r2, r3
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	1c59      	adds	r1, r3, #1
 8002340:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	09db      	lsrs	r3, r3, #7
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	2b7f      	cmp	r3, #127	; 0x7f
 8002354:	d8f0      	bhi.n	8002338 <_TrySendOverflowPacket+0x1c>
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800235c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <_TrySendOverflowPacket+0xdc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <_TrySendOverflowPacket+0xd8>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	e00b      	b.n	8002398 <_TrySendOverflowPacket+0x7c>
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	6279      	str	r1, [r7, #36]	; 0x24
 800238a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	09db      	lsrs	r3, r3, #7
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2b7f      	cmp	r3, #127	; 0x7f
 800239c:	d8f0      	bhi.n	8002380 <_TrySendOverflowPacket+0x64>
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	627a      	str	r2, [r7, #36]	; 0x24
 80023a4:	6a3a      	ldr	r2, [r7, #32]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff fd8c 	bl	8001ed8 <SEGGER_RTT_WriteSkipNoLock>
 80023c0:	4603      	mov	r3, r0
 80023c2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <_TrySendOverflowPacket+0xd8>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <_TrySendOverflowPacket+0xd8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <_TrySendOverflowPacket+0xd8>)
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e004      	b.n	80023e8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <_TrySendOverflowPacket+0xd8>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <_TrySendOverflowPacket+0xd8>)
 80023e6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80023e8:	693b      	ldr	r3, [r7, #16]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3730      	adds	r7, #48	; 0x30
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2001528c 	.word	0x2001528c
 80023f8:	e0001004 	.word	0xe0001004

080023fc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002408:	4b63      	ldr	r3, [pc, #396]	; (8002598 <_SendPacket+0x19c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d010      	beq.n	8002432 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <_SendPacket+0x19c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a1 	beq.w	800255c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <_SendPacket+0x19c>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d109      	bne.n	8002436 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002422:	f7ff ff7b 	bl	800231c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <_SendPacket+0x19c>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	f040 8098 	bne.w	8002560 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002430:	e001      	b.n	8002436 <_SendPacket+0x3a>
    goto Send;
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <_SendPacket+0x3c>
Send:
 8002436:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b1f      	cmp	r3, #31
 800243c:	d809      	bhi.n	8002452 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <_SendPacket+0x19c>)
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8089 	bne.w	8002564 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b17      	cmp	r3, #23
 8002456:	d807      	bhi.n	8002468 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3b01      	subs	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e03d      	b.n	80024e4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b7f      	cmp	r3, #127	; 0x7f
 8002474:	d912      	bls.n	800249c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	09da      	lsrs	r2, r3, #7
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3b01      	subs	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	3a01      	subs	r2, #1
 800248e:	60fa      	str	r2, [r7, #12]
 8002490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e006      	b.n	80024aa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3b01      	subs	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b7f      	cmp	r3, #127	; 0x7f
 80024ae:	d912      	bls.n	80024d6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	09da      	lsrs	r2, r3, #7
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	3a01      	subs	r2, #1
 80024c8:	60fa      	str	r2, [r7, #12]
 80024ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e006      	b.n	80024e4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <_SendPacket+0x1a0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <_SendPacket+0x19c>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	e00b      	b.n	8002516 <_SendPacket+0x11a>
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	6279      	str	r1, [r7, #36]	; 0x24
 8002508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	09db      	lsrs	r3, r3, #7
 8002514:	623b      	str	r3, [r7, #32]
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	2b7f      	cmp	r3, #127	; 0x7f
 800251a:	d8f0      	bhi.n	80024fe <_SendPacket+0x102>
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	627a      	str	r2, [r7, #36]	; 0x24
 8002522:	6a3a      	ldr	r2, [r7, #32]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	461a      	mov	r2, r3
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	2001      	movs	r0, #1
 8002538:	f7ff fcce 	bl	8001ed8 <SEGGER_RTT_WriteSkipNoLock>
 800253c:	4603      	mov	r3, r0
 800253e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <_SendPacket+0x19c>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	60d3      	str	r3, [r2, #12]
 800254c:	e00b      	b.n	8002566 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <_SendPacket+0x19c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <_SendPacket+0x19c>)
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e004      	b.n	8002566 <_SendPacket+0x16a>
    goto SendDone;
 800255c:	bf00      	nop
 800255e:	e002      	b.n	8002566 <_SendPacket+0x16a>
      goto SendDone;
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <_SendPacket+0x16a>
      goto SendDone;
 8002564:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <_SendPacket+0x1a4>)
 8002568:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <_SendPacket+0x1a4>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	429a      	cmp	r2, r3
 8002574:	d00b      	beq.n	800258e <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <_SendPacket+0x19c>)
 8002578:	789b      	ldrb	r3, [r3, #2]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <_SendPacket+0x19c>)
 8002580:	2201      	movs	r2, #1
 8002582:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002584:	f7ff fe66 	bl	8002254 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <_SendPacket+0x19c>)
 800258a:	2200      	movs	r2, #0
 800258c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2001528c 	.word	0x2001528c
 800259c:	e0001004 	.word	0xe0001004
 80025a0:	200154b0 	.word	0x200154b0

080025a4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80025b2:	2300      	movs	r3, #0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <SEGGER_SYSVIEW_Init+0x68>)
 80025bc:	4914      	ldr	r1, [pc, #80]	; (8002610 <SEGGER_SYSVIEW_Init+0x6c>)
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff fd1a 	bl	8001ff8 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2308      	movs	r3, #8
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <SEGGER_SYSVIEW_Init+0x70>)
 80025cc:	4910      	ldr	r1, [pc, #64]	; (8002610 <SEGGER_SYSVIEW_Init+0x6c>)
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7ff fd7c 	bl	80020cc <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <SEGGER_SYSVIEW_Init+0x74>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025da:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <SEGGER_SYSVIEW_Init+0x78>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <SEGGER_SYSVIEW_Init+0x74>)
 80025e2:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <SEGGER_SYSVIEW_Init+0x74>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <SEGGER_SYSVIEW_Init+0x74>)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <SEGGER_SYSVIEW_Init+0x74>)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <SEGGER_SYSVIEW_Init+0x74>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SEGGER_SYSVIEW_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20013284 	.word	0x20013284
 8002610:	08004138 	.word	0x08004138
 8002614:	20015284 	.word	0x20015284
 8002618:	2001528c 	.word	0x2001528c
 800261c:	e0001004 	.word	0xe0001004

08002620 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6113      	str	r3, [r2, #16]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	2001528c 	.word	0x2001528c

08002640 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002648:	f3ef 8311 	mrs	r3, BASEPRI
 800264c:	f04f 0120 	mov.w	r1, #32
 8002650:	f381 8811 	msr	BASEPRI, r1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4808      	ldr	r0, [pc, #32]	; (8002678 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002658:	f7ff fdef 	bl	800223a <_PreparePacket>
 800265c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	68b8      	ldr	r0, [r7, #8]
 8002664:	f7ff feca 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f383 8811 	msr	BASEPRI, r3
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200152bc 	.word	0x200152bc

0800267c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002686:	f3ef 8311 	mrs	r3, BASEPRI
 800268a:	f04f 0120 	mov.w	r1, #32
 800268e:	f381 8811 	msr	BASEPRI, r1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	4816      	ldr	r0, [pc, #88]	; (80026f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002696:	f7ff fdd0 	bl	800223a <_PreparePacket>
 800269a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e00b      	b.n	80026c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	1c59      	adds	r1, r3, #1
 80026b2:	61f9      	str	r1, [r7, #28]
 80026b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	09db      	lsrs	r3, r3, #7
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b7f      	cmp	r3, #127	; 0x7f
 80026c6:	d8f0      	bhi.n	80026aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	61fa      	str	r2, [r7, #28]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	6938      	ldr	r0, [r7, #16]
 80026de:	f7ff fe8d 	bl	80023fc <_SendPacket>
  RECORD_END();
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f383 8811 	msr	BASEPRI, r3
}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200152bc 	.word	0x200152bc

080026f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002700:	f3ef 8311 	mrs	r3, BASEPRI
 8002704:	f04f 0120 	mov.w	r1, #32
 8002708:	f381 8811 	msr	BASEPRI, r1
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	4825      	ldr	r0, [pc, #148]	; (80027a4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002710:	f7ff fd93 	bl	800223a <_PreparePacket>
 8002714:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	e00b      	b.n	800273c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	b2da      	uxtb	r2, r3
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	1c59      	adds	r1, r3, #1
 800272c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800272e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	09db      	lsrs	r3, r3, #7
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	2b7f      	cmp	r3, #127	; 0x7f
 8002740:	d8f0      	bhi.n	8002724 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	e00b      	b.n	8002774 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	6279      	str	r1, [r7, #36]	; 0x24
 8002766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	09db      	lsrs	r3, r3, #7
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b7f      	cmp	r3, #127	; 0x7f
 8002778:	d8f0      	bhi.n	800275c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	627a      	str	r2, [r7, #36]	; 0x24
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	6979      	ldr	r1, [r7, #20]
 800278e:	69b8      	ldr	r0, [r7, #24]
 8002790:	f7ff fe34 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f383 8811 	msr	BASEPRI, r3
}
 800279a:	bf00      	nop
 800279c:	3730      	adds	r7, #48	; 0x30
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200152bc 	.word	0x200152bc

080027a8 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08c      	sub	sp, #48	; 0x30
 80027ac:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80027ae:	4b59      	ldr	r3, [pc, #356]	; (8002914 <SEGGER_SYSVIEW_Start+0x16c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 80aa 	bne.w	800290c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80027b8:	4b56      	ldr	r3, [pc, #344]	; (8002914 <SEGGER_SYSVIEW_Start+0x16c>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80027be:	f3ef 8311 	mrs	r3, BASEPRI
 80027c2:	f04f 0120 	mov.w	r1, #32
 80027c6:	f381 8811 	msr	BASEPRI, r1
 80027ca:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80027cc:	220a      	movs	r2, #10
 80027ce:	4952      	ldr	r1, [pc, #328]	; (8002918 <SEGGER_SYSVIEW_Start+0x170>)
 80027d0:	2001      	movs	r0, #1
 80027d2:	f7ff fb81 	bl	8001ed8 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80027dc:	200a      	movs	r0, #10
 80027de:	f7ff ff2f 	bl	8002640 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80027e2:	f3ef 8311 	mrs	r3, BASEPRI
 80027e6:	f04f 0120 	mov.w	r1, #32
 80027ea:	f381 8811 	msr	BASEPRI, r1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	484a      	ldr	r0, [pc, #296]	; (800291c <SEGGER_SYSVIEW_Start+0x174>)
 80027f2:	f7ff fd22 	bl	800223a <_PreparePacket>
 80027f6:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002800:	4b44      	ldr	r3, [pc, #272]	; (8002914 <SEGGER_SYSVIEW_Start+0x16c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
 8002806:	e00b      	b.n	8002820 <SEGGER_SYSVIEW_Start+0x78>
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	b2da      	uxtb	r2, r3
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	1c59      	adds	r1, r3, #1
 8002810:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	09db      	lsrs	r3, r3, #7
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	2b7f      	cmp	r3, #127	; 0x7f
 8002824:	d8f0      	bhi.n	8002808 <SEGGER_SYSVIEW_Start+0x60>
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800282c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <SEGGER_SYSVIEW_Start+0x16c>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	e00b      	b.n	800285a <SEGGER_SYSVIEW_Start+0xb2>
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	1c59      	adds	r1, r3, #1
 800284a:	6279      	str	r1, [r7, #36]	; 0x24
 800284c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	09db      	lsrs	r3, r3, #7
 8002858:	623b      	str	r3, [r7, #32]
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b7f      	cmp	r3, #127	; 0x7f
 800285e:	d8f0      	bhi.n	8002842 <SEGGER_SYSVIEW_Start+0x9a>
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	627a      	str	r2, [r7, #36]	; 0x24
 8002866:	6a3a      	ldr	r2, [r7, #32]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <SEGGER_SYSVIEW_Start+0x16c>)
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e00b      	b.n	8002894 <SEGGER_SYSVIEW_Start+0xec>
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	1c59      	adds	r1, r3, #1
 8002884:	61f9      	str	r1, [r7, #28]
 8002886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	09db      	lsrs	r3, r3, #7
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b7f      	cmp	r3, #127	; 0x7f
 8002898:	d8f0      	bhi.n	800287c <SEGGER_SYSVIEW_Start+0xd4>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	61fa      	str	r2, [r7, #28]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	2302      	movs	r3, #2
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	e00b      	b.n	80028cc <SEGGER_SYSVIEW_Start+0x124>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	1c59      	adds	r1, r3, #1
 80028bc:	6179      	str	r1, [r7, #20]
 80028be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	09db      	lsrs	r3, r3, #7
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b7f      	cmp	r3, #127	; 0x7f
 80028d0:	d8f0      	bhi.n	80028b4 <SEGGER_SYSVIEW_Start+0x10c>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	617a      	str	r2, [r7, #20]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80028e2:	2218      	movs	r2, #24
 80028e4:	6839      	ldr	r1, [r7, #0]
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fd88 	bl	80023fc <_SendPacket>
      RECORD_END();
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <SEGGER_SYSVIEW_Start+0x16c>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <SEGGER_SYSVIEW_Start+0x16c>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002900:	f000 f9ec 	bl	8002cdc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002904:	f000 f9b2 	bl	8002c6c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002908:	f000 fc1a 	bl	8003140 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800290c:	bf00      	nop
 800290e:	3730      	adds	r7, #48	; 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	2001528c 	.word	0x2001528c
 8002918:	080041b4 	.word	0x080041b4
 800291c:	200152bc 	.word	0x200152bc

08002920 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002926:	f3ef 8311 	mrs	r3, BASEPRI
 800292a:	f04f 0120 	mov.w	r1, #32
 800292e:	f381 8811 	msr	BASEPRI, r1
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	480b      	ldr	r0, [pc, #44]	; (8002964 <SEGGER_SYSVIEW_Stop+0x44>)
 8002936:	f7ff fc80 	bl	800223a <_PreparePacket>
 800293a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <SEGGER_SYSVIEW_Stop+0x48>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002944:	220b      	movs	r2, #11
 8002946:	6839      	ldr	r1, [r7, #0]
 8002948:	6838      	ldr	r0, [r7, #0]
 800294a:	f7ff fd57 	bl	80023fc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <SEGGER_SYSVIEW_Stop+0x48>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f383 8811 	msr	BASEPRI, r3
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200152bc 	.word	0x200152bc
 8002968:	2001528c 	.word	0x2001528c

0800296c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002972:	f3ef 8311 	mrs	r3, BASEPRI
 8002976:	f04f 0120 	mov.w	r1, #32
 800297a:	f381 8811 	msr	BASEPRI, r1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	4845      	ldr	r0, [pc, #276]	; (8002a98 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002982:	f7ff fc5a 	bl	800223a <_PreparePacket>
 8002986:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
 8002996:	e00b      	b.n	80029b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	1c59      	adds	r1, r3, #1
 80029a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80029a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	09db      	lsrs	r3, r3, #7
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	2b7f      	cmp	r3, #127	; 0x7f
 80029b4:	d8f0      	bhi.n	8002998 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	e00b      	b.n	80029ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	6279      	str	r1, [r7, #36]	; 0x24
 80029dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	09db      	lsrs	r3, r3, #7
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2b7f      	cmp	r3, #127	; 0x7f
 80029ee:	d8f0      	bhi.n	80029d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	627a      	str	r2, [r7, #36]	; 0x24
 80029f6:	6a3a      	ldr	r2, [r7, #32]
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e00b      	b.n	8002a24 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	61f9      	str	r1, [r7, #28]
 8002a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	09db      	lsrs	r3, r3, #7
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b7f      	cmp	r3, #127	; 0x7f
 8002a28:	d8f0      	bhi.n	8002a0c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	61fa      	str	r2, [r7, #28]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	2302      	movs	r3, #2
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	e00b      	b.n	8002a5c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	6179      	str	r1, [r7, #20]
 8002a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	09db      	lsrs	r3, r3, #7
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a60:	d8f0      	bhi.n	8002a44 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	617a      	str	r2, [r7, #20]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002a72:	2218      	movs	r2, #24
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	f7ff fcc0 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	4798      	blx	r3
  }
}
 8002a90:	bf00      	nop
 8002a92:	3730      	adds	r7, #48	; 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	200152bc 	.word	0x200152bc
 8002a9c:	2001528c 	.word	0x2001528c

08002aa0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b092      	sub	sp, #72	; 0x48
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8002aac:	f04f 0120 	mov.w	r1, #32
 8002ab0:	f381 8811 	msr	BASEPRI, r1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	486b      	ldr	r0, [pc, #428]	; (8002c64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002ab8:	f7ff fbbf 	bl	800223a <_PreparePacket>
 8002abc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad4:	e00b      	b.n	8002aee <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002adc:	1c59      	adds	r1, r3, #1
 8002ade:	6479      	str	r1, [r7, #68]	; 0x44
 8002ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aea:	09db      	lsrs	r3, r3, #7
 8002aec:	643b      	str	r3, [r7, #64]	; 0x40
 8002aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af0:	2b7f      	cmp	r3, #127	; 0x7f
 8002af2:	d8f0      	bhi.n	8002ad6 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	647a      	str	r2, [r7, #68]	; 0x44
 8002afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b0e:	e00b      	b.n	8002b28 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b16:	1c59      	adds	r1, r3, #1
 8002b18:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	09db      	lsrs	r3, r3, #7
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b2c:	d8f0      	bhi.n	8002b10 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	4619      	mov	r1, r3
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fb2a 	bl	80021a0 <_EncodeStr>
 8002b4c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002b4e:	2209      	movs	r2, #9
 8002b50:	68f9      	ldr	r1, [r7, #12]
 8002b52:	6938      	ldr	r0, [r7, #16]
 8002b54:	f7ff fc52 	bl	80023fc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6e:	e00b      	b.n	8002b88 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	6379      	str	r1, [r7, #52]	; 0x34
 8002b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	09db      	lsrs	r3, r3, #7
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b8c:	d8f0      	bhi.n	8002b70 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	637a      	str	r2, [r7, #52]	; 0x34
 8002b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba8:	e00b      	b.n	8002bc2 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	1c59      	adds	r1, r3, #1
 8002bb2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	09db      	lsrs	r3, r3, #7
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8002bc6:	d8f0      	bhi.n	8002baa <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	e00b      	b.n	8002bfc <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	1c59      	adds	r1, r3, #1
 8002bec:	6279      	str	r1, [r7, #36]	; 0x24
 8002bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	09db      	lsrs	r3, r3, #7
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002c00:	d8f0      	bhi.n	8002be4 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	627a      	str	r2, [r7, #36]	; 0x24
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e00b      	b.n	8002c34 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	61f9      	str	r1, [r7, #28]
 8002c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	09db      	lsrs	r3, r3, #7
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b7f      	cmp	r3, #127	; 0x7f
 8002c38:	d8f0      	bhi.n	8002c1c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	61fa      	str	r2, [r7, #28]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002c4a:	2215      	movs	r2, #21
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	6938      	ldr	r0, [r7, #16]
 8002c50:	f7ff fbd4 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f383 8811 	msr	BASEPRI, r3
}
 8002c5a:	bf00      	nop
 8002c5c:	3748      	adds	r7, #72	; 0x48
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200152bc 	.word	0x200152bc
 8002c68:	2001528c 	.word	0x2001528c

08002c6c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002c82:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4798      	blx	r3
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2001528c 	.word	0x2001528c

08002c94 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8002ca0:	f04f 0120 	mov.w	r1, #32
 8002ca4:	f381 8811 	msr	BASEPRI, r1
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002cac:	f7ff fac5 	bl	800223a <_PreparePacket>
 8002cb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6938      	ldr	r0, [r7, #16]
 8002cb8:	f7ff fa72 	bl	80021a0 <_EncodeStr>
 8002cbc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002cbe:	220e      	movs	r2, #14
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	6938      	ldr	r0, [r7, #16]
 8002cc4:	f7ff fb9a 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f383 8811 	msr	BASEPRI, r3
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200152bc 	.word	0x200152bc

08002cdc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01a      	beq.n	8002d20 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4798      	blx	r3
 8002cfc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002d00:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	000a      	movs	r2, r1
 8002d10:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002d12:	4613      	mov	r3, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4621      	mov	r1, r4
 8002d18:	200d      	movs	r0, #13
 8002d1a:	f7ff fceb 	bl	80026f4 <SEGGER_SYSVIEW_RecordU32x2>
 8002d1e:	e006      	b.n	8002d2e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	200c      	movs	r0, #12
 8002d28:	f7ff fca8 	bl	800267c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2001528c 	.word	0x2001528c
 8002d3c:	e0001004 	.word	0xe0001004

08002d40 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002d46:	f3ef 8311 	mrs	r3, BASEPRI
 8002d4a:	f04f 0120 	mov.w	r1, #32
 8002d4e:	f381 8811 	msr	BASEPRI, r1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	4819      	ldr	r0, [pc, #100]	; (8002dbc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002d56:	f7ff fa70 	bl	800223a <_PreparePacket>
 8002d5a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d68:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e00b      	b.n	8002d8c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1c59      	adds	r1, r3, #1
 8002d7c:	6179      	str	r1, [r7, #20]
 8002d7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	09db      	lsrs	r3, r3, #7
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d90:	d8f0      	bhi.n	8002d74 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	617a      	str	r2, [r7, #20]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002da2:	2202      	movs	r2, #2
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f7ff fb28 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f383 8811 	msr	BASEPRI, r3
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200152bc 	.word	0x200152bc
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002dca:	f3ef 8311 	mrs	r3, BASEPRI
 8002dce:	f04f 0120 	mov.w	r1, #32
 8002dd2:	f381 8811 	msr	BASEPRI, r1
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002dda:	f7ff fa2e 	bl	800223a <_PreparePacket>
 8002dde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002de0:	2203      	movs	r2, #3
 8002de2:	6839      	ldr	r1, [r7, #0]
 8002de4:	6838      	ldr	r0, [r7, #0]
 8002de6:	f7ff fb09 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f383 8811 	msr	BASEPRI, r3
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200152bc 	.word	0x200152bc

08002dfc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e02:	f3ef 8311 	mrs	r3, BASEPRI
 8002e06:	f04f 0120 	mov.w	r1, #32
 8002e0a:	f381 8811 	msr	BASEPRI, r1
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	4807      	ldr	r0, [pc, #28]	; (8002e30 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002e12:	f7ff fa12 	bl	800223a <_PreparePacket>
 8002e16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002e18:	2212      	movs	r2, #18
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	6838      	ldr	r0, [r7, #0]
 8002e1e:	f7ff faed 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f383 8811 	msr	BASEPRI, r3
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200152bc 	.word	0x200152bc

08002e34 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e3e:	f04f 0120 	mov.w	r1, #32
 8002e42:	f381 8811 	msr	BASEPRI, r1
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	4807      	ldr	r0, [pc, #28]	; (8002e68 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002e4a:	f7ff f9f6 	bl	800223a <_PreparePacket>
 8002e4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002e50:	2211      	movs	r2, #17
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	6838      	ldr	r0, [r7, #0]
 8002e56:	f7ff fad1 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f383 8811 	msr	BASEPRI, r3
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200152bc 	.word	0x200152bc

08002e6c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002e74:	f3ef 8311 	mrs	r3, BASEPRI
 8002e78:	f04f 0120 	mov.w	r1, #32
 8002e7c:	f381 8811 	msr	BASEPRI, r1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	481a      	ldr	r0, [pc, #104]	; (8002eec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002e84:	f7ff f9d9 	bl	800223a <_PreparePacket>
 8002e88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e00b      	b.n	8002ebc <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	61f9      	str	r1, [r7, #28]
 8002eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	09db      	lsrs	r3, r3, #7
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec0:	d8f0      	bhi.n	8002ea4 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	61fa      	str	r2, [r7, #28]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	6938      	ldr	r0, [r7, #16]
 8002ed8:	f7ff fa90 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f383 8811 	msr	BASEPRI, r3
}
 8002ee2:	bf00      	nop
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200152bc 	.word	0x200152bc
 8002ef0:	2001528c 	.word	0x2001528c

08002ef4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002efc:	f3ef 8311 	mrs	r3, BASEPRI
 8002f00:	f04f 0120 	mov.w	r1, #32
 8002f04:	f381 8811 	msr	BASEPRI, r1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	481a      	ldr	r0, [pc, #104]	; (8002f74 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002f0c:	f7ff f995 	bl	800223a <_PreparePacket>
 8002f10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	e00b      	b.n	8002f44 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	1c59      	adds	r1, r3, #1
 8002f34:	61f9      	str	r1, [r7, #28]
 8002f36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	09db      	lsrs	r3, r3, #7
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b7f      	cmp	r3, #127	; 0x7f
 8002f48:	d8f0      	bhi.n	8002f2c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	61fa      	str	r2, [r7, #28]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	6938      	ldr	r0, [r7, #16]
 8002f60:	f7ff fa4c 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f383 8811 	msr	BASEPRI, r3
}
 8002f6a:	bf00      	nop
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200152bc 	.word	0x200152bc
 8002f78:	2001528c 	.word	0x2001528c

08002f7c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002f84:	f3ef 8311 	mrs	r3, BASEPRI
 8002f88:	f04f 0120 	mov.w	r1, #32
 8002f8c:	f381 8811 	msr	BASEPRI, r1
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	481a      	ldr	r0, [pc, #104]	; (8002ffc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002f94:	f7ff f951 	bl	800223a <_PreparePacket>
 8002f98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e00b      	b.n	8002fcc <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	1c59      	adds	r1, r3, #1
 8002fbc:	61f9      	str	r1, [r7, #28]
 8002fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	09db      	lsrs	r3, r3, #7
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b7f      	cmp	r3, #127	; 0x7f
 8002fd0:	d8f0      	bhi.n	8002fb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	61fa      	str	r2, [r7, #28]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002fe2:	2206      	movs	r2, #6
 8002fe4:	68f9      	ldr	r1, [r7, #12]
 8002fe6:	6938      	ldr	r0, [r7, #16]
 8002fe8:	f7ff fa08 	bl	80023fc <_SendPacket>
  RECORD_END();
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f383 8811 	msr	BASEPRI, r3
}
 8002ff2:	bf00      	nop
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200152bc 	.word	0x200152bc
 8003000:	2001528c 	.word	0x2001528c

08003004 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06d      	beq.n	80030f2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003020:	e008      	b.n	8003034 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	3301      	adds	r3, #1
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003038:	429a      	cmp	r2, r3
 800303a:	d3f2      	bcc.n	8003022 <SEGGER_SYSVIEW_SendModule+0x1e>
 800303c:	e000      	b.n	8003040 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800303e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d055      	beq.n	80030f2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003046:	f3ef 8311 	mrs	r3, BASEPRI
 800304a:	f04f 0120 	mov.w	r1, #32
 800304e:	f381 8811 	msr	BASEPRI, r1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	482a      	ldr	r0, [pc, #168]	; (8003100 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003056:	f7ff f8f0 	bl	800223a <_PreparePacket>
 800305a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	e00b      	b.n	8003082 <SEGGER_SYSVIEW_SendModule+0x7e>
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1c59      	adds	r1, r3, #1
 8003072:	6279      	str	r1, [r7, #36]	; 0x24
 8003074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	09db      	lsrs	r3, r3, #7
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2b7f      	cmp	r3, #127	; 0x7f
 8003086:	d8f0      	bhi.n	800306a <SEGGER_SYSVIEW_SendModule+0x66>
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	627a      	str	r2, [r7, #36]	; 0x24
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e00b      	b.n	80030bc <SEGGER_SYSVIEW_SendModule+0xb8>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	1c59      	adds	r1, r3, #1
 80030ac:	61f9      	str	r1, [r7, #28]
 80030ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	09db      	lsrs	r3, r3, #7
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b7f      	cmp	r3, #127	; 0x7f
 80030c0:	d8f0      	bhi.n	80030a4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	61fa      	str	r2, [r7, #28]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	4619      	mov	r1, r3
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff f860 	bl	80021a0 <_EncodeStr>
 80030e0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80030e2:	2216      	movs	r2, #22
 80030e4:	68f9      	ldr	r1, [r7, #12]
 80030e6:	6938      	ldr	r0, [r7, #16]
 80030e8:	f7ff f988 	bl	80023fc <_SendPacket>
      RECORD_END();
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80030f2:	bf00      	nop
 80030f4:	3730      	adds	r7, #48	; 0x30
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200152b4 	.word	0x200152b4
 8003100:	200152bc 	.word	0x200152bc

08003104 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00f      	beq.n	8003132 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f2      	bne.n	8003118 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200152b4 	.word	0x200152b4

08003140 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003146:	f3ef 8311 	mrs	r3, BASEPRI
 800314a:	f04f 0120 	mov.w	r1, #32
 800314e:	f381 8811 	msr	BASEPRI, r1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	4817      	ldr	r0, [pc, #92]	; (80031b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003156:	f7ff f870 	bl	800223a <_PreparePacket>
 800315a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e00b      	b.n	8003184 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	6179      	str	r1, [r7, #20]
 8003176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	09db      	lsrs	r3, r3, #7
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b7f      	cmp	r3, #127	; 0x7f
 8003188:	d8f0      	bhi.n	800316c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	617a      	str	r2, [r7, #20]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800319a:	221b      	movs	r2, #27
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	68b8      	ldr	r0, [r7, #8]
 80031a0:	f7ff f92c 	bl	80023fc <_SendPacket>
  RECORD_END();
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f383 8811 	msr	BASEPRI, r3
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200152bc 	.word	0x200152bc
 80031b8:	200152b8 	.word	0x200152b8

080031bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031c4:	f3ef 8311 	mrs	r3, BASEPRI
 80031c8:	f04f 0120 	mov.w	r1, #32
 80031cc:	f381 8811 	msr	BASEPRI, r1
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	4827      	ldr	r0, [pc, #156]	; (8003270 <SEGGER_SYSVIEW_Warn+0xb4>)
 80031d4:	f7ff f831 	bl	800223a <_PreparePacket>
 80031d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6938      	ldr	r0, [r7, #16]
 80031e0:	f7fe ffde 	bl	80021a0 <_EncodeStr>
 80031e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	2301      	movs	r3, #1
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	e00b      	b.n	8003208 <SEGGER_SYSVIEW_Warn+0x4c>
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	6279      	str	r1, [r7, #36]	; 0x24
 80031fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	09db      	lsrs	r3, r3, #7
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2b7f      	cmp	r3, #127	; 0x7f
 800320c:	d8f0      	bhi.n	80031f0 <SEGGER_SYSVIEW_Warn+0x34>
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	627a      	str	r2, [r7, #36]	; 0x24
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e00b      	b.n	8003240 <SEGGER_SYSVIEW_Warn+0x84>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	61f9      	str	r1, [r7, #28]
 8003232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	09db      	lsrs	r3, r3, #7
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b7f      	cmp	r3, #127	; 0x7f
 8003244:	d8f0      	bhi.n	8003228 <SEGGER_SYSVIEW_Warn+0x6c>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	61fa      	str	r2, [r7, #28]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003256:	221a      	movs	r2, #26
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	6938      	ldr	r0, [r7, #16]
 800325c:	f7ff f8ce 	bl	80023fc <_SendPacket>
  RECORD_END();
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f383 8811 	msr	BASEPRI, r3
}
 8003266:	bf00      	nop
 8003268:	3728      	adds	r7, #40	; 0x28
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200152bc 	.word	0x200152bc

08003274 <main>:
//GLOBAL variable section
char usr_msg[250] = {0};
uint8_t UART_ACCESS_KEY = AVAILABLE;

int main(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af02      	add	r7, sp, #8
#ifdef USE_SEMIHOSTING
	initialise_monitor_handles();
	puts("This is hello world example code");
#endif

	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL for SEGGER Systemview Timestamp maintaining
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <main+0x64>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <main+0x64>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6013      	str	r3, [r2, #0]

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 8003286:	f7fd f8f3 	bl	8000470 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 800328a:	f000 f92b 	bl	80034e4 <SystemCoreClockUpdate>

	prvSetupHardware();
 800328e:	f000 f8c3 	bl	8003418 <prvSetupHardware>

	sprintf(usr_msg, "This is hello world app starting\r\n");
 8003292:	4912      	ldr	r1, [pc, #72]	; (80032dc <main+0x68>)
 8003294:	4812      	ldr	r0, [pc, #72]	; (80032e0 <main+0x6c>)
 8003296:	f000 faaf 	bl	80037f8 <siprintf>
	printmsg(usr_msg);
 800329a:	4811      	ldr	r0, [pc, #68]	; (80032e0 <main+0x6c>)
 800329c:	f000 f8c2 	bl	8003424 <printmsg>

	//start recording
	SEGGER_SYSVIEW_Conf();
 80032a0:	f7fe fc22 	bl	8001ae8 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80032a4:	f7ff fa80 	bl	80027a8 <SEGGER_SYSVIEW_Start>

	//3. lets create 2 tasks, task-1 and task-2
	xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle1 );
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <main+0x70>)
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2302      	movs	r3, #2
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2300      	movs	r3, #0
 80032b2:	2282      	movs	r2, #130	; 0x82
 80032b4:	490c      	ldr	r1, [pc, #48]	; (80032e8 <main+0x74>)
 80032b6:	480d      	ldr	r0, [pc, #52]	; (80032ec <main+0x78>)
 80032b8:	f7fd fb83 	bl	80009c2 <xTaskCreate>

	xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle2 );
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <main+0x7c>)
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	2302      	movs	r3, #2
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2300      	movs	r3, #0
 80032c6:	2282      	movs	r2, #130	; 0x82
 80032c8:	490a      	ldr	r1, [pc, #40]	; (80032f4 <main+0x80>)
 80032ca:	480b      	ldr	r0, [pc, #44]	; (80032f8 <main+0x84>)
 80032cc:	f7fd fb79 	bl	80009c2 <xTaskCreate>

	//4. start the scheduler
	vTaskStartScheduler();
 80032d0:	f7fd fcda 	bl	8000c88 <vTaskStartScheduler>


	//you will never return here
	for(;;);
 80032d4:	e7fe      	b.n	80032d4 <main+0x60>
 80032d6:	bf00      	nop
 80032d8:	e0001000 	.word	0xe0001000
 80032dc:	08004140 	.word	0x08004140
 80032e0:	200153a8 	.word	0x200153a8
 80032e4:	200153a0 	.word	0x200153a0
 80032e8:	08004164 	.word	0x08004164
 80032ec:	080032fd 	.word	0x080032fd
 80032f0:	200153a4 	.word	0x200153a4
 80032f4:	0800416c 	.word	0x0800416c
 80032f8:	0800333d 	.word	0x0800333d

080032fc <vTask1_handler>:
}


void vTask1_handler (void *params)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	while(1){	//added key for not corruption btw task1 and task2
		if(UART_ACCESS_KEY == AVAILABLE){
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <vTask1_handler+0x34>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d1fb      	bne.n	8003304 <vTask1_handler+0x8>
			UART_ACCESS_KEY = NOT_AVAILABLE;
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <vTask1_handler+0x34>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
			printmsg("Hello world: from task1\r\n");
 8003312:	4808      	ldr	r0, [pc, #32]	; (8003334 <vTask1_handler+0x38>)
 8003314:	f000 f886 	bl	8003424 <printmsg>
			UART_ACCESS_KEY = AVAILABLE;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <vTask1_handler+0x34>)
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
			//taskyield yapılmasının sebebi sadece task1 çalışıyordu
			//ve belki de key, available olduğunda task2 task1 ı preempt etmiyordu
			taskYIELD();	// leaving CPU by manually triggering the context switch
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <vTask1_handler+0x3c>)
 8003320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == AVAILABLE){
 800332e:	e7e9      	b.n	8003304 <vTask1_handler+0x8>
 8003330:	20000014 	.word	0x20000014
 8003334:	08004174 	.word	0x08004174
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <vTask2_handler>:
		}
	}
}

void vTask2_handler (void *params)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	while(1){
		if(UART_ACCESS_KEY == AVAILABLE){
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <vTask2_handler+0x34>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d1fb      	bne.n	8003344 <vTask2_handler+0x8>
			UART_ACCESS_KEY = NOT_AVAILABLE;
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <vTask2_handler+0x34>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
			printmsg("Hello world: from task2\r\n");
 8003352:	4808      	ldr	r0, [pc, #32]	; (8003374 <vTask2_handler+0x38>)
 8003354:	f000 f866 	bl	8003424 <printmsg>
			UART_ACCESS_KEY = AVAILABLE;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <vTask2_handler+0x34>)
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <vTask2_handler+0x3c>)
 8003360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == AVAILABLE){
 800336e:	e7e9      	b.n	8003344 <vTask2_handler+0x8>
 8003370:	20000014 	.word	0x20000014
 8003374:	08004190 	.word	0x08004190
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <prvSetupUart>:
		}
	}
}

static void prvSetupUart(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003382:	2101      	movs	r1, #1
 8003384:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003388:	f7fd f978 	bl	800067c <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800338c:	2101      	movs	r1, #1
 800338e:	2008      	movs	r0, #8
 8003390:	f7fd f954 	bl	800063c <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 8003394:	f107 0310 	add.w	r3, r7, #16
 8003398:	2208      	movs	r2, #8
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fa23 	bl	80037e8 <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80033a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033a6:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 80033a8:	2302      	movs	r3, #2
 80033aa:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	4816      	ldr	r0, [pc, #88]	; (8003410 <prvSetupUart+0x94>)
 80033b8:	f7fc ff82 	bl	80002c0 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 80033bc:	2207      	movs	r2, #7
 80033be:	2108      	movs	r1, #8
 80033c0:	4813      	ldr	r0, [pc, #76]	; (8003410 <prvSetupUart+0x94>)
 80033c2:	f7fd f80c 	bl	80003de <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 80033c6:	2207      	movs	r2, #7
 80033c8:	2109      	movs	r1, #9
 80033ca:	4811      	ldr	r0, [pc, #68]	; (8003410 <prvSetupUart+0x94>)
 80033cc:	f7fd f807 	bl	80003de <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 80033d0:	463b      	mov	r3, r7
 80033d2:	2210      	movs	r2, #16
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fa06 	bl	80037e8 <memset>

	uart3_init.USART_BaudRate = 115200;
 80033dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80033e0:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80033e2:	2300      	movs	r3, #0
 80033e4:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80033e6:	230c      	movs	r3, #12
 80033e8:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 80033ea:	2300      	movs	r3, #0
 80033ec:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 80033ee:	2300      	movs	r3, #0
 80033f0:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 80033f2:	2300      	movs	r3, #0
 80033f4:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 80033f6:	463b      	mov	r3, r7
 80033f8:	4619      	mov	r1, r3
 80033fa:	4806      	ldr	r0, [pc, #24]	; (8003414 <prvSetupUart+0x98>)
 80033fc:	f7fd f95e 	bl	80006bc <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 8003400:	2101      	movs	r1, #1
 8003402:	4804      	ldr	r0, [pc, #16]	; (8003414 <prvSetupUart+0x98>)
 8003404:	f7fd fa14 	bl	8000830 <USART_Cmd>

}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40020c00 	.word	0x40020c00
 8003414:	40004800 	.word	0x40004800

08003418 <prvSetupHardware>:

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	//Setup UART3
	prvSetupUart();
 800341c:	f7ff ffae 	bl	800337c <prvSetupUart>

}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}

08003424 <printmsg>:

void printmsg(char *msg)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++){
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e013      	b.n	800345a <printmsg+0x36>
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != SET);
 8003432:	bf00      	nop
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	480f      	ldr	r0, [pc, #60]	; (8003474 <printmsg+0x50>)
 8003438:	f7fd fa2c 	bl	8000894 <USART_GetFlagStatus>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d1f8      	bne.n	8003434 <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	4809      	ldr	r0, [pc, #36]	; (8003474 <printmsg+0x50>)
 8003450:	f7fd fa0e 	bl	8000870 <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++){
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3301      	adds	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fc fed8 	bl	8000210 <strlen>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4293      	cmp	r3, r2
 8003466:	d3e4      	bcc.n	8003432 <printmsg+0xe>
	}

}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40004800 	.word	0x40004800

08003478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800347c:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <SystemInit+0x60>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <SystemInit+0x60>)
 8003484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <SystemInit+0x64>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <SystemInit+0x64>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <SystemInit+0x64>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <SystemInit+0x64>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <SystemInit+0x64>)
 80034a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <SystemInit+0x64>)
 80034b0:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <SystemInit+0x68>)
 80034b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <SystemInit+0x64>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a08      	ldr	r2, [pc, #32]	; (80034dc <SystemInit+0x64>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <SystemInit+0x64>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80034c6:	f000 f88f 	bl	80035e8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034ca:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <SystemInit+0x60>)
 80034cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034d0:	609a      	str	r2, [r3, #8]
#endif
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000ed00 	.word	0xe000ed00
 80034dc:	40023800 	.word	0x40023800
 80034e0:	24003010 	.word	0x24003010

080034e4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	2302      	movs	r3, #2
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	2302      	movs	r3, #2
 80034fc:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80034fe:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <SystemCoreClockUpdate+0xf0>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b08      	cmp	r3, #8
 800350c:	d011      	beq.n	8003532 <SystemCoreClockUpdate+0x4e>
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d844      	bhi.n	800359e <SystemCoreClockUpdate+0xba>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <SystemCoreClockUpdate+0x3e>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d004      	beq.n	800352a <SystemCoreClockUpdate+0x46>
 8003520:	e03d      	b.n	800359e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <SystemCoreClockUpdate+0xf4>)
 8003524:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <SystemCoreClockUpdate+0xf8>)
 8003526:	601a      	str	r2, [r3, #0]
      break;
 8003528:	e03d      	b.n	80035a6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <SystemCoreClockUpdate+0xf4>)
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <SystemCoreClockUpdate+0xfc>)
 800352e:	601a      	str	r2, [r3, #0]
      break;
 8003530:	e039      	b.n	80035a6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003532:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <SystemCoreClockUpdate+0xf0>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	0d9b      	lsrs	r3, r3, #22
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <SystemCoreClockUpdate+0xf0>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003546:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800354e:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <SystemCoreClockUpdate+0xfc>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <SystemCoreClockUpdate+0xf0>)
 8003558:	6852      	ldr	r2, [r2, #4]
 800355a:	0992      	lsrs	r2, r2, #6
 800355c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e00b      	b.n	8003580 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003568:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <SystemCoreClockUpdate+0xf8>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <SystemCoreClockUpdate+0xf0>)
 8003572:	6852      	ldr	r2, [r2, #4]
 8003574:	0992      	lsrs	r2, r2, #6
 8003576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <SystemCoreClockUpdate+0xf0>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <SystemCoreClockUpdate+0xf4>)
 800359a:	6013      	str	r3, [r2, #0]
      break;
 800359c:	e003      	b.n	80035a6 <SystemCoreClockUpdate+0xc2>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <SystemCoreClockUpdate+0xf4>)
 80035a0:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <SystemCoreClockUpdate+0xf8>)
 80035a2:	601a      	str	r2, [r3, #0]
      break;
 80035a4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <SystemCoreClockUpdate+0xf0>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	4a0c      	ldr	r2, [pc, #48]	; (80035e4 <SystemCoreClockUpdate+0x100>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80035b8:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <SystemCoreClockUpdate+0xf4>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <SystemCoreClockUpdate+0xf4>)
 80035c4:	6013      	str	r3, [r2, #0]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	20000018 	.word	0x20000018
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	017d7840 	.word	0x017d7840
 80035e4:	2000001c 	.word	0x2000001c

080035e8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	2300      	movs	r3, #0
 80035f4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <SetSysClock+0x11c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a42      	ldr	r2, [pc, #264]	; (8003704 <SetSysClock+0x11c>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003602:	4b40      	ldr	r3, [pc, #256]	; (8003704 <SetSysClock+0x11c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3301      	adds	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <SetSysClock+0x38>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800361e:	d1f0      	bne.n	8003602 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <SetSysClock+0x11c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800362c:	2301      	movs	r3, #1
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	e001      	b.n	8003636 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d15c      	bne.n	80036f6 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <SetSysClock+0x11c>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	4a30      	ldr	r2, [pc, #192]	; (8003704 <SetSysClock+0x11c>)
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003646:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003648:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <SetSysClock+0x120>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <SetSysClock+0x120>)
 800364e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003652:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <SetSysClock+0x11c>)
 8003656:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <SetSysClock+0x11c>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800365c:	4b29      	ldr	r3, [pc, #164]	; (8003704 <SetSysClock+0x11c>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <SetSysClock+0x11c>)
 8003662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003666:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003668:	4b26      	ldr	r3, [pc, #152]	; (8003704 <SetSysClock+0x11c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a25      	ldr	r2, [pc, #148]	; (8003704 <SetSysClock+0x11c>)
 800366e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003672:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003674:	4b23      	ldr	r3, [pc, #140]	; (8003704 <SetSysClock+0x11c>)
 8003676:	4a25      	ldr	r2, [pc, #148]	; (800370c <SetSysClock+0x124>)
 8003678:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <SetSysClock+0x11c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <SetSysClock+0x11c>)
 8003680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003684:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003686:	bf00      	nop
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <SetSysClock+0x11c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f9      	beq.n	8003688 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003694:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <SetSysClock+0x120>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <SetSysClock+0x120>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80036a0:	bf00      	nop
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <SetSysClock+0x120>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f9      	beq.n	80036a2 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <SetSysClock+0x120>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <SetSysClock+0x120>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80036ba:	bf00      	nop
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <SetSysClock+0x120>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f9      	beq.n	80036bc <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <SetSysClock+0x128>)
 80036ca:	f240 7205 	movw	r2, #1797	; 0x705
 80036ce:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <SetSysClock+0x11c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <SetSysClock+0x11c>)
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <SetSysClock+0x11c>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a08      	ldr	r2, [pc, #32]	; (8003704 <SetSysClock+0x11c>)
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80036e8:	bf00      	nop
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <SetSysClock+0x11c>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d1f9      	bne.n	80036ea <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000
 800370c:	07405a19 	.word	0x07405a19
 8003710:	40023c00 	.word	0x40023c00

08003714 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003714:	480d      	ldr	r0, [pc, #52]	; (800374c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003716:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003718:	480d      	ldr	r0, [pc, #52]	; (8003750 <LoopForever+0x6>)
  ldr r1, =_edata
 800371a:	490e      	ldr	r1, [pc, #56]	; (8003754 <LoopForever+0xa>)
  ldr r2, =_sidata
 800371c:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <LoopForever+0xe>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003720:	e002      	b.n	8003728 <LoopCopyDataInit>

08003722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003726:	3304      	adds	r3, #4

08003728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800372a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800372c:	d3f9      	bcc.n	8003722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003730:	4c0b      	ldr	r4, [pc, #44]	; (8003760 <LoopForever+0x16>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003734:	e001      	b.n	800373a <LoopFillZerobss>

08003736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003738:	3204      	adds	r2, #4

0800373a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800373a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800373c:	d3fb      	bcc.n	8003736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800373e:	f7ff fe9b 	bl	8003478 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003742:	f000 f811 	bl	8003768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003746:	f7ff fd95 	bl	8003274 <main>

0800374a <LoopForever>:

LoopForever:
    b LoopForever
 800374a:	e7fe      	b.n	800374a <LoopForever>
  ldr   r0, =_estack
 800374c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003754:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003758:	080041fc 	.word	0x080041fc
  ldr r2, =_sbss
 800375c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003760:	20015568 	.word	0x20015568

08003764 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003764:	e7fe      	b.n	8003764 <ADC_IRQHandler>
	...

08003768 <__libc_init_array>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4d0d      	ldr	r5, [pc, #52]	; (80037a0 <__libc_init_array+0x38>)
 800376c:	4c0d      	ldr	r4, [pc, #52]	; (80037a4 <__libc_init_array+0x3c>)
 800376e:	1b64      	subs	r4, r4, r5
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	2600      	movs	r6, #0
 8003774:	42a6      	cmp	r6, r4
 8003776:	d109      	bne.n	800378c <__libc_init_array+0x24>
 8003778:	4d0b      	ldr	r5, [pc, #44]	; (80037a8 <__libc_init_array+0x40>)
 800377a:	4c0c      	ldr	r4, [pc, #48]	; (80037ac <__libc_init_array+0x44>)
 800377c:	f000 fc6a 	bl	8004054 <_init>
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	2600      	movs	r6, #0
 8003786:	42a6      	cmp	r6, r4
 8003788:	d105      	bne.n	8003796 <__libc_init_array+0x2e>
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003790:	4798      	blx	r3
 8003792:	3601      	adds	r6, #1
 8003794:	e7ee      	b.n	8003774 <__libc_init_array+0xc>
 8003796:	f855 3b04 	ldr.w	r3, [r5], #4
 800379a:	4798      	blx	r3
 800379c:	3601      	adds	r6, #1
 800379e:	e7f2      	b.n	8003786 <__libc_init_array+0x1e>
 80037a0:	080041f4 	.word	0x080041f4
 80037a4:	080041f4 	.word	0x080041f4
 80037a8:	080041f4 	.word	0x080041f4
 80037ac:	080041f8 	.word	0x080041f8

080037b0 <memcmp>:
 80037b0:	b530      	push	{r4, r5, lr}
 80037b2:	3901      	subs	r1, #1
 80037b4:	2400      	movs	r4, #0
 80037b6:	42a2      	cmp	r2, r4
 80037b8:	d101      	bne.n	80037be <memcmp+0xe>
 80037ba:	2000      	movs	r0, #0
 80037bc:	e005      	b.n	80037ca <memcmp+0x1a>
 80037be:	5d03      	ldrb	r3, [r0, r4]
 80037c0:	3401      	adds	r4, #1
 80037c2:	5d0d      	ldrb	r5, [r1, r4]
 80037c4:	42ab      	cmp	r3, r5
 80037c6:	d0f6      	beq.n	80037b6 <memcmp+0x6>
 80037c8:	1b58      	subs	r0, r3, r5
 80037ca:	bd30      	pop	{r4, r5, pc}

080037cc <memcpy>:
 80037cc:	440a      	add	r2, r1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037d4:	d100      	bne.n	80037d8 <memcpy+0xc>
 80037d6:	4770      	bx	lr
 80037d8:	b510      	push	{r4, lr}
 80037da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e2:	4291      	cmp	r1, r2
 80037e4:	d1f9      	bne.n	80037da <memcpy+0xe>
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <memset>:
 80037e8:	4402      	add	r2, r0
 80037ea:	4603      	mov	r3, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <siprintf>:
 80037f8:	b40e      	push	{r1, r2, r3}
 80037fa:	b500      	push	{lr}
 80037fc:	b09c      	sub	sp, #112	; 0x70
 80037fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003800:	9002      	str	r0, [sp, #8]
 8003802:	9006      	str	r0, [sp, #24]
 8003804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003808:	4809      	ldr	r0, [pc, #36]	; (8003830 <siprintf+0x38>)
 800380a:	9107      	str	r1, [sp, #28]
 800380c:	9104      	str	r1, [sp, #16]
 800380e:	4909      	ldr	r1, [pc, #36]	; (8003834 <siprintf+0x3c>)
 8003810:	f853 2b04 	ldr.w	r2, [r3], #4
 8003814:	9105      	str	r1, [sp, #20]
 8003816:	6800      	ldr	r0, [r0, #0]
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	a902      	add	r1, sp, #8
 800381c:	f000 f868 	bl	80038f0 <_svfiprintf_r>
 8003820:	9b02      	ldr	r3, [sp, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	b01c      	add	sp, #112	; 0x70
 8003828:	f85d eb04 	ldr.w	lr, [sp], #4
 800382c:	b003      	add	sp, #12
 800382e:	4770      	bx	lr
 8003830:	2000002c 	.word	0x2000002c
 8003834:	ffff0208 	.word	0xffff0208

08003838 <__ssputs_r>:
 8003838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	688e      	ldr	r6, [r1, #8]
 800383e:	429e      	cmp	r6, r3
 8003840:	4682      	mov	sl, r0
 8003842:	460c      	mov	r4, r1
 8003844:	4690      	mov	r8, r2
 8003846:	461f      	mov	r7, r3
 8003848:	d838      	bhi.n	80038bc <__ssputs_r+0x84>
 800384a:	898a      	ldrh	r2, [r1, #12]
 800384c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003850:	d032      	beq.n	80038b8 <__ssputs_r+0x80>
 8003852:	6825      	ldr	r5, [r4, #0]
 8003854:	6909      	ldr	r1, [r1, #16]
 8003856:	eba5 0901 	sub.w	r9, r5, r1
 800385a:	6965      	ldr	r5, [r4, #20]
 800385c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003864:	3301      	adds	r3, #1
 8003866:	444b      	add	r3, r9
 8003868:	106d      	asrs	r5, r5, #1
 800386a:	429d      	cmp	r5, r3
 800386c:	bf38      	it	cc
 800386e:	461d      	movcc	r5, r3
 8003870:	0553      	lsls	r3, r2, #21
 8003872:	d531      	bpl.n	80038d8 <__ssputs_r+0xa0>
 8003874:	4629      	mov	r1, r5
 8003876:	f000 fb39 	bl	8003eec <_malloc_r>
 800387a:	4606      	mov	r6, r0
 800387c:	b950      	cbnz	r0, 8003894 <__ssputs_r+0x5c>
 800387e:	230c      	movs	r3, #12
 8003880:	f8ca 3000 	str.w	r3, [sl]
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388a:	81a3      	strh	r3, [r4, #12]
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003894:	6921      	ldr	r1, [r4, #16]
 8003896:	464a      	mov	r2, r9
 8003898:	f7ff ff98 	bl	80037cc <memcpy>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	6126      	str	r6, [r4, #16]
 80038aa:	6165      	str	r5, [r4, #20]
 80038ac:	444e      	add	r6, r9
 80038ae:	eba5 0509 	sub.w	r5, r5, r9
 80038b2:	6026      	str	r6, [r4, #0]
 80038b4:	60a5      	str	r5, [r4, #8]
 80038b6:	463e      	mov	r6, r7
 80038b8:	42be      	cmp	r6, r7
 80038ba:	d900      	bls.n	80038be <__ssputs_r+0x86>
 80038bc:	463e      	mov	r6, r7
 80038be:	4632      	mov	r2, r6
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	4641      	mov	r1, r8
 80038c4:	f000 faa8 	bl	8003e18 <memmove>
 80038c8:	68a3      	ldr	r3, [r4, #8]
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	1b9b      	subs	r3, r3, r6
 80038ce:	4432      	add	r2, r6
 80038d0:	60a3      	str	r3, [r4, #8]
 80038d2:	6022      	str	r2, [r4, #0]
 80038d4:	2000      	movs	r0, #0
 80038d6:	e7db      	b.n	8003890 <__ssputs_r+0x58>
 80038d8:	462a      	mov	r2, r5
 80038da:	f000 fb61 	bl	8003fa0 <_realloc_r>
 80038de:	4606      	mov	r6, r0
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d1e1      	bne.n	80038a8 <__ssputs_r+0x70>
 80038e4:	6921      	ldr	r1, [r4, #16]
 80038e6:	4650      	mov	r0, sl
 80038e8:	f000 fab0 	bl	8003e4c <_free_r>
 80038ec:	e7c7      	b.n	800387e <__ssputs_r+0x46>
	...

080038f0 <_svfiprintf_r>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	4698      	mov	r8, r3
 80038f6:	898b      	ldrh	r3, [r1, #12]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	b09d      	sub	sp, #116	; 0x74
 80038fc:	4607      	mov	r7, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	4614      	mov	r4, r2
 8003902:	d50e      	bpl.n	8003922 <_svfiprintf_r+0x32>
 8003904:	690b      	ldr	r3, [r1, #16]
 8003906:	b963      	cbnz	r3, 8003922 <_svfiprintf_r+0x32>
 8003908:	2140      	movs	r1, #64	; 0x40
 800390a:	f000 faef 	bl	8003eec <_malloc_r>
 800390e:	6028      	str	r0, [r5, #0]
 8003910:	6128      	str	r0, [r5, #16]
 8003912:	b920      	cbnz	r0, 800391e <_svfiprintf_r+0x2e>
 8003914:	230c      	movs	r3, #12
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	e0d1      	b.n	8003ac2 <_svfiprintf_r+0x1d2>
 800391e:	2340      	movs	r3, #64	; 0x40
 8003920:	616b      	str	r3, [r5, #20]
 8003922:	2300      	movs	r3, #0
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
 8003926:	2320      	movs	r3, #32
 8003928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800392c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003930:	2330      	movs	r3, #48	; 0x30
 8003932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003adc <_svfiprintf_r+0x1ec>
 8003936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800393a:	f04f 0901 	mov.w	r9, #1
 800393e:	4623      	mov	r3, r4
 8003940:	469a      	mov	sl, r3
 8003942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003946:	b10a      	cbz	r2, 800394c <_svfiprintf_r+0x5c>
 8003948:	2a25      	cmp	r2, #37	; 0x25
 800394a:	d1f9      	bne.n	8003940 <_svfiprintf_r+0x50>
 800394c:	ebba 0b04 	subs.w	fp, sl, r4
 8003950:	d00b      	beq.n	800396a <_svfiprintf_r+0x7a>
 8003952:	465b      	mov	r3, fp
 8003954:	4622      	mov	r2, r4
 8003956:	4629      	mov	r1, r5
 8003958:	4638      	mov	r0, r7
 800395a:	f7ff ff6d 	bl	8003838 <__ssputs_r>
 800395e:	3001      	adds	r0, #1
 8003960:	f000 80aa 	beq.w	8003ab8 <_svfiprintf_r+0x1c8>
 8003964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003966:	445a      	add	r2, fp
 8003968:	9209      	str	r2, [sp, #36]	; 0x24
 800396a:	f89a 3000 	ldrb.w	r3, [sl]
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80a2 	beq.w	8003ab8 <_svfiprintf_r+0x1c8>
 8003974:	2300      	movs	r3, #0
 8003976:	f04f 32ff 	mov.w	r2, #4294967295
 800397a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800397e:	f10a 0a01 	add.w	sl, sl, #1
 8003982:	9304      	str	r3, [sp, #16]
 8003984:	9307      	str	r3, [sp, #28]
 8003986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398a:	931a      	str	r3, [sp, #104]	; 0x68
 800398c:	4654      	mov	r4, sl
 800398e:	2205      	movs	r2, #5
 8003990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003994:	4851      	ldr	r0, [pc, #324]	; (8003adc <_svfiprintf_r+0x1ec>)
 8003996:	f7fc fc43 	bl	8000220 <memchr>
 800399a:	9a04      	ldr	r2, [sp, #16]
 800399c:	b9d8      	cbnz	r0, 80039d6 <_svfiprintf_r+0xe6>
 800399e:	06d0      	lsls	r0, r2, #27
 80039a0:	bf44      	itt	mi
 80039a2:	2320      	movmi	r3, #32
 80039a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a8:	0711      	lsls	r1, r2, #28
 80039aa:	bf44      	itt	mi
 80039ac:	232b      	movmi	r3, #43	; 0x2b
 80039ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b2:	f89a 3000 	ldrb.w	r3, [sl]
 80039b6:	2b2a      	cmp	r3, #42	; 0x2a
 80039b8:	d015      	beq.n	80039e6 <_svfiprintf_r+0xf6>
 80039ba:	9a07      	ldr	r2, [sp, #28]
 80039bc:	4654      	mov	r4, sl
 80039be:	2000      	movs	r0, #0
 80039c0:	f04f 0c0a 	mov.w	ip, #10
 80039c4:	4621      	mov	r1, r4
 80039c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ca:	3b30      	subs	r3, #48	; 0x30
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d94e      	bls.n	8003a6e <_svfiprintf_r+0x17e>
 80039d0:	b1b0      	cbz	r0, 8003a00 <_svfiprintf_r+0x110>
 80039d2:	9207      	str	r2, [sp, #28]
 80039d4:	e014      	b.n	8003a00 <_svfiprintf_r+0x110>
 80039d6:	eba0 0308 	sub.w	r3, r0, r8
 80039da:	fa09 f303 	lsl.w	r3, r9, r3
 80039de:	4313      	orrs	r3, r2
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	46a2      	mov	sl, r4
 80039e4:	e7d2      	b.n	800398c <_svfiprintf_r+0x9c>
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	1d19      	adds	r1, r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	9103      	str	r1, [sp, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bfbb      	ittet	lt
 80039f2:	425b      	neglt	r3, r3
 80039f4:	f042 0202 	orrlt.w	r2, r2, #2
 80039f8:	9307      	strge	r3, [sp, #28]
 80039fa:	9307      	strlt	r3, [sp, #28]
 80039fc:	bfb8      	it	lt
 80039fe:	9204      	strlt	r2, [sp, #16]
 8003a00:	7823      	ldrb	r3, [r4, #0]
 8003a02:	2b2e      	cmp	r3, #46	; 0x2e
 8003a04:	d10c      	bne.n	8003a20 <_svfiprintf_r+0x130>
 8003a06:	7863      	ldrb	r3, [r4, #1]
 8003a08:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0a:	d135      	bne.n	8003a78 <_svfiprintf_r+0x188>
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	9203      	str	r2, [sp, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bfb8      	it	lt
 8003a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a1c:	3402      	adds	r4, #2
 8003a1e:	9305      	str	r3, [sp, #20]
 8003a20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003aec <_svfiprintf_r+0x1fc>
 8003a24:	7821      	ldrb	r1, [r4, #0]
 8003a26:	2203      	movs	r2, #3
 8003a28:	4650      	mov	r0, sl
 8003a2a:	f7fc fbf9 	bl	8000220 <memchr>
 8003a2e:	b140      	cbz	r0, 8003a42 <_svfiprintf_r+0x152>
 8003a30:	2340      	movs	r3, #64	; 0x40
 8003a32:	eba0 000a 	sub.w	r0, r0, sl
 8003a36:	fa03 f000 	lsl.w	r0, r3, r0
 8003a3a:	9b04      	ldr	r3, [sp, #16]
 8003a3c:	4303      	orrs	r3, r0
 8003a3e:	3401      	adds	r4, #1
 8003a40:	9304      	str	r3, [sp, #16]
 8003a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a46:	4826      	ldr	r0, [pc, #152]	; (8003ae0 <_svfiprintf_r+0x1f0>)
 8003a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a4c:	2206      	movs	r2, #6
 8003a4e:	f7fc fbe7 	bl	8000220 <memchr>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d038      	beq.n	8003ac8 <_svfiprintf_r+0x1d8>
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <_svfiprintf_r+0x1f4>)
 8003a58:	bb1b      	cbnz	r3, 8003aa2 <_svfiprintf_r+0x1b2>
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	3307      	adds	r3, #7
 8003a5e:	f023 0307 	bic.w	r3, r3, #7
 8003a62:	3308      	adds	r3, #8
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a68:	4433      	add	r3, r6
 8003a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6c:	e767      	b.n	800393e <_svfiprintf_r+0x4e>
 8003a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a72:	460c      	mov	r4, r1
 8003a74:	2001      	movs	r0, #1
 8003a76:	e7a5      	b.n	80039c4 <_svfiprintf_r+0xd4>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	3401      	adds	r4, #1
 8003a7c:	9305      	str	r3, [sp, #20]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f04f 0c0a 	mov.w	ip, #10
 8003a84:	4620      	mov	r0, r4
 8003a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a8a:	3a30      	subs	r2, #48	; 0x30
 8003a8c:	2a09      	cmp	r2, #9
 8003a8e:	d903      	bls.n	8003a98 <_svfiprintf_r+0x1a8>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0c5      	beq.n	8003a20 <_svfiprintf_r+0x130>
 8003a94:	9105      	str	r1, [sp, #20]
 8003a96:	e7c3      	b.n	8003a20 <_svfiprintf_r+0x130>
 8003a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e7f0      	b.n	8003a84 <_svfiprintf_r+0x194>
 8003aa2:	ab03      	add	r3, sp, #12
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	462a      	mov	r2, r5
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <_svfiprintf_r+0x1f8>)
 8003aaa:	a904      	add	r1, sp, #16
 8003aac:	4638      	mov	r0, r7
 8003aae:	f3af 8000 	nop.w
 8003ab2:	1c42      	adds	r2, r0, #1
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	d1d6      	bne.n	8003a66 <_svfiprintf_r+0x176>
 8003ab8:	89ab      	ldrh	r3, [r5, #12]
 8003aba:	065b      	lsls	r3, r3, #25
 8003abc:	f53f af2c 	bmi.w	8003918 <_svfiprintf_r+0x28>
 8003ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ac2:	b01d      	add	sp, #116	; 0x74
 8003ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac8:	ab03      	add	r3, sp, #12
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	462a      	mov	r2, r5
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <_svfiprintf_r+0x1f8>)
 8003ad0:	a904      	add	r1, sp, #16
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	f000 f87a 	bl	8003bcc <_printf_i>
 8003ad8:	e7eb      	b.n	8003ab2 <_svfiprintf_r+0x1c2>
 8003ada:	bf00      	nop
 8003adc:	080041be 	.word	0x080041be
 8003ae0:	080041c8 	.word	0x080041c8
 8003ae4:	00000000 	.word	0x00000000
 8003ae8:	08003839 	.word	0x08003839
 8003aec:	080041c4 	.word	0x080041c4

08003af0 <_printf_common>:
 8003af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af4:	4616      	mov	r6, r2
 8003af6:	4699      	mov	r9, r3
 8003af8:	688a      	ldr	r2, [r1, #8]
 8003afa:	690b      	ldr	r3, [r1, #16]
 8003afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b00:	4293      	cmp	r3, r2
 8003b02:	bfb8      	it	lt
 8003b04:	4613      	movlt	r3, r2
 8003b06:	6033      	str	r3, [r6, #0]
 8003b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b0c:	4607      	mov	r7, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	b10a      	cbz	r2, 8003b16 <_printf_common+0x26>
 8003b12:	3301      	adds	r3, #1
 8003b14:	6033      	str	r3, [r6, #0]
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	0699      	lsls	r1, r3, #26
 8003b1a:	bf42      	ittt	mi
 8003b1c:	6833      	ldrmi	r3, [r6, #0]
 8003b1e:	3302      	addmi	r3, #2
 8003b20:	6033      	strmi	r3, [r6, #0]
 8003b22:	6825      	ldr	r5, [r4, #0]
 8003b24:	f015 0506 	ands.w	r5, r5, #6
 8003b28:	d106      	bne.n	8003b38 <_printf_common+0x48>
 8003b2a:	f104 0a19 	add.w	sl, r4, #25
 8003b2e:	68e3      	ldr	r3, [r4, #12]
 8003b30:	6832      	ldr	r2, [r6, #0]
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	42ab      	cmp	r3, r5
 8003b36:	dc26      	bgt.n	8003b86 <_printf_common+0x96>
 8003b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b3c:	1e13      	subs	r3, r2, #0
 8003b3e:	6822      	ldr	r2, [r4, #0]
 8003b40:	bf18      	it	ne
 8003b42:	2301      	movne	r3, #1
 8003b44:	0692      	lsls	r2, r2, #26
 8003b46:	d42b      	bmi.n	8003ba0 <_printf_common+0xb0>
 8003b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	4638      	mov	r0, r7
 8003b50:	47c0      	blx	r8
 8003b52:	3001      	adds	r0, #1
 8003b54:	d01e      	beq.n	8003b94 <_printf_common+0xa4>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	68e5      	ldr	r5, [r4, #12]
 8003b5a:	6832      	ldr	r2, [r6, #0]
 8003b5c:	f003 0306 	and.w	r3, r3, #6
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	bf08      	it	eq
 8003b64:	1aad      	subeq	r5, r5, r2
 8003b66:	68a3      	ldr	r3, [r4, #8]
 8003b68:	6922      	ldr	r2, [r4, #16]
 8003b6a:	bf0c      	ite	eq
 8003b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b70:	2500      	movne	r5, #0
 8003b72:	4293      	cmp	r3, r2
 8003b74:	bfc4      	itt	gt
 8003b76:	1a9b      	subgt	r3, r3, r2
 8003b78:	18ed      	addgt	r5, r5, r3
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	341a      	adds	r4, #26
 8003b7e:	42b5      	cmp	r5, r6
 8003b80:	d11a      	bne.n	8003bb8 <_printf_common+0xc8>
 8003b82:	2000      	movs	r0, #0
 8003b84:	e008      	b.n	8003b98 <_printf_common+0xa8>
 8003b86:	2301      	movs	r3, #1
 8003b88:	4652      	mov	r2, sl
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	47c0      	blx	r8
 8003b90:	3001      	adds	r0, #1
 8003b92:	d103      	bne.n	8003b9c <_printf_common+0xac>
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	e7c6      	b.n	8003b2e <_printf_common+0x3e>
 8003ba0:	18e1      	adds	r1, r4, r3
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	2030      	movs	r0, #48	; 0x30
 8003ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003baa:	4422      	add	r2, r4
 8003bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	e7c7      	b.n	8003b48 <_printf_common+0x58>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4622      	mov	r2, r4
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	47c0      	blx	r8
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d0e6      	beq.n	8003b94 <_printf_common+0xa4>
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7d9      	b.n	8003b7e <_printf_common+0x8e>
	...

08003bcc <_printf_i>:
 8003bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	4691      	mov	r9, r2
 8003bd4:	7e27      	ldrb	r7, [r4, #24]
 8003bd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bd8:	2f78      	cmp	r7, #120	; 0x78
 8003bda:	4680      	mov	r8, r0
 8003bdc:	469a      	mov	sl, r3
 8003bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be2:	d807      	bhi.n	8003bf4 <_printf_i+0x28>
 8003be4:	2f62      	cmp	r7, #98	; 0x62
 8003be6:	d80a      	bhi.n	8003bfe <_printf_i+0x32>
 8003be8:	2f00      	cmp	r7, #0
 8003bea:	f000 80d8 	beq.w	8003d9e <_printf_i+0x1d2>
 8003bee:	2f58      	cmp	r7, #88	; 0x58
 8003bf0:	f000 80a3 	beq.w	8003d3a <_printf_i+0x16e>
 8003bf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bfc:	e03a      	b.n	8003c74 <_printf_i+0xa8>
 8003bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c02:	2b15      	cmp	r3, #21
 8003c04:	d8f6      	bhi.n	8003bf4 <_printf_i+0x28>
 8003c06:	a001      	add	r0, pc, #4	; (adr r0, 8003c0c <_printf_i+0x40>)
 8003c08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c0c:	08003c65 	.word	0x08003c65
 8003c10:	08003c79 	.word	0x08003c79
 8003c14:	08003bf5 	.word	0x08003bf5
 8003c18:	08003bf5 	.word	0x08003bf5
 8003c1c:	08003bf5 	.word	0x08003bf5
 8003c20:	08003bf5 	.word	0x08003bf5
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003bf5 	.word	0x08003bf5
 8003c2c:	08003bf5 	.word	0x08003bf5
 8003c30:	08003bf5 	.word	0x08003bf5
 8003c34:	08003bf5 	.word	0x08003bf5
 8003c38:	08003d85 	.word	0x08003d85
 8003c3c:	08003ca9 	.word	0x08003ca9
 8003c40:	08003d67 	.word	0x08003d67
 8003c44:	08003bf5 	.word	0x08003bf5
 8003c48:	08003bf5 	.word	0x08003bf5
 8003c4c:	08003da7 	.word	0x08003da7
 8003c50:	08003bf5 	.word	0x08003bf5
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003bf5 	.word	0x08003bf5
 8003c5c:	08003bf5 	.word	0x08003bf5
 8003c60:	08003d6f 	.word	0x08003d6f
 8003c64:	680b      	ldr	r3, [r1, #0]
 8003c66:	1d1a      	adds	r2, r3, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	600a      	str	r2, [r1, #0]
 8003c6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0a3      	b.n	8003dc0 <_printf_i+0x1f4>
 8003c78:	6825      	ldr	r5, [r4, #0]
 8003c7a:	6808      	ldr	r0, [r1, #0]
 8003c7c:	062e      	lsls	r6, r5, #24
 8003c7e:	f100 0304 	add.w	r3, r0, #4
 8003c82:	d50a      	bpl.n	8003c9a <_printf_i+0xce>
 8003c84:	6805      	ldr	r5, [r0, #0]
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	da03      	bge.n	8003c94 <_printf_i+0xc8>
 8003c8c:	232d      	movs	r3, #45	; 0x2d
 8003c8e:	426d      	negs	r5, r5
 8003c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c94:	485e      	ldr	r0, [pc, #376]	; (8003e10 <_printf_i+0x244>)
 8003c96:	230a      	movs	r3, #10
 8003c98:	e019      	b.n	8003cce <_printf_i+0x102>
 8003c9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c9e:	6805      	ldr	r5, [r0, #0]
 8003ca0:	600b      	str	r3, [r1, #0]
 8003ca2:	bf18      	it	ne
 8003ca4:	b22d      	sxthne	r5, r5
 8003ca6:	e7ef      	b.n	8003c88 <_printf_i+0xbc>
 8003ca8:	680b      	ldr	r3, [r1, #0]
 8003caa:	6825      	ldr	r5, [r4, #0]
 8003cac:	1d18      	adds	r0, r3, #4
 8003cae:	6008      	str	r0, [r1, #0]
 8003cb0:	0628      	lsls	r0, r5, #24
 8003cb2:	d501      	bpl.n	8003cb8 <_printf_i+0xec>
 8003cb4:	681d      	ldr	r5, [r3, #0]
 8003cb6:	e002      	b.n	8003cbe <_printf_i+0xf2>
 8003cb8:	0669      	lsls	r1, r5, #25
 8003cba:	d5fb      	bpl.n	8003cb4 <_printf_i+0xe8>
 8003cbc:	881d      	ldrh	r5, [r3, #0]
 8003cbe:	4854      	ldr	r0, [pc, #336]	; (8003e10 <_printf_i+0x244>)
 8003cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2308      	moveq	r3, #8
 8003cc6:	230a      	movne	r3, #10
 8003cc8:	2100      	movs	r1, #0
 8003cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cce:	6866      	ldr	r6, [r4, #4]
 8003cd0:	60a6      	str	r6, [r4, #8]
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	bfa2      	ittt	ge
 8003cd6:	6821      	ldrge	r1, [r4, #0]
 8003cd8:	f021 0104 	bicge.w	r1, r1, #4
 8003cdc:	6021      	strge	r1, [r4, #0]
 8003cde:	b90d      	cbnz	r5, 8003ce4 <_printf_i+0x118>
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	d04d      	beq.n	8003d80 <_printf_i+0x1b4>
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cea:	fb03 5711 	mls	r7, r3, r1, r5
 8003cee:	5dc7      	ldrb	r7, [r0, r7]
 8003cf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cf4:	462f      	mov	r7, r5
 8003cf6:	42bb      	cmp	r3, r7
 8003cf8:	460d      	mov	r5, r1
 8003cfa:	d9f4      	bls.n	8003ce6 <_printf_i+0x11a>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d10b      	bne.n	8003d18 <_printf_i+0x14c>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	07df      	lsls	r7, r3, #31
 8003d04:	d508      	bpl.n	8003d18 <_printf_i+0x14c>
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	6861      	ldr	r1, [r4, #4]
 8003d0a:	4299      	cmp	r1, r3
 8003d0c:	bfde      	ittt	le
 8003d0e:	2330      	movle	r3, #48	; 0x30
 8003d10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d18:	1b92      	subs	r2, r2, r6
 8003d1a:	6122      	str	r2, [r4, #16]
 8003d1c:	f8cd a000 	str.w	sl, [sp]
 8003d20:	464b      	mov	r3, r9
 8003d22:	aa03      	add	r2, sp, #12
 8003d24:	4621      	mov	r1, r4
 8003d26:	4640      	mov	r0, r8
 8003d28:	f7ff fee2 	bl	8003af0 <_printf_common>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d14c      	bne.n	8003dca <_printf_i+0x1fe>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	b004      	add	sp, #16
 8003d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3a:	4835      	ldr	r0, [pc, #212]	; (8003e10 <_printf_i+0x244>)
 8003d3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	680e      	ldr	r6, [r1, #0]
 8003d44:	061f      	lsls	r7, r3, #24
 8003d46:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d4a:	600e      	str	r6, [r1, #0]
 8003d4c:	d514      	bpl.n	8003d78 <_printf_i+0x1ac>
 8003d4e:	07d9      	lsls	r1, r3, #31
 8003d50:	bf44      	itt	mi
 8003d52:	f043 0320 	orrmi.w	r3, r3, #32
 8003d56:	6023      	strmi	r3, [r4, #0]
 8003d58:	b91d      	cbnz	r5, 8003d62 <_printf_i+0x196>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	f023 0320 	bic.w	r3, r3, #32
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	2310      	movs	r3, #16
 8003d64:	e7b0      	b.n	8003cc8 <_printf_i+0xfc>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	f043 0320 	orr.w	r3, r3, #32
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	2378      	movs	r3, #120	; 0x78
 8003d70:	4828      	ldr	r0, [pc, #160]	; (8003e14 <_printf_i+0x248>)
 8003d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d76:	e7e3      	b.n	8003d40 <_printf_i+0x174>
 8003d78:	065e      	lsls	r6, r3, #25
 8003d7a:	bf48      	it	mi
 8003d7c:	b2ad      	uxthmi	r5, r5
 8003d7e:	e7e6      	b.n	8003d4e <_printf_i+0x182>
 8003d80:	4616      	mov	r6, r2
 8003d82:	e7bb      	b.n	8003cfc <_printf_i+0x130>
 8003d84:	680b      	ldr	r3, [r1, #0]
 8003d86:	6826      	ldr	r6, [r4, #0]
 8003d88:	6960      	ldr	r0, [r4, #20]
 8003d8a:	1d1d      	adds	r5, r3, #4
 8003d8c:	600d      	str	r5, [r1, #0]
 8003d8e:	0635      	lsls	r5, r6, #24
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	d501      	bpl.n	8003d98 <_printf_i+0x1cc>
 8003d94:	6018      	str	r0, [r3, #0]
 8003d96:	e002      	b.n	8003d9e <_printf_i+0x1d2>
 8003d98:	0671      	lsls	r1, r6, #25
 8003d9a:	d5fb      	bpl.n	8003d94 <_printf_i+0x1c8>
 8003d9c:	8018      	strh	r0, [r3, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6123      	str	r3, [r4, #16]
 8003da2:	4616      	mov	r6, r2
 8003da4:	e7ba      	b.n	8003d1c <_printf_i+0x150>
 8003da6:	680b      	ldr	r3, [r1, #0]
 8003da8:	1d1a      	adds	r2, r3, #4
 8003daa:	600a      	str	r2, [r1, #0]
 8003dac:	681e      	ldr	r6, [r3, #0]
 8003dae:	6862      	ldr	r2, [r4, #4]
 8003db0:	2100      	movs	r1, #0
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7fc fa34 	bl	8000220 <memchr>
 8003db8:	b108      	cbz	r0, 8003dbe <_printf_i+0x1f2>
 8003dba:	1b80      	subs	r0, r0, r6
 8003dbc:	6060      	str	r0, [r4, #4]
 8003dbe:	6863      	ldr	r3, [r4, #4]
 8003dc0:	6123      	str	r3, [r4, #16]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc8:	e7a8      	b.n	8003d1c <_printf_i+0x150>
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	4632      	mov	r2, r6
 8003dce:	4649      	mov	r1, r9
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	47d0      	blx	sl
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d0ab      	beq.n	8003d30 <_printf_i+0x164>
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	079b      	lsls	r3, r3, #30
 8003ddc:	d413      	bmi.n	8003e06 <_printf_i+0x23a>
 8003dde:	68e0      	ldr	r0, [r4, #12]
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	4298      	cmp	r0, r3
 8003de4:	bfb8      	it	lt
 8003de6:	4618      	movlt	r0, r3
 8003de8:	e7a4      	b.n	8003d34 <_printf_i+0x168>
 8003dea:	2301      	movs	r3, #1
 8003dec:	4632      	mov	r2, r6
 8003dee:	4649      	mov	r1, r9
 8003df0:	4640      	mov	r0, r8
 8003df2:	47d0      	blx	sl
 8003df4:	3001      	adds	r0, #1
 8003df6:	d09b      	beq.n	8003d30 <_printf_i+0x164>
 8003df8:	3501      	adds	r5, #1
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	9903      	ldr	r1, [sp, #12]
 8003dfe:	1a5b      	subs	r3, r3, r1
 8003e00:	42ab      	cmp	r3, r5
 8003e02:	dcf2      	bgt.n	8003dea <_printf_i+0x21e>
 8003e04:	e7eb      	b.n	8003dde <_printf_i+0x212>
 8003e06:	2500      	movs	r5, #0
 8003e08:	f104 0619 	add.w	r6, r4, #25
 8003e0c:	e7f5      	b.n	8003dfa <_printf_i+0x22e>
 8003e0e:	bf00      	nop
 8003e10:	080041cf 	.word	0x080041cf
 8003e14:	080041e0 	.word	0x080041e0

08003e18 <memmove>:
 8003e18:	4288      	cmp	r0, r1
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	eb01 0402 	add.w	r4, r1, r2
 8003e20:	d902      	bls.n	8003e28 <memmove+0x10>
 8003e22:	4284      	cmp	r4, r0
 8003e24:	4623      	mov	r3, r4
 8003e26:	d807      	bhi.n	8003e38 <memmove+0x20>
 8003e28:	1e43      	subs	r3, r0, #1
 8003e2a:	42a1      	cmp	r1, r4
 8003e2c:	d008      	beq.n	8003e40 <memmove+0x28>
 8003e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e36:	e7f8      	b.n	8003e2a <memmove+0x12>
 8003e38:	4402      	add	r2, r0
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	428a      	cmp	r2, r1
 8003e3e:	d100      	bne.n	8003e42 <memmove+0x2a>
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e4a:	e7f7      	b.n	8003e3c <memmove+0x24>

08003e4c <_free_r>:
 8003e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	d048      	beq.n	8003ee4 <_free_r+0x98>
 8003e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e56:	9001      	str	r0, [sp, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e5e:	bfb8      	it	lt
 8003e60:	18e4      	addlt	r4, r4, r3
 8003e62:	f000 f8d3 	bl	800400c <__malloc_lock>
 8003e66:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <_free_r+0x9c>)
 8003e68:	9801      	ldr	r0, [sp, #4]
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	4615      	mov	r5, r2
 8003e6e:	b933      	cbnz	r3, 8003e7e <_free_r+0x32>
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	6014      	str	r4, [r2, #0]
 8003e74:	b003      	add	sp, #12
 8003e76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e7a:	f000 b8cd 	b.w	8004018 <__malloc_unlock>
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	d90b      	bls.n	8003e9a <_free_r+0x4e>
 8003e82:	6821      	ldr	r1, [r4, #0]
 8003e84:	1862      	adds	r2, r4, r1
 8003e86:	4293      	cmp	r3, r2
 8003e88:	bf04      	itt	eq
 8003e8a:	681a      	ldreq	r2, [r3, #0]
 8003e8c:	685b      	ldreq	r3, [r3, #4]
 8003e8e:	6063      	str	r3, [r4, #4]
 8003e90:	bf04      	itt	eq
 8003e92:	1852      	addeq	r2, r2, r1
 8003e94:	6022      	streq	r2, [r4, #0]
 8003e96:	602c      	str	r4, [r5, #0]
 8003e98:	e7ec      	b.n	8003e74 <_free_r+0x28>
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	b10b      	cbz	r3, 8003ea4 <_free_r+0x58>
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d9fa      	bls.n	8003e9a <_free_r+0x4e>
 8003ea4:	6811      	ldr	r1, [r2, #0]
 8003ea6:	1855      	adds	r5, r2, r1
 8003ea8:	42a5      	cmp	r5, r4
 8003eaa:	d10b      	bne.n	8003ec4 <_free_r+0x78>
 8003eac:	6824      	ldr	r4, [r4, #0]
 8003eae:	4421      	add	r1, r4
 8003eb0:	1854      	adds	r4, r2, r1
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	d1dd      	bne.n	8003e74 <_free_r+0x28>
 8003eb8:	681c      	ldr	r4, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	6053      	str	r3, [r2, #4]
 8003ebe:	4421      	add	r1, r4
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	e7d7      	b.n	8003e74 <_free_r+0x28>
 8003ec4:	d902      	bls.n	8003ecc <_free_r+0x80>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	6003      	str	r3, [r0, #0]
 8003eca:	e7d3      	b.n	8003e74 <_free_r+0x28>
 8003ecc:	6825      	ldr	r5, [r4, #0]
 8003ece:	1961      	adds	r1, r4, r5
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	bf04      	itt	eq
 8003ed4:	6819      	ldreq	r1, [r3, #0]
 8003ed6:	685b      	ldreq	r3, [r3, #4]
 8003ed8:	6063      	str	r3, [r4, #4]
 8003eda:	bf04      	itt	eq
 8003edc:	1949      	addeq	r1, r1, r5
 8003ede:	6021      	streq	r1, [r4, #0]
 8003ee0:	6054      	str	r4, [r2, #4]
 8003ee2:	e7c7      	b.n	8003e74 <_free_r+0x28>
 8003ee4:	b003      	add	sp, #12
 8003ee6:	bd30      	pop	{r4, r5, pc}
 8003ee8:	200154a4 	.word	0x200154a4

08003eec <_malloc_r>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	1ccd      	adds	r5, r1, #3
 8003ef0:	f025 0503 	bic.w	r5, r5, #3
 8003ef4:	3508      	adds	r5, #8
 8003ef6:	2d0c      	cmp	r5, #12
 8003ef8:	bf38      	it	cc
 8003efa:	250c      	movcc	r5, #12
 8003efc:	2d00      	cmp	r5, #0
 8003efe:	4606      	mov	r6, r0
 8003f00:	db01      	blt.n	8003f06 <_malloc_r+0x1a>
 8003f02:	42a9      	cmp	r1, r5
 8003f04:	d903      	bls.n	8003f0e <_malloc_r+0x22>
 8003f06:	230c      	movs	r3, #12
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f0e:	f000 f87d 	bl	800400c <__malloc_lock>
 8003f12:	4921      	ldr	r1, [pc, #132]	; (8003f98 <_malloc_r+0xac>)
 8003f14:	680a      	ldr	r2, [r1, #0]
 8003f16:	4614      	mov	r4, r2
 8003f18:	b99c      	cbnz	r4, 8003f42 <_malloc_r+0x56>
 8003f1a:	4f20      	ldr	r7, [pc, #128]	; (8003f9c <_malloc_r+0xb0>)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b923      	cbnz	r3, 8003f2a <_malloc_r+0x3e>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f862 	bl	8003fec <_sbrk_r>
 8003f28:	6038      	str	r0, [r7, #0]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	f000 f85d 	bl	8003fec <_sbrk_r>
 8003f32:	1c43      	adds	r3, r0, #1
 8003f34:	d123      	bne.n	8003f7e <_malloc_r+0x92>
 8003f36:	230c      	movs	r3, #12
 8003f38:	6033      	str	r3, [r6, #0]
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f000 f86c 	bl	8004018 <__malloc_unlock>
 8003f40:	e7e3      	b.n	8003f0a <_malloc_r+0x1e>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	1b5b      	subs	r3, r3, r5
 8003f46:	d417      	bmi.n	8003f78 <_malloc_r+0x8c>
 8003f48:	2b0b      	cmp	r3, #11
 8003f4a:	d903      	bls.n	8003f54 <_malloc_r+0x68>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	441c      	add	r4, r3
 8003f50:	6025      	str	r5, [r4, #0]
 8003f52:	e004      	b.n	8003f5e <_malloc_r+0x72>
 8003f54:	6863      	ldr	r3, [r4, #4]
 8003f56:	42a2      	cmp	r2, r4
 8003f58:	bf0c      	ite	eq
 8003f5a:	600b      	streq	r3, [r1, #0]
 8003f5c:	6053      	strne	r3, [r2, #4]
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f000 f85a 	bl	8004018 <__malloc_unlock>
 8003f64:	f104 000b 	add.w	r0, r4, #11
 8003f68:	1d23      	adds	r3, r4, #4
 8003f6a:	f020 0007 	bic.w	r0, r0, #7
 8003f6e:	1ac2      	subs	r2, r0, r3
 8003f70:	d0cc      	beq.n	8003f0c <_malloc_r+0x20>
 8003f72:	1a1b      	subs	r3, r3, r0
 8003f74:	50a3      	str	r3, [r4, r2]
 8003f76:	e7c9      	b.n	8003f0c <_malloc_r+0x20>
 8003f78:	4622      	mov	r2, r4
 8003f7a:	6864      	ldr	r4, [r4, #4]
 8003f7c:	e7cc      	b.n	8003f18 <_malloc_r+0x2c>
 8003f7e:	1cc4      	adds	r4, r0, #3
 8003f80:	f024 0403 	bic.w	r4, r4, #3
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d0e3      	beq.n	8003f50 <_malloc_r+0x64>
 8003f88:	1a21      	subs	r1, r4, r0
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f000 f82e 	bl	8003fec <_sbrk_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d1dd      	bne.n	8003f50 <_malloc_r+0x64>
 8003f94:	e7cf      	b.n	8003f36 <_malloc_r+0x4a>
 8003f96:	bf00      	nop
 8003f98:	200154a4 	.word	0x200154a4
 8003f9c:	200154a8 	.word	0x200154a8

08003fa0 <_realloc_r>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	4607      	mov	r7, r0
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	460e      	mov	r6, r1
 8003fa8:	b921      	cbnz	r1, 8003fb4 <_realloc_r+0x14>
 8003faa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fae:	4611      	mov	r1, r2
 8003fb0:	f7ff bf9c 	b.w	8003eec <_malloc_r>
 8003fb4:	b922      	cbnz	r2, 8003fc0 <_realloc_r+0x20>
 8003fb6:	f7ff ff49 	bl	8003e4c <_free_r>
 8003fba:	4625      	mov	r5, r4
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc0:	f000 f830 	bl	8004024 <_malloc_usable_size_r>
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d20f      	bcs.n	8003fe8 <_realloc_r+0x48>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f7ff ff8e 	bl	8003eec <_malloc_r>
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0f2      	beq.n	8003fbc <_realloc_r+0x1c>
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4622      	mov	r2, r4
 8003fda:	f7ff fbf7 	bl	80037cc <memcpy>
 8003fde:	4631      	mov	r1, r6
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f7ff ff33 	bl	8003e4c <_free_r>
 8003fe6:	e7e9      	b.n	8003fbc <_realloc_r+0x1c>
 8003fe8:	4635      	mov	r5, r6
 8003fea:	e7e7      	b.n	8003fbc <_realloc_r+0x1c>

08003fec <_sbrk_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d06      	ldr	r5, [pc, #24]	; (8004008 <_sbrk_r+0x1c>)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	f000 f81e 	bl	8004038 <_sbrk>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d102      	bne.n	8004006 <_sbrk_r+0x1a>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	b103      	cbz	r3, 8004006 <_sbrk_r+0x1a>
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	20015558 	.word	0x20015558

0800400c <__malloc_lock>:
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <__malloc_lock+0x8>)
 800400e:	f000 b811 	b.w	8004034 <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	20015560 	.word	0x20015560

08004018 <__malloc_unlock>:
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <__malloc_unlock+0x8>)
 800401a:	f000 b80c 	b.w	8004036 <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	20015560 	.word	0x20015560

08004024 <_malloc_usable_size_r>:
 8004024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004028:	1f18      	subs	r0, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	bfbc      	itt	lt
 800402e:	580b      	ldrlt	r3, [r1, r0]
 8004030:	18c0      	addlt	r0, r0, r3
 8004032:	4770      	bx	lr

08004034 <__retarget_lock_acquire_recursive>:
 8004034:	4770      	bx	lr

08004036 <__retarget_lock_release_recursive>:
 8004036:	4770      	bx	lr

08004038 <_sbrk>:
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <_sbrk+0x14>)
 800403a:	6819      	ldr	r1, [r3, #0]
 800403c:	4602      	mov	r2, r0
 800403e:	b909      	cbnz	r1, 8004044 <_sbrk+0xc>
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <_sbrk+0x18>)
 8004042:	6019      	str	r1, [r3, #0]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	4402      	add	r2, r0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	4770      	bx	lr
 800404c:	200154ac 	.word	0x200154ac
 8004050:	20015568 	.word	0x20015568

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
