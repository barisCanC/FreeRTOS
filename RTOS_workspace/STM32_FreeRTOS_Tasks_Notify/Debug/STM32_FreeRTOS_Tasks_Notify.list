
STM32_FreeRTOS_Tasks_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004610  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004958  08004958  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004958  08004958  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004958  08004958  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174d8  2000008c  080049ec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20017564  080049ec  00027564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef39  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201a  00000000  00000000  0002eff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00031010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  00031b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000301d  00000000  00000000  00032638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c04a  00000000  00000000  00035655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007727e  00000000  00000000  0004169f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b891d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  000b8970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047c8 	.word	0x080047c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	080047c8 	.word	0x080047c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	460b      	mov	r3, r1
 80003e8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003ea:	2300      	movs	r3, #0
 80003ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	691a      	ldr	r2, [r3, #16]
 80003f2:	887b      	ldrh	r3, [r7, #2]
 80003f4:	4013      	ands	r3, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003fa:	2301      	movs	r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
 80003fe:	e001      	b.n	8000404 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000404:	7bfb      	ldrb	r3, [r7, #15]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	460b      	mov	r3, r1
 800041c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	887b      	ldrh	r3, [r7, #2]
 8000424:	405a      	eors	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	615a      	str	r2, [r3, #20]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000436:	b480      	push	{r7}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	807b      	strh	r3, [r7, #2]
 8000442:	4613      	mov	r3, r2
 8000444:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800044e:	787a      	ldrb	r2, [r7, #1]
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	f003 0307 	and.w	r3, r3, #7
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800045e:	887b      	ldrh	r3, [r7, #2]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b29b      	uxth	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3208      	adds	r2, #8
 800046a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046e:	887b      	ldrh	r3, [r7, #2]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	210f      	movs	r1, #15
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	8879      	ldrh	r1, [r7, #2]
 8000480:	08c9      	lsrs	r1, r1, #3
 8000482:	b289      	uxth	r1, r1
 8000484:	4608      	mov	r0, r1
 8000486:	ea02 0103 	and.w	r1, r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f100 0208 	add.w	r2, r0, #8
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000494:	887b      	ldrh	r3, [r7, #2]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b29b      	uxth	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3208      	adds	r2, #8
 80004a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004aa:	887b      	ldrh	r3, [r7, #2]
 80004ac:	08db      	lsrs	r3, r3, #3
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3208      	adds	r2, #8
 80004b6:	68b9      	ldr	r1, [r7, #8]
 80004b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <RCC_DeInit+0x60>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <RCC_DeInit+0x60>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <RCC_DeInit+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <RCC_DeInit+0x60>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <RCC_DeInit+0x60>)
 80004e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004ec:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <RCC_DeInit+0x60>)
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <RCC_DeInit+0x64>)
 80004f2:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <RCC_DeInit+0x60>)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <RCC_DeInit+0x68>)
 80004f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <RCC_DeInit+0x60>)
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <RCC_DeInit+0x6c>)
 8000500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <RCC_DeInit+0x60>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <RCC_DeInit+0x60>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <RCC_DeInit+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <RCC_DeInit+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023800 	.word	0x40023800
 800052c:	24003010 	.word	0x24003010
 8000530:	20003000 	.word	0x20003000
 8000534:	24003000 	.word	0x24003000

08000538 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	2302      	movs	r3, #2
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	2302      	movs	r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000558:	4b4a      	ldr	r3, [pc, #296]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f003 030c 	and.w	r3, r3, #12
 8000560:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2b08      	cmp	r3, #8
 8000566:	d011      	beq.n	800058c <RCC_GetClocksFreq+0x54>
 8000568:	69bb      	ldr	r3, [r7, #24]
 800056a:	2b08      	cmp	r3, #8
 800056c:	d844      	bhi.n	80005f8 <RCC_GetClocksFreq+0xc0>
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <RCC_GetClocksFreq+0x44>
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d004      	beq.n	8000584 <RCC_GetClocksFreq+0x4c>
 800057a:	e03d      	b.n	80005f8 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a42      	ldr	r2, [pc, #264]	; (8000688 <RCC_GetClocksFreq+0x150>)
 8000580:	601a      	str	r2, [r3, #0]
    break;
 8000582:	e03d      	b.n	8000600 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a41      	ldr	r2, [pc, #260]	; (800068c <RCC_GetClocksFreq+0x154>)
 8000588:	601a      	str	r2, [r3, #0]
    break;
 800058a:	e039      	b.n	8000600 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800058c:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0d9b      	lsrs	r3, r3, #22
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005a0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00c      	beq.n	80005c2 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005a8:	4a38      	ldr	r2, [pc, #224]	; (800068c <RCC_GetClocksFreq+0x154>)
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b0:	4a34      	ldr	r2, [pc, #208]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 80005b2:	6852      	ldr	r2, [r2, #4]
 80005b4:	0992      	lsrs	r2, r2, #6
 80005b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	e00b      	b.n	80005da <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005c2:	4a31      	ldr	r2, [pc, #196]	; (8000688 <RCC_GetClocksFreq+0x150>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 80005cc:	6852      	ldr	r2, [r2, #4]
 80005ce:	0992      	lsrs	r2, r2, #6
 80005d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005d4:	fb02 f303 	mul.w	r3, r2, r3
 80005d8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	0c1b      	lsrs	r3, r3, #16
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	3301      	adds	r3, #1
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
    break;
 80005f6:	e003      	b.n	8000600 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a23      	ldr	r2, [pc, #140]	; (8000688 <RCC_GetClocksFreq+0x150>)
 80005fc:	601a      	str	r2, [r3, #0]
    break;
 80005fe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000608:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <RCC_GetClocksFreq+0x158>)
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	40da      	lsrs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000630:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	0a9b      	lsrs	r3, r3, #10
 8000636:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000638:	4a15      	ldr	r2, [pc, #84]	; (8000690 <RCC_GetClocksFreq+0x158>)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	40da      	lsrs	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <RCC_GetClocksFreq+0x14c>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000658:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	0b5b      	lsrs	r3, r3, #13
 800065e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <RCC_GetClocksFreq+0x158>)
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	40da      	lsrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]
}
 8000678:	bf00      	nop
 800067a:	3724      	adds	r7, #36	; 0x24
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40023800 	.word	0x40023800
 8000688:	00f42400 	.word	0x00f42400
 800068c:	017d7840 	.word	0x017d7840
 8000690:	20000000 	.word	0x20000000

08000694 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	4909      	ldr	r1, [pc, #36]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006b2:	e006      	b.n	80006c2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4904      	ldr	r1, [pc, #16]	; (80006d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006be:	4013      	ands	r3, r2
 80006c0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ea:	4909      	ldr	r1, [pc, #36]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006f2:	e006      	b.n	8000702 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <RCC_APB1PeriphClockCmd+0x3c>)
 80006fe:	4013      	ands	r3, r2
 8000700:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 8000728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4313      	orrs	r3, r2
 8000730:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000732:	e006      	b.n	8000742 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 8000736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	43db      	mvns	r3, r3
 800073c:	4904      	ldr	r1, [pc, #16]	; (8000750 <RCC_APB2PeriphClockCmd+0x3c>)
 800073e:	4013      	ands	r3, r2
 8000740:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	8a1b      	ldrh	r3, [r3, #16]
 8000772:	b29b      	uxth	r3, r3
 8000774:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	88db      	ldrh	r3, [r3, #6]
 8000782:	461a      	mov	r2, r3
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	4313      	orrs	r3, r2
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	b29a      	uxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	899b      	ldrh	r3, [r3, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80007a0:	f023 030c 	bic.w	r3, r3, #12
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	889a      	ldrh	r2, [r3, #4]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	891b      	ldrh	r3, [r3, #8]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	4313      	orrs	r3, r2
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	8a9b      	ldrh	r3, [r3, #20]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	461a      	mov	r2, r3
 80007e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e2:	4313      	orrs	r3, r2
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fea0 	bl	8000538 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a30      	ldr	r2, [pc, #192]	; (80008bc <USART_Init+0x168>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d003      	beq.n	8000808 <USART_Init+0xb4>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <USART_Init+0x16c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d102      	bne.n	800080e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	e001      	b.n	8000812 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	899b      	ldrh	r3, [r3, #12]
 8000816:	b29b      	uxth	r3, r3
 8000818:	b21b      	sxth	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	da0c      	bge.n	8000838 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800081e:	6a3a      	ldr	r2, [r7, #32]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	009a      	lsls	r2, r3, #2
 8000828:	441a      	add	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fbb2 f3f3 	udiv	r3, r2, r3
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e00b      	b.n	8000850 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000838:	6a3a      	ldr	r2, [r7, #32]
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	009a      	lsls	r2, r3, #2
 8000842:	441a      	add	r2, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <USART_Init+0x170>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	095b      	lsrs	r3, r3, #5
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	2264      	movs	r2, #100	; 0x64
 8000864:	fb02 f303 	mul.w	r3, r2, r3
 8000868:	69fa      	ldr	r2, [r7, #28]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	899b      	ldrh	r3, [r3, #12]
 8000872:	b29b      	uxth	r3, r3
 8000874:	b21b      	sxth	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	da0c      	bge.n	8000894 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	3332      	adds	r3, #50	; 0x32
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <USART_Init+0x170>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800088e:	4313      	orrs	r3, r2
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
 8000892:	e00b      	b.n	80008ac <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	3332      	adds	r3, #50	; 0x32
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <USART_Init+0x170>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	095b      	lsrs	r3, r3, #5
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a8:	4313      	orrs	r3, r2
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	811a      	strh	r2, [r3, #8]
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40011000 	.word	0x40011000
 80008c0:	40011400 	.word	0x40011400
 80008c4:	51eb851f 	.word	0x51eb851f

080008c8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d008      	beq.n	80008ec <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	899b      	ldrh	r3, [r3, #12]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008ea:	e007      	b.n	80008fc <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	899b      	ldrh	r3, [r3, #12]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	819a      	strh	r2, [r3, #12]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	809a      	strh	r2, [r3, #4]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29a      	uxth	r2, r3
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	4013      	ands	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e001      	b.n	8000956 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f103 0208 	add.w	r2, r3, #8
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f103 0208 	add.w	r2, r3, #8
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0208 	add.w	r2, r3, #8
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d103      	bne.n	8000a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e00c      	b.n	8000a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3308      	adds	r3, #8
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e002      	b.n	8000a34 <vListInsert+0x2e>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d2f6      	bcs.n	8000a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	6892      	ldr	r2, [r2, #8]
 8000a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	6852      	ldr	r2, [r2, #4]
 8000a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d103      	bne.n	8000aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 f853 	bl	8001b8c <pvPortMalloc>
 8000ae6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00e      	beq.n	8000b0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000aee:	2058      	movs	r0, #88	; 0x58
 8000af0:	f001 f84c 	bl	8001b8c <pvPortMalloc>
 8000af4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30
 8000b02:	e005      	b.n	8000b10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000b04:	6978      	ldr	r0, [r7, #20]
 8000b06:	f001 f905 	bl	8001d14 <vPortFree>
 8000b0a:	e001      	b.n	8000b10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d013      	beq.n	8000b3e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9303      	str	r3, [sp, #12]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f80e 	bl	8000b4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000b32:	69f8      	ldr	r0, [r7, #28]
 8000b34:	f000 f8a0 	bl	8000c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	e002      	b.n	8000b44 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000b44:	69bb      	ldr	r3, [r7, #24]
	}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b088      	sub	sp, #32
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10a      	bne.n	8000b78 <prvInitialiseNewTask+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b66:	f383 8811 	msr	BASEPRI, r3
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b74:	bf00      	nop
 8000b76:	e7fe      	b.n	8000b76 <prvInitialiseNewTask+0x28>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	461a      	mov	r2, r3
 8000b82:	21a5      	movs	r1, #165	; 0xa5
 8000b84:	f003 f9f8 	bl	8003f78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b92:	3b01      	subs	r3, #1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	f023 0307 	bic.w	r3, r3, #7
 8000ba0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00a      	beq.n	8000bc2 <prvInitialiseNewTask+0x74>
	__asm volatile
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	613b      	str	r3, [r7, #16]
}
 8000bbe:	bf00      	nop
 8000bc0:	e7fe      	b.n	8000bc0 <prvInitialiseNewTask+0x72>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e012      	b.n	8000bee <prvInitialiseNewTask+0xa0>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	4413      	add	r3, r2
 8000bce:	7819      	ldrb	r1, [r3, #0]
 8000bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3334      	adds	r3, #52	; 0x34
 8000bd8:	460a      	mov	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	4413      	add	r3, r2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <prvInitialiseNewTask+0xa8>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	2b09      	cmp	r3, #9
 8000bf2:	d9e9      	bls.n	8000bc8 <prvInitialiseNewTask+0x7a>
 8000bf4:	e000      	b.n	8000bf8 <prvInitialiseNewTask+0xaa>
		{
			break;
 8000bf6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d901      	bls.n	8000c0a <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c06:	2304      	movs	r3, #4
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c14:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c18:	2200      	movs	r2, #0
 8000c1a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1e:	3304      	adds	r3, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff febf 	bl	80009a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	3318      	adds	r3, #24
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff feba 	bl	80009a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	f1c3 0205 	rsb	r2, r3, #5
 8000c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	2200      	movs	r2, #0
 8000c4a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	68f9      	ldr	r1, [r7, #12]
 8000c58:	69b8      	ldr	r0, [r7, #24]
 8000c5a:	f000 fd41 	bl	80016e0 <pxPortInitialiseStack>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000c80:	f000 fe58 	bl	8001934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <prvAddNewTaskToReadyList+0xfc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a3a      	ldr	r2, [pc, #232]	; (8000d74 <prvAddNewTaskToReadyList+0xfc>)
 8000c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000c8e:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d109      	bne.n	8000caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000c96:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <prvAddNewTaskToReadyList+0xfc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d110      	bne.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ca4:	f000 fada 	bl	800125c <prvInitialiseTaskLists>
 8000ca8:	e00d      	b.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <prvAddNewTaskToReadyList+0x104>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d109      	bne.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d802      	bhi.n	8000cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000cc0:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <prvAddNewTaskToReadyList+0x108>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a2c      	ldr	r2, [pc, #176]	; (8000d80 <prvAddNewTaskToReadyList+0x108>)
 8000cce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <prvAddNewTaskToReadyList+0x108>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d016      	beq.n	8000d0c <prvAddNewTaskToReadyList+0x94>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fb8f 	bl	8003404 <SEGGER_SYSVIEW_OnTaskCreate>
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461c      	mov	r4, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	1ae3      	subs	r3, r4, r3
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	462b      	mov	r3, r5
 8000d08:	f001 f9c2 	bl	8002090 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fc00 	bl	8003514 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	2201      	movs	r2, #1
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <prvAddNewTaskToReadyList+0x10c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <prvAddNewTaskToReadyList+0x10c>)
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <prvAddNewTaskToReadyList+0x110>)
 8000d34:	441a      	add	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	f7ff fe3e 	bl	80009be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d42:	f000 fe27 	bl	8001994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <prvAddNewTaskToReadyList+0x104>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00e      	beq.n	8000d6c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <prvAddNewTaskToReadyList+0x100>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <prvAddNewTaskToReadyList+0x114>)
 8000d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	f3bf 8f4f 	dsb	sy
 8000d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	20000180 	.word	0x20000180
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	2000018c 	.word	0x2000018c
 8000d80:	2000019c 	.word	0x2000019c
 8000d84:	20000188 	.word	0x20000188
 8000d88:	200000ac 	.word	0x200000ac
 8000d8c:	e000ed04 	.word	0xe000ed04

08000d90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <vTaskStartScheduler+0x94>)
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2282      	movs	r2, #130	; 0x82
 8000da2:	4921      	ldr	r1, [pc, #132]	; (8000e28 <vTaskStartScheduler+0x98>)
 8000da4:	4821      	ldr	r0, [pc, #132]	; (8000e2c <vTaskStartScheduler+0x9c>)
 8000da6:	f7ff fe91 	bl	8000acc <xTaskCreate>
 8000daa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d124      	bne.n	8000dfc <vTaskStartScheduler+0x6c>
	__asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	60bb      	str	r3, [r7, #8]
}
 8000dc4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <vTaskStartScheduler+0xa0>)
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <vTaskStartScheduler+0xa4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <vTaskStartScheduler+0xa8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <vTaskStartScheduler+0xac>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <vTaskStartScheduler+0x94>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d102      	bne.n	8000dec <vTaskStartScheduler+0x5c>
 8000de6:	f002 faf1 	bl	80033cc <SEGGER_SYSVIEW_OnIdle>
 8000dea:	e004      	b.n	8000df6 <vTaskStartScheduler+0x66>
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <vTaskStartScheduler+0xac>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fb4b 	bl	800348c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000df6:	f000 fcfb 	bl	80017f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000dfa:	e00e      	b.n	8000e1a <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e02:	d10a      	bne.n	8000e1a <vTaskStartScheduler+0x8a>
	__asm volatile
 8000e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	607b      	str	r3, [r7, #4]
}
 8000e16:	bf00      	nop
 8000e18:	e7fe      	b.n	8000e18 <vTaskStartScheduler+0x88>
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001a4 	.word	0x200001a4
 8000e28:	080047e0 	.word	0x080047e0
 8000e2c:	0800122d 	.word	0x0800122d
 8000e30:	200001a0 	.word	0x200001a0
 8000e34:	2000018c 	.word	0x2000018c
 8000e38:	20000184 	.word	0x20000184
 8000e3c:	200000a8 	.word	0x200000a8

08000e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <vTaskSuspendAll+0x18>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <vTaskSuspendAll+0x18>)
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	200001a8 	.word	0x200001a8

08000e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <xTaskResumeAll+0x11c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10a      	bne.n	8000e88 <xTaskResumeAll+0x2c>
	__asm volatile
 8000e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e76:	f383 8811 	msr	BASEPRI, r3
 8000e7a:	f3bf 8f6f 	isb	sy
 8000e7e:	f3bf 8f4f 	dsb	sy
 8000e82:	603b      	str	r3, [r7, #0]
}
 8000e84:	bf00      	nop
 8000e86:	e7fe      	b.n	8000e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000e88:	f000 fd54 	bl	8001934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <xTaskResumeAll+0x11c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <xTaskResumeAll+0x11c>)
 8000e94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <xTaskResumeAll+0x11c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d165      	bne.n	8000f6a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000e9e:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <xTaskResumeAll+0x120>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d061      	beq.n	8000f6a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ea6:	e032      	b.n	8000f0e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <xTaskResumeAll+0x124>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3318      	adds	r3, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fddf 	bl	8000a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fdda 	bl	8000a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fb24 	bl	8003514 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <xTaskResumeAll+0x128>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <xTaskResumeAll+0x128>)
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <xTaskResumeAll+0x12c>)
 8000eec:	441a      	add	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	f7ff fd62 	bl	80009be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <xTaskResumeAll+0x130>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d302      	bcc.n	8000f0e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8000f08:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <xTaskResumeAll+0x134>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <xTaskResumeAll+0x124>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1c8      	bne.n	8000ea8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000f1c:	f000 fa1c 	bl	8001358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <xTaskResumeAll+0x138>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d010      	beq.n	8000f4e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000f2c:	f000 f858 	bl	8000fe0 <xTaskIncrementTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <xTaskResumeAll+0x134>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f1      	bne.n	8000f2c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <xTaskResumeAll+0x138>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <xTaskResumeAll+0x134>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d009      	beq.n	8000f6a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <xTaskResumeAll+0x13c>)
 8000f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	f3bf 8f4f 	dsb	sy
 8000f66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000f6a:	f000 fd13 	bl	8001994 <vPortExitCritical>

	return xAlreadyYielded;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200001a8 	.word	0x200001a8
 8000f7c:	20000180 	.word	0x20000180
 8000f80:	20000140 	.word	0x20000140
 8000f84:	20000188 	.word	0x20000188
 8000f88:	200000ac 	.word	0x200000ac
 8000f8c:	200000a8 	.word	0x200000a8
 8000f90:	20000194 	.word	0x20000194
 8000f94:	20000190 	.word	0x20000190
 8000f98:	e000ed04 	.word	0xe000ed04

08000f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <xTaskGetTickCount+0x1c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000184 	.word	0x20000184

08000fbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fc2:	f000 fda3 	bl	8001b0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <xTaskGetTickCountFromISR+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fd0:	683b      	ldr	r3, [r7, #0]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000184 	.word	0x20000184

08000fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fea:	4b50      	ldr	r3, [pc, #320]	; (800112c <xTaskIncrementTick+0x14c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 808c 	bne.w	800110c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000ff4:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <xTaskIncrementTick+0x150>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <xTaskIncrementTick+0x150>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d120      	bne.n	800104a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001008:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <xTaskIncrementTick+0x154>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00a      	beq.n	8001028 <xTaskIncrementTick+0x48>
	__asm volatile
 8001012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001016:	f383 8811 	msr	BASEPRI, r3
 800101a:	f3bf 8f6f 	isb	sy
 800101e:	f3bf 8f4f 	dsb	sy
 8001022:	603b      	str	r3, [r7, #0]
}
 8001024:	bf00      	nop
 8001026:	e7fe      	b.n	8001026 <xTaskIncrementTick+0x46>
 8001028:	4b42      	ldr	r3, [pc, #264]	; (8001134 <xTaskIncrementTick+0x154>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b42      	ldr	r3, [pc, #264]	; (8001138 <xTaskIncrementTick+0x158>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a40      	ldr	r2, [pc, #256]	; (8001134 <xTaskIncrementTick+0x154>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4a40      	ldr	r2, [pc, #256]	; (8001138 <xTaskIncrementTick+0x158>)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b3f      	ldr	r3, [pc, #252]	; (800113c <xTaskIncrementTick+0x15c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a3e      	ldr	r2, [pc, #248]	; (800113c <xTaskIncrementTick+0x15c>)
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	f000 f987 	bl	8001358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <xTaskIncrementTick+0x160>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d34c      	bcc.n	80010ee <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <xTaskIncrementTick+0x154>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <xTaskIncrementTick+0x160>)
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	601a      	str	r2, [r3, #0]
					break;
 8001066:	e042      	b.n	80010ee <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001068:	4b32      	ldr	r3, [pc, #200]	; (8001134 <xTaskIncrementTick+0x154>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d203      	bcs.n	8001088 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001080:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <xTaskIncrementTick+0x160>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001086:	e032      	b.n	80010ee <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3304      	adds	r3, #4
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fcf3 	bl	8000a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	3318      	adds	r3, #24
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fcea 	bl	8000a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fa34 	bl	8003514 <SEGGER_SYSVIEW_OnTaskStartReady>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	2201      	movs	r2, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <xTaskIncrementTick+0x164>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	4a22      	ldr	r2, [pc, #136]	; (8001144 <xTaskIncrementTick+0x164>)
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <xTaskIncrementTick+0x168>)
 80010cc:	441a      	add	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3304      	adds	r3, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff fc72 	bl	80009be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <xTaskIncrementTick+0x16c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3b5      	bcc.n	8001054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010ec:	e7b2      	b.n	8001054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <xTaskIncrementTick+0x16c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f4:	4914      	ldr	r1, [pc, #80]	; (8001148 <xTaskIncrementTick+0x168>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d907      	bls.n	8001116 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001106:	2301      	movs	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e004      	b.n	8001116 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <xTaskIncrementTick+0x170>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <xTaskIncrementTick+0x170>)
 8001114:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <xTaskIncrementTick+0x174>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001122:	697b      	ldr	r3, [r7, #20]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200001a8 	.word	0x200001a8
 8001130:	20000184 	.word	0x20000184
 8001134:	20000138 	.word	0x20000138
 8001138:	2000013c 	.word	0x2000013c
 800113c:	20000198 	.word	0x20000198
 8001140:	200001a0 	.word	0x200001a0
 8001144:	20000188 	.word	0x20000188
 8001148:	200000ac 	.word	0x200000ac
 800114c:	200000a8 	.word	0x200000a8
 8001150:	20000190 	.word	0x20000190
 8001154:	20000194 	.word	0x20000194

08001158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <vTaskSwitchContext+0xbc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <vTaskSwitchContext+0xc0>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800116c:	e04d      	b.n	800120a <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <vTaskSwitchContext+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <vTaskSwitchContext+0xc4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	fab3 f383 	clz	r3, r3
 8001180:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	f1c3 031f 	rsb	r3, r3, #31
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	4925      	ldr	r1, [pc, #148]	; (8001220 <vTaskSwitchContext+0xc8>)
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10a      	bne.n	80011b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800119e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a2:	f383 8811 	msr	BASEPRI, r3
 80011a6:	f3bf 8f6f 	isb	sy
 80011aa:	f3bf 8f4f 	dsb	sy
 80011ae:	607b      	str	r3, [r7, #4]
}
 80011b0:	bf00      	nop
 80011b2:	e7fe      	b.n	80011b2 <vTaskSwitchContext+0x5a>
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <vTaskSwitchContext+0xc8>)
 80011c0:	4413      	add	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3308      	adds	r3, #8
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d104      	bne.n	80011e4 <vTaskSwitchContext+0x8c>
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <vTaskSwitchContext+0xcc>)
 80011ec:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <vTaskSwitchContext+0xcc>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <vTaskSwitchContext+0xd0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d102      	bne.n	8001200 <vTaskSwitchContext+0xa8>
 80011fa:	f002 f8e7 	bl	80033cc <SEGGER_SYSVIEW_OnIdle>
}
 80011fe:	e004      	b.n	800120a <vTaskSwitchContext+0xb2>
		traceTASK_SWITCHED_IN();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <vTaskSwitchContext+0xcc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f002 f941 	bl	800348c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200001a8 	.word	0x200001a8
 8001218:	20000194 	.word	0x20000194
 800121c:	20000188 	.word	0x20000188
 8001220:	200000ac 	.word	0x200000ac
 8001224:	200000a8 	.word	0x200000a8
 8001228:	200001a4 	.word	0x200001a4

0800122c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001234:	f000 f852 	bl	80012dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <prvIdleTask+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d9f9      	bls.n	8001234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <prvIdleTask+0x2c>)
 8001242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	f3bf 8f4f 	dsb	sy
 800124c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001250:	e7f0      	b.n	8001234 <prvIdleTask+0x8>
 8001252:	bf00      	nop
 8001254:	200000ac 	.word	0x200000ac
 8001258:	e000ed04 	.word	0xe000ed04

0800125c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	e00c      	b.n	8001282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <prvInitialiseTaskLists+0x60>)
 8001274:	4413      	add	r3, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fb74 	bl	8000964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3301      	adds	r3, #1
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d9ef      	bls.n	8001268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <prvInitialiseTaskLists+0x64>)
 800128a:	f7ff fb6b 	bl	8000964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <prvInitialiseTaskLists+0x68>)
 8001290:	f7ff fb68 	bl	8000964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <prvInitialiseTaskLists+0x6c>)
 8001296:	f7ff fb65 	bl	8000964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <prvInitialiseTaskLists+0x70>)
 800129c:	f7ff fb62 	bl	8000964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <prvInitialiseTaskLists+0x74>)
 80012a2:	f7ff fb5f 	bl	8000964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <prvInitialiseTaskLists+0x78>)
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <prvInitialiseTaskLists+0x64>)
 80012aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <prvInitialiseTaskLists+0x7c>)
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <prvInitialiseTaskLists+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000ac 	.word	0x200000ac
 80012c0:	20000110 	.word	0x20000110
 80012c4:	20000124 	.word	0x20000124
 80012c8:	20000140 	.word	0x20000140
 80012cc:	20000154 	.word	0x20000154
 80012d0:	2000016c 	.word	0x2000016c
 80012d4:	20000138 	.word	0x20000138
 80012d8:	2000013c 	.word	0x2000013c

080012dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012e2:	e019      	b.n	8001318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80012e4:	f000 fb26 	bl	8001934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <prvCheckTasksWaitingTermination+0x50>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3304      	adds	r3, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fbbf 	bl	8000a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <prvCheckTasksWaitingTermination+0x54>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3b01      	subs	r3, #1
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <prvCheckTasksWaitingTermination+0x54>)
 8001302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <prvCheckTasksWaitingTermination+0x58>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <prvCheckTasksWaitingTermination+0x58>)
 800130c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800130e:	f000 fb41 	bl	8001994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f810 	bl	8001338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <prvCheckTasksWaitingTermination+0x58>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e1      	bne.n	80012e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000154 	.word	0x20000154
 8001330:	20000180 	.word	0x20000180
 8001334:	20000168 	.word	0x20000168

08001338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fce5 	bl	8001d14 <vPortFree>
			vPortFree( pxTCB );
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fce2 	bl	8001d14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <prvResetNextTaskUnblockTime+0x38>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d104      	bne.n	8001372 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <prvResetNextTaskUnblockTime+0x3c>)
 800136a:	f04f 32ff 	mov.w	r2, #4294967295
 800136e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001370:	e008      	b.n	8001384 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <prvResetNextTaskUnblockTime+0x38>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <prvResetNextTaskUnblockTime+0x3c>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20000138 	.word	0x20000138
 8001394:	200001a0 	.word	0x200001a0

08001398 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80013a6:	f000 fac5 	bl	8001934 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <xTaskNotifyWait+0xc0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d01a      	beq.n	80013ee <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <xTaskNotifyWait+0xc0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	43d2      	mvns	r2, r2
 80013c2:	400a      	ands	r2, r1
 80013c4:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <xTaskNotifyWait+0xc0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80013d6:	2101      	movs	r1, #1
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f000 f909 	bl	80015f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <xTaskNotifyWait+0xc4>)
 80013e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f3bf 8f4f 	dsb	sy
 80013ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80013ee:	f000 fad1 	bl	8001994 <vPortExitCritical>

		taskENTER_CRITICAL();
 80013f2:	f000 fa9f 	bl	8001934 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	4613      	mov	r3, r2
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	68f9      	ldr	r1, [r7, #12]
 8001402:	2040      	movs	r0, #64	; 0x40
 8001404:	f001 fc0a 	bl	8002c1c <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d004      	beq.n	8001418 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <xTaskNotifyWait+0xc0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <xTaskNotifyWait+0xc0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d002      	beq.n	800142c <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e008      	b.n	800143e <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <xTaskNotifyWait+0xc0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	43d2      	mvns	r2, r2
 8001436:	400a      	ands	r2, r1
 8001438:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800143a:	2301      	movs	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <xTaskNotifyWait+0xc0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8001448:	f000 faa4 	bl	8001994 <vPortExitCritical>

		return xReturn;
 800144c:	697b      	ldr	r3, [r7, #20]
	}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000a8 	.word	0x200000a8
 800145c:	e000ed04 	.word	0xe000ed04

08001460 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af02      	add	r7, sp, #8
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10a      	bne.n	8001490 <xTaskGenericNotify+0x30>
	__asm volatile
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	61bb      	str	r3, [r7, #24]
}
 800148c:	bf00      	nop
 800148e:	e7fe      	b.n	800148e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8001494:	f000 fa4e 	bl	8001934 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014ac:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	2202      	movs	r2, #2
 80014b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d828      	bhi.n	800150e <xTaskGenericNotify+0xae>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <xTaskGenericNotify+0x64>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	0800152f 	.word	0x0800152f
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080014e7 	.word	0x080014e7
 80014d0:	080014f3 	.word	0x080014f3
 80014d4:	080014fb 	.word	0x080014fb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	431a      	orrs	r2, r3
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80014e4:	e026      	b.n	8001534 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80014f0:	e020      	b.n	8001534 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80014f8:	e01c      	b.n	8001534 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80014fa:	7ffb      	ldrb	r3, [r7, #31]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d003      	beq.n	8001508 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8001506:	e015      	b.n	8001534 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800150c:	e012      	b.n	8001534 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001516:	d00c      	beq.n	8001532 <xTaskGenericNotify+0xd2>
	__asm volatile
 8001518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151c:	f383 8811 	msr	BASEPRI, r3
 8001520:	f3bf 8f6f 	isb	sy
 8001524:	f3bf 8f4f 	dsb	sy
 8001528:	617b      	str	r3, [r7, #20]
}
 800152a:	bf00      	nop
 800152c:	e7fe      	b.n	800152c <xTaskGenericNotify+0xcc>
					break;
 800152e:	bf00      	nop
 8001530:	e000      	b.n	8001534 <xTaskGenericNotify+0xd4>

					break;
 8001532:	bf00      	nop
			}

			traceTASK_NOTIFY();
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 f890 	bl	800365c <SEGGER_SYSVIEW_ShrinkId>
 800153c:	4601      	mov	r1, r0
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	203e      	movs	r0, #62	; 0x3e
 800154a:	f001 fb67 	bl	8002c1c <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d13d      	bne.n	80015d0 <xTaskGenericNotify+0x170>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	3304      	adds	r3, #4
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fa8d 	bl	8000a78 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	4618      	mov	r0, r3
 8001562:	f001 ffd7 	bl	8003514 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	2201      	movs	r2, #1
 800156c:	409a      	lsls	r2, r3
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <xTaskGenericNotify+0x180>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4313      	orrs	r3, r2
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <xTaskGenericNotify+0x180>)
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <xTaskGenericNotify+0x184>)
 8001586:	441a      	add	r2, r3
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	3304      	adds	r3, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f7ff fa15 	bl	80009be <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <xTaskGenericNotify+0x152>
	__asm volatile
 800159c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a0:	f383 8811 	msr	BASEPRI, r3
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	f3bf 8f4f 	dsb	sy
 80015ac:	613b      	str	r3, [r7, #16]
}
 80015ae:	bf00      	nop
 80015b0:	e7fe      	b.n	80015b0 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <xTaskGenericNotify+0x188>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	429a      	cmp	r2, r3
 80015be:	d907      	bls.n	80015d0 <xTaskGenericNotify+0x170>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <xTaskGenericNotify+0x18c>)
 80015c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80015d0:	f000 f9e0 	bl	8001994 <vPortExitCritical>

		return xReturn;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000188 	.word	0x20000188
 80015e4:	200000ac 	.word	0x200000ac
 80015e8:	200000a8 	.word	0x200000a8
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3304      	adds	r3, #4
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa36 	bl	8000a78 <uxListRemove>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10b      	bne.n	800162a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	2201      	movs	r2, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <prvAddCurrentTaskToDelayedList+0xdc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4013      	ands	r3, r2
 8001626:	4a29      	ldr	r2, [pc, #164]	; (80016cc <prvAddCurrentTaskToDelayedList+0xdc>)
 8001628:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d110      	bne.n	8001654 <prvAddCurrentTaskToDelayedList+0x64>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00d      	beq.n	8001654 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	211b      	movs	r1, #27
 800163e:	4618      	mov	r0, r3
 8001640:	f001 ffac 	bl	800359c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3304      	adds	r3, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4820      	ldr	r0, [pc, #128]	; (80016d0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800164e:	f7ff f9b6 	bl	80009be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001652:	e032      	b.n	80016ba <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d20f      	bcs.n	800168c <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2104      	movs	r1, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f001 ff92 	bl	800359c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3304      	adds	r3, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4610      	mov	r0, r2
 8001686:	f7ff f9be 	bl	8000a06 <vListInsert>
}
 800168a:	e016      	b.n	80016ba <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2104      	movs	r1, #4
 8001692:	4618      	mov	r0, r3
 8001694:	f001 ff82 	bl	800359c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3304      	adds	r3, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f7ff f9ae 	bl	8000a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <prvAddCurrentTaskToDelayedList+0xec>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d202      	bcs.n	80016ba <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80016b4:	4a09      	ldr	r2, [pc, #36]	; (80016dc <prvAddCurrentTaskToDelayedList+0xec>)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000184 	.word	0x20000184
 80016c8:	200000a8 	.word	0x200000a8
 80016cc:	20000188 	.word	0x20000188
 80016d0:	2000016c 	.word	0x2000016c
 80016d4:	2000013c 	.word	0x2000013c
 80016d8:	20000138 	.word	0x20000138
 80016dc:	200001a0 	.word	0x200001a0

080016e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3b04      	subs	r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b04      	subs	r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f023 0201 	bic.w	r2, r3, #1
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3b04      	subs	r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <pxPortInitialiseStack+0x64>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b14      	subs	r3, #20
 800171a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3b04      	subs	r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f06f 0202 	mvn.w	r2, #2
 800172e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b20      	subs	r3, #32
 8001734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	08001749 	.word	0x08001749

08001748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <prvTaskExitError+0x54>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175a:	d00a      	beq.n	8001772 <prvTaskExitError+0x2a>
	__asm volatile
 800175c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001760:	f383 8811 	msr	BASEPRI, r3
 8001764:	f3bf 8f6f 	isb	sy
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	60fb      	str	r3, [r7, #12]
}
 800176e:	bf00      	nop
 8001770:	e7fe      	b.n	8001770 <prvTaskExitError+0x28>
	__asm volatile
 8001772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001776:	f383 8811 	msr	BASEPRI, r3
 800177a:	f3bf 8f6f 	isb	sy
 800177e:	f3bf 8f4f 	dsb	sy
 8001782:	60bb      	str	r3, [r7, #8]
}
 8001784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001786:	bf00      	nop
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0fc      	beq.n	8001788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20000010 	.word	0x20000010

080017a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <pxCurrentTCBConst2>)
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	6808      	ldr	r0, [r1, #0]
 80017a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017aa:	f380 8809 	msr	PSP, r0
 80017ae:	f3bf 8f6f 	isb	sy
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	f380 8811 	msr	BASEPRI, r0
 80017ba:	4770      	bx	lr
 80017bc:	f3af 8000 	nop.w

080017c0 <pxCurrentTCBConst2>:
 80017c0:	200000a8 	.word	0x200000a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop

080017c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <prvPortStartFirstTask+0x24>)
 80017ca:	6800      	ldr	r0, [r0, #0]
 80017cc:	6800      	ldr	r0, [r0, #0]
 80017ce:	f380 8808 	msr	MSP, r0
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f380 8814 	msr	CONTROL, r0
 80017da:	b662      	cpsie	i
 80017dc:	b661      	cpsie	f
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	f3bf 8f6f 	isb	sy
 80017e6:	df00      	svc	0
 80017e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80017ea:	bf00      	nop
 80017ec:	e000ed08 	.word	0xe000ed08

080017f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80017f6:	4b46      	ldr	r3, [pc, #280]	; (8001910 <xPortStartScheduler+0x120>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a46      	ldr	r2, [pc, #280]	; (8001914 <xPortStartScheduler+0x124>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10a      	bne.n	8001816 <xPortStartScheduler+0x26>
	__asm volatile
 8001800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001804:	f383 8811 	msr	BASEPRI, r3
 8001808:	f3bf 8f6f 	isb	sy
 800180c:	f3bf 8f4f 	dsb	sy
 8001810:	613b      	str	r3, [r7, #16]
}
 8001812:	bf00      	nop
 8001814:	e7fe      	b.n	8001814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <xPortStartScheduler+0x120>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a3f      	ldr	r2, [pc, #252]	; (8001918 <xPortStartScheduler+0x128>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d10a      	bne.n	8001836 <xPortStartScheduler+0x46>
	__asm volatile
 8001820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
 800182c:	f3bf 8f4f 	dsb	sy
 8001830:	60fb      	str	r3, [r7, #12]
}
 8001832:	bf00      	nop
 8001834:	e7fe      	b.n	8001834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <xPortStartScheduler+0x12c>)
 8001838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	22ff      	movs	r2, #255	; 0xff
 8001846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <xPortStartScheduler+0x130>)
 800185c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <xPortStartScheduler+0x134>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001864:	e009      	b.n	800187a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <xPortStartScheduler+0x134>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <xPortStartScheduler+0x134>)
 800186e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b80      	cmp	r3, #128	; 0x80
 8001884:	d0ef      	beq.n	8001866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <xPortStartScheduler+0x134>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	d00a      	beq.n	80018a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	60bb      	str	r3, [r7, #8]
}
 80018a4:	bf00      	nop
 80018a6:	e7fe      	b.n	80018a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <xPortStartScheduler+0x134>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <xPortStartScheduler+0x134>)
 80018b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <xPortStartScheduler+0x134>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018ba:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <xPortStartScheduler+0x134>)
 80018bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <xPortStartScheduler+0x138>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <xPortStartScheduler+0x138>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <xPortStartScheduler+0x138>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <xPortStartScheduler+0x138>)
 80018d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80018dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80018de:	f000 f8e7 	bl	8001ab0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <xPortStartScheduler+0x13c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80018e8:	f000 f906 	bl	8001af8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <xPortStartScheduler+0x140>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <xPortStartScheduler+0x140>)
 80018f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80018f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80018f8:	f7ff ff66 	bl	80017c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80018fc:	f7ff fc2c 	bl	8001158 <vTaskSwitchContext>
	prvTaskExitError();
 8001900:	f7ff ff22 	bl	8001748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	410fc271 	.word	0x410fc271
 8001918:	410fc270 	.word	0x410fc270
 800191c:	e000e400 	.word	0xe000e400
 8001920:	200001ac 	.word	0x200001ac
 8001924:	200001b0 	.word	0x200001b0
 8001928:	e000ed20 	.word	0xe000ed20
 800192c:	20000010 	.word	0x20000010
 8001930:	e000ef34 	.word	0xe000ef34

08001934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
	__asm volatile
 800193a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193e:	f383 8811 	msr	BASEPRI, r3
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	607b      	str	r3, [r7, #4]
}
 800194c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <vPortEnterCritical+0x58>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <vPortEnterCritical+0x58>)
 8001956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <vPortEnterCritical+0x58>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d10f      	bne.n	8001980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <vPortEnterCritical+0x5c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00a      	beq.n	8001980 <vPortEnterCritical+0x4c>
	__asm volatile
 800196a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196e:	f383 8811 	msr	BASEPRI, r3
 8001972:	f3bf 8f6f 	isb	sy
 8001976:	f3bf 8f4f 	dsb	sy
 800197a:	603b      	str	r3, [r7, #0]
}
 800197c:	bf00      	nop
 800197e:	e7fe      	b.n	800197e <vPortEnterCritical+0x4a>
	}
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	20000010 	.word	0x20000010
 8001990:	e000ed04 	.word	0xe000ed04

08001994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <vPortExitCritical+0x50>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <vPortExitCritical+0x24>
	__asm volatile
 80019a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	607b      	str	r3, [r7, #4]
}
 80019b4:	bf00      	nop
 80019b6:	e7fe      	b.n	80019b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <vPortExitCritical+0x50>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <vPortExitCritical+0x50>)
 80019c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <vPortExitCritical+0x50>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <vPortExitCritical+0x42>
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80019d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000010 	.word	0x20000010
	...

080019f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80019f0:	f3ef 8009 	mrs	r0, PSP
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <pxCurrentTCBConst>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f01e 0f10 	tst.w	lr, #16
 8001a00:	bf08      	it	eq
 8001a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a0a:	6010      	str	r0, [r2, #0]
 8001a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a14:	f380 8811 	msr	BASEPRI, r0
 8001a18:	f3bf 8f4f 	dsb	sy
 8001a1c:	f3bf 8f6f 	isb	sy
 8001a20:	f7ff fb9a 	bl	8001158 <vTaskSwitchContext>
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f380 8811 	msr	BASEPRI, r0
 8001a2c:	bc09      	pop	{r0, r3}
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	6808      	ldr	r0, [r1, #0]
 8001a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a36:	f01e 0f10 	tst.w	lr, #16
 8001a3a:	bf08      	it	eq
 8001a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a40:	f380 8809 	msr	PSP, r0
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w

08001a50 <pxCurrentTCBConst>:
 8001a50:	200000a8 	.word	0x200000a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop

08001a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8001a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	607b      	str	r3, [r7, #4]
}
 8001a70:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001a72:	f001 fc31 	bl	80032d8 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001a76:	f7ff fab3 	bl	8000fe0 <xTaskIncrementTick>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8001a80:	f001 fc88 	bl	8003394 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <SysTick_Handler+0x54>)
 8001a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e003      	b.n	8001a96 <SysTick_Handler+0x3e>
		}
		else
		{
			traceISR_EXIT();
 8001a8e:	f001 fc65 	bl	800335c <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 8001a92:	f7ff fb61 	bl	8001158 <vTaskSwitchContext>
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f383 8811 	msr	BASEPRI, r3
}
 8001aa0:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000ed04 	.word	0xe000ed04

08001ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <vPortSetupTimerInterrupt+0x34>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <vPortSetupTimerInterrupt+0x38>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <vPortSetupTimerInterrupt+0x3c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <vPortSetupTimerInterrupt+0x40>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <vPortSetupTimerInterrupt+0x44>)
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <vPortSetupTimerInterrupt+0x34>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010
 8001ae8:	e000e018 	.word	0xe000e018
 8001aec:	20000014 	.word	0x20000014
 8001af0:	10624dd3 	.word	0x10624dd3
 8001af4:	e000e014 	.word	0xe000e014

08001af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b08 <vPortEnableVFP+0x10>
 8001afc:	6801      	ldr	r1, [r0, #0]
 8001afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001b02:	6001      	str	r1, [r0, #0]
 8001b04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001b06:	bf00      	nop
 8001b08:	e000ed88 	.word	0xe000ed88

08001b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001b12:	f3ef 8305 	mrs	r3, IPSR
 8001b16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	d914      	bls.n	8001b48 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <vPortValidateInterruptPriority+0x70>)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <vPortValidateInterruptPriority+0x74>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	7afa      	ldrb	r2, [r7, #11]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d20a      	bcs.n	8001b48 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8001b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	607b      	str	r3, [r7, #4]
}
 8001b44:	bf00      	nop
 8001b46:	e7fe      	b.n	8001b46 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <vPortValidateInterruptPriority+0x78>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <vPortValidateInterruptPriority+0x7c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d90a      	bls.n	8001b6e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8001b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	603b      	str	r3, [r7, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	e7fe      	b.n	8001b6c <vPortValidateInterruptPriority+0x60>
	}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e3f0 	.word	0xe000e3f0
 8001b80:	200001ac 	.word	0x200001ac
 8001b84:	e000ed0c 	.word	0xe000ed0c
 8001b88:	200001b0 	.word	0x200001b0

08001b8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b98:	f7ff f952 	bl	8000e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b9c:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <pvPortMalloc+0x174>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001ba4:	f000 f910 	bl	8001dc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ba8:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <pvPortMalloc+0x178>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 808e 	bne.w	8001cd2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01d      	beq.n	8001bf8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d014      	beq.n	8001bf8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f023 0307 	bic.w	r3, r3, #7
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <pvPortMalloc+0x6c>
	__asm volatile
 8001be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	617b      	str	r3, [r7, #20]
}
 8001bf4:	bf00      	nop
 8001bf6:	e7fe      	b.n	8001bf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d069      	beq.n	8001cd2 <pvPortMalloc+0x146>
 8001bfe:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <pvPortMalloc+0x17c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d864      	bhi.n	8001cd2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c08:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <pvPortMalloc+0x180>)
 8001c0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <pvPortMalloc+0x180>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c12:	e004      	b.n	8001c1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d903      	bls.n	8001c30 <pvPortMalloc+0xa4>
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f1      	bne.n	8001c14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <pvPortMalloc+0x174>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d04b      	beq.n	8001cd2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2208      	movs	r2, #8
 8001c40:	4413      	add	r3, r2
 8001c42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1ad2      	subs	r2, r2, r3
 8001c54:	2308      	movs	r3, #8
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d91f      	bls.n	8001c9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <pvPortMalloc+0xf8>
	__asm volatile
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	613b      	str	r3, [r7, #16]
}
 8001c80:	bf00      	nop
 8001c82:	e7fe      	b.n	8001c82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1ad2      	subs	r2, r2, r3
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c96:	69b8      	ldr	r0, [r7, #24]
 8001c98:	f000 f8f8 	bl	8001e8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <pvPortMalloc+0x17c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <pvPortMalloc+0x17c>)
 8001ca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <pvPortMalloc+0x17c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <pvPortMalloc+0x184>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d203      	bcs.n	8001cbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <pvPortMalloc+0x17c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <pvPortMalloc+0x184>)
 8001cbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <pvPortMalloc+0x178>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001cd2:	f7ff f8c3 	bl	8000e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <pvPortMalloc+0x16a>
	__asm volatile
 8001ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce4:	f383 8811 	msr	BASEPRI, r3
 8001ce8:	f3bf 8f6f 	isb	sy
 8001cec:	f3bf 8f4f 	dsb	sy
 8001cf0:	60fb      	str	r3, [r7, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	e7fe      	b.n	8001cf4 <pvPortMalloc+0x168>
	return pvReturn;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20012dbc 	.word	0x20012dbc
 8001d04:	20012dc8 	.word	0x20012dc8
 8001d08:	20012dc0 	.word	0x20012dc0
 8001d0c:	20012db4 	.word	0x20012db4
 8001d10:	20012dc4 	.word	0x20012dc4

08001d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d048      	beq.n	8001db8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d26:	2308      	movs	r3, #8
 8001d28:	425b      	negs	r3, r3
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <vPortFree+0xac>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <vPortFree+0x44>
	__asm volatile
 8001d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	60fb      	str	r3, [r7, #12]
}
 8001d54:	bf00      	nop
 8001d56:	e7fe      	b.n	8001d56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <vPortFree+0x62>
	__asm volatile
 8001d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d64:	f383 8811 	msr	BASEPRI, r3
 8001d68:	f3bf 8f6f 	isb	sy
 8001d6c:	f3bf 8f4f 	dsb	sy
 8001d70:	60bb      	str	r3, [r7, #8]
}
 8001d72:	bf00      	nop
 8001d74:	e7fe      	b.n	8001d74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <vPortFree+0xac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d019      	beq.n	8001db8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d115      	bne.n	8001db8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <vPortFree+0xac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d9c:	f7ff f850 	bl	8000e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <vPortFree+0xb0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <vPortFree+0xb0>)
 8001dac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f000 f86c 	bl	8001e8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001db4:	f7ff f852 	bl	8000e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20012dc8 	.word	0x20012dc8
 8001dc4:	20012dc0 	.word	0x20012dc0

08001dc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001dce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001dd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <prvHeapInit+0xac>)
 8001dd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3307      	adds	r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <prvHeapInit+0xac>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <prvHeapInit+0xb0>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <prvHeapInit+0xb0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e14:	2208      	movs	r2, #8
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0307 	bic.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <prvHeapInit+0xb4>)
 8001e28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <prvHeapInit+0xb4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <prvHeapInit+0xb4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	1ad2      	subs	r2, r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <prvHeapInit+0xb4>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <prvHeapInit+0xb8>)
 8001e56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <prvHeapInit+0xbc>)
 8001e5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <prvHeapInit+0xc0>)
 8001e62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	200001b4 	.word	0x200001b4
 8001e78:	20012db4 	.word	0x20012db4
 8001e7c:	20012dbc 	.word	0x20012dbc
 8001e80:	20012dc4 	.word	0x20012dc4
 8001e84:	20012dc0 	.word	0x20012dc0
 8001e88:	20012dc8 	.word	0x20012dc8

08001e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <prvInsertBlockIntoFreeList+0xac>)
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e002      	b.n	8001ea0 <prvInsertBlockIntoFreeList+0x14>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d8f7      	bhi.n	8001e9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d108      	bne.n	8001ece <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	441a      	add	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d118      	bne.n	8001f14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <prvInsertBlockIntoFreeList+0xb0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d00d      	beq.n	8001f0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e008      	b.n	8001f1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <prvInsertBlockIntoFreeList+0xb0>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d002      	beq.n	8001f2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20012db4 	.word	0x20012db4
 8001f3c:	20012dbc 	.word	0x20012dbc

08001f40 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <_cbSendSystemDesc+0x14>)
 8001f46:	f001 f971 	bl	800322c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <_cbSendSystemDesc+0x18>)
 8001f4c:	f001 f96e 	bl	800322c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	080047e8 	.word	0x080047e8
 8001f58:	08004830 	.word	0x08004830

08001f5c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <SEGGER_SYSVIEW_Conf+0x20>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SEGGER_SYSVIEW_Conf+0x20>)
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SEGGER_SYSVIEW_Conf+0x24>)
 8001f6a:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <SEGGER_SYSVIEW_Conf+0x28>)
 8001f6c:	f000 fd54 	bl	8002a18 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001f70:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001f74:	f000 fd8e 	bl	8002a94 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000014 	.word	0x20000014
 8001f80:	08001f41 	.word	0x08001f41
 8001f84:	08004910 	.word	0x08004910

08001f88 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	e033      	b.n	8001ffc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001f94:	491e      	ldr	r1, [pc, #120]	; (8002010 <_cbSendTaskList+0x88>)
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	491a      	ldr	r1, [pc, #104]	; (8002010 <_cbSendTaskList+0x88>)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	4c16      	ldr	r4, [pc, #88]	; (8002010 <_cbSendTaskList+0x88>)
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4423      	add	r3, r4
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	4d11      	ldr	r5, [pc, #68]	; (8002010 <_cbSendTaskList+0x88>)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	442b      	add	r3, r5
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	681d      	ldr	r5, [r3, #0]
 8001fda:	4e0d      	ldr	r6, [pc, #52]	; (8002010 <_cbSendTaskList+0x88>)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4433      	add	r3, r6
 8001fe8:	3310      	adds	r3, #16
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	462b      	mov	r3, r5
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	f000 f8b5 	bl	8002160 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <_cbSendTaskList+0x8c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	d3c6      	bcc.n	8001f94 <_cbSendTaskList+0xc>
  }
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002010:	20012dcc 	.word	0x20012dcc
 8002014:	20012e6c 	.word	0x20012e6c

08002018 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800201e:	f7fe ffcd 	bl	8000fbc <xTaskGetTickCountFromISR>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800202e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	f04f 0400 	mov.w	r4, #0
 800203a:	f04f 0500 	mov.w	r5, #0
 800203e:	015d      	lsls	r5, r3, #5
 8002040:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002044:	0154      	lsls	r4, r2, #5
 8002046:	4622      	mov	r2, r4
 8002048:	462b      	mov	r3, r5
 800204a:	1a12      	subs	r2, r2, r0
 800204c:	eb63 0301 	sbc.w	r3, r3, r1
 8002050:	f04f 0400 	mov.w	r4, #0
 8002054:	f04f 0500 	mov.w	r5, #0
 8002058:	009d      	lsls	r5, r3, #2
 800205a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800205e:	0094      	lsls	r4, r2, #2
 8002060:	4622      	mov	r2, r4
 8002062:	462b      	mov	r3, r5
 8002064:	1812      	adds	r2, r2, r0
 8002066:	eb41 0303 	adc.w	r3, r1, r3
 800206a:	f04f 0000 	mov.w	r0, #0
 800206e:	f04f 0100 	mov.w	r1, #0
 8002072:	00d9      	lsls	r1, r3, #3
 8002074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002078:	00d0      	lsls	r0, r2, #3
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8002082:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bdb0      	pop	{r4, r5, r7, pc}

08002090 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800209e:	2205      	movs	r2, #5
 80020a0:	492b      	ldr	r1, [pc, #172]	; (8002150 <SYSVIEW_AddTask+0xc0>)
 80020a2:	68b8      	ldr	r0, [r7, #8]
 80020a4:	f001 ff4c 	bl	8003f40 <memcmp>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04b      	beq.n	8002146 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	d903      	bls.n	80020be <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80020b6:	4828      	ldr	r0, [pc, #160]	; (8002158 <SYSVIEW_AddTask+0xc8>)
 80020b8:	f001 fbbe 	bl	8003838 <SEGGER_SYSVIEW_Warn>
    return;
 80020bc:	e044      	b.n	8002148 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4926      	ldr	r1, [pc, #152]	; (800215c <SYSVIEW_AddTask+0xcc>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <SYSVIEW_AddTask+0xcc>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3304      	adds	r3, #4
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	491b      	ldr	r1, [pc, #108]	; (800215c <SYSVIEW_AddTask+0xcc>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3308      	adds	r3, #8
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4916      	ldr	r1, [pc, #88]	; (800215c <SYSVIEW_AddTask+0xcc>)
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	330c      	adds	r3, #12
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4910      	ldr	r1, [pc, #64]	; (800215c <SYSVIEW_AddTask+0xcc>)
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3310      	adds	r3, #16
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 8002132:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f80e 	bl	8002160 <SYSVIEW_SendTaskInfo>
 8002144:	e000      	b.n	8002148 <SYSVIEW_AddTask+0xb8>
    return;
 8002146:	bf00      	nop

}
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	08004840 	.word	0x08004840
 8002154:	20012e6c 	.word	0x20012e6c
 8002158:	08004848 	.word	0x08004848
 800215c:	20012dcc 	.word	0x20012dcc

08002160 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	2214      	movs	r2, #20
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fefe 	bl	8003f78 <memset>
  TaskInfo.TaskID     = TaskID;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4618      	mov	r0, r3
 8002196:	f000 ff4f 	bl	8003038 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <_DoInit+0x8c>)
 80021ac:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2203      	movs	r2, #3
 80021b2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <_DoInit+0x90>)
 80021be:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <_DoInit+0x94>)
 80021c4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021cc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a14      	ldr	r2, [pc, #80]	; (8002234 <_DoInit+0x90>)
 80021e4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_DoInit+0x98>)
 80021ea:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2210      	movs	r2, #16
 80021f0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3307      	adds	r3, #7
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <_DoInit+0x9c>)
 800220a:	6810      	ldr	r0, [r2, #0]
 800220c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <_DoInit+0xa0>)
 8002212:	6810      	ldr	r0, [r2, #0]
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	8891      	ldrh	r1, [r2, #4]
 8002218:	7992      	ldrb	r2, [r2, #6]
 800221a:	8099      	strh	r1, [r3, #4]
 800221c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2220      	movs	r2, #32
 8002222:	719a      	strb	r2, [r3, #6]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	200174ac 	.word	0x200174ac
 8002234:	08004898 	.word	0x08004898
 8002238:	20012e70 	.word	0x20012e70
 800223c:	20013270 	.word	0x20013270
 8002240:	080048a4 	.word	0x080048a4
 8002244:	080048a8 	.word	0x080048a8

08002248 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <SEGGER_RTT_ReadNoLock+0x100>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <SEGGER_RTT_ReadNoLock+0x18>
 800225c:	f7ff ffa2 	bl	80021a4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	4a36      	ldr	r2, [pc, #216]	; (8002348 <SEGGER_RTT_ReadNoLock+0x100>)
 800226e:	4413      	add	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002286:	6a3a      	ldr	r2, [r7, #32]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	429a      	cmp	r2, r3
 800228c:	d92a      	bls.n	80022e4 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4293      	cmp	r3, r2
 800229e:	bf28      	it	cs
 80022a0:	4613      	movcs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	4413      	add	r3, r2
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4619      	mov	r1, r3
 80022b0:	69f8      	ldr	r0, [r7, #28]
 80022b2:	f001 fe53 	bl	8003f5c <memcpy>
    NumBytesRead += NumBytesRem;
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80022ce:	6a3a      	ldr	r2, [r7, #32]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	6a3a      	ldr	r2, [r7, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d101      	bne.n	80022e4 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	bf28      	it	cs
 80022f4:	4613      	movcs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d018      	beq.n	8002330 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4619      	mov	r1, r3
 800230a:	69f8      	ldr	r0, [r7, #28]
 800230c:	f001 fe26 	bl	8003f5c <memcpy>
    NumBytesRead += NumBytesRem;
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800233e:	4618      	mov	r0, r3
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200174ac 	.word	0x200174ac

0800234c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800236a:	4413      	add	r3, r2
 800236c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d854      	bhi.n	800242c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d30f      	bcc.n	80023b6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4413      	add	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 fdda 	bl	8003f5c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	441a      	add	r2, r3
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e054      	b.n	8002460 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d34b      	bcc.n	800245e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d90e      	bls.n	80023f6 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fdb9 	bl	8003f5c <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	441a      	add	r2, r3
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	e018      	b.n	8002428 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002402:	4618      	mov	r0, r3
 8002404:	f001 fdaa 	bl	8003f5c <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	6858      	ldr	r0, [r3, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	18d1      	adds	r1, r2, r3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	461a      	mov	r2, r3
 800241a:	f001 fd9f 	bl	8003f5c <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002428:	2301      	movs	r3, #1
 800242a:	e019      	b.n	8002460 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d30f      	bcc.n	800245e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fd86 	bl	8003f5c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	441a      	add	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200174ac 	.word	0x200174ac

0800246c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002482:	f7ff fe8f 	bl	80021a4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4293      	cmp	r3, r2
 8002490:	d24c      	bcs.n	800252c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002492:	f3ef 8311 	mrs	r3, BASEPRI
 8002496:	f04f 0120 	mov.w	r1, #32
 800249a:	f381 8811 	msr	BASEPRI, r1
 800249e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d032      	beq.n	800250c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80024a6:	4925      	ldr	r1, [pc, #148]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80024ba:	4920      	ldr	r1, [pc, #128]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	3304      	adds	r3, #4
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80024d0:	491a      	ldr	r1, [pc, #104]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3320      	adds	r3, #32
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80024e4:	4915      	ldr	r1, [pc, #84]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	3328      	adds	r3, #40	; 0x28
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80024f8:	4910      	ldr	r1, [pc, #64]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3324      	adds	r3, #36	; 0x24
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800250c:	490b      	ldr	r1, [pc, #44]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	332c      	adds	r3, #44	; 0x2c
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e002      	b.n	8002532 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002532:	697b      	ldr	r3, [r7, #20]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200174ac 	.word	0x200174ac

08002540 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002556:	f7ff fe25 	bl	80021a4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4293      	cmp	r3, r2
 8002564:	d24b      	bcs.n	80025fe <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002566:	f3ef 8311 	mrs	r3, BASEPRI
 800256a:	f04f 0120 	mov.w	r1, #32
 800256e:	f381 8811 	msr	BASEPRI, r1
 8002572:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d031      	beq.n	80025de <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800257a:	4925      	ldr	r1, [pc, #148]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800258e:	4920      	ldr	r1, [pc, #128]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	3364      	adds	r3, #100	; 0x64
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80025a2:	491b      	ldr	r1, [pc, #108]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3368      	adds	r3, #104	; 0x68
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80025b6:	4916      	ldr	r1, [pc, #88]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	3370      	adds	r3, #112	; 0x70
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80025ca:	4911      	ldr	r1, [pc, #68]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	336c      	adds	r3, #108	; 0x6c
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80025de:	490c      	ldr	r1, [pc, #48]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	3374      	adds	r3, #116	; 0x74
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e002      	b.n	8002604 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002604:	697b      	ldr	r3, [r7, #20]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200174ac 	.word	0x200174ac

08002614 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002624:	e002      	b.n	800262c <_EncodeStr+0x18>
    Len++;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3301      	adds	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f6      	bne.n	8002626 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d901      	bls.n	8002644 <_EncodeStr+0x30>
    Len = Limit;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2bfe      	cmp	r3, #254	; 0xfe
 8002648:	d806      	bhi.n	8002658 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e011      	b.n	800267c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60fa      	str	r2, [r7, #12]
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60fa      	str	r2, [r7, #12]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	0a19      	lsrs	r1, r3, #8
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	60fa      	str	r2, [r7, #12]
 8002678:	b2ca      	uxtb	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002680:	e00a      	b.n	8002698 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	1c53      	adds	r3, r2, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	60f9      	str	r1, [r7, #12]
 800268e:	7812      	ldrb	r2, [r2, #0]
 8002690:	701a      	strb	r2, [r3, #0]
    n++;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d3f0      	bcc.n	8002682 <_EncodeStr+0x6e>
  }
  return pPayload;
 80026a0:	68fb      	ldr	r3, [r7, #12]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80026ce:	1cfb      	adds	r3, r7, #3
 80026d0:	2201      	movs	r2, #1
 80026d2:	4619      	mov	r1, r3
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7ff fdb7 	bl	8002248 <SEGGER_RTT_ReadNoLock>
 80026da:	4603      	mov	r3, r0
 80026dc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	dd4c      	ble.n	800277e <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	2b07      	cmp	r3, #7
 80026e8:	dc16      	bgt.n	8002718 <_HandleIncomingPacket+0x50>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dd3c      	ble.n	8002768 <_HandleIncomingPacket+0xa0>
 80026ee:	3b01      	subs	r3, #1
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d839      	bhi.n	8002768 <_HandleIncomingPacket+0xa0>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <_HandleIncomingPacket+0x34>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	0800271f 	.word	0x0800271f
 8002700:	08002725 	.word	0x08002725
 8002704:	0800272b 	.word	0x0800272b
 8002708:	08002731 	.word	0x08002731
 800270c:	08002737 	.word	0x08002737
 8002710:	0800273d 	.word	0x0800273d
 8002714:	08002743 	.word	0x08002743
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d015      	beq.n	8002748 <_HandleIncomingPacket+0x80>
 800271c:	e024      	b.n	8002768 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800271e:	f000 fb0f 	bl	8002d40 <SEGGER_SYSVIEW_Start>
      break;
 8002722:	e031      	b.n	8002788 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002724:	f000 fbc8 	bl	8002eb8 <SEGGER_SYSVIEW_Stop>
      break;
 8002728:	e02e      	b.n	8002788 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800272a:	f000 fda3 	bl	8003274 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800272e:	e02b      	b.n	8002788 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002730:	f000 fd68 	bl	8003204 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002734:	e028      	b.n	8002788 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002736:	f000 fbe5 	bl	8002f04 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800273a:	e025      	b.n	8002788 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800273c:	f001 f83e 	bl	80037bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002740:	e022      	b.n	8002788 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002742:	f001 f81d 	bl	8003780 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002746:	e01f      	b.n	8002788 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002748:	1cfb      	adds	r3, r7, #3
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	2001      	movs	r0, #1
 8002750:	f7ff fd7a 	bl	8002248 <SEGGER_RTT_ReadNoLock>
 8002754:	4603      	mov	r3, r0
 8002756:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	dd11      	ble.n	8002782 <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 ff8d 	bl	8003680 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002766:	e00c      	b.n	8002782 <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	b25b      	sxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	da0a      	bge.n	8002786 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002770:	1cfb      	adds	r3, r7, #3
 8002772:	2201      	movs	r2, #1
 8002774:	4619      	mov	r1, r3
 8002776:	2001      	movs	r0, #1
 8002778:	f7ff fd66 	bl	8002248 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800277c:	e003      	b.n	8002786 <_HandleIncomingPacket+0xbe>
    }
  }
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <_HandleIncomingPacket+0xc0>
      break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <_HandleIncomingPacket+0xc0>
      break;
 8002786:	bf00      	nop
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002796:	2301      	movs	r3, #1
 8002798:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	3301      	adds	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <_TrySendOverflowPacket+0xd8>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027aa:	e00b      	b.n	80027c4 <_TrySendOverflowPacket+0x34>
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	1c59      	adds	r1, r3, #1
 80027b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	09db      	lsrs	r3, r3, #7
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	2b7f      	cmp	r3, #127	; 0x7f
 80027c8:	d8f0      	bhi.n	80027ac <_TrySendOverflowPacket+0x1c>
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <_TrySendOverflowPacket+0xdc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <_TrySendOverflowPacket+0xd8>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	e00b      	b.n	800280c <_TrySendOverflowPacket+0x7c>
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	6279      	str	r1, [r7, #36]	; 0x24
 80027fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	09db      	lsrs	r3, r3, #7
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b7f      	cmp	r3, #127	; 0x7f
 8002810:	d8f0      	bhi.n	80027f4 <_TrySendOverflowPacket+0x64>
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	627a      	str	r2, [r7, #36]	; 0x24
 8002818:	6a3a      	ldr	r2, [r7, #32]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	461a      	mov	r2, r3
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	4619      	mov	r1, r3
 800282e:	2001      	movs	r0, #1
 8002830:	f7ff fd8c 	bl	800234c <SEGGER_RTT_WriteSkipNoLock>
 8002834:	4603      	mov	r3, r0
 8002836:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <_TrySendOverflowPacket+0xd8>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <_TrySendOverflowPacket+0xd8>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	3b01      	subs	r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <_TrySendOverflowPacket+0xd8>)
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e004      	b.n	800285c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <_TrySendOverflowPacket+0xd8>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	4a03      	ldr	r2, [pc, #12]	; (8002868 <_TrySendOverflowPacket+0xd8>)
 800285a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800285c:	693b      	ldr	r3, [r7, #16]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3730      	adds	r7, #48	; 0x30
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20017288 	.word	0x20017288
 800286c:	e0001004 	.word	0xe0001004

08002870 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800287c:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <_SendPacket+0x19c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d010      	beq.n	80028a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <_SendPacket+0x19c>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80a1 	beq.w	80029d0 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <_SendPacket+0x19c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d109      	bne.n	80028aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002896:	f7ff ff7b 	bl	8002790 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <_SendPacket+0x19c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 8098 	bne.w	80029d4 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80028a4:	e001      	b.n	80028aa <_SendPacket+0x3a>
    goto Send;
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <_SendPacket+0x3c>
Send:
 80028aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b1f      	cmp	r3, #31
 80028b0:	d809      	bhi.n	80028c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80028b2:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <_SendPacket+0x19c>)
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 8089 	bne.w	80029d8 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b17      	cmp	r3, #23
 80028ca:	d807      	bhi.n	80028dc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e03d      	b.n	8002958 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b7f      	cmp	r3, #127	; 0x7f
 80028e8:	d912      	bls.n	8002910 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	09da      	lsrs	r2, r3, #7
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	3a01      	subs	r2, #1
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e006      	b.n	800291e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3b01      	subs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b7f      	cmp	r3, #127	; 0x7f
 8002922:	d912      	bls.n	800294a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	09da      	lsrs	r2, r3, #7
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3b01      	subs	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	3a01      	subs	r2, #1
 800293c:	60fa      	str	r2, [r7, #12]
 800293e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e006      	b.n	8002958 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3b01      	subs	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <_SendPacket+0x1a0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <_SendPacket+0x19c>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	e00b      	b.n	800298a <_SendPacket+0x11a>
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	1c59      	adds	r1, r3, #1
 800297a:	6279      	str	r1, [r7, #36]	; 0x24
 800297c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	09db      	lsrs	r3, r3, #7
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2b7f      	cmp	r3, #127	; 0x7f
 800298e:	d8f0      	bhi.n	8002972 <_SendPacket+0x102>
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	627a      	str	r2, [r7, #36]	; 0x24
 8002996:	6a3a      	ldr	r2, [r7, #32]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	68f9      	ldr	r1, [r7, #12]
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff fcce 	bl	800234c <SEGGER_RTT_WriteSkipNoLock>
 80029b0:	4603      	mov	r3, r0
 80029b2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <_SendPacket+0x19c>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	60d3      	str	r3, [r2, #12]
 80029c0:	e00b      	b.n	80029da <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <_SendPacket+0x19c>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <_SendPacket+0x19c>)
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e004      	b.n	80029da <_SendPacket+0x16a>
    goto SendDone;
 80029d0:	bf00      	nop
 80029d2:	e002      	b.n	80029da <_SendPacket+0x16a>
      goto SendDone;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <_SendPacket+0x16a>
      goto SendDone;
 80029d8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <_SendPacket+0x1a4>)
 80029dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <_SendPacket+0x1a4>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d00b      	beq.n	8002a02 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <_SendPacket+0x19c>)
 80029ec:	789b      	ldrb	r3, [r3, #2]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <_SendPacket+0x19c>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80029f8:	f7ff fe66 	bl	80026c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <_SendPacket+0x19c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a02:	bf00      	nop
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20017288 	.word	0x20017288
 8002a10:	e0001004 	.word	0xe0001004
 8002a14:	200174ac 	.word	0x200174ac

08002a18 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a2e:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <SEGGER_SYSVIEW_Init+0x68>)
 8002a30:	4914      	ldr	r1, [pc, #80]	; (8002a84 <SEGGER_SYSVIEW_Init+0x6c>)
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7ff fd1a 	bl	800246c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <SEGGER_SYSVIEW_Init+0x70>)
 8002a40:	4910      	ldr	r1, [pc, #64]	; (8002a84 <SEGGER_SYSVIEW_Init+0x6c>)
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fd7c 	bl	8002540 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <SEGGER_SYSVIEW_Init+0x74>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <SEGGER_SYSVIEW_Init+0x78>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <SEGGER_SYSVIEW_Init+0x74>)
 8002a56:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <SEGGER_SYSVIEW_Init+0x74>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <SEGGER_SYSVIEW_Init+0x74>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002a64:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <SEGGER_SYSVIEW_Init+0x74>)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <SEGGER_SYSVIEW_Init+0x74>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <SEGGER_SYSVIEW_Init+0x74>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20013280 	.word	0x20013280
 8002a84:	080048b0 	.word	0x080048b0
 8002a88:	20017280 	.word	0x20017280
 8002a8c:	20017288 	.word	0x20017288
 8002a90:	e0001004 	.word	0xe0001004

08002a94 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6113      	str	r3, [r2, #16]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20017288 	.word	0x20017288

08002ab4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002abc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ac0:	f04f 0120 	mov.w	r1, #32
 8002ac4:	f381 8811 	msr	BASEPRI, r1
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4808      	ldr	r0, [pc, #32]	; (8002aec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002acc:	f7ff fdef 	bl	80026ae <_PreparePacket>
 8002ad0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68b8      	ldr	r0, [r7, #8]
 8002ad8:	f7ff feca 	bl	8002870 <_SendPacket>
  RECORD_END();
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f383 8811 	msr	BASEPRI, r3
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200172b8 	.word	0x200172b8

08002af0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002afa:	f3ef 8311 	mrs	r3, BASEPRI
 8002afe:	f04f 0120 	mov.w	r1, #32
 8002b02:	f381 8811 	msr	BASEPRI, r1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	4816      	ldr	r0, [pc, #88]	; (8002b64 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002b0a:	f7ff fdd0 	bl	80026ae <_PreparePacket>
 8002b0e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	e00b      	b.n	8002b36 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	1c59      	adds	r1, r3, #1
 8002b26:	61f9      	str	r1, [r7, #28]
 8002b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	09db      	lsrs	r3, r3, #7
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b7f      	cmp	r3, #127	; 0x7f
 8002b3a:	d8f0      	bhi.n	8002b1e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	61fa      	str	r2, [r7, #28]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	6938      	ldr	r0, [r7, #16]
 8002b52:	f7ff fe8d 	bl	8002870 <_SendPacket>
  RECORD_END();
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f383 8811 	msr	BASEPRI, r3
}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200172b8 	.word	0x200172b8

08002b68 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002b74:	f3ef 8311 	mrs	r3, BASEPRI
 8002b78:	f04f 0120 	mov.w	r1, #32
 8002b7c:	f381 8811 	msr	BASEPRI, r1
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	4825      	ldr	r0, [pc, #148]	; (8002c18 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002b84:	f7ff fd93 	bl	80026ae <_PreparePacket>
 8002b88:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b96:	e00b      	b.n	8002bb0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002ba2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	09db      	lsrs	r3, r3, #7
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002bb4:	d8f0      	bhi.n	8002b98 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	e00b      	b.n	8002be8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	1c59      	adds	r1, r3, #1
 8002bd8:	6279      	str	r1, [r7, #36]	; 0x24
 8002bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	09db      	lsrs	r3, r3, #7
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	2b7f      	cmp	r3, #127	; 0x7f
 8002bec:	d8f0      	bhi.n	8002bd0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	627a      	str	r2, [r7, #36]	; 0x24
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	6979      	ldr	r1, [r7, #20]
 8002c02:	69b8      	ldr	r0, [r7, #24]
 8002c04:	f7ff fe34 	bl	8002870 <_SendPacket>
  RECORD_END();
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f383 8811 	msr	BASEPRI, r3
}
 8002c0e:	bf00      	nop
 8002c10:	3730      	adds	r7, #48	; 0x30
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200172b8 	.word	0x200172b8

08002c1c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b090      	sub	sp, #64	; 0x40
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c2e:	f04f 0120 	mov.w	r1, #32
 8002c32:	f381 8811 	msr	BASEPRI, r1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	4840      	ldr	r0, [pc, #256]	; (8002d3c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8002c3a:	f7ff fd38 	bl	80026ae <_PreparePacket>
 8002c3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c4c:	e00b      	b.n	8002c66 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c54:	1c59      	adds	r1, r3, #1
 8002c56:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	09db      	lsrs	r3, r3, #7
 8002c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	2b7f      	cmp	r3, #127	; 0x7f
 8002c6a:	d8f0      	bhi.n	8002c4e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
 8002c84:	e00b      	b.n	8002c9e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	1c59      	adds	r1, r3, #1
 8002c8e:	6379      	str	r1, [r7, #52]	; 0x34
 8002c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	09db      	lsrs	r3, r3, #7
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ca2:	d8f0      	bhi.n	8002c86 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8002caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbc:	e00b      	b.n	8002cd6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	1c59      	adds	r1, r3, #1
 8002cc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	09db      	lsrs	r3, r3, #7
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cda:	d8f0      	bhi.n	8002cbe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	e00b      	b.n	8002d0e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	1c59      	adds	r1, r3, #1
 8002cfe:	6279      	str	r1, [r7, #36]	; 0x24
 8002d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	09db      	lsrs	r3, r3, #7
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	2b7f      	cmp	r3, #127	; 0x7f
 8002d12:	d8f0      	bhi.n	8002cf6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	627a      	str	r2, [r7, #36]	; 0x24
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	6979      	ldr	r1, [r7, #20]
 8002d28:	69b8      	ldr	r0, [r7, #24]
 8002d2a:	f7ff fda1 	bl	8002870 <_SendPacket>
  RECORD_END();
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f383 8811 	msr	BASEPRI, r3
}
 8002d34:	bf00      	nop
 8002d36:	3740      	adds	r7, #64	; 0x40
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200172b8 	.word	0x200172b8

08002d40 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	; 0x30
 8002d44:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002d46:	4b59      	ldr	r3, [pc, #356]	; (8002eac <SEGGER_SYSVIEW_Start+0x16c>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 80aa 	bne.w	8002ea4 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002d50:	4b56      	ldr	r3, [pc, #344]	; (8002eac <SEGGER_SYSVIEW_Start+0x16c>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002d56:	f3ef 8311 	mrs	r3, BASEPRI
 8002d5a:	f04f 0120 	mov.w	r1, #32
 8002d5e:	f381 8811 	msr	BASEPRI, r1
 8002d62:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002d64:	220a      	movs	r2, #10
 8002d66:	4952      	ldr	r1, [pc, #328]	; (8002eb0 <SEGGER_SYSVIEW_Start+0x170>)
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7ff faef 	bl	800234c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002d74:	200a      	movs	r0, #10
 8002d76:	f7ff fe9d 	bl	8002ab4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d7e:	f04f 0120 	mov.w	r1, #32
 8002d82:	f381 8811 	msr	BASEPRI, r1
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	484a      	ldr	r0, [pc, #296]	; (8002eb4 <SEGGER_SYSVIEW_Start+0x174>)
 8002d8a:	f7ff fc90 	bl	80026ae <_PreparePacket>
 8002d8e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d98:	4b44      	ldr	r3, [pc, #272]	; (8002eac <SEGGER_SYSVIEW_Start+0x16c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	e00b      	b.n	8002db8 <SEGGER_SYSVIEW_Start+0x78>
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	1c59      	adds	r1, r3, #1
 8002da8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	09db      	lsrs	r3, r3, #7
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	2b7f      	cmp	r3, #127	; 0x7f
 8002dbc:	d8f0      	bhi.n	8002da0 <SEGGER_SYSVIEW_Start+0x60>
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <SEGGER_SYSVIEW_Start+0x16c>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	e00b      	b.n	8002df2 <SEGGER_SYSVIEW_Start+0xb2>
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	1c59      	adds	r1, r3, #1
 8002de2:	6279      	str	r1, [r7, #36]	; 0x24
 8002de4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	09db      	lsrs	r3, r3, #7
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2b7f      	cmp	r3, #127	; 0x7f
 8002df6:	d8f0      	bhi.n	8002dda <SEGGER_SYSVIEW_Start+0x9a>
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <SEGGER_SYSVIEW_Start+0x16c>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e00b      	b.n	8002e2c <SEGGER_SYSVIEW_Start+0xec>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	61f9      	str	r1, [r7, #28]
 8002e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	09db      	lsrs	r3, r3, #7
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e30:	d8f0      	bhi.n	8002e14 <SEGGER_SYSVIEW_Start+0xd4>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	61fa      	str	r2, [r7, #28]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	2302      	movs	r3, #2
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e00b      	b.n	8002e64 <SEGGER_SYSVIEW_Start+0x124>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	6179      	str	r1, [r7, #20]
 8002e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	09db      	lsrs	r3, r3, #7
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b7f      	cmp	r3, #127	; 0x7f
 8002e68:	d8f0      	bhi.n	8002e4c <SEGGER_SYSVIEW_Start+0x10c>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	617a      	str	r2, [r7, #20]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002e7a:	2218      	movs	r2, #24
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fcf6 	bl	8002870 <_SendPacket>
      RECORD_END();
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <SEGGER_SYSVIEW_Start+0x16c>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <SEGGER_SYSVIEW_Start+0x16c>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002e98:	f000 f9ec 	bl	8003274 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002e9c:	f000 f9b2 	bl	8003204 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002ea0:	f000 fc8c 	bl	80037bc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3730      	adds	r7, #48	; 0x30
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20017288 	.word	0x20017288
 8002eb0:	08004918 	.word	0x08004918
 8002eb4:	200172b8 	.word	0x200172b8

08002eb8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec2:	f04f 0120 	mov.w	r1, #32
 8002ec6:	f381 8811 	msr	BASEPRI, r1
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	480b      	ldr	r0, [pc, #44]	; (8002efc <SEGGER_SYSVIEW_Stop+0x44>)
 8002ece:	f7ff fbee 	bl	80026ae <_PreparePacket>
 8002ed2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <SEGGER_SYSVIEW_Stop+0x48>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002edc:	220b      	movs	r2, #11
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	6838      	ldr	r0, [r7, #0]
 8002ee2:	f7ff fcc5 	bl	8002870 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <SEGGER_SYSVIEW_Stop+0x48>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f383 8811 	msr	BASEPRI, r3
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200172b8 	.word	0x200172b8
 8002f00:	20017288 	.word	0x20017288

08002f04 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f0e:	f04f 0120 	mov.w	r1, #32
 8002f12:	f381 8811 	msr	BASEPRI, r1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	4845      	ldr	r0, [pc, #276]	; (8003030 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002f1a:	f7ff fbc8 	bl	80026ae <_PreparePacket>
 8002f1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f28:	4b42      	ldr	r3, [pc, #264]	; (8003034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2e:	e00b      	b.n	8002f48 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	1c59      	adds	r1, r3, #1
 8002f38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	09db      	lsrs	r3, r3, #7
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f4c:	d8f0      	bhi.n	8002f30 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	623b      	str	r3, [r7, #32]
 8002f68:	e00b      	b.n	8002f82 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	6279      	str	r1, [r7, #36]	; 0x24
 8002f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	09db      	lsrs	r3, r3, #7
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2b7f      	cmp	r3, #127	; 0x7f
 8002f86:	d8f0      	bhi.n	8002f6a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002f8e:	6a3a      	ldr	r2, [r7, #32]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	4b25      	ldr	r3, [pc, #148]	; (8003034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e00b      	b.n	8002fbc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	61f9      	str	r1, [r7, #28]
 8002fae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	09db      	lsrs	r3, r3, #7
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc0:	d8f0      	bhi.n	8002fa4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	61fa      	str	r2, [r7, #28]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e00b      	b.n	8002ff4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	6179      	str	r1, [r7, #20]
 8002fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	09db      	lsrs	r3, r3, #7
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff8:	d8f0      	bhi.n	8002fdc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	617a      	str	r2, [r7, #20]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800300a:	2218      	movs	r2, #24
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f7ff fc2e 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	4798      	blx	r3
  }
}
 8003028:	bf00      	nop
 800302a:	3730      	adds	r7, #48	; 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200172b8 	.word	0x200172b8
 8003034:	20017288 	.word	0x20017288

08003038 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b092      	sub	sp, #72	; 0x48
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003040:	f3ef 8311 	mrs	r3, BASEPRI
 8003044:	f04f 0120 	mov.w	r1, #32
 8003048:	f381 8811 	msr	BASEPRI, r1
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	486b      	ldr	r0, [pc, #428]	; (80031fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003050:	f7ff fb2d 	bl	80026ae <_PreparePacket>
 8003054:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b67      	ldr	r3, [pc, #412]	; (8003200 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	643b      	str	r3, [r7, #64]	; 0x40
 800306c:	e00b      	b.n	8003086 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800306e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003074:	1c59      	adds	r1, r3, #1
 8003076:	6479      	str	r1, [r7, #68]	; 0x44
 8003078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003082:	09db      	lsrs	r3, r3, #7
 8003084:	643b      	str	r3, [r7, #64]	; 0x40
 8003086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003088:	2b7f      	cmp	r3, #127	; 0x7f
 800308a:	d8f0      	bhi.n	800306e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800308c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	647a      	str	r2, [r7, #68]	; 0x44
 8003092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a6:	e00b      	b.n	80030c0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	63f9      	str	r1, [r7, #60]	; 0x3c
 80030b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	09db      	lsrs	r3, r3, #7
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c2:	2b7f      	cmp	r3, #127	; 0x7f
 80030c4:	d8f0      	bhi.n	80030a8 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80030c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	4619      	mov	r1, r3
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff fa98 	bl	8002614 <_EncodeStr>
 80030e4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80030e6:	2209      	movs	r2, #9
 80030e8:	68f9      	ldr	r1, [r7, #12]
 80030ea:	6938      	ldr	r0, [r7, #16]
 80030ec:	f7ff fbc0 	bl	8002870 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b40      	ldr	r3, [pc, #256]	; (8003200 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
 8003106:	e00b      	b.n	8003120 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	b2da      	uxtb	r2, r3
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	6379      	str	r1, [r7, #52]	; 0x34
 8003112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	09db      	lsrs	r3, r3, #7
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	2b7f      	cmp	r3, #127	; 0x7f
 8003124:	d8f0      	bhi.n	8003108 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	637a      	str	r2, [r7, #52]	; 0x34
 800312c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003140:	e00b      	b.n	800315a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	b2da      	uxtb	r2, r3
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	1c59      	adds	r1, r3, #1
 800314a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800314c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	09db      	lsrs	r3, r3, #7
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	2b7f      	cmp	r3, #127	; 0x7f
 800315e:	d8f0      	bhi.n	8003142 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	623b      	str	r3, [r7, #32]
 800317a:	e00b      	b.n	8003194 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	6279      	str	r1, [r7, #36]	; 0x24
 8003186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	09db      	lsrs	r3, r3, #7
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2b7f      	cmp	r3, #127	; 0x7f
 8003198:	d8f0      	bhi.n	800317c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	627a      	str	r2, [r7, #36]	; 0x24
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e00b      	b.n	80031cc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	1c59      	adds	r1, r3, #1
 80031bc:	61f9      	str	r1, [r7, #28]
 80031be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	09db      	lsrs	r3, r3, #7
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b7f      	cmp	r3, #127	; 0x7f
 80031d0:	d8f0      	bhi.n	80031b4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	61fa      	str	r2, [r7, #28]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80031e2:	2215      	movs	r2, #21
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	6938      	ldr	r0, [r7, #16]
 80031e8:	f7ff fb42 	bl	8002870 <_SendPacket>
  RECORD_END();
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f383 8811 	msr	BASEPRI, r3
}
 80031f2:	bf00      	nop
 80031f4:	3748      	adds	r7, #72	; 0x48
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200172b8 	.word	0x200172b8
 8003200:	20017288 	.word	0x20017288

08003204 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800321a:	4b03      	ldr	r3, [pc, #12]	; (8003228 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4798      	blx	r3
  }
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20017288 	.word	0x20017288

0800322c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003234:	f3ef 8311 	mrs	r3, BASEPRI
 8003238:	f04f 0120 	mov.w	r1, #32
 800323c:	f381 8811 	msr	BASEPRI, r1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	480b      	ldr	r0, [pc, #44]	; (8003270 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003244:	f7ff fa33 	bl	80026ae <_PreparePacket>
 8003248:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	6938      	ldr	r0, [r7, #16]
 8003250:	f7ff f9e0 	bl	8002614 <_EncodeStr>
 8003254:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003256:	220e      	movs	r2, #14
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	6938      	ldr	r0, [r7, #16]
 800325c:	f7ff fb08 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f383 8811 	msr	BASEPRI, r3
}
 8003266:	bf00      	nop
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200172b8 	.word	0x200172b8

08003274 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01a      	beq.n	80032b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4798      	blx	r3
 8003294:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003298:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800329a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	000a      	movs	r2, r1
 80032a8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80032aa:	4613      	mov	r3, r2
 80032ac:	461a      	mov	r2, r3
 80032ae:	4621      	mov	r1, r4
 80032b0:	200d      	movs	r0, #13
 80032b2:	f7ff fc59 	bl	8002b68 <SEGGER_SYSVIEW_RecordU32x2>
 80032b6:	e006      	b.n	80032c6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	200c      	movs	r0, #12
 80032c0:	f7ff fc16 	bl	8002af0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20017288 	.word	0x20017288
 80032d4:	e0001004 	.word	0xe0001004

080032d8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80032de:	f3ef 8311 	mrs	r3, BASEPRI
 80032e2:	f04f 0120 	mov.w	r1, #32
 80032e6:	f381 8811 	msr	BASEPRI, r1
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	4819      	ldr	r0, [pc, #100]	; (8003354 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80032ee:	f7ff f9de 	bl	80026ae <_PreparePacket>
 80032f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003300:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	e00b      	b.n	8003324 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1c59      	adds	r1, r3, #1
 8003314:	6179      	str	r1, [r7, #20]
 8003316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	09db      	lsrs	r3, r3, #7
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b7f      	cmp	r3, #127	; 0x7f
 8003328:	d8f0      	bhi.n	800330c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	617a      	str	r2, [r7, #20]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800333a:	2202      	movs	r2, #2
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	68b8      	ldr	r0, [r7, #8]
 8003340:	f7ff fa96 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f383 8811 	msr	BASEPRI, r3
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200172b8 	.word	0x200172b8
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003362:	f3ef 8311 	mrs	r3, BASEPRI
 8003366:	f04f 0120 	mov.w	r1, #32
 800336a:	f381 8811 	msr	BASEPRI, r1
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	4807      	ldr	r0, [pc, #28]	; (8003390 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003372:	f7ff f99c 	bl	80026ae <_PreparePacket>
 8003376:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003378:	2203      	movs	r2, #3
 800337a:	6839      	ldr	r1, [r7, #0]
 800337c:	6838      	ldr	r0, [r7, #0]
 800337e:	f7ff fa77 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f383 8811 	msr	BASEPRI, r3
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200172b8 	.word	0x200172b8

08003394 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800339a:	f3ef 8311 	mrs	r3, BASEPRI
 800339e:	f04f 0120 	mov.w	r1, #32
 80033a2:	f381 8811 	msr	BASEPRI, r1
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	4807      	ldr	r0, [pc, #28]	; (80033c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80033aa:	f7ff f980 	bl	80026ae <_PreparePacket>
 80033ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80033b0:	2212      	movs	r2, #18
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	6838      	ldr	r0, [r7, #0]
 80033b6:	f7ff fa5b 	bl	8002870 <_SendPacket>
  RECORD_END();
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f383 8811 	msr	BASEPRI, r3
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200172b8 	.word	0x200172b8

080033cc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80033d2:	f3ef 8311 	mrs	r3, BASEPRI
 80033d6:	f04f 0120 	mov.w	r1, #32
 80033da:	f381 8811 	msr	BASEPRI, r1
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	4807      	ldr	r0, [pc, #28]	; (8003400 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80033e2:	f7ff f964 	bl	80026ae <_PreparePacket>
 80033e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80033e8:	2211      	movs	r2, #17
 80033ea:	6839      	ldr	r1, [r7, #0]
 80033ec:	6838      	ldr	r0, [r7, #0]
 80033ee:	f7ff fa3f 	bl	8002870 <_SendPacket>
  RECORD_END();
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f383 8811 	msr	BASEPRI, r3
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200172b8 	.word	0x200172b8

08003404 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800340c:	f3ef 8311 	mrs	r3, BASEPRI
 8003410:	f04f 0120 	mov.w	r1, #32
 8003414:	f381 8811 	msr	BASEPRI, r1
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	481a      	ldr	r0, [pc, #104]	; (8003484 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800341c:	f7ff f947 	bl	80026ae <_PreparePacket>
 8003420:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e00b      	b.n	8003454 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	1c59      	adds	r1, r3, #1
 8003444:	61f9      	str	r1, [r7, #28]
 8003446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	09db      	lsrs	r3, r3, #7
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b7f      	cmp	r3, #127	; 0x7f
 8003458:	d8f0      	bhi.n	800343c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	61fa      	str	r2, [r7, #28]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800346a:	2208      	movs	r2, #8
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	6938      	ldr	r0, [r7, #16]
 8003470:	f7ff f9fe 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f383 8811 	msr	BASEPRI, r3
}
 800347a:	bf00      	nop
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200172b8 	.word	0x200172b8
 8003488:	20017288 	.word	0x20017288

0800348c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003494:	f3ef 8311 	mrs	r3, BASEPRI
 8003498:	f04f 0120 	mov.w	r1, #32
 800349c:	f381 8811 	msr	BASEPRI, r1
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	481a      	ldr	r0, [pc, #104]	; (800350c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80034a4:	f7ff f903 	bl	80026ae <_PreparePacket>
 80034a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	e00b      	b.n	80034dc <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	61f9      	str	r1, [r7, #28]
 80034ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	09db      	lsrs	r3, r3, #7
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b7f      	cmp	r3, #127	; 0x7f
 80034e0:	d8f0      	bhi.n	80034c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	61fa      	str	r2, [r7, #28]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80034f2:	2204      	movs	r2, #4
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	f7ff f9ba 	bl	8002870 <_SendPacket>
  RECORD_END();
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f383 8811 	msr	BASEPRI, r3
}
 8003502:	bf00      	nop
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200172b8 	.word	0x200172b8
 8003510:	20017288 	.word	0x20017288

08003514 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800351c:	f3ef 8311 	mrs	r3, BASEPRI
 8003520:	f04f 0120 	mov.w	r1, #32
 8003524:	f381 8811 	msr	BASEPRI, r1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	481a      	ldr	r0, [pc, #104]	; (8003594 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800352c:	f7ff f8bf 	bl	80026ae <_PreparePacket>
 8003530:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e00b      	b.n	8003564 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	61f9      	str	r1, [r7, #28]
 8003556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	09db      	lsrs	r3, r3, #7
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b7f      	cmp	r3, #127	; 0x7f
 8003568:	d8f0      	bhi.n	800354c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	61fa      	str	r2, [r7, #28]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800357a:	2206      	movs	r2, #6
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	6938      	ldr	r0, [r7, #16]
 8003580:	f7ff f976 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f383 8811 	msr	BASEPRI, r3
}
 800358a:	bf00      	nop
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200172b8 	.word	0x200172b8
 8003598:	20017288 	.word	0x20017288

0800359c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80035a6:	f3ef 8311 	mrs	r3, BASEPRI
 80035aa:	f04f 0120 	mov.w	r1, #32
 80035ae:	f381 8811 	msr	BASEPRI, r1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	4827      	ldr	r0, [pc, #156]	; (8003654 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80035b6:	f7ff f87a 	bl	80026ae <_PreparePacket>
 80035ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	e00b      	b.n	80035ee <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	1c59      	adds	r1, r3, #1
 80035de:	6279      	str	r1, [r7, #36]	; 0x24
 80035e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	09db      	lsrs	r3, r3, #7
 80035ec:	623b      	str	r3, [r7, #32]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2b7f      	cmp	r3, #127	; 0x7f
 80035f2:	d8f0      	bhi.n	80035d6 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	627a      	str	r2, [r7, #36]	; 0x24
 80035fa:	6a3a      	ldr	r2, [r7, #32]
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	e00b      	b.n	8003626 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	61f9      	str	r1, [r7, #28]
 8003618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	09db      	lsrs	r3, r3, #7
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b7f      	cmp	r3, #127	; 0x7f
 800362a:	d8f0      	bhi.n	800360e <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	61fa      	str	r2, [r7, #28]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800363c:	2207      	movs	r2, #7
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	6938      	ldr	r0, [r7, #16]
 8003642:	f7ff f915 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f383 8811 	msr	BASEPRI, r3
}
 800364c:	bf00      	nop
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200172b8 	.word	0x200172b8
 8003658:	20017288 	.word	0x20017288

0800365c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	089b      	lsrs	r3, r3, #2
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20017288 	.word	0x20017288

08003680 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b08c      	sub	sp, #48	; 0x30
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d06d      	beq.n	800376e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003692:	4b39      	ldr	r3, [pc, #228]	; (8003778 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003698:	2300      	movs	r3, #0
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
 800369c:	e008      	b.n	80036b0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	3301      	adds	r3, #1
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3f2      	bcc.n	800369e <SEGGER_SYSVIEW_SendModule+0x1e>
 80036b8:	e000      	b.n	80036bc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80036ba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d055      	beq.n	800376e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80036c2:	f3ef 8311 	mrs	r3, BASEPRI
 80036c6:	f04f 0120 	mov.w	r1, #32
 80036ca:	f381 8811 	msr	BASEPRI, r1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	482a      	ldr	r0, [pc, #168]	; (800377c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80036d2:	f7fe ffec 	bl	80026ae <_PreparePacket>
 80036d6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	e00b      	b.n	80036fe <SEGGER_SYSVIEW_SendModule+0x7e>
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	6279      	str	r1, [r7, #36]	; 0x24
 80036f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	09db      	lsrs	r3, r3, #7
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b7f      	cmp	r3, #127	; 0x7f
 8003702:	d8f0      	bhi.n	80036e6 <SEGGER_SYSVIEW_SendModule+0x66>
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	627a      	str	r2, [r7, #36]	; 0x24
 800370a:	6a3a      	ldr	r2, [r7, #32]
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e00b      	b.n	8003738 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	61f9      	str	r1, [r7, #28]
 800372a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	09db      	lsrs	r3, r3, #7
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b7f      	cmp	r3, #127	; 0x7f
 800373c:	d8f0      	bhi.n	8003720 <SEGGER_SYSVIEW_SendModule+0xa0>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	61fa      	str	r2, [r7, #28]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	4619      	mov	r1, r3
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7fe ff5c 	bl	8002614 <_EncodeStr>
 800375c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800375e:	2216      	movs	r2, #22
 8003760:	68f9      	ldr	r1, [r7, #12]
 8003762:	6938      	ldr	r0, [r7, #16]
 8003764:	f7ff f884 	bl	8002870 <_SendPacket>
      RECORD_END();
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800376e:	bf00      	nop
 8003770:	3730      	adds	r7, #48	; 0x30
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	200172b0 	.word	0x200172b0
 800377c:	200172b8 	.word	0x200172b8

08003780 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00f      	beq.n	80037ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f2      	bne.n	8003794 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200172b0 	.word	0x200172b0

080037bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80037c2:	f3ef 8311 	mrs	r3, BASEPRI
 80037c6:	f04f 0120 	mov.w	r1, #32
 80037ca:	f381 8811 	msr	BASEPRI, r1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4817      	ldr	r0, [pc, #92]	; (8003830 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80037d2:	f7fe ff6c 	bl	80026ae <_PreparePacket>
 80037d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	e00b      	b.n	8003800 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1c59      	adds	r1, r3, #1
 80037f0:	6179      	str	r1, [r7, #20]
 80037f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	09db      	lsrs	r3, r3, #7
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b7f      	cmp	r3, #127	; 0x7f
 8003804:	d8f0      	bhi.n	80037e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	617a      	str	r2, [r7, #20]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003816:	221b      	movs	r2, #27
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	68b8      	ldr	r0, [r7, #8]
 800381c:	f7ff f828 	bl	8002870 <_SendPacket>
  RECORD_END();
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f383 8811 	msr	BASEPRI, r3
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200172b8 	.word	0x200172b8
 8003834:	200172b4 	.word	0x200172b4

08003838 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003840:	f3ef 8311 	mrs	r3, BASEPRI
 8003844:	f04f 0120 	mov.w	r1, #32
 8003848:	f381 8811 	msr	BASEPRI, r1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	4827      	ldr	r0, [pc, #156]	; (80038ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8003850:	f7fe ff2d 	bl	80026ae <_PreparePacket>
 8003854:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	6938      	ldr	r0, [r7, #16]
 800385c:	f7fe feda 	bl	8002614 <_EncodeStr>
 8003860:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	2301      	movs	r3, #1
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	e00b      	b.n	8003884 <SEGGER_SYSVIEW_Warn+0x4c>
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	1c59      	adds	r1, r3, #1
 8003874:	6279      	str	r1, [r7, #36]	; 0x24
 8003876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	09db      	lsrs	r3, r3, #7
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2b7f      	cmp	r3, #127	; 0x7f
 8003888:	d8f0      	bhi.n	800386c <SEGGER_SYSVIEW_Warn+0x34>
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	627a      	str	r2, [r7, #36]	; 0x24
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e00b      	b.n	80038bc <SEGGER_SYSVIEW_Warn+0x84>
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	1c59      	adds	r1, r3, #1
 80038ac:	61f9      	str	r1, [r7, #28]
 80038ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	09db      	lsrs	r3, r3, #7
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b7f      	cmp	r3, #127	; 0x7f
 80038c0:	d8f0      	bhi.n	80038a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	61fa      	str	r2, [r7, #28]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80038d2:	221a      	movs	r2, #26
 80038d4:	68f9      	ldr	r1, [r7, #12]
 80038d6:	6938      	ldr	r0, [r7, #16]
 80038d8:	f7fe ffca 	bl	8002870 <_SendPacket>
  RECORD_END();
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f383 8811 	msr	BASEPRI, r3
}
 80038e2:	bf00      	nop
 80038e4:	3728      	adds	r7, #40	; 0x28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200172b8 	.word	0x200172b8

080038f0 <main>:

//global variables
char usr_msg[250] = {0};

int main(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af02      	add	r7, sp, #8
	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL for SEGGER Systemview Timestamp maintaining
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <main+0x68>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <main+0x68>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6013      	str	r3, [r2, #0]

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 8003902:	f7fc fde1 	bl	80004c8 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 8003906:	f000 f9af 	bl	8003c68 <SystemCoreClockUpdate>

	prvSetupHardware();
 800390a:	f000 f873 	bl	80039f4 <prvSetupHardware>

	sprintf(usr_msg, "This is Demo of Task Notify APIs\r\n");
 800390e:	4913      	ldr	r1, [pc, #76]	; (800395c <main+0x6c>)
 8003910:	4813      	ldr	r0, [pc, #76]	; (8003960 <main+0x70>)
 8003912:	f000 fb39 	bl	8003f88 <siprintf>
	printmsg(usr_msg);
 8003916:	4812      	ldr	r0, [pc, #72]	; (8003960 <main+0x70>)
 8003918:	f000 f874 	bl	8003a04 <printmsg>

	//start recording
	SEGGER_SYSVIEW_Conf();
 800391c:	f7fe fb1e 	bl	8001f5c <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8003920:	f7ff fa0e 	bl	8002d40 <SEGGER_SYSVIEW_Start>

	//3. lets create 2 tasks
	xTaskCreate(vtask_led_handler, "TASK-LED", 500, NULL, 2, &xTaskHandle1);
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <main+0x74>)
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2302      	movs	r3, #2
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003932:	490d      	ldr	r1, [pc, #52]	; (8003968 <main+0x78>)
 8003934:	480d      	ldr	r0, [pc, #52]	; (800396c <main+0x7c>)
 8003936:	f7fd f8c9 	bl	8000acc <xTaskCreate>

	xTaskCreate(vtask_button_handler, "TASK-BUTTON", 500, NULL, 2, &xTaskHandle2);
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <main+0x80>)
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	2302      	movs	r3, #2
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003948:	490a      	ldr	r1, [pc, #40]	; (8003974 <main+0x84>)
 800394a:	480b      	ldr	r0, [pc, #44]	; (8003978 <main+0x88>)
 800394c:	f7fd f8be 	bl	8000acc <xTaskCreate>

	//4. start the scheduler
	vTaskStartScheduler();
 8003950:	f7fd fa1e 	bl	8000d90 <vTaskStartScheduler>

	for(;;);
 8003954:	e7fe      	b.n	8003954 <main+0x64>
 8003956:	bf00      	nop
 8003958:	e0001000 	.word	0xe0001000
 800395c:	080048b8 	.word	0x080048b8
 8003960:	200173a4 	.word	0x200173a4
 8003964:	2001739c 	.word	0x2001739c
 8003968:	080048dc 	.word	0x080048dc
 800396c:	0800397d 	.word	0x0800397d
 8003970:	200173a0 	.word	0x200173a0
 8003974:	080048e8 	.word	0x080048e8
 8003978:	080039bd 	.word	0x080039bd

0800397c <vtask_led_handler>:
}

void vtask_led_handler(void *params)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	while(1){
		//lets wait until we receive any notification event from task_button
		if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY) == pdTRUE){
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
 8003988:	2200      	movs	r2, #0
 800398a:	2100      	movs	r1, #0
 800398c:	2000      	movs	r0, #0
 800398e:	f7fd fd03 	bl	8001398 <xTaskNotifyWait>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d1f5      	bne.n	8003984 <vtask_led_handler+0x8>
			//we received the notification so lets toggle the led
			GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
 8003998:	2101      	movs	r1, #1
 800399a:	4805      	ldr	r0, [pc, #20]	; (80039b0 <vtask_led_handler+0x34>)
 800399c:	f7fc fd39 	bl	8000412 <GPIO_ToggleBits>
			sprintf(usr_msg, "Notification is received \r\n");
 80039a0:	4904      	ldr	r1, [pc, #16]	; (80039b4 <vtask_led_handler+0x38>)
 80039a2:	4805      	ldr	r0, [pc, #20]	; (80039b8 <vtask_led_handler+0x3c>)
 80039a4:	f000 faf0 	bl	8003f88 <siprintf>
			printmsg(usr_msg);
 80039a8:	4803      	ldr	r0, [pc, #12]	; (80039b8 <vtask_led_handler+0x3c>)
 80039aa:	f000 f82b 	bl	8003a04 <printmsg>
		if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY) == pdTRUE){
 80039ae:	e7e9      	b.n	8003984 <vtask_led_handler+0x8>
 80039b0:	40020400 	.word	0x40020400
 80039b4:	080048f4 	.word	0x080048f4
 80039b8:	200173a4 	.word	0x200173a4

080039bc <vtask_button_handler>:
	}

}

void vtask_button_handler(void *params)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	while(1){
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 80039c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c8:	4808      	ldr	r0, [pc, #32]	; (80039ec <vtask_button_handler+0x30>)
 80039ca:	f7fc fd08 	bl	80003de <GPIO_ReadInputDataBit>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f7      	beq.n	80039c4 <vtask_button_handler+0x8>
			//if button is pressed

			//wait here for 100ms to compensate for the button debouncing
			rtos_delay(100); //wait for 100 ticks
 80039d4:	2064      	movs	r0, #100	; 0x64
 80039d6:	f000 f8c3 	bl	8003b60 <rtos_delay>

			//send notification to task_led
			xTaskNotify(xTaskHandle1, 0, eNoAction);
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <vtask_button_handler+0x34>)
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	2200      	movs	r2, #0
 80039e2:	2100      	movs	r1, #0
 80039e4:	f7fd fd3c 	bl	8001460 <xTaskGenericNotify>
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 80039e8:	e7ec      	b.n	80039c4 <vtask_button_handler+0x8>
 80039ea:	bf00      	nop
 80039ec:	40020800 	.word	0x40020800
 80039f0:	2001739c 	.word	0x2001739c

080039f4 <prvSetupHardware>:

	}
}

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	//Setup led and button
	prvSetupGpio();
 80039f8:	f000 f87c 	bl	8003af4 <prvSetupGpio>

	//Setup UART3
	prvSetupUart();
 80039fc:	f000 f82c 	bl	8003a58 <prvSetupUart>

}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <printmsg>:

void printmsg(char *msg)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++){
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e013      	b.n	8003a3a <printmsg+0x36>
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != SET);
 8003a12:	bf00      	nop
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	480f      	ldr	r0, [pc, #60]	; (8003a54 <printmsg+0x50>)
 8003a18:	f7fc ff88 	bl	800092c <USART_GetFlagStatus>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d1f8      	bne.n	8003a14 <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4809      	ldr	r0, [pc, #36]	; (8003a54 <printmsg+0x50>)
 8003a30:	f7fc ff6a 	bl	8000908 <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++){
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fc fbe8 	bl	8000210 <strlen>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d3e4      	bcc.n	8003a12 <printmsg+0xe>
	}

}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40004800 	.word	0x40004800

08003a58 <prvSetupUart>:

static void prvSetupUart(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003a64:	f7fc fe36 	bl	80006d4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2008      	movs	r0, #8
 8003a6c:	f7fc fe12 	bl	8000694 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 8003a70:	f107 0310 	add.w	r3, r7, #16
 8003a74:	2208      	movs	r2, #8
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fa7d 	bl	8003f78 <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8003a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a82:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 8003a84:	2302      	movs	r3, #2
 8003a86:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 8003a8c:	f107 0310 	add.w	r3, r7, #16
 8003a90:	4619      	mov	r1, r3
 8003a92:	4816      	ldr	r0, [pc, #88]	; (8003aec <prvSetupUart+0x94>)
 8003a94:	f7fc fc14 	bl	80002c0 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 8003a98:	2207      	movs	r2, #7
 8003a9a:	2108      	movs	r1, #8
 8003a9c:	4813      	ldr	r0, [pc, #76]	; (8003aec <prvSetupUart+0x94>)
 8003a9e:	f7fc fcca 	bl	8000436 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 8003aa2:	2207      	movs	r2, #7
 8003aa4:	2109      	movs	r1, #9
 8003aa6:	4811      	ldr	r0, [pc, #68]	; (8003aec <prvSetupUart+0x94>)
 8003aa8:	f7fc fcc5 	bl	8000436 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 8003aac:	463b      	mov	r3, r7
 8003aae:	2210      	movs	r2, #16
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fa60 	bl	8003f78 <memset>

	uart3_init.USART_BaudRate = 115200;
 8003ab8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003abc:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 8003ad2:	463b      	mov	r3, r7
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4806      	ldr	r0, [pc, #24]	; (8003af0 <prvSetupUart+0x98>)
 8003ad8:	f7fc fe3c 	bl	8000754 <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 8003adc:	2101      	movs	r1, #1
 8003ade:	4804      	ldr	r0, [pc, #16]	; (8003af0 <prvSetupUart+0x98>)
 8003ae0:	f7fc fef2 	bl	80008c8 <USART_Cmd>

}
 8003ae4:	bf00      	nop
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40004800 	.word	0x40004800

08003af4 <prvSetupGpio>:

void prvSetupGpio(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003afa:	2101      	movs	r1, #1
 8003afc:	2002      	movs	r0, #2
 8003afe:	f7fc fdc9 	bl	8000694 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003b02:	2101      	movs	r1, #1
 8003b04:	2004      	movs	r0, #4
 8003b06:	f7fc fdc5 	bl	8000694 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b10:	f7fc fe00 	bl	8000714 <RCC_APB2PeriphClockCmd>

	led_init.GPIO_Pin = GPIO_Pin_0;
 8003b14:	2301      	movs	r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	733b      	strb	r3, [r7, #12]
	led_init.GPIO_OType = GPIO_OType_PP;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73bb      	strb	r3, [r7, #14]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8003b24:	2300      	movs	r3, #0
 8003b26:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &led_init);
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	480a      	ldr	r0, [pc, #40]	; (8003b58 <prvSetupGpio+0x64>)
 8003b30:	f7fc fbc6 	bl	80002c0 <GPIO_Init>

	button_init.GPIO_Pin = GPIO_Pin_13;
 8003b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b38:	603b      	str	r3, [r7, #0]
	button_init.GPIO_Mode = GPIO_Mode_IN;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	713b      	strb	r3, [r7, #4]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	71fb      	strb	r3, [r7, #7]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 8003b42:	2300      	movs	r3, #0
 8003b44:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOC, &button_init);
 8003b46:	463b      	mov	r3, r7
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4804      	ldr	r0, [pc, #16]	; (8003b5c <prvSetupGpio+0x68>)
 8003b4c:	f7fc fbb8 	bl	80002c0 <GPIO_Init>

}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800

08003b60 <rtos_delay>:

void rtos_delay(uint32_t delay_in_ms)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	uint32_t current_tick_count = xTaskGetTickCount();
 8003b68:	f7fd fa18 	bl	8000f9c <xTaskGetTickCount>
 8003b6c:	60f8      	str	r0, [r7, #12]

	//convertion ms to # of ticks
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <rtos_delay+0x40>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	60bb      	str	r3, [r7, #8]

	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
 8003b82:	bf00      	nop
 8003b84:	f7fd fa0a 	bl	8000f9c <xTaskGetTickCount>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4299      	cmp	r1, r3
 8003b92:	d3f7      	bcc.n	8003b84 <rtos_delay+0x24>

}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	10624dd3 	.word	0x10624dd3

08003ba4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <_sbrk+0x50>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <_sbrk+0x16>
		heap_end = &end;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <_sbrk+0x50>)
 8003bb6:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <_sbrk+0x54>)
 8003bb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <_sbrk+0x50>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <_sbrk+0x50>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	466a      	mov	r2, sp
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d907      	bls.n	8003bde <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003bce:	f000 f98d 	bl	8003eec <__errno>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	220c      	movs	r2, #12
 8003bd6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bdc:	e006      	b.n	8003bec <_sbrk+0x48>
	}

	heap_end += incr;
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <_sbrk+0x50>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <_sbrk+0x50>)
 8003be8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003bea:	68fb      	ldr	r3, [r7, #12]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200174a0 	.word	0x200174a0
 8003bf8:	20017568 	.word	0x20017568

08003bfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c00:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <SystemInit+0x60>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <SystemInit+0x60>)
 8003c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <SystemInit+0x64>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <SystemInit+0x64>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <SystemInit+0x64>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <SystemInit+0x64>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <SystemInit+0x64>)
 8003c28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <SystemInit+0x64>)
 8003c34:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <SystemInit+0x68>)
 8003c36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <SystemInit+0x64>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <SystemInit+0x64>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <SystemInit+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003c4a:	f000 f88f 	bl	8003d6c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c4e:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <SystemInit+0x60>)
 8003c50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c54:	609a      	str	r2, [r3, #8]
#endif
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000ed00 	.word	0xe000ed00
 8003c60:	40023800 	.word	0x40023800
 8003c64:	24003010 	.word	0x24003010

08003c68 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	2302      	movs	r3, #2
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	2302      	movs	r3, #2
 8003c80:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003c82:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <SystemCoreClockUpdate+0xf0>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d011      	beq.n	8003cb6 <SystemCoreClockUpdate+0x4e>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d844      	bhi.n	8003d22 <SystemCoreClockUpdate+0xba>
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <SystemCoreClockUpdate+0x3e>
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d004      	beq.n	8003cae <SystemCoreClockUpdate+0x46>
 8003ca4:	e03d      	b.n	8003d22 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <SystemCoreClockUpdate+0xf4>)
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <SystemCoreClockUpdate+0xf8>)
 8003caa:	601a      	str	r2, [r3, #0]
      break;
 8003cac:	e03d      	b.n	8003d2a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003cae:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <SystemCoreClockUpdate+0xf4>)
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <SystemCoreClockUpdate+0xfc>)
 8003cb2:	601a      	str	r2, [r3, #0]
      break;
 8003cb4:	e039      	b.n	8003d2a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <SystemCoreClockUpdate+0xf0>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	0d9b      	lsrs	r3, r3, #22
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <SystemCoreClockUpdate+0xf0>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cca:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cd2:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <SystemCoreClockUpdate+0xfc>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <SystemCoreClockUpdate+0xf0>)
 8003cdc:	6852      	ldr	r2, [r2, #4]
 8003cde:	0992      	lsrs	r2, r2, #6
 8003ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e00b      	b.n	8003d04 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cec:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <SystemCoreClockUpdate+0xf8>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <SystemCoreClockUpdate+0xf0>)
 8003cf6:	6852      	ldr	r2, [r2, #4]
 8003cf8:	0992      	lsrs	r2, r2, #6
 8003cfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003d04:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <SystemCoreClockUpdate+0xf0>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <SystemCoreClockUpdate+0xf4>)
 8003d1e:	6013      	str	r3, [r2, #0]
      break;
 8003d20:	e003      	b.n	8003d2a <SystemCoreClockUpdate+0xc2>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <SystemCoreClockUpdate+0xf4>)
 8003d24:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <SystemCoreClockUpdate+0xf8>)
 8003d26:	601a      	str	r2, [r3, #0]
      break;
 8003d28:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <SystemCoreClockUpdate+0xf0>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <SystemCoreClockUpdate+0x100>)
 8003d36:	5cd3      	ldrb	r3, [r2, r3]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <SystemCoreClockUpdate+0xf4>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <SystemCoreClockUpdate+0xf4>)
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	20000014 	.word	0x20000014
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	017d7840 	.word	0x017d7840
 8003d68:	20000018 	.word	0x20000018

08003d6c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	2300      	movs	r3, #0
 8003d78:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003d7a:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <SetSysClock+0x11c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a42      	ldr	r2, [pc, #264]	; (8003e88 <SetSysClock+0x11c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003d86:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <SetSysClock+0x11c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3301      	adds	r3, #1
 8003d94:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <SetSysClock+0x38>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003da2:	d1f0      	bne.n	8003d86 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003da4:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <SetSysClock+0x11c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003db0:	2301      	movs	r3, #1
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	e001      	b.n	8003dba <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003db6:	2300      	movs	r3, #0
 8003db8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d15c      	bne.n	8003e7a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <SetSysClock+0x11c>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <SetSysClock+0x11c>)
 8003dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003dcc:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <SetSysClock+0x120>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <SetSysClock+0x120>)
 8003dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <SetSysClock+0x11c>)
 8003dda:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <SetSysClock+0x11c>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003de0:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <SetSysClock+0x11c>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <SetSysClock+0x11c>)
 8003de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dea:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <SetSysClock+0x11c>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <SetSysClock+0x11c>)
 8003df2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003df6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <SetSysClock+0x11c>)
 8003dfa:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <SetSysClock+0x124>)
 8003dfc:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <SetSysClock+0x11c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <SetSysClock+0x11c>)
 8003e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e08:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003e0a:	bf00      	nop
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <SetSysClock+0x11c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f9      	beq.n	8003e0c <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <SetSysClock+0x120>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <SetSysClock+0x120>)
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003e24:	bf00      	nop
 8003e26:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <SetSysClock+0x120>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f9      	beq.n	8003e26 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <SetSysClock+0x120>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <SetSysClock+0x120>)
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003e3e:	bf00      	nop
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <SetSysClock+0x120>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f9      	beq.n	8003e40 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <SetSysClock+0x128>)
 8003e4e:	f240 7205 	movw	r2, #1797	; 0x705
 8003e52:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <SetSysClock+0x11c>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <SetSysClock+0x11c>)
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <SetSysClock+0x11c>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <SetSysClock+0x11c>)
 8003e66:	f043 0302 	orr.w	r3, r3, #2
 8003e6a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003e6c:	bf00      	nop
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <SetSysClock+0x11c>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d1f9      	bne.n	8003e6e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	07405a19 	.word	0x07405a19
 8003e94:	40023c00 	.word	0x40023c00

08003e98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e98:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e9c:	480d      	ldr	r0, [pc, #52]	; (8003ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e9e:	490e      	ldr	r1, [pc, #56]	; (8003ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ea0:	4a0e      	ldr	r2, [pc, #56]	; (8003edc <LoopForever+0xe>)
  movs r3, #0
 8003ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea4:	e002      	b.n	8003eac <LoopCopyDataInit>

08003ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eaa:	3304      	adds	r3, #4

08003eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb0:	d3f9      	bcc.n	8003ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eb4:	4c0b      	ldr	r4, [pc, #44]	; (8003ee4 <LoopForever+0x16>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb8:	e001      	b.n	8003ebe <LoopFillZerobss>

08003eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ebc:	3204      	adds	r2, #4

08003ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec0:	d3fb      	bcc.n	8003eba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ec2:	f7ff fe9b 	bl	8003bfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003ec6:	f000 f817 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003eca:	f7ff fd11 	bl	80038f0 <main>

08003ece <LoopForever>:

LoopForever:
    b LoopForever
 8003ece:	e7fe      	b.n	8003ece <LoopForever>
  ldr   r0, =_estack
 8003ed0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003edc:	08004960 	.word	0x08004960
  ldr r2, =_sbss
 8003ee0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003ee4:	20017564 	.word	0x20017564

08003ee8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ee8:	e7fe      	b.n	8003ee8 <ADC_IRQHandler>
	...

08003eec <__errno>:
 8003eec:	4b01      	ldr	r3, [pc, #4]	; (8003ef4 <__errno+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000028 	.word	0x20000028

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4d0d      	ldr	r5, [pc, #52]	; (8003f30 <__libc_init_array+0x38>)
 8003efc:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	2600      	movs	r6, #0
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	4d0b      	ldr	r5, [pc, #44]	; (8003f38 <__libc_init_array+0x40>)
 8003f0a:	4c0c      	ldr	r4, [pc, #48]	; (8003f3c <__libc_init_array+0x44>)
 8003f0c:	f000 fc5c 	bl	80047c8 <_init>
 8003f10:	1b64      	subs	r4, r4, r5
 8003f12:	10a4      	asrs	r4, r4, #2
 8003f14:	2600      	movs	r6, #0
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08004958 	.word	0x08004958
 8003f34:	08004958 	.word	0x08004958
 8003f38:	08004958 	.word	0x08004958
 8003f3c:	0800495c 	.word	0x0800495c

08003f40 <memcmp>:
 8003f40:	b530      	push	{r4, r5, lr}
 8003f42:	3901      	subs	r1, #1
 8003f44:	2400      	movs	r4, #0
 8003f46:	42a2      	cmp	r2, r4
 8003f48:	d101      	bne.n	8003f4e <memcmp+0xe>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e005      	b.n	8003f5a <memcmp+0x1a>
 8003f4e:	5d03      	ldrb	r3, [r0, r4]
 8003f50:	3401      	adds	r4, #1
 8003f52:	5d0d      	ldrb	r5, [r1, r4]
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	d0f6      	beq.n	8003f46 <memcmp+0x6>
 8003f58:	1b58      	subs	r0, r3, r5
 8003f5a:	bd30      	pop	{r4, r5, pc}

08003f5c <memcpy>:
 8003f5c:	440a      	add	r2, r1
 8003f5e:	4291      	cmp	r1, r2
 8003f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f64:	d100      	bne.n	8003f68 <memcpy+0xc>
 8003f66:	4770      	bx	lr
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f72:	4291      	cmp	r1, r2
 8003f74:	d1f9      	bne.n	8003f6a <memcpy+0xe>
 8003f76:	bd10      	pop	{r4, pc}

08003f78 <memset>:
 8003f78:	4402      	add	r2, r0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d100      	bne.n	8003f82 <memset+0xa>
 8003f80:	4770      	bx	lr
 8003f82:	f803 1b01 	strb.w	r1, [r3], #1
 8003f86:	e7f9      	b.n	8003f7c <memset+0x4>

08003f88 <siprintf>:
 8003f88:	b40e      	push	{r1, r2, r3}
 8003f8a:	b500      	push	{lr}
 8003f8c:	b09c      	sub	sp, #112	; 0x70
 8003f8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f90:	9002      	str	r0, [sp, #8]
 8003f92:	9006      	str	r0, [sp, #24]
 8003f94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f98:	4809      	ldr	r0, [pc, #36]	; (8003fc0 <siprintf+0x38>)
 8003f9a:	9107      	str	r1, [sp, #28]
 8003f9c:	9104      	str	r1, [sp, #16]
 8003f9e:	4909      	ldr	r1, [pc, #36]	; (8003fc4 <siprintf+0x3c>)
 8003fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa4:	9105      	str	r1, [sp, #20]
 8003fa6:	6800      	ldr	r0, [r0, #0]
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	a902      	add	r1, sp, #8
 8003fac:	f000 f868 	bl	8004080 <_svfiprintf_r>
 8003fb0:	9b02      	ldr	r3, [sp, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	b01c      	add	sp, #112	; 0x70
 8003fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fbc:	b003      	add	sp, #12
 8003fbe:	4770      	bx	lr
 8003fc0:	20000028 	.word	0x20000028
 8003fc4:	ffff0208 	.word	0xffff0208

08003fc8 <__ssputs_r>:
 8003fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	688e      	ldr	r6, [r1, #8]
 8003fce:	429e      	cmp	r6, r3
 8003fd0:	4682      	mov	sl, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	4690      	mov	r8, r2
 8003fd6:	461f      	mov	r7, r3
 8003fd8:	d838      	bhi.n	800404c <__ssputs_r+0x84>
 8003fda:	898a      	ldrh	r2, [r1, #12]
 8003fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fe0:	d032      	beq.n	8004048 <__ssputs_r+0x80>
 8003fe2:	6825      	ldr	r5, [r4, #0]
 8003fe4:	6909      	ldr	r1, [r1, #16]
 8003fe6:	eba5 0901 	sub.w	r9, r5, r1
 8003fea:	6965      	ldr	r5, [r4, #20]
 8003fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	444b      	add	r3, r9
 8003ff8:	106d      	asrs	r5, r5, #1
 8003ffa:	429d      	cmp	r5, r3
 8003ffc:	bf38      	it	cc
 8003ffe:	461d      	movcc	r5, r3
 8004000:	0553      	lsls	r3, r2, #21
 8004002:	d531      	bpl.n	8004068 <__ssputs_r+0xa0>
 8004004:	4629      	mov	r1, r5
 8004006:	f000 fb39 	bl	800467c <_malloc_r>
 800400a:	4606      	mov	r6, r0
 800400c:	b950      	cbnz	r0, 8004024 <__ssputs_r+0x5c>
 800400e:	230c      	movs	r3, #12
 8004010:	f8ca 3000 	str.w	r3, [sl]
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004024:	6921      	ldr	r1, [r4, #16]
 8004026:	464a      	mov	r2, r9
 8004028:	f7ff ff98 	bl	8003f5c <memcpy>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	6126      	str	r6, [r4, #16]
 800403a:	6165      	str	r5, [r4, #20]
 800403c:	444e      	add	r6, r9
 800403e:	eba5 0509 	sub.w	r5, r5, r9
 8004042:	6026      	str	r6, [r4, #0]
 8004044:	60a5      	str	r5, [r4, #8]
 8004046:	463e      	mov	r6, r7
 8004048:	42be      	cmp	r6, r7
 800404a:	d900      	bls.n	800404e <__ssputs_r+0x86>
 800404c:	463e      	mov	r6, r7
 800404e:	4632      	mov	r2, r6
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	4641      	mov	r1, r8
 8004054:	f000 faa8 	bl	80045a8 <memmove>
 8004058:	68a3      	ldr	r3, [r4, #8]
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	1b9b      	subs	r3, r3, r6
 800405e:	4432      	add	r2, r6
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	6022      	str	r2, [r4, #0]
 8004064:	2000      	movs	r0, #0
 8004066:	e7db      	b.n	8004020 <__ssputs_r+0x58>
 8004068:	462a      	mov	r2, r5
 800406a:	f000 fb61 	bl	8004730 <_realloc_r>
 800406e:	4606      	mov	r6, r0
 8004070:	2800      	cmp	r0, #0
 8004072:	d1e1      	bne.n	8004038 <__ssputs_r+0x70>
 8004074:	6921      	ldr	r1, [r4, #16]
 8004076:	4650      	mov	r0, sl
 8004078:	f000 fab0 	bl	80045dc <_free_r>
 800407c:	e7c7      	b.n	800400e <__ssputs_r+0x46>
	...

08004080 <_svfiprintf_r>:
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004084:	4698      	mov	r8, r3
 8004086:	898b      	ldrh	r3, [r1, #12]
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	b09d      	sub	sp, #116	; 0x74
 800408c:	4607      	mov	r7, r0
 800408e:	460d      	mov	r5, r1
 8004090:	4614      	mov	r4, r2
 8004092:	d50e      	bpl.n	80040b2 <_svfiprintf_r+0x32>
 8004094:	690b      	ldr	r3, [r1, #16]
 8004096:	b963      	cbnz	r3, 80040b2 <_svfiprintf_r+0x32>
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	f000 faef 	bl	800467c <_malloc_r>
 800409e:	6028      	str	r0, [r5, #0]
 80040a0:	6128      	str	r0, [r5, #16]
 80040a2:	b920      	cbnz	r0, 80040ae <_svfiprintf_r+0x2e>
 80040a4:	230c      	movs	r3, #12
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	e0d1      	b.n	8004252 <_svfiprintf_r+0x1d2>
 80040ae:	2340      	movs	r3, #64	; 0x40
 80040b0:	616b      	str	r3, [r5, #20]
 80040b2:	2300      	movs	r3, #0
 80040b4:	9309      	str	r3, [sp, #36]	; 0x24
 80040b6:	2320      	movs	r3, #32
 80040b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80040c0:	2330      	movs	r3, #48	; 0x30
 80040c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800426c <_svfiprintf_r+0x1ec>
 80040c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040ca:	f04f 0901 	mov.w	r9, #1
 80040ce:	4623      	mov	r3, r4
 80040d0:	469a      	mov	sl, r3
 80040d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040d6:	b10a      	cbz	r2, 80040dc <_svfiprintf_r+0x5c>
 80040d8:	2a25      	cmp	r2, #37	; 0x25
 80040da:	d1f9      	bne.n	80040d0 <_svfiprintf_r+0x50>
 80040dc:	ebba 0b04 	subs.w	fp, sl, r4
 80040e0:	d00b      	beq.n	80040fa <_svfiprintf_r+0x7a>
 80040e2:	465b      	mov	r3, fp
 80040e4:	4622      	mov	r2, r4
 80040e6:	4629      	mov	r1, r5
 80040e8:	4638      	mov	r0, r7
 80040ea:	f7ff ff6d 	bl	8003fc8 <__ssputs_r>
 80040ee:	3001      	adds	r0, #1
 80040f0:	f000 80aa 	beq.w	8004248 <_svfiprintf_r+0x1c8>
 80040f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040f6:	445a      	add	r2, fp
 80040f8:	9209      	str	r2, [sp, #36]	; 0x24
 80040fa:	f89a 3000 	ldrb.w	r3, [sl]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a2 	beq.w	8004248 <_svfiprintf_r+0x1c8>
 8004104:	2300      	movs	r3, #0
 8004106:	f04f 32ff 	mov.w	r2, #4294967295
 800410a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800410e:	f10a 0a01 	add.w	sl, sl, #1
 8004112:	9304      	str	r3, [sp, #16]
 8004114:	9307      	str	r3, [sp, #28]
 8004116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800411a:	931a      	str	r3, [sp, #104]	; 0x68
 800411c:	4654      	mov	r4, sl
 800411e:	2205      	movs	r2, #5
 8004120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004124:	4851      	ldr	r0, [pc, #324]	; (800426c <_svfiprintf_r+0x1ec>)
 8004126:	f7fc f87b 	bl	8000220 <memchr>
 800412a:	9a04      	ldr	r2, [sp, #16]
 800412c:	b9d8      	cbnz	r0, 8004166 <_svfiprintf_r+0xe6>
 800412e:	06d0      	lsls	r0, r2, #27
 8004130:	bf44      	itt	mi
 8004132:	2320      	movmi	r3, #32
 8004134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004138:	0711      	lsls	r1, r2, #28
 800413a:	bf44      	itt	mi
 800413c:	232b      	movmi	r3, #43	; 0x2b
 800413e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004142:	f89a 3000 	ldrb.w	r3, [sl]
 8004146:	2b2a      	cmp	r3, #42	; 0x2a
 8004148:	d015      	beq.n	8004176 <_svfiprintf_r+0xf6>
 800414a:	9a07      	ldr	r2, [sp, #28]
 800414c:	4654      	mov	r4, sl
 800414e:	2000      	movs	r0, #0
 8004150:	f04f 0c0a 	mov.w	ip, #10
 8004154:	4621      	mov	r1, r4
 8004156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800415a:	3b30      	subs	r3, #48	; 0x30
 800415c:	2b09      	cmp	r3, #9
 800415e:	d94e      	bls.n	80041fe <_svfiprintf_r+0x17e>
 8004160:	b1b0      	cbz	r0, 8004190 <_svfiprintf_r+0x110>
 8004162:	9207      	str	r2, [sp, #28]
 8004164:	e014      	b.n	8004190 <_svfiprintf_r+0x110>
 8004166:	eba0 0308 	sub.w	r3, r0, r8
 800416a:	fa09 f303 	lsl.w	r3, r9, r3
 800416e:	4313      	orrs	r3, r2
 8004170:	9304      	str	r3, [sp, #16]
 8004172:	46a2      	mov	sl, r4
 8004174:	e7d2      	b.n	800411c <_svfiprintf_r+0x9c>
 8004176:	9b03      	ldr	r3, [sp, #12]
 8004178:	1d19      	adds	r1, r3, #4
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	9103      	str	r1, [sp, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	bfbb      	ittet	lt
 8004182:	425b      	neglt	r3, r3
 8004184:	f042 0202 	orrlt.w	r2, r2, #2
 8004188:	9307      	strge	r3, [sp, #28]
 800418a:	9307      	strlt	r3, [sp, #28]
 800418c:	bfb8      	it	lt
 800418e:	9204      	strlt	r2, [sp, #16]
 8004190:	7823      	ldrb	r3, [r4, #0]
 8004192:	2b2e      	cmp	r3, #46	; 0x2e
 8004194:	d10c      	bne.n	80041b0 <_svfiprintf_r+0x130>
 8004196:	7863      	ldrb	r3, [r4, #1]
 8004198:	2b2a      	cmp	r3, #42	; 0x2a
 800419a:	d135      	bne.n	8004208 <_svfiprintf_r+0x188>
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	1d1a      	adds	r2, r3, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	9203      	str	r2, [sp, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bfb8      	it	lt
 80041a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ac:	3402      	adds	r4, #2
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800427c <_svfiprintf_r+0x1fc>
 80041b4:	7821      	ldrb	r1, [r4, #0]
 80041b6:	2203      	movs	r2, #3
 80041b8:	4650      	mov	r0, sl
 80041ba:	f7fc f831 	bl	8000220 <memchr>
 80041be:	b140      	cbz	r0, 80041d2 <_svfiprintf_r+0x152>
 80041c0:	2340      	movs	r3, #64	; 0x40
 80041c2:	eba0 000a 	sub.w	r0, r0, sl
 80041c6:	fa03 f000 	lsl.w	r0, r3, r0
 80041ca:	9b04      	ldr	r3, [sp, #16]
 80041cc:	4303      	orrs	r3, r0
 80041ce:	3401      	adds	r4, #1
 80041d0:	9304      	str	r3, [sp, #16]
 80041d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d6:	4826      	ldr	r0, [pc, #152]	; (8004270 <_svfiprintf_r+0x1f0>)
 80041d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041dc:	2206      	movs	r2, #6
 80041de:	f7fc f81f 	bl	8000220 <memchr>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d038      	beq.n	8004258 <_svfiprintf_r+0x1d8>
 80041e6:	4b23      	ldr	r3, [pc, #140]	; (8004274 <_svfiprintf_r+0x1f4>)
 80041e8:	bb1b      	cbnz	r3, 8004232 <_svfiprintf_r+0x1b2>
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	3307      	adds	r3, #7
 80041ee:	f023 0307 	bic.w	r3, r3, #7
 80041f2:	3308      	adds	r3, #8
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f8:	4433      	add	r3, r6
 80041fa:	9309      	str	r3, [sp, #36]	; 0x24
 80041fc:	e767      	b.n	80040ce <_svfiprintf_r+0x4e>
 80041fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004202:	460c      	mov	r4, r1
 8004204:	2001      	movs	r0, #1
 8004206:	e7a5      	b.n	8004154 <_svfiprintf_r+0xd4>
 8004208:	2300      	movs	r3, #0
 800420a:	3401      	adds	r4, #1
 800420c:	9305      	str	r3, [sp, #20]
 800420e:	4619      	mov	r1, r3
 8004210:	f04f 0c0a 	mov.w	ip, #10
 8004214:	4620      	mov	r0, r4
 8004216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800421a:	3a30      	subs	r2, #48	; 0x30
 800421c:	2a09      	cmp	r2, #9
 800421e:	d903      	bls.n	8004228 <_svfiprintf_r+0x1a8>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0c5      	beq.n	80041b0 <_svfiprintf_r+0x130>
 8004224:	9105      	str	r1, [sp, #20]
 8004226:	e7c3      	b.n	80041b0 <_svfiprintf_r+0x130>
 8004228:	fb0c 2101 	mla	r1, ip, r1, r2
 800422c:	4604      	mov	r4, r0
 800422e:	2301      	movs	r3, #1
 8004230:	e7f0      	b.n	8004214 <_svfiprintf_r+0x194>
 8004232:	ab03      	add	r3, sp, #12
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	462a      	mov	r2, r5
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <_svfiprintf_r+0x1f8>)
 800423a:	a904      	add	r1, sp, #16
 800423c:	4638      	mov	r0, r7
 800423e:	f3af 8000 	nop.w
 8004242:	1c42      	adds	r2, r0, #1
 8004244:	4606      	mov	r6, r0
 8004246:	d1d6      	bne.n	80041f6 <_svfiprintf_r+0x176>
 8004248:	89ab      	ldrh	r3, [r5, #12]
 800424a:	065b      	lsls	r3, r3, #25
 800424c:	f53f af2c 	bmi.w	80040a8 <_svfiprintf_r+0x28>
 8004250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004252:	b01d      	add	sp, #116	; 0x74
 8004254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004258:	ab03      	add	r3, sp, #12
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	462a      	mov	r2, r5
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <_svfiprintf_r+0x1f8>)
 8004260:	a904      	add	r1, sp, #16
 8004262:	4638      	mov	r0, r7
 8004264:	f000 f87a 	bl	800435c <_printf_i>
 8004268:	e7eb      	b.n	8004242 <_svfiprintf_r+0x1c2>
 800426a:	bf00      	nop
 800426c:	08004922 	.word	0x08004922
 8004270:	0800492c 	.word	0x0800492c
 8004274:	00000000 	.word	0x00000000
 8004278:	08003fc9 	.word	0x08003fc9
 800427c:	08004928 	.word	0x08004928

08004280 <_printf_common>:
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	4616      	mov	r6, r2
 8004286:	4699      	mov	r9, r3
 8004288:	688a      	ldr	r2, [r1, #8]
 800428a:	690b      	ldr	r3, [r1, #16]
 800428c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004290:	4293      	cmp	r3, r2
 8004292:	bfb8      	it	lt
 8004294:	4613      	movlt	r3, r2
 8004296:	6033      	str	r3, [r6, #0]
 8004298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800429c:	4607      	mov	r7, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	b10a      	cbz	r2, 80042a6 <_printf_common+0x26>
 80042a2:	3301      	adds	r3, #1
 80042a4:	6033      	str	r3, [r6, #0]
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	0699      	lsls	r1, r3, #26
 80042aa:	bf42      	ittt	mi
 80042ac:	6833      	ldrmi	r3, [r6, #0]
 80042ae:	3302      	addmi	r3, #2
 80042b0:	6033      	strmi	r3, [r6, #0]
 80042b2:	6825      	ldr	r5, [r4, #0]
 80042b4:	f015 0506 	ands.w	r5, r5, #6
 80042b8:	d106      	bne.n	80042c8 <_printf_common+0x48>
 80042ba:	f104 0a19 	add.w	sl, r4, #25
 80042be:	68e3      	ldr	r3, [r4, #12]
 80042c0:	6832      	ldr	r2, [r6, #0]
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	42ab      	cmp	r3, r5
 80042c6:	dc26      	bgt.n	8004316 <_printf_common+0x96>
 80042c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042cc:	1e13      	subs	r3, r2, #0
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	bf18      	it	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	0692      	lsls	r2, r2, #26
 80042d6:	d42b      	bmi.n	8004330 <_printf_common+0xb0>
 80042d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042dc:	4649      	mov	r1, r9
 80042de:	4638      	mov	r0, r7
 80042e0:	47c0      	blx	r8
 80042e2:	3001      	adds	r0, #1
 80042e4:	d01e      	beq.n	8004324 <_printf_common+0xa4>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	68e5      	ldr	r5, [r4, #12]
 80042ea:	6832      	ldr	r2, [r6, #0]
 80042ec:	f003 0306 	and.w	r3, r3, #6
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	bf08      	it	eq
 80042f4:	1aad      	subeq	r5, r5, r2
 80042f6:	68a3      	ldr	r3, [r4, #8]
 80042f8:	6922      	ldr	r2, [r4, #16]
 80042fa:	bf0c      	ite	eq
 80042fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004300:	2500      	movne	r5, #0
 8004302:	4293      	cmp	r3, r2
 8004304:	bfc4      	itt	gt
 8004306:	1a9b      	subgt	r3, r3, r2
 8004308:	18ed      	addgt	r5, r5, r3
 800430a:	2600      	movs	r6, #0
 800430c:	341a      	adds	r4, #26
 800430e:	42b5      	cmp	r5, r6
 8004310:	d11a      	bne.n	8004348 <_printf_common+0xc8>
 8004312:	2000      	movs	r0, #0
 8004314:	e008      	b.n	8004328 <_printf_common+0xa8>
 8004316:	2301      	movs	r3, #1
 8004318:	4652      	mov	r2, sl
 800431a:	4649      	mov	r1, r9
 800431c:	4638      	mov	r0, r7
 800431e:	47c0      	blx	r8
 8004320:	3001      	adds	r0, #1
 8004322:	d103      	bne.n	800432c <_printf_common+0xac>
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432c:	3501      	adds	r5, #1
 800432e:	e7c6      	b.n	80042be <_printf_common+0x3e>
 8004330:	18e1      	adds	r1, r4, r3
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	2030      	movs	r0, #48	; 0x30
 8004336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800433a:	4422      	add	r2, r4
 800433c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004344:	3302      	adds	r3, #2
 8004346:	e7c7      	b.n	80042d8 <_printf_common+0x58>
 8004348:	2301      	movs	r3, #1
 800434a:	4622      	mov	r2, r4
 800434c:	4649      	mov	r1, r9
 800434e:	4638      	mov	r0, r7
 8004350:	47c0      	blx	r8
 8004352:	3001      	adds	r0, #1
 8004354:	d0e6      	beq.n	8004324 <_printf_common+0xa4>
 8004356:	3601      	adds	r6, #1
 8004358:	e7d9      	b.n	800430e <_printf_common+0x8e>
	...

0800435c <_printf_i>:
 800435c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	460c      	mov	r4, r1
 8004362:	4691      	mov	r9, r2
 8004364:	7e27      	ldrb	r7, [r4, #24]
 8004366:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004368:	2f78      	cmp	r7, #120	; 0x78
 800436a:	4680      	mov	r8, r0
 800436c:	469a      	mov	sl, r3
 800436e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004372:	d807      	bhi.n	8004384 <_printf_i+0x28>
 8004374:	2f62      	cmp	r7, #98	; 0x62
 8004376:	d80a      	bhi.n	800438e <_printf_i+0x32>
 8004378:	2f00      	cmp	r7, #0
 800437a:	f000 80d8 	beq.w	800452e <_printf_i+0x1d2>
 800437e:	2f58      	cmp	r7, #88	; 0x58
 8004380:	f000 80a3 	beq.w	80044ca <_printf_i+0x16e>
 8004384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800438c:	e03a      	b.n	8004404 <_printf_i+0xa8>
 800438e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004392:	2b15      	cmp	r3, #21
 8004394:	d8f6      	bhi.n	8004384 <_printf_i+0x28>
 8004396:	a001      	add	r0, pc, #4	; (adr r0, 800439c <_printf_i+0x40>)
 8004398:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800439c:	080043f5 	.word	0x080043f5
 80043a0:	08004409 	.word	0x08004409
 80043a4:	08004385 	.word	0x08004385
 80043a8:	08004385 	.word	0x08004385
 80043ac:	08004385 	.word	0x08004385
 80043b0:	08004385 	.word	0x08004385
 80043b4:	08004409 	.word	0x08004409
 80043b8:	08004385 	.word	0x08004385
 80043bc:	08004385 	.word	0x08004385
 80043c0:	08004385 	.word	0x08004385
 80043c4:	08004385 	.word	0x08004385
 80043c8:	08004515 	.word	0x08004515
 80043cc:	08004439 	.word	0x08004439
 80043d0:	080044f7 	.word	0x080044f7
 80043d4:	08004385 	.word	0x08004385
 80043d8:	08004385 	.word	0x08004385
 80043dc:	08004537 	.word	0x08004537
 80043e0:	08004385 	.word	0x08004385
 80043e4:	08004439 	.word	0x08004439
 80043e8:	08004385 	.word	0x08004385
 80043ec:	08004385 	.word	0x08004385
 80043f0:	080044ff 	.word	0x080044ff
 80043f4:	680b      	ldr	r3, [r1, #0]
 80043f6:	1d1a      	adds	r2, r3, #4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	600a      	str	r2, [r1, #0]
 80043fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004404:	2301      	movs	r3, #1
 8004406:	e0a3      	b.n	8004550 <_printf_i+0x1f4>
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	6808      	ldr	r0, [r1, #0]
 800440c:	062e      	lsls	r6, r5, #24
 800440e:	f100 0304 	add.w	r3, r0, #4
 8004412:	d50a      	bpl.n	800442a <_printf_i+0xce>
 8004414:	6805      	ldr	r5, [r0, #0]
 8004416:	600b      	str	r3, [r1, #0]
 8004418:	2d00      	cmp	r5, #0
 800441a:	da03      	bge.n	8004424 <_printf_i+0xc8>
 800441c:	232d      	movs	r3, #45	; 0x2d
 800441e:	426d      	negs	r5, r5
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004424:	485e      	ldr	r0, [pc, #376]	; (80045a0 <_printf_i+0x244>)
 8004426:	230a      	movs	r3, #10
 8004428:	e019      	b.n	800445e <_printf_i+0x102>
 800442a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800442e:	6805      	ldr	r5, [r0, #0]
 8004430:	600b      	str	r3, [r1, #0]
 8004432:	bf18      	it	ne
 8004434:	b22d      	sxthne	r5, r5
 8004436:	e7ef      	b.n	8004418 <_printf_i+0xbc>
 8004438:	680b      	ldr	r3, [r1, #0]
 800443a:	6825      	ldr	r5, [r4, #0]
 800443c:	1d18      	adds	r0, r3, #4
 800443e:	6008      	str	r0, [r1, #0]
 8004440:	0628      	lsls	r0, r5, #24
 8004442:	d501      	bpl.n	8004448 <_printf_i+0xec>
 8004444:	681d      	ldr	r5, [r3, #0]
 8004446:	e002      	b.n	800444e <_printf_i+0xf2>
 8004448:	0669      	lsls	r1, r5, #25
 800444a:	d5fb      	bpl.n	8004444 <_printf_i+0xe8>
 800444c:	881d      	ldrh	r5, [r3, #0]
 800444e:	4854      	ldr	r0, [pc, #336]	; (80045a0 <_printf_i+0x244>)
 8004450:	2f6f      	cmp	r7, #111	; 0x6f
 8004452:	bf0c      	ite	eq
 8004454:	2308      	moveq	r3, #8
 8004456:	230a      	movne	r3, #10
 8004458:	2100      	movs	r1, #0
 800445a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800445e:	6866      	ldr	r6, [r4, #4]
 8004460:	60a6      	str	r6, [r4, #8]
 8004462:	2e00      	cmp	r6, #0
 8004464:	bfa2      	ittt	ge
 8004466:	6821      	ldrge	r1, [r4, #0]
 8004468:	f021 0104 	bicge.w	r1, r1, #4
 800446c:	6021      	strge	r1, [r4, #0]
 800446e:	b90d      	cbnz	r5, 8004474 <_printf_i+0x118>
 8004470:	2e00      	cmp	r6, #0
 8004472:	d04d      	beq.n	8004510 <_printf_i+0x1b4>
 8004474:	4616      	mov	r6, r2
 8004476:	fbb5 f1f3 	udiv	r1, r5, r3
 800447a:	fb03 5711 	mls	r7, r3, r1, r5
 800447e:	5dc7      	ldrb	r7, [r0, r7]
 8004480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004484:	462f      	mov	r7, r5
 8004486:	42bb      	cmp	r3, r7
 8004488:	460d      	mov	r5, r1
 800448a:	d9f4      	bls.n	8004476 <_printf_i+0x11a>
 800448c:	2b08      	cmp	r3, #8
 800448e:	d10b      	bne.n	80044a8 <_printf_i+0x14c>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	07df      	lsls	r7, r3, #31
 8004494:	d508      	bpl.n	80044a8 <_printf_i+0x14c>
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	6861      	ldr	r1, [r4, #4]
 800449a:	4299      	cmp	r1, r3
 800449c:	bfde      	ittt	le
 800449e:	2330      	movle	r3, #48	; 0x30
 80044a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044a8:	1b92      	subs	r2, r2, r6
 80044aa:	6122      	str	r2, [r4, #16]
 80044ac:	f8cd a000 	str.w	sl, [sp]
 80044b0:	464b      	mov	r3, r9
 80044b2:	aa03      	add	r2, sp, #12
 80044b4:	4621      	mov	r1, r4
 80044b6:	4640      	mov	r0, r8
 80044b8:	f7ff fee2 	bl	8004280 <_printf_common>
 80044bc:	3001      	adds	r0, #1
 80044be:	d14c      	bne.n	800455a <_printf_i+0x1fe>
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	b004      	add	sp, #16
 80044c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ca:	4835      	ldr	r0, [pc, #212]	; (80045a0 <_printf_i+0x244>)
 80044cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	680e      	ldr	r6, [r1, #0]
 80044d4:	061f      	lsls	r7, r3, #24
 80044d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80044da:	600e      	str	r6, [r1, #0]
 80044dc:	d514      	bpl.n	8004508 <_printf_i+0x1ac>
 80044de:	07d9      	lsls	r1, r3, #31
 80044e0:	bf44      	itt	mi
 80044e2:	f043 0320 	orrmi.w	r3, r3, #32
 80044e6:	6023      	strmi	r3, [r4, #0]
 80044e8:	b91d      	cbnz	r5, 80044f2 <_printf_i+0x196>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	f023 0320 	bic.w	r3, r3, #32
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	2310      	movs	r3, #16
 80044f4:	e7b0      	b.n	8004458 <_printf_i+0xfc>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	f043 0320 	orr.w	r3, r3, #32
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	2378      	movs	r3, #120	; 0x78
 8004500:	4828      	ldr	r0, [pc, #160]	; (80045a4 <_printf_i+0x248>)
 8004502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004506:	e7e3      	b.n	80044d0 <_printf_i+0x174>
 8004508:	065e      	lsls	r6, r3, #25
 800450a:	bf48      	it	mi
 800450c:	b2ad      	uxthmi	r5, r5
 800450e:	e7e6      	b.n	80044de <_printf_i+0x182>
 8004510:	4616      	mov	r6, r2
 8004512:	e7bb      	b.n	800448c <_printf_i+0x130>
 8004514:	680b      	ldr	r3, [r1, #0]
 8004516:	6826      	ldr	r6, [r4, #0]
 8004518:	6960      	ldr	r0, [r4, #20]
 800451a:	1d1d      	adds	r5, r3, #4
 800451c:	600d      	str	r5, [r1, #0]
 800451e:	0635      	lsls	r5, r6, #24
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	d501      	bpl.n	8004528 <_printf_i+0x1cc>
 8004524:	6018      	str	r0, [r3, #0]
 8004526:	e002      	b.n	800452e <_printf_i+0x1d2>
 8004528:	0671      	lsls	r1, r6, #25
 800452a:	d5fb      	bpl.n	8004524 <_printf_i+0x1c8>
 800452c:	8018      	strh	r0, [r3, #0]
 800452e:	2300      	movs	r3, #0
 8004530:	6123      	str	r3, [r4, #16]
 8004532:	4616      	mov	r6, r2
 8004534:	e7ba      	b.n	80044ac <_printf_i+0x150>
 8004536:	680b      	ldr	r3, [r1, #0]
 8004538:	1d1a      	adds	r2, r3, #4
 800453a:	600a      	str	r2, [r1, #0]
 800453c:	681e      	ldr	r6, [r3, #0]
 800453e:	6862      	ldr	r2, [r4, #4]
 8004540:	2100      	movs	r1, #0
 8004542:	4630      	mov	r0, r6
 8004544:	f7fb fe6c 	bl	8000220 <memchr>
 8004548:	b108      	cbz	r0, 800454e <_printf_i+0x1f2>
 800454a:	1b80      	subs	r0, r0, r6
 800454c:	6060      	str	r0, [r4, #4]
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	6123      	str	r3, [r4, #16]
 8004552:	2300      	movs	r3, #0
 8004554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004558:	e7a8      	b.n	80044ac <_printf_i+0x150>
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	4632      	mov	r2, r6
 800455e:	4649      	mov	r1, r9
 8004560:	4640      	mov	r0, r8
 8004562:	47d0      	blx	sl
 8004564:	3001      	adds	r0, #1
 8004566:	d0ab      	beq.n	80044c0 <_printf_i+0x164>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	079b      	lsls	r3, r3, #30
 800456c:	d413      	bmi.n	8004596 <_printf_i+0x23a>
 800456e:	68e0      	ldr	r0, [r4, #12]
 8004570:	9b03      	ldr	r3, [sp, #12]
 8004572:	4298      	cmp	r0, r3
 8004574:	bfb8      	it	lt
 8004576:	4618      	movlt	r0, r3
 8004578:	e7a4      	b.n	80044c4 <_printf_i+0x168>
 800457a:	2301      	movs	r3, #1
 800457c:	4632      	mov	r2, r6
 800457e:	4649      	mov	r1, r9
 8004580:	4640      	mov	r0, r8
 8004582:	47d0      	blx	sl
 8004584:	3001      	adds	r0, #1
 8004586:	d09b      	beq.n	80044c0 <_printf_i+0x164>
 8004588:	3501      	adds	r5, #1
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	9903      	ldr	r1, [sp, #12]
 800458e:	1a5b      	subs	r3, r3, r1
 8004590:	42ab      	cmp	r3, r5
 8004592:	dcf2      	bgt.n	800457a <_printf_i+0x21e>
 8004594:	e7eb      	b.n	800456e <_printf_i+0x212>
 8004596:	2500      	movs	r5, #0
 8004598:	f104 0619 	add.w	r6, r4, #25
 800459c:	e7f5      	b.n	800458a <_printf_i+0x22e>
 800459e:	bf00      	nop
 80045a0:	08004933 	.word	0x08004933
 80045a4:	08004944 	.word	0x08004944

080045a8 <memmove>:
 80045a8:	4288      	cmp	r0, r1
 80045aa:	b510      	push	{r4, lr}
 80045ac:	eb01 0402 	add.w	r4, r1, r2
 80045b0:	d902      	bls.n	80045b8 <memmove+0x10>
 80045b2:	4284      	cmp	r4, r0
 80045b4:	4623      	mov	r3, r4
 80045b6:	d807      	bhi.n	80045c8 <memmove+0x20>
 80045b8:	1e43      	subs	r3, r0, #1
 80045ba:	42a1      	cmp	r1, r4
 80045bc:	d008      	beq.n	80045d0 <memmove+0x28>
 80045be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045c6:	e7f8      	b.n	80045ba <memmove+0x12>
 80045c8:	4402      	add	r2, r0
 80045ca:	4601      	mov	r1, r0
 80045cc:	428a      	cmp	r2, r1
 80045ce:	d100      	bne.n	80045d2 <memmove+0x2a>
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045da:	e7f7      	b.n	80045cc <memmove+0x24>

080045dc <_free_r>:
 80045dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045de:	2900      	cmp	r1, #0
 80045e0:	d048      	beq.n	8004674 <_free_r+0x98>
 80045e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e6:	9001      	str	r0, [sp, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f1a1 0404 	sub.w	r4, r1, #4
 80045ee:	bfb8      	it	lt
 80045f0:	18e4      	addlt	r4, r4, r3
 80045f2:	f000 f8d3 	bl	800479c <__malloc_lock>
 80045f6:	4a20      	ldr	r2, [pc, #128]	; (8004678 <_free_r+0x9c>)
 80045f8:	9801      	ldr	r0, [sp, #4]
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	4615      	mov	r5, r2
 80045fe:	b933      	cbnz	r3, 800460e <_free_r+0x32>
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	6014      	str	r4, [r2, #0]
 8004604:	b003      	add	sp, #12
 8004606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800460a:	f000 b8cd 	b.w	80047a8 <__malloc_unlock>
 800460e:	42a3      	cmp	r3, r4
 8004610:	d90b      	bls.n	800462a <_free_r+0x4e>
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	1862      	adds	r2, r4, r1
 8004616:	4293      	cmp	r3, r2
 8004618:	bf04      	itt	eq
 800461a:	681a      	ldreq	r2, [r3, #0]
 800461c:	685b      	ldreq	r3, [r3, #4]
 800461e:	6063      	str	r3, [r4, #4]
 8004620:	bf04      	itt	eq
 8004622:	1852      	addeq	r2, r2, r1
 8004624:	6022      	streq	r2, [r4, #0]
 8004626:	602c      	str	r4, [r5, #0]
 8004628:	e7ec      	b.n	8004604 <_free_r+0x28>
 800462a:	461a      	mov	r2, r3
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	b10b      	cbz	r3, 8004634 <_free_r+0x58>
 8004630:	42a3      	cmp	r3, r4
 8004632:	d9fa      	bls.n	800462a <_free_r+0x4e>
 8004634:	6811      	ldr	r1, [r2, #0]
 8004636:	1855      	adds	r5, r2, r1
 8004638:	42a5      	cmp	r5, r4
 800463a:	d10b      	bne.n	8004654 <_free_r+0x78>
 800463c:	6824      	ldr	r4, [r4, #0]
 800463e:	4421      	add	r1, r4
 8004640:	1854      	adds	r4, r2, r1
 8004642:	42a3      	cmp	r3, r4
 8004644:	6011      	str	r1, [r2, #0]
 8004646:	d1dd      	bne.n	8004604 <_free_r+0x28>
 8004648:	681c      	ldr	r4, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	6053      	str	r3, [r2, #4]
 800464e:	4421      	add	r1, r4
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	e7d7      	b.n	8004604 <_free_r+0x28>
 8004654:	d902      	bls.n	800465c <_free_r+0x80>
 8004656:	230c      	movs	r3, #12
 8004658:	6003      	str	r3, [r0, #0]
 800465a:	e7d3      	b.n	8004604 <_free_r+0x28>
 800465c:	6825      	ldr	r5, [r4, #0]
 800465e:	1961      	adds	r1, r4, r5
 8004660:	428b      	cmp	r3, r1
 8004662:	bf04      	itt	eq
 8004664:	6819      	ldreq	r1, [r3, #0]
 8004666:	685b      	ldreq	r3, [r3, #4]
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	bf04      	itt	eq
 800466c:	1949      	addeq	r1, r1, r5
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	6054      	str	r4, [r2, #4]
 8004672:	e7c7      	b.n	8004604 <_free_r+0x28>
 8004674:	b003      	add	sp, #12
 8004676:	bd30      	pop	{r4, r5, pc}
 8004678:	200174a4 	.word	0x200174a4

0800467c <_malloc_r>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	1ccd      	adds	r5, r1, #3
 8004680:	f025 0503 	bic.w	r5, r5, #3
 8004684:	3508      	adds	r5, #8
 8004686:	2d0c      	cmp	r5, #12
 8004688:	bf38      	it	cc
 800468a:	250c      	movcc	r5, #12
 800468c:	2d00      	cmp	r5, #0
 800468e:	4606      	mov	r6, r0
 8004690:	db01      	blt.n	8004696 <_malloc_r+0x1a>
 8004692:	42a9      	cmp	r1, r5
 8004694:	d903      	bls.n	800469e <_malloc_r+0x22>
 8004696:	230c      	movs	r3, #12
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	2000      	movs	r0, #0
 800469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469e:	f000 f87d 	bl	800479c <__malloc_lock>
 80046a2:	4921      	ldr	r1, [pc, #132]	; (8004728 <_malloc_r+0xac>)
 80046a4:	680a      	ldr	r2, [r1, #0]
 80046a6:	4614      	mov	r4, r2
 80046a8:	b99c      	cbnz	r4, 80046d2 <_malloc_r+0x56>
 80046aa:	4f20      	ldr	r7, [pc, #128]	; (800472c <_malloc_r+0xb0>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	b923      	cbnz	r3, 80046ba <_malloc_r+0x3e>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f862 	bl	800477c <_sbrk_r>
 80046b8:	6038      	str	r0, [r7, #0]
 80046ba:	4629      	mov	r1, r5
 80046bc:	4630      	mov	r0, r6
 80046be:	f000 f85d 	bl	800477c <_sbrk_r>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	d123      	bne.n	800470e <_malloc_r+0x92>
 80046c6:	230c      	movs	r3, #12
 80046c8:	6033      	str	r3, [r6, #0]
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 f86c 	bl	80047a8 <__malloc_unlock>
 80046d0:	e7e3      	b.n	800469a <_malloc_r+0x1e>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	1b5b      	subs	r3, r3, r5
 80046d6:	d417      	bmi.n	8004708 <_malloc_r+0x8c>
 80046d8:	2b0b      	cmp	r3, #11
 80046da:	d903      	bls.n	80046e4 <_malloc_r+0x68>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	441c      	add	r4, r3
 80046e0:	6025      	str	r5, [r4, #0]
 80046e2:	e004      	b.n	80046ee <_malloc_r+0x72>
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	42a2      	cmp	r2, r4
 80046e8:	bf0c      	ite	eq
 80046ea:	600b      	streq	r3, [r1, #0]
 80046ec:	6053      	strne	r3, [r2, #4]
 80046ee:	4630      	mov	r0, r6
 80046f0:	f000 f85a 	bl	80047a8 <__malloc_unlock>
 80046f4:	f104 000b 	add.w	r0, r4, #11
 80046f8:	1d23      	adds	r3, r4, #4
 80046fa:	f020 0007 	bic.w	r0, r0, #7
 80046fe:	1ac2      	subs	r2, r0, r3
 8004700:	d0cc      	beq.n	800469c <_malloc_r+0x20>
 8004702:	1a1b      	subs	r3, r3, r0
 8004704:	50a3      	str	r3, [r4, r2]
 8004706:	e7c9      	b.n	800469c <_malloc_r+0x20>
 8004708:	4622      	mov	r2, r4
 800470a:	6864      	ldr	r4, [r4, #4]
 800470c:	e7cc      	b.n	80046a8 <_malloc_r+0x2c>
 800470e:	1cc4      	adds	r4, r0, #3
 8004710:	f024 0403 	bic.w	r4, r4, #3
 8004714:	42a0      	cmp	r0, r4
 8004716:	d0e3      	beq.n	80046e0 <_malloc_r+0x64>
 8004718:	1a21      	subs	r1, r4, r0
 800471a:	4630      	mov	r0, r6
 800471c:	f000 f82e 	bl	800477c <_sbrk_r>
 8004720:	3001      	adds	r0, #1
 8004722:	d1dd      	bne.n	80046e0 <_malloc_r+0x64>
 8004724:	e7cf      	b.n	80046c6 <_malloc_r+0x4a>
 8004726:	bf00      	nop
 8004728:	200174a4 	.word	0x200174a4
 800472c:	200174a8 	.word	0x200174a8

08004730 <_realloc_r>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	4607      	mov	r7, r0
 8004734:	4614      	mov	r4, r2
 8004736:	460e      	mov	r6, r1
 8004738:	b921      	cbnz	r1, 8004744 <_realloc_r+0x14>
 800473a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800473e:	4611      	mov	r1, r2
 8004740:	f7ff bf9c 	b.w	800467c <_malloc_r>
 8004744:	b922      	cbnz	r2, 8004750 <_realloc_r+0x20>
 8004746:	f7ff ff49 	bl	80045dc <_free_r>
 800474a:	4625      	mov	r5, r4
 800474c:	4628      	mov	r0, r5
 800474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004750:	f000 f830 	bl	80047b4 <_malloc_usable_size_r>
 8004754:	42a0      	cmp	r0, r4
 8004756:	d20f      	bcs.n	8004778 <_realloc_r+0x48>
 8004758:	4621      	mov	r1, r4
 800475a:	4638      	mov	r0, r7
 800475c:	f7ff ff8e 	bl	800467c <_malloc_r>
 8004760:	4605      	mov	r5, r0
 8004762:	2800      	cmp	r0, #0
 8004764:	d0f2      	beq.n	800474c <_realloc_r+0x1c>
 8004766:	4631      	mov	r1, r6
 8004768:	4622      	mov	r2, r4
 800476a:	f7ff fbf7 	bl	8003f5c <memcpy>
 800476e:	4631      	mov	r1, r6
 8004770:	4638      	mov	r0, r7
 8004772:	f7ff ff33 	bl	80045dc <_free_r>
 8004776:	e7e9      	b.n	800474c <_realloc_r+0x1c>
 8004778:	4635      	mov	r5, r6
 800477a:	e7e7      	b.n	800474c <_realloc_r+0x1c>

0800477c <_sbrk_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d06      	ldr	r5, [pc, #24]	; (8004798 <_sbrk_r+0x1c>)
 8004780:	2300      	movs	r3, #0
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	f7ff fa0c 	bl	8003ba4 <_sbrk>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d102      	bne.n	8004796 <_sbrk_r+0x1a>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b103      	cbz	r3, 8004796 <_sbrk_r+0x1a>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	20017554 	.word	0x20017554

0800479c <__malloc_lock>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__malloc_lock+0x8>)
 800479e:	f000 b811 	b.w	80047c4 <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	2001755c 	.word	0x2001755c

080047a8 <__malloc_unlock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__malloc_unlock+0x8>)
 80047aa:	f000 b80c 	b.w	80047c6 <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	2001755c 	.word	0x2001755c

080047b4 <_malloc_usable_size_r>:
 80047b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b8:	1f18      	subs	r0, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfbc      	itt	lt
 80047be:	580b      	ldrlt	r3, [r1, r0]
 80047c0:	18c0      	addlt	r0, r0, r3
 80047c2:	4770      	bx	lr

080047c4 <__retarget_lock_acquire_recursive>:
 80047c4:	4770      	bx	lr

080047c6 <__retarget_lock_release_recursive>:
 80047c6:	4770      	bx	lr

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	bf00      	nop
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
