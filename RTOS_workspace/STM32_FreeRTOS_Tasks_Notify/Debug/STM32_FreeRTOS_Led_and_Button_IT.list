
STM32_FreeRTOS_Led_and_Button_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a20  08003a20  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003a20  08003a20  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a20  08003a20  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000173b8  20000028  08003a50  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200173e0  08003a50  000273e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e097  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ece  00000000  00000000  0002e0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b90  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00030b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000292d  00000000  00000000  000315e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7ff  00000000  00000000  00033f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000756ae  00000000  00000000  0003e714  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3dc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  000b3e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003910 	.word	0x08003910

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08003910 	.word	0x08003910

08000210 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800021c:	4b34      	ldr	r3, [pc, #208]	; (80002f0 <EXTI_Init+0xe0>)
 800021e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	799b      	ldrb	r3, [r3, #6]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d04f      	beq.n	80002c8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000228:	4b31      	ldr	r3, [pc, #196]	; (80002f0 <EXTI_Init+0xe0>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	43db      	mvns	r3, r3
 8000232:	492f      	ldr	r1, [pc, #188]	; (80002f0 <EXTI_Init+0xe0>)
 8000234:	4013      	ands	r3, r2
 8000236:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <EXTI_Init+0xe0>)
 800023a:	685a      	ldr	r2, [r3, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	43db      	mvns	r3, r3
 8000242:	492b      	ldr	r1, [pc, #172]	; (80002f0 <EXTI_Init+0xe0>)
 8000244:	4013      	ands	r3, r2
 8000246:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	791b      	ldrb	r3, [r3, #4]
 800024c:	461a      	mov	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	4413      	add	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	6819      	ldr	r1, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000262:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <EXTI_Init+0xe0>)
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	43db      	mvns	r3, r3
 800026c:	4920      	ldr	r1, [pc, #128]	; (80002f0 <EXTI_Init+0xe0>)
 800026e:	4013      	ands	r3, r2
 8000270:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <EXTI_Init+0xe0>)
 8000274:	68da      	ldr	r2, [r3, #12]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	43db      	mvns	r3, r3
 800027c:	491c      	ldr	r1, [pc, #112]	; (80002f0 <EXTI_Init+0xe0>)
 800027e:	4013      	ands	r3, r2
 8000280:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	795b      	ldrb	r3, [r3, #5]
 8000286:	2b10      	cmp	r3, #16
 8000288:	d10e      	bne.n	80002a8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <EXTI_Init+0xe0>)
 800028c:	689a      	ldr	r2, [r3, #8]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <EXTI_Init+0xe0>)
 8000294:	4313      	orrs	r3, r2
 8000296:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <EXTI_Init+0xe0>)
 800029a:	68da      	ldr	r2, [r3, #12]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4913      	ldr	r1, [pc, #76]	; (80002f0 <EXTI_Init+0xe0>)
 80002a2:	4313      	orrs	r3, r2
 80002a4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002a6:	e01d      	b.n	80002e4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <EXTI_Init+0xe0>)
 80002aa:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	461a      	mov	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4413      	add	r3, r2
 80002b6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	6819      	ldr	r1, [r3, #0]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	e00d      	b.n	80002e4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	461a      	mov	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	4413      	add	r3, r2
 80002d2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	43da      	mvns	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	400a      	ands	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40013c00 	.word	0x40013c00

080002f4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI_ClearITPendingBit+0x1c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6153      	str	r3, [r2, #20]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40013c00 	.word	0x40013c00

08000314 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000314:	b480      	push	{r7}
 8000316:	b087      	sub	sp, #28
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	e076      	b.n	800041e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000330:	2201      	movs	r2, #1
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	fa02 f303 	lsl.w	r3, r2, r3
 8000338:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000344:	68fa      	ldr	r2, [r7, #12]
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	429a      	cmp	r2, r3
 800034a:	d165      	bne.n	8000418 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	2103      	movs	r1, #3
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	43db      	mvns	r3, r3
 800035c:	401a      	ands	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	4619      	mov	r1, r3
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	431a      	orrs	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	791b      	ldrb	r3, [r3, #4]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d003      	beq.n	800038a <GPIO_Init+0x76>
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	2b02      	cmp	r3, #2
 8000388:	d12e      	bne.n	80003e8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689a      	ldr	r2, [r3, #8]
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	2103      	movs	r1, #3
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	401a      	ands	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	689a      	ldr	r2, [r3, #8]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	4619      	mov	r1, r3
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	685a      	ldr	r2, [r3, #4]
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	b29b      	uxth	r3, r3
 80003c0:	4619      	mov	r1, r3
 80003c2:	2301      	movs	r3, #1
 80003c4:	408b      	lsls	r3, r1
 80003c6:	43db      	mvns	r3, r3
 80003c8:	401a      	ands	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	7992      	ldrb	r2, [r2, #6]
 80003d6:	4611      	mov	r1, r2
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	b292      	uxth	r2, r2
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	b292      	uxth	r2, r2
 80003e2:	431a      	orrs	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68da      	ldr	r2, [r3, #12]
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	2103      	movs	r1, #3
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	68da      	ldr	r2, [r3, #12]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	79db      	ldrb	r3, [r3, #7]
 8000408:	4619      	mov	r1, r3
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	3301      	adds	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	2b0f      	cmp	r3, #15
 8000422:	d985      	bls.n	8000330 <GPIO_Init+0x1c>
    }
  }
}
 8000424:	bf00      	nop
 8000426:	371c      	adds	r7, #28
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	807b      	strh	r3, [r7, #2]
 800043c:	4613      	mov	r3, r2
 800043e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000440:	787b      	ldrb	r3, [r7, #1]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	887a      	ldrh	r2, [r7, #2]
 800044a:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800044c:	e002      	b.n	8000454 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	887a      	ldrh	r2, [r7, #2]
 8000452:	835a      	strh	r2, [r3, #26]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	807b      	strh	r3, [r7, #2]
 800046c:	4613      	mov	r3, r2
 800046e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000478:	787a      	ldrb	r2, [r7, #1]
 800047a:	887b      	ldrh	r3, [r7, #2]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000488:	887b      	ldrh	r3, [r7, #2]
 800048a:	08db      	lsrs	r3, r3, #3
 800048c:	b29b      	uxth	r3, r3
 800048e:	461a      	mov	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3208      	adds	r2, #8
 8000494:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000498:	887b      	ldrh	r3, [r7, #2]
 800049a:	f003 0307 	and.w	r3, r3, #7
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	210f      	movs	r1, #15
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	43db      	mvns	r3, r3
 80004a8:	8879      	ldrh	r1, [r7, #2]
 80004aa:	08c9      	lsrs	r1, r1, #3
 80004ac:	b289      	uxth	r1, r1
 80004ae:	4608      	mov	r0, r1
 80004b0:	ea02 0103 	and.w	r1, r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f100 0208 	add.w	r2, r0, #8
 80004ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004be:	887b      	ldrh	r3, [r7, #2]
 80004c0:	08db      	lsrs	r3, r3, #3
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	461a      	mov	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3208      	adds	r2, #8
 80004ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004d4:	887b      	ldrh	r3, [r7, #2]
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	b29b      	uxth	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3208      	adds	r2, #8
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
	...

080004f4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <RCC_DeInit+0x60>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a15      	ldr	r2, [pc, #84]	; (8000554 <RCC_DeInit+0x60>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <RCC_DeInit+0x60>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <RCC_DeInit+0x60>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <RCC_DeInit+0x60>)
 8000510:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000514:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000518:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <RCC_DeInit+0x60>)
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <RCC_DeInit+0x64>)
 800051e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <RCC_DeInit+0x60>)
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <RCC_DeInit+0x68>)
 8000524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <RCC_DeInit+0x60>)
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <RCC_DeInit+0x6c>)
 800052c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <RCC_DeInit+0x60>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <RCC_DeInit+0x60>)
 8000536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <RCC_DeInit+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <RCC_DeInit+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40023800 	.word	0x40023800
 8000558:	24003010 	.word	0x24003010
 800055c:	20003000 	.word	0x20003000
 8000560:	24003000 	.word	0x24003000

08000564 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000564:	b480      	push	{r7}
 8000566:	b089      	sub	sp, #36	; 0x24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	2302      	movs	r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000584:	4b47      	ldr	r3, [pc, #284]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f003 030c 	and.w	r3, r3, #12
 800058c:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	2b04      	cmp	r3, #4
 8000592:	d007      	beq.n	80005a4 <RCC_GetClocksFreq+0x40>
 8000594:	2b08      	cmp	r3, #8
 8000596:	d009      	beq.n	80005ac <RCC_GetClocksFreq+0x48>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d13d      	bne.n	8000618 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a42      	ldr	r2, [pc, #264]	; (80006a8 <RCC_GetClocksFreq+0x144>)
 80005a0:	601a      	str	r2, [r3, #0]
    break;
 80005a2:	e03d      	b.n	8000620 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a41      	ldr	r2, [pc, #260]	; (80006ac <RCC_GetClocksFreq+0x148>)
 80005a8:	601a      	str	r2, [r3, #0]
    break;
 80005aa:	e039      	b.n	8000620 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005ac:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	0d9b      	lsrs	r3, r3, #22
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005b8:	4b3a      	ldr	r3, [pc, #232]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005c0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00c      	beq.n	80005e2 <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005c8:	4a38      	ldr	r2, [pc, #224]	; (80006ac <RCC_GetClocksFreq+0x148>)
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d0:	4a34      	ldr	r2, [pc, #208]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 80005d2:	6852      	ldr	r2, [r2, #4]
 80005d4:	0992      	lsrs	r2, r2, #6
 80005d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	e00b      	b.n	80005fa <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005e2:	4a31      	ldr	r2, [pc, #196]	; (80006a8 <RCC_GetClocksFreq+0x144>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4a2e      	ldr	r2, [pc, #184]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 80005ec:	6852      	ldr	r2, [r2, #4]
 80005ee:	0992      	lsrs	r2, r2, #6
 80005f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005fa:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	0c1b      	lsrs	r3, r3, #16
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	3301      	adds	r3, #1
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	601a      	str	r2, [r3, #0]
    break;
 8000616:	e003      	b.n	8000620 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <RCC_GetClocksFreq+0x144>)
 800061c:	601a      	str	r2, [r3, #0]
    break;
 800061e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000628:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	091b      	lsrs	r3, r3, #4
 800062e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000630:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	40da      	lsrs	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000650:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	0a9b      	lsrs	r3, r3, #10
 8000656:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000658:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	40da      	lsrs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <RCC_GetClocksFreq+0x140>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000678:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	0b5b      	lsrs	r3, r3, #13
 800067e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	40da      	lsrs	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
}
 8000698:	bf00      	nop
 800069a:	3724      	adds	r7, #36	; 0x24
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40023800 	.word	0x40023800
 80006a8:	00f42400 	.word	0x00f42400
 80006ac:	017d7840 	.word	0x017d7840
 80006b0:	20000000 	.word	0x20000000

080006b4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006d2:	e006      	b.n	80006e2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	43db      	mvns	r3, r3
 80006dc:	4904      	ldr	r1, [pc, #16]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006de:	4013      	ands	r3, r2
 80006e0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <RCC_APB1PeriphClockCmd+0x3c>)
 8000708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800070a:	4909      	ldr	r1, [pc, #36]	; (8000730 <RCC_APB1PeriphClockCmd+0x3c>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4313      	orrs	r3, r2
 8000710:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000712:	e006      	b.n	8000722 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <RCC_APB1PeriphClockCmd+0x3c>)
 8000716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	43db      	mvns	r3, r3
 800071c:	4904      	ldr	r1, [pc, #16]	; (8000730 <RCC_APB1PeriphClockCmd+0x3c>)
 800071e:	4013      	ands	r3, r2
 8000720:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <RCC_APB2PeriphClockCmd+0x3c>)
 8000748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800074a:	4909      	ldr	r1, [pc, #36]	; (8000770 <RCC_APB2PeriphClockCmd+0x3c>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4313      	orrs	r3, r2
 8000750:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000752:	e006      	b.n	8000762 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <RCC_APB2PeriphClockCmd+0x3c>)
 8000756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	43db      	mvns	r3, r3
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <RCC_APB2PeriphClockCmd+0x3c>)
 800075e:	4013      	ands	r3, r2
 8000760:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	f003 0303 	and.w	r3, r3, #3
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	220f      	movs	r2, #15
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <SYSCFG_EXTILineConfig+0x80>)
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	089b      	lsrs	r3, r3, #2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	3302      	adds	r3, #2
 80007a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	43db      	mvns	r3, r3
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <SYSCFG_EXTILineConfig+0x80>)
 80007ac:	79b9      	ldrb	r1, [r7, #6]
 80007ae:	0889      	lsrs	r1, r1, #2
 80007b0:	b2c9      	uxtb	r1, r1
 80007b2:	401a      	ands	r2, r3
 80007b4:	1c8b      	adds	r3, r1, #2
 80007b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <SYSCFG_EXTILineConfig+0x80>)
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	3302      	adds	r3, #2
 80007c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c8:	79f9      	ldrb	r1, [r7, #7]
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <SYSCFG_EXTILineConfig+0x80>)
 80007d8:	79b9      	ldrb	r1, [r7, #6]
 80007da:	0889      	lsrs	r1, r1, #2
 80007dc:	b2c9      	uxtb	r1, r1
 80007de:	431a      	orrs	r2, r3
 80007e0:	1c8b      	adds	r3, r1, #2
 80007e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40013800 	.word	0x40013800

080007f8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	8a1b      	ldrh	r3, [r3, #16]
 8000816:	b29b      	uxth	r3, r3
 8000818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	88db      	ldrh	r3, [r3, #6]
 8000826:	461a      	mov	r2, r3
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	4313      	orrs	r3, r2
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	b29a      	uxth	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	b29b      	uxth	r3, r3
 800083c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000844:	f023 030c 	bic.w	r3, r3, #12
 8000848:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	889a      	ldrh	r2, [r3, #4]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	891b      	ldrh	r3, [r3, #8]
 8000852:	4313      	orrs	r3, r2
 8000854:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800085a:	4313      	orrs	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	4313      	orrs	r3, r2
 8000864:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	8a9b      	ldrh	r3, [r3, #20]
 8000872:	b29b      	uxth	r3, r3
 8000874:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800087c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	899b      	ldrh	r3, [r3, #12]
 8000882:	461a      	mov	r2, r3
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	4313      	orrs	r3, r2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b29a      	uxth	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe64 	bl	8000564 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a30      	ldr	r2, [pc, #192]	; (8000960 <USART_Init+0x168>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d003      	beq.n	80008ac <USART_Init+0xb4>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <USART_Init+0x16c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d102      	bne.n	80008b2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	623b      	str	r3, [r7, #32]
 80008b0:	e001      	b.n	80008b6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	899b      	ldrh	r3, [r3, #12]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	b21b      	sxth	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da0c      	bge.n	80008dc <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80008c2:	6a3a      	ldr	r2, [r7, #32]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	009a      	lsls	r2, r3, #2
 80008cc:	441a      	add	r2, r3
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d8:	61fb      	str	r3, [r7, #28]
 80008da:	e00b      	b.n	80008f4 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80008dc:	6a3a      	ldr	r2, [r7, #32]
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	009a      	lsls	r2, r3, #2
 80008e6:	441a      	add	r2, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <USART_Init+0x170>)
 80008f8:	fba2 2303 	umull	r2, r3, r2, r3
 80008fc:	095b      	lsrs	r3, r3, #5
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	2264      	movs	r2, #100	; 0x64
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	899b      	ldrh	r3, [r3, #12]
 8000916:	b29b      	uxth	r3, r3
 8000918:	b21b      	sxth	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	da0c      	bge.n	8000938 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	3332      	adds	r3, #50	; 0x32
 8000924:	4a10      	ldr	r2, [pc, #64]	; (8000968 <USART_Init+0x170>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000932:	4313      	orrs	r3, r2
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
 8000936:	e00b      	b.n	8000950 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	3332      	adds	r3, #50	; 0x32
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <USART_Init+0x170>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	095b      	lsrs	r3, r3, #5
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094c:	4313      	orrs	r3, r2
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	b29a      	uxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	811a      	strh	r2, [r3, #8]
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40011000 	.word	0x40011000
 8000964:	40011400 	.word	0x40011400
 8000968:	51eb851f 	.word	0x51eb851f

0800096c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d008      	beq.n	8000990 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	899b      	ldrh	r3, [r3, #12]
 8000982:	b29b      	uxth	r3, r3
 8000984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000988:	b29a      	uxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800098e:	e007      	b.n	80009a0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	899b      	ldrh	r3, [r3, #12]
 8000994:	b29b      	uxth	r3, r3
 8000996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800099a:	b29a      	uxth	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	819a      	strh	r2, [r3, #12]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f103 0208 	add.w	r2, r3, #8
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f103 0208 	add.w	r2, r3, #8
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f103 0208 	add.w	r2, r3, #8
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6892      	ldr	r2, [r2, #8]
 8000a64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6852      	ldr	r2, [r2, #4]
 8000a6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d103      	bne.n	8000a82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b08c      	sub	sp, #48	; 0x30
 8000aa6:	af04      	add	r7, sp, #16
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fe8c 	bl	80017d4 <pvPortMalloc>
 8000abc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00e      	beq.n	8000ae2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ac4:	2058      	movs	r0, #88	; 0x58
 8000ac6:	f000 fe85 	bl	80017d4 <pvPortMalloc>
 8000aca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ad8:	e005      	b.n	8000ae6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f000 ff3c 	bl	8001958 <vPortFree>
 8000ae0:	e001      	b.n	8000ae6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d013      	beq.n	8000b14 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	2300      	movs	r3, #0
 8000af0:	9303      	str	r3, [sp, #12]
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	9302      	str	r3, [sp, #8]
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f000 f80e 	bl	8000b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000b08:	69f8      	ldr	r0, [r7, #28]
 8000b0a:	f000 f89f 	bl	8000c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	e002      	b.n	8000b1a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3c:	f383 8811 	msr	BASEPRI, r3
 8000b40:	f3bf 8f6f 	isb	sy
 8000b44:	f3bf 8f4f 	dsb	sy
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e7fe      	b.n	8000b4a <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	461a      	mov	r2, r3
 8000b56:	21a5      	movs	r1, #165	; 0xa5
 8000b58:	f002 fed2 	bl	8003900 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b66:	3b01      	subs	r3, #1
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	f023 0307 	bic.w	r3, r3, #7
 8000b74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d009      	beq.n	8000b94 <prvInitialiseNewTask+0x70>
 8000b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b84:	f383 8811 	msr	BASEPRI, r3
 8000b88:	f3bf 8f6f 	isb	sy
 8000b8c:	f3bf 8f4f 	dsb	sy
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	e7fe      	b.n	8000b92 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	e012      	b.n	8000bc0 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	7819      	ldrb	r1, [r3, #0]
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3334      	adds	r3, #52	; 0x34
 8000baa:	460a      	mov	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	2b09      	cmp	r3, #9
 8000bc4:	d9e9      	bls.n	8000b9a <prvInitialiseNewTask+0x76>
 8000bc6:	e000      	b.n	8000bca <prvInitialiseNewTask+0xa6>
		{
			break;
 8000bc8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d901      	bls.n	8000bdc <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000be6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bea:	2200      	movs	r2, #0
 8000bec:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fefa 	bl	80009ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fef5 	bl	80009ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	f1c3 0205 	rsb	r2, r3, #5
 8000c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	69b8      	ldr	r0, [r7, #24]
 8000c2c:	f000 fb88 	bl	8001340 <pxPortInitialiseStack>
 8000c30:	4602      	mov	r2, r0
 8000c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c34:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000c54:	f000 fc9a 	bl	800158c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000c58:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <prvAddNewTaskToReadyList+0xfc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4a3a      	ldr	r2, [pc, #232]	; (8000d48 <prvAddNewTaskToReadyList+0xfc>)
 8000c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000c62:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <prvAddNewTaskToReadyList+0x100>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000c6a:	4a38      	ldr	r2, [pc, #224]	; (8000d4c <prvAddNewTaskToReadyList+0x100>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <prvAddNewTaskToReadyList+0xfc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d110      	bne.n	8000c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000c78:	f000 fac6 	bl	8001208 <prvInitialiseTaskLists>
 8000c7c:	e00d      	b.n	8000c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <prvAddNewTaskToReadyList+0x104>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d109      	bne.n	8000c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <prvAddNewTaskToReadyList+0x100>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d802      	bhi.n	8000c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000c94:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <prvAddNewTaskToReadyList+0x100>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <prvAddNewTaskToReadyList+0x108>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <prvAddNewTaskToReadyList+0x108>)
 8000ca2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <prvAddNewTaskToReadyList+0x108>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d016      	beq.n	8000ce0 <prvAddNewTaskToReadyList+0x94>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 f929 	bl	8002f0c <SEGGER_SYSVIEW_OnTaskCreate>
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	461d      	mov	r5, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	1ae3      	subs	r3, r4, r3
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	462b      	mov	r3, r5
 8000cdc:	f000 fff8 	bl	8001cd0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 f99a 	bl	800301c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	2201      	movs	r2, #1
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <prvAddNewTaskToReadyList+0x10c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <prvAddNewTaskToReadyList+0x10c>)
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <prvAddNewTaskToReadyList+0x110>)
 8000d08:	441a      	add	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4610      	mov	r0, r2
 8000d12:	f7ff fe78 	bl	8000a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d16:	f000 fc67 	bl	80015e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <prvAddNewTaskToReadyList+0x104>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00e      	beq.n	8000d40 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <prvAddNewTaskToReadyList+0x100>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <prvAddNewTaskToReadyList+0x114>)
 8000d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bdb0      	pop	{r4, r5, r7, pc}
 8000d48:	2000011c 	.word	0x2000011c
 8000d4c:	20000044 	.word	0x20000044
 8000d50:	20000128 	.word	0x20000128
 8000d54:	20000138 	.word	0x20000138
 8000d58:	20000124 	.word	0x20000124
 8000d5c:	20000048 	.word	0x20000048
 8000d60:	e000ed04 	.word	0xe000ed04

08000d64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <vTaskStartScheduler+0x90>)
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	2282      	movs	r2, #130	; 0x82
 8000d76:	4920      	ldr	r1, [pc, #128]	; (8000df8 <vTaskStartScheduler+0x94>)
 8000d78:	4820      	ldr	r0, [pc, #128]	; (8000dfc <vTaskStartScheduler+0x98>)
 8000d7a:	f7ff fe92 	bl	8000aa2 <xTaskCreate>
 8000d7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d123      	bne.n	8000dce <vTaskStartScheduler+0x6a>
 8000d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8a:	f383 8811 	msr	BASEPRI, r3
 8000d8e:	f3bf 8f6f 	isb	sy
 8000d92:	f3bf 8f4f 	dsb	sy
 8000d96:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <vTaskStartScheduler+0x9c>)
 8000d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <vTaskStartScheduler+0xa0>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <vTaskStartScheduler+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <vTaskStartScheduler+0xa8>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <vTaskStartScheduler+0x90>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d102      	bne.n	8000dbe <vTaskStartScheduler+0x5a>
 8000db8:	f002 f88c 	bl	8002ed4 <SEGGER_SYSVIEW_OnIdle>
 8000dbc:	e004      	b.n	8000dc8 <vTaskStartScheduler+0x64>
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <vTaskStartScheduler+0xa8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 f8e6 	bl	8002f94 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000dc8:	f000 fb42 	bl	8001450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000dcc:	e00d      	b.n	8000dea <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d109      	bne.n	8000dea <vTaskStartScheduler+0x86>
 8000dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dda:	f383 8811 	msr	BASEPRI, r3
 8000dde:	f3bf 8f6f 	isb	sy
 8000de2:	f3bf 8f4f 	dsb	sy
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	e7fe      	b.n	8000de8 <vTaskStartScheduler+0x84>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000140 	.word	0x20000140
 8000df8:	08003928 	.word	0x08003928
 8000dfc:	080011d9 	.word	0x080011d9
 8000e00:	2000013c 	.word	0x2000013c
 8000e04:	20000128 	.word	0x20000128
 8000e08:	20000120 	.word	0x20000120
 8000e0c:	20000044 	.word	0x20000044

08000e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <vTaskSuspendAll+0x18>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <vTaskSuspendAll+0x18>)
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20000144 	.word	0x20000144

08000e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <xTaskResumeAll+0x11c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <xTaskResumeAll+0x2a>
 8000e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e46:	f383 8811 	msr	BASEPRI, r3
 8000e4a:	f3bf 8f6f 	isb	sy
 8000e4e:	f3bf 8f4f 	dsb	sy
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	e7fe      	b.n	8000e54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000e56:	f000 fb99 	bl	800158c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <xTaskResumeAll+0x11c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <xTaskResumeAll+0x11c>)
 8000e62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e64:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <xTaskResumeAll+0x11c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d165      	bne.n	8000f38 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <xTaskResumeAll+0x120>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d061      	beq.n	8000f38 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e74:	e032      	b.n	8000edc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <xTaskResumeAll+0x124>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3318      	adds	r3, #24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fde3 	bl	8000a4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fdde 	bl	8000a4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 f8c1 	bl	800301c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <xTaskResumeAll+0x128>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <xTaskResumeAll+0x128>)
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <xTaskResumeAll+0x12c>)
 8000eba:	441a      	add	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	f7ff fd9f 	bl	8000a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <xTaskResumeAll+0x130>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d302      	bcc.n	8000edc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <xTaskResumeAll+0x134>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <xTaskResumeAll+0x124>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1c8      	bne.n	8000e76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000eea:	f000 fa09 	bl	8001300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <xTaskResumeAll+0x138>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d010      	beq.n	8000f1c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000efa:	f000 f849 	bl	8000f90 <xTaskIncrementTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <xTaskResumeAll+0x134>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f1      	bne.n	8000efa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <xTaskResumeAll+0x138>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <xTaskResumeAll+0x134>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <xTaskResumeAll+0x13c>)
 8000f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000f38:	f000 fb56 	bl	80015e8 <vPortExitCritical>

	return xAlreadyYielded;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000144 	.word	0x20000144
 8000f4c:	2000011c 	.word	0x2000011c
 8000f50:	200000dc 	.word	0x200000dc
 8000f54:	20000124 	.word	0x20000124
 8000f58:	20000048 	.word	0x20000048
 8000f5c:	20000044 	.word	0x20000044
 8000f60:	20000130 	.word	0x20000130
 8000f64:	2000012c 	.word	0x2000012c
 8000f68:	e000ed04 	.word	0xe000ed04

08000f6c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f72:	f000 fbf1 	bl	8001758 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <xTaskGetTickCountFromISR+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000f80:	683b      	ldr	r3, [r7, #0]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000120 	.word	0x20000120

08000f90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f9a:	4b50      	ldr	r3, [pc, #320]	; (80010dc <xTaskIncrementTick+0x14c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f040 808b 	bne.w	80010ba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000fa4:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <xTaskIncrementTick+0x150>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <xTaskIncrementTick+0x150>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d11f      	bne.n	8000ff8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <xTaskIncrementTick+0x154>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <xTaskIncrementTick+0x46>
 8000fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc6:	f383 8811 	msr	BASEPRI, r3
 8000fca:	f3bf 8f6f 	isb	sy
 8000fce:	f3bf 8f4f 	dsb	sy
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	e7fe      	b.n	8000fd4 <xTaskIncrementTick+0x44>
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <xTaskIncrementTick+0x154>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <xTaskIncrementTick+0x158>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <xTaskIncrementTick+0x154>)
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <xTaskIncrementTick+0x158>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <xTaskIncrementTick+0x15c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <xTaskIncrementTick+0x15c>)
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	f000 f984 	bl	8001300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <xTaskIncrementTick+0x160>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d34c      	bcc.n	800109c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <xTaskIncrementTick+0x154>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d104      	bne.n	8001016 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <xTaskIncrementTick+0x160>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	601a      	str	r2, [r3, #0]
					break;
 8001014:	e042      	b.n	800109c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <xTaskIncrementTick+0x154>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d203      	bcs.n	8001036 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800102e:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <xTaskIncrementTick+0x160>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001034:	e032      	b.n	800109c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3304      	adds	r3, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fd07 	bl	8000a4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	3318      	adds	r3, #24
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fcfe 	bl	8000a4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4618      	mov	r0, r3
 8001056:	f001 ffe1 	bl	800301c <SEGGER_SYSVIEW_OnTaskStartReady>
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	2201      	movs	r2, #1
 8001060:	409a      	lsls	r2, r3
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <xTaskIncrementTick+0x164>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4313      	orrs	r3, r2
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <xTaskIncrementTick+0x164>)
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <xTaskIncrementTick+0x168>)
 800107a:	441a      	add	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	3304      	adds	r3, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f7ff fcbf 	bl	8000a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <xTaskIncrementTick+0x16c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	429a      	cmp	r2, r3
 8001094:	d3b5      	bcc.n	8001002 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800109a:	e7b2      	b.n	8001002 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <xTaskIncrementTick+0x16c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a2:	4915      	ldr	r1, [pc, #84]	; (80010f8 <xTaskIncrementTick+0x168>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d907      	bls.n	80010c4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e004      	b.n	80010c4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <xTaskIncrementTick+0x170>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <xTaskIncrementTick+0x170>)
 80010c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <xTaskIncrementTick+0x174>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80010d0:	697b      	ldr	r3, [r7, #20]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000144 	.word	0x20000144
 80010e0:	20000120 	.word	0x20000120
 80010e4:	200000d4 	.word	0x200000d4
 80010e8:	200000d8 	.word	0x200000d8
 80010ec:	20000134 	.word	0x20000134
 80010f0:	2000013c 	.word	0x2000013c
 80010f4:	20000124 	.word	0x20000124
 80010f8:	20000048 	.word	0x20000048
 80010fc:	20000044 	.word	0x20000044
 8001100:	2000012c 	.word	0x2000012c
 8001104:	20000130 	.word	0x20000130

08001108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <vTaskSwitchContext+0xb8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <vTaskSwitchContext+0xbc>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800111c:	e04c      	b.n	80011b8 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <vTaskSwitchContext+0xbc>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <vTaskSwitchContext+0xc0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	f1c3 031f 	rsb	r3, r3, #31
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	4924      	ldr	r1, [pc, #144]	; (80011cc <vTaskSwitchContext+0xc4>)
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <vTaskSwitchContext+0x5a>
	__asm volatile
 800114e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001152:	f383 8811 	msr	BASEPRI, r3
 8001156:	f3bf 8f6f 	isb	sy
 800115a:	f3bf 8f4f 	dsb	sy
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	e7fe      	b.n	8001160 <vTaskSwitchContext+0x58>
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <vTaskSwitchContext+0xc4>)
 800116e:	4413      	add	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	3308      	adds	r3, #8
 8001184:	429a      	cmp	r2, r3
 8001186:	d104      	bne.n	8001192 <vTaskSwitchContext+0x8a>
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <vTaskSwitchContext+0xc8>)
 800119a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <vTaskSwitchContext+0xc8>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <vTaskSwitchContext+0xcc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d102      	bne.n	80011ae <vTaskSwitchContext+0xa6>
 80011a8:	f001 fe94 	bl	8002ed4 <SEGGER_SYSVIEW_OnIdle>
}
 80011ac:	e004      	b.n	80011b8 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <vTaskSwitchContext+0xc8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 feee 	bl	8002f94 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000144 	.word	0x20000144
 80011c4:	20000130 	.word	0x20000130
 80011c8:	20000124 	.word	0x20000124
 80011cc:	20000048 	.word	0x20000048
 80011d0:	20000044 	.word	0x20000044
 80011d4:	20000140 	.word	0x20000140

080011d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80011e0:	f000 f852 	bl	8001288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <prvIdleTask+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d9f9      	bls.n	80011e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <prvIdleTask+0x2c>)
 80011ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80011fc:	e7f0      	b.n	80011e0 <prvIdleTask+0x8>
 80011fe:	bf00      	nop
 8001200:	20000048 	.word	0x20000048
 8001204:	e000ed04 	.word	0xe000ed04

08001208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	e00c      	b.n	800122e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <prvInitialiseTaskLists+0x60>)
 8001220:	4413      	add	r3, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fbc2 	bl	80009ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d9ef      	bls.n	8001214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <prvInitialiseTaskLists+0x64>)
 8001236:	f7ff fbb9 	bl	80009ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <prvInitialiseTaskLists+0x68>)
 800123c:	f7ff fbb6 	bl	80009ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <prvInitialiseTaskLists+0x6c>)
 8001242:	f7ff fbb3 	bl	80009ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <prvInitialiseTaskLists+0x70>)
 8001248:	f7ff fbb0 	bl	80009ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <prvInitialiseTaskLists+0x74>)
 800124e:	f7ff fbad 	bl	80009ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <prvInitialiseTaskLists+0x78>)
 8001254:	4a05      	ldr	r2, [pc, #20]	; (800126c <prvInitialiseTaskLists+0x64>)
 8001256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <prvInitialiseTaskLists+0x7c>)
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <prvInitialiseTaskLists+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000048 	.word	0x20000048
 800126c:	200000ac 	.word	0x200000ac
 8001270:	200000c0 	.word	0x200000c0
 8001274:	200000dc 	.word	0x200000dc
 8001278:	200000f0 	.word	0x200000f0
 800127c:	20000108 	.word	0x20000108
 8001280:	200000d4 	.word	0x200000d4
 8001284:	200000d8 	.word	0x200000d8

08001288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800128e:	e019      	b.n	80012c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001290:	f000 f97c 	bl	800158c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <prvCheckTasksWaitingTermination+0x4c>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3304      	adds	r3, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fbd4 	bl	8000a4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <prvCheckTasksWaitingTermination+0x50>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <prvCheckTasksWaitingTermination+0x50>)
 80012ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <prvCheckTasksWaitingTermination+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <prvCheckTasksWaitingTermination+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80012ba:	f000 f995 	bl	80015e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f80e 	bl	80012e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <prvCheckTasksWaitingTermination+0x54>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e1      	bne.n	8001290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000f0 	.word	0x200000f0
 80012d8:	2000011c 	.word	0x2000011c
 80012dc:	20000104 	.word	0x20000104

080012e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fb33 	bl	8001958 <vPortFree>
			vPortFree( pxTCB );
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fb30 	bl	8001958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <prvResetNextTaskUnblockTime+0x38>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <prvResetNextTaskUnblockTime+0x3c>)
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001318:	e008      	b.n	800132c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <prvResetNextTaskUnblockTime+0x38>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <prvResetNextTaskUnblockTime+0x3c>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	200000d4 	.word	0x200000d4
 800133c:	2000013c 	.word	0x2000013c

08001340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3b04      	subs	r3, #4
 8001350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3b04      	subs	r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f023 0201 	bic.w	r2, r3, #1
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b04      	subs	r3, #4
 800136e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <pxPortInitialiseStack+0x64>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b14      	subs	r3, #20
 800137a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3b04      	subs	r3, #4
 8001386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f06f 0202 	mvn.w	r2, #2
 800138e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b20      	subs	r3, #32
 8001394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	080013a9 	.word	0x080013a9

080013a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <prvTaskExitError+0x50>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d009      	beq.n	80013d0 <prvTaskExitError+0x28>
 80013bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c0:	f383 8811 	msr	BASEPRI, r3
 80013c4:	f3bf 8f6f 	isb	sy
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	e7fe      	b.n	80013ce <prvTaskExitError+0x26>
 80013d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d4:	f383 8811 	msr	BASEPRI, r3
 80013d8:	f3bf 8f6f 	isb	sy
 80013dc:	f3bf 8f4f 	dsb	sy
 80013e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80013e2:	bf00      	nop
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0fc      	beq.n	80013e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010
 80013fc:	00000000 	.word	0x00000000

08001400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <pxCurrentTCBConst2>)
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	6808      	ldr	r0, [r1, #0]
 8001406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800140a:	f380 8809 	msr	PSP, r0
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	f380 8811 	msr	BASEPRI, r0
 800141a:	4770      	bx	lr
 800141c:	f3af 8000 	nop.w

08001420 <pxCurrentTCBConst2>:
 8001420:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop

08001428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <prvPortStartFirstTask+0x24>)
 800142a:	6800      	ldr	r0, [r0, #0]
 800142c:	6800      	ldr	r0, [r0, #0]
 800142e:	f380 8808 	msr	MSP, r0
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f380 8814 	msr	CONTROL, r0
 800143a:	b662      	cpsie	i
 800143c:	b661      	cpsie	f
 800143e:	f3bf 8f4f 	dsb	sy
 8001442:	f3bf 8f6f 	isb	sy
 8001446:	df00      	svc	0
 8001448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800144a:	bf00      	nop
 800144c:	e000ed08 	.word	0xe000ed08

08001450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <xPortStartScheduler+0x118>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a44      	ldr	r2, [pc, #272]	; (800156c <xPortStartScheduler+0x11c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d109      	bne.n	8001474 <xPortStartScheduler+0x24>
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e7fe      	b.n	8001472 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001474:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <xPortStartScheduler+0x118>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a3d      	ldr	r2, [pc, #244]	; (8001570 <xPortStartScheduler+0x120>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d109      	bne.n	8001492 <xPortStartScheduler+0x42>
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e7fe      	b.n	8001490 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <xPortStartScheduler+0x124>)
 8001494:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <xPortStartScheduler+0x128>)
 80014b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <xPortStartScheduler+0x12c>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80014c0:	e009      	b.n	80014d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <xPortStartScheduler+0x12c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	4a2c      	ldr	r2, [pc, #176]	; (800157c <xPortStartScheduler+0x12c>)
 80014ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	2b80      	cmp	r3, #128	; 0x80
 80014e0:	d0ef      	beq.n	80014c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <xPortStartScheduler+0x12c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d009      	beq.n	8001502 <xPortStartScheduler+0xb2>
 80014ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f2:	f383 8811 	msr	BASEPRI, r3
 80014f6:	f3bf 8f6f 	isb	sy
 80014fa:	f3bf 8f4f 	dsb	sy
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e7fe      	b.n	8001500 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <xPortStartScheduler+0x12c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	4a1c      	ldr	r2, [pc, #112]	; (800157c <xPortStartScheduler+0x12c>)
 800150a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <xPortStartScheduler+0x12c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <xPortStartScheduler+0x12c>)
 8001516:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <xPortStartScheduler+0x130>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <xPortStartScheduler+0x130>)
 8001526:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <xPortStartScheduler+0x130>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <xPortStartScheduler+0x130>)
 8001532:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001536:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001538:	f000 f8e0 	bl	80016fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <xPortStartScheduler+0x134>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001542:	f000 f8ff 	bl	8001744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <xPortStartScheduler+0x138>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <xPortStartScheduler+0x138>)
 800154c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001550:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001552:	f7ff ff69 	bl	8001428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001556:	f7ff fdd7 	bl	8001108 <vTaskSwitchContext>
	prvTaskExitError();
 800155a:	f7ff ff25 	bl	80013a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	410fc271 	.word	0x410fc271
 8001570:	410fc270 	.word	0x410fc270
 8001574:	e000e400 	.word	0xe000e400
 8001578:	20000148 	.word	0x20000148
 800157c:	2000014c 	.word	0x2000014c
 8001580:	e000ed20 	.word	0xe000ed20
 8001584:	20000010 	.word	0x20000010
 8001588:	e000ef34 	.word	0xe000ef34

0800158c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001596:	f383 8811 	msr	BASEPRI, r3
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f3bf 8f4f 	dsb	sy
 80015a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <vPortEnterCritical+0x54>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <vPortEnterCritical+0x54>)
 80015ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <vPortEnterCritical+0x54>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10e      	bne.n	80015d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <vPortEnterCritical+0x58>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <vPortEnterCritical+0x48>
 80015c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c4:	f383 8811 	msr	BASEPRI, r3
 80015c8:	f3bf 8f6f 	isb	sy
 80015cc:	f3bf 8f4f 	dsb	sy
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	e7fe      	b.n	80015d2 <vPortEnterCritical+0x46>
	}
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000010 	.word	0x20000010
 80015e4:	e000ed04 	.word	0xe000ed04

080015e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <vPortExitCritical+0x4c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <vPortExitCritical+0x22>
 80015f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fa:	f383 8811 	msr	BASEPRI, r3
 80015fe:	f3bf 8f6f 	isb	sy
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	e7fe      	b.n	8001608 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <vPortExitCritical+0x4c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	4a08      	ldr	r2, [pc, #32]	; (8001634 <vPortExitCritical+0x4c>)
 8001612:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <vPortExitCritical+0x4c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d104      	bne.n	8001626 <vPortExitCritical+0x3e>
 800161c:	2300      	movs	r3, #0
 800161e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000010 	.word	0x20000010
	...

08001640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001640:	f3ef 8009 	mrs	r0, PSP
 8001644:	f3bf 8f6f 	isb	sy
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <pxCurrentTCBConst>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f01e 0f10 	tst.w	lr, #16
 8001650:	bf08      	it	eq
 8001652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001664:	f380 8811 	msr	BASEPRI, r0
 8001668:	f3bf 8f4f 	dsb	sy
 800166c:	f3bf 8f6f 	isb	sy
 8001670:	f7ff fd4a 	bl	8001108 <vTaskSwitchContext>
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	f380 8811 	msr	BASEPRI, r0
 800167c:	bc09      	pop	{r0, r3}
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	6808      	ldr	r0, [r1, #0]
 8001682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001686:	f01e 0f10 	tst.w	lr, #16
 800168a:	bf08      	it	eq
 800168c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001690:	f380 8809 	msr	PSP, r0
 8001694:	f3bf 8f6f 	isb	sy
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w

080016a0 <pxCurrentTCBConst>:
 80016a0:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop

080016a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	__asm volatile
 80016ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b2:	f383 8811 	msr	BASEPRI, r3
 80016b6:	f3bf 8f6f 	isb	sy
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80016c0:	f001 fb8e 	bl	8002de0 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80016c4:	f7ff fc64 	bl	8000f90 <xTaskIncrementTick>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80016ce:	f001 fbe5 	bl	8002e9c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <SysTick_Handler+0x50>)
 80016d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e003      	b.n	80016e4 <SysTick_Handler+0x3c>
		}
		else
		{
			traceISR_EXIT();
 80016dc:	f001 fbc2 	bl	8002e64 <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 80016e0:	f7ff fd12 	bl	8001108 <vTaskSwitchContext>
 80016e4:	2300      	movs	r3, #0
 80016e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000ed04 	.word	0xe000ed04

080016fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <vPortSetupTimerInterrupt+0x34>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <vPortSetupTimerInterrupt+0x38>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <vPortSetupTimerInterrupt+0x3c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <vPortSetupTimerInterrupt+0x40>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <vPortSetupTimerInterrupt+0x44>)
 800171a:	3b01      	subs	r3, #1
 800171c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <vPortSetupTimerInterrupt+0x34>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010
 8001734:	e000e018 	.word	0xe000e018
 8001738:	20000014 	.word	0x20000014
 800173c:	10624dd3 	.word	0x10624dd3
 8001740:	e000e014 	.word	0xe000e014

08001744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001754 <vPortEnableVFP+0x10>
 8001748:	6801      	ldr	r1, [r0, #0]
 800174a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800174e:	6001      	str	r1, [r0, #0]
 8001750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001752:	bf00      	nop
 8001754:	e000ed88 	.word	0xe000ed88

08001758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800175e:	f3ef 8305 	mrs	r3, IPSR
 8001762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	d913      	bls.n	8001792 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800176a:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <vPortValidateInterruptPriority+0x6c>)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <vPortValidateInterruptPriority+0x70>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	7afa      	ldrb	r2, [r7, #11]
 800177a:	429a      	cmp	r2, r3
 800177c:	d209      	bcs.n	8001792 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001782:	f383 8811 	msr	BASEPRI, r3
 8001786:	f3bf 8f6f 	isb	sy
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	e7fe      	b.n	8001790 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <vPortValidateInterruptPriority+0x74>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <vPortValidateInterruptPriority+0x78>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d909      	bls.n	80017b6 <vPortValidateInterruptPriority+0x5e>
 80017a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a6:	f383 8811 	msr	BASEPRI, r3
 80017aa:	f3bf 8f6f 	isb	sy
 80017ae:	f3bf 8f4f 	dsb	sy
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	e7fe      	b.n	80017b4 <vPortValidateInterruptPriority+0x5c>
	}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e3f0 	.word	0xe000e3f0
 80017c8:	20000148 	.word	0x20000148
 80017cc:	e000ed0c 	.word	0xe000ed0c
 80017d0:	2000014c 	.word	0x2000014c

080017d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80017e0:	f7ff fb16 	bl	8000e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80017e4:	4b57      	ldr	r3, [pc, #348]	; (8001944 <pvPortMalloc+0x170>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80017ec:	f000 f90c 	bl	8001a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017f0:	4b55      	ldr	r3, [pc, #340]	; (8001948 <pvPortMalloc+0x174>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 808c 	bne.w	8001916 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01c      	beq.n	800183e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001804:	2208      	movs	r2, #8
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f023 0307 	bic.w	r3, r3, #7
 800181c:	3308      	adds	r3, #8
 800181e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <pvPortMalloc+0x6a>
 800182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e7fe      	b.n	800183c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d068      	beq.n	8001916 <pvPortMalloc+0x142>
 8001844:	4b41      	ldr	r3, [pc, #260]	; (800194c <pvPortMalloc+0x178>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d863      	bhi.n	8001916 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800184e:	4b40      	ldr	r3, [pc, #256]	; (8001950 <pvPortMalloc+0x17c>)
 8001850:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <pvPortMalloc+0x17c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001858:	e004      	b.n	8001864 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d903      	bls.n	8001876 <pvPortMalloc+0xa2>
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f1      	bne.n	800185a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <pvPortMalloc+0x170>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	429a      	cmp	r2, r3
 800187e:	d04a      	beq.n	8001916 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2208      	movs	r2, #8
 8001886:	4413      	add	r3, r2
 8001888:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	1ad2      	subs	r2, r2, r3
 800189a:	2308      	movs	r3, #8
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	429a      	cmp	r2, r3
 80018a0:	d91e      	bls.n	80018e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <pvPortMalloc+0xf4>
 80018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f3bf 8f6f 	isb	sy
 80018c0:	f3bf 8f4f 	dsb	sy
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	e7fe      	b.n	80018c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1ad2      	subs	r2, r2, r3
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018da:	69b8      	ldr	r0, [r7, #24]
 80018dc:	f000 f8f6 	bl	8001acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <pvPortMalloc+0x178>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <pvPortMalloc+0x178>)
 80018ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <pvPortMalloc+0x178>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <pvPortMalloc+0x180>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d203      	bcs.n	8001902 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <pvPortMalloc+0x178>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <pvPortMalloc+0x180>)
 8001900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <pvPortMalloc+0x174>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	431a      	orrs	r2, r3
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001916:	f7ff fa89 	bl	8000e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	2b00      	cmp	r3, #0
 8001922:	d009      	beq.n	8001938 <pvPortMalloc+0x164>
 8001924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001928:	f383 8811 	msr	BASEPRI, r3
 800192c:	f3bf 8f6f 	isb	sy
 8001930:	f3bf 8f4f 	dsb	sy
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e7fe      	b.n	8001936 <pvPortMalloc+0x162>
	return pvReturn;
 8001938:	69fb      	ldr	r3, [r7, #28]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20012d58 	.word	0x20012d58
 8001948:	20012d64 	.word	0x20012d64
 800194c:	20012d5c 	.word	0x20012d5c
 8001950:	20012d50 	.word	0x20012d50
 8001954:	20012d60 	.word	0x20012d60

08001958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d046      	beq.n	80019f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800196a:	2308      	movs	r3, #8
 800196c:	425b      	negs	r3, r3
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <vPortFree+0xa8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <vPortFree+0x42>
 8001986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198a:	f383 8811 	msr	BASEPRI, r3
 800198e:	f3bf 8f6f 	isb	sy
 8001992:	f3bf 8f4f 	dsb	sy
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e7fe      	b.n	8001998 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <vPortFree+0x5e>
 80019a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	e7fe      	b.n	80019b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <vPortFree+0xa8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d115      	bne.n	80019f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <vPortFree+0xa8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80019dc:	f7ff fa18 	bl	8000e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <vPortFree+0xac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <vPortFree+0xac>)
 80019ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019ee:	6938      	ldr	r0, [r7, #16]
 80019f0:	f000 f86c 	bl	8001acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80019f4:	f7ff fa1a 	bl	8000e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20012d64 	.word	0x20012d64
 8001a04:	20012d5c 	.word	0x20012d5c

08001a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a0e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <prvHeapInit+0xac>)
 8001a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00c      	beq.n	8001a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3307      	adds	r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 0307 	bic.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <prvHeapInit+0xac>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <prvHeapInit+0xb0>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <prvHeapInit+0xb0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001a54:	2208      	movs	r2, #8
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <prvHeapInit+0xb4>)
 8001a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <prvHeapInit+0xb4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <prvHeapInit+0xb4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	1ad2      	subs	r2, r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <prvHeapInit+0xb4>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <prvHeapInit+0xb8>)
 8001a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <prvHeapInit+0xbc>)
 8001a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <prvHeapInit+0xc0>)
 8001aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20000150 	.word	0x20000150
 8001ab8:	20012d50 	.word	0x20012d50
 8001abc:	20012d58 	.word	0x20012d58
 8001ac0:	20012d60 	.word	0x20012d60
 8001ac4:	20012d5c 	.word	0x20012d5c
 8001ac8:	20012d64 	.word	0x20012d64

08001acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <prvInsertBlockIntoFreeList+0xac>)
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e002      	b.n	8001ae0 <prvInsertBlockIntoFreeList+0x14>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8f7      	bhi.n	8001ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d108      	bne.n	8001b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	441a      	add	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	441a      	add	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d118      	bne.n	8001b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <prvInsertBlockIntoFreeList+0xb0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d00d      	beq.n	8001b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	441a      	add	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e008      	b.n	8001b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <prvInsertBlockIntoFreeList+0xb0>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e003      	b.n	8001b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d002      	beq.n	8001b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20012d50 	.word	0x20012d50
 8001b7c:	20012d58 	.word	0x20012d58

08001b80 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <_cbSendSystemDesc+0x14>)
 8001b86:	f001 f8d7 	bl	8002d38 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001b8a:	4803      	ldr	r0, [pc, #12]	; (8001b98 <_cbSendSystemDesc+0x18>)
 8001b8c:	f001 f8d4 	bl	8002d38 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	08003930 	.word	0x08003930
 8001b98:	08003978 	.word	0x08003978

08001b9c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SEGGER_SYSVIEW_Conf+0x20>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SEGGER_SYSVIEW_Conf+0x20>)
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SEGGER_SYSVIEW_Conf+0x24>)
 8001baa:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <SEGGER_SYSVIEW_Conf+0x28>)
 8001bac:	f000 fd4c 	bl	8002648 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001bb0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001bb4:	f000 fd86 	bl	80026c4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000014 	.word	0x20000014
 8001bc0:	08001b81 	.word	0x08001b81
 8001bc4:	08003a0c 	.word	0x08003a0c

08001bc8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e034      	b.n	8001c3e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001bd4:	491e      	ldr	r1, [pc, #120]	; (8001c50 <_cbSendTaskList+0x88>)
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	491a      	ldr	r1, [pc, #104]	; (8001c50 <_cbSendTaskList+0x88>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681c      	ldr	r4, [r3, #0]
 8001bf6:	4916      	ldr	r1, [pc, #88]	; (8001c50 <_cbSendTaskList+0x88>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	3308      	adds	r3, #8
 8001c06:	681d      	ldr	r5, [r3, #0]
 8001c08:	4911      	ldr	r1, [pc, #68]	; (8001c50 <_cbSendTaskList+0x88>)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	330c      	adds	r3, #12
 8001c18:	681e      	ldr	r6, [r3, #0]
 8001c1a:	490d      	ldr	r1, [pc, #52]	; (8001c50 <_cbSendTaskList+0x88>)
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3310      	adds	r3, #16
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	4633      	mov	r3, r6
 8001c30:	462a      	mov	r2, r5
 8001c32:	4621      	mov	r1, r4
 8001c34:	f000 f8b4 	bl	8001da0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <_cbSendTaskList+0x8c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3c5      	bcc.n	8001bd4 <_cbSendTaskList+0xc>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c50:	20012d68 	.word	0x20012d68
 8001c54:	20012e08 	.word	0x20012e08

08001c58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001c5e:	f7ff f985 	bl	8000f6c <xTaskGetTickCountFromISR>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f04f 0400 	mov.w	r4, #0
 8001c68:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001c6c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001c70:	462b      	mov	r3, r5
 8001c72:	4634      	mov	r4, r6
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	0162      	lsls	r2, r4, #5
 8001c7e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001c82:	0159      	lsls	r1, r3, #5
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	1b5b      	subs	r3, r3, r5
 8001c8a:	eb64 0406 	sbc.w	r4, r4, r6
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	00a2      	lsls	r2, r4, #2
 8001c98:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001c9c:	0099      	lsls	r1, r3, #2
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	195b      	adds	r3, r3, r5
 8001ca4:	eb44 0406 	adc.w	r4, r4, r6
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	00e2      	lsls	r2, r4, #3
 8001cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cb6:	00d9      	lsls	r1, r3, #3
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4614      	mov	r4, r2
 8001cbc:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8001cc0:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001cd0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001cde:	2205      	movs	r2, #5
 8001ce0:	492b      	ldr	r1, [pc, #172]	; (8001d90 <SYSVIEW_AddTask+0xc0>)
 8001ce2:	68b8      	ldr	r0, [r7, #8]
 8001ce4:	f001 fdf2 	bl	80038cc <memcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d04b      	beq.n	8001d86 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b07      	cmp	r3, #7
 8001cf4:	d903      	bls.n	8001cfe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001cf6:	4828      	ldr	r0, [pc, #160]	; (8001d98 <SYSVIEW_AddTask+0xc8>)
 8001cf8:	f001 fab0 	bl	800325c <SEGGER_SYSVIEW_Warn>
    return;
 8001cfc:	e044      	b.n	8001d88 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4926      	ldr	r1, [pc, #152]	; (8001d9c <SYSVIEW_AddTask+0xcc>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4921      	ldr	r1, [pc, #132]	; (8001d9c <SYSVIEW_AddTask+0xcc>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3304      	adds	r3, #4
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	491b      	ldr	r1, [pc, #108]	; (8001d9c <SYSVIEW_AddTask+0xcc>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3308      	adds	r3, #8
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4916      	ldr	r1, [pc, #88]	; (8001d9c <SYSVIEW_AddTask+0xcc>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	330c      	adds	r3, #12
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4910      	ldr	r1, [pc, #64]	; (8001d9c <SYSVIEW_AddTask+0xcc>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3310      	adds	r3, #16
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <SYSVIEW_AddTask+0xc4>)
 8001d72:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f80e 	bl	8001da0 <SYSVIEW_SendTaskInfo>
 8001d84:	e000      	b.n	8001d88 <SYSVIEW_AddTask+0xb8>
    return;
 8001d86:	bf00      	nop

}
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08003988 	.word	0x08003988
 8001d94:	20012e08 	.word	0x20012e08
 8001d98:	08003990 	.word	0x08003990
 8001d9c:	20012d68 	.word	0x20012d68

08001da0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	2214      	movs	r2, #20
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fda2 	bl	8003900 <memset>
  TaskInfo.TaskID     = TaskID;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 feb5 	bl	8002b44 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <_DoInit+0x8c>)
 8001dec:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <_DoInit+0x90>)
 8001dfe:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <_DoInit+0x94>)
 8001e04:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_DoInit+0x90>)
 8001e24:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <_DoInit+0x98>)
 8001e2a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2210      	movs	r2, #16
 8001e30:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3307      	adds	r3, #7
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <_DoInit+0x9c>)
 8001e4a:	6810      	ldr	r0, [r2, #0]
 8001e4c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <_DoInit+0xa0>)
 8001e52:	6810      	ldr	r0, [r2, #0]
 8001e54:	6018      	str	r0, [r3, #0]
 8001e56:	8891      	ldrh	r1, [r2, #4]
 8001e58:	7992      	ldrb	r2, [r2, #6]
 8001e5a:	8099      	strh	r1, [r3, #4]
 8001e5c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	719a      	strb	r2, [r3, #6]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20017338 	.word	0x20017338
 8001e74:	080039e0 	.word	0x080039e0
 8001e78:	20012e0c 	.word	0x20012e0c
 8001e7c:	2001320c 	.word	0x2001320c
 8001e80:	080039ec 	.word	0x080039ec
 8001e84:	080039f0 	.word	0x080039f0

08001e88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001e94:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <SEGGER_RTT_ReadNoLock+0x100>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <SEGGER_RTT_ReadNoLock+0x18>
 8001e9c:	f7ff ffa2 	bl	8001de4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	3360      	adds	r3, #96	; 0x60
 8001eac:	4a36      	ldr	r2, [pc, #216]	; (8001f88 <SEGGER_RTT_ReadNoLock+0x100>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d92a      	bls.n	8001f24 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	bf28      	it	cs
 8001ee0:	4613      	movcs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	4413      	add	r3, r2
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	69f8      	ldr	r0, [r7, #28]
 8001ef2:	f001 fcfa 	bl	80038ea <memcpy>
    NumBytesRead += NumBytesRem;
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001f0e:	6a3a      	ldr	r2, [r7, #32]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	6a3a      	ldr	r2, [r7, #32]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d101      	bne.n	8001f24 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bf28      	it	cs
 8001f34:	4613      	movcs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d018      	beq.n	8001f70 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	69f8      	ldr	r0, [r7, #28]
 8001f4c:	f001 fccd 	bl	80038ea <memcpy>
    NumBytesRead += NumBytesRem;
 8001f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6a3a      	ldr	r2, [r7, #32]
 8001f7a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20017338 	.word	0x20017338

08001f8c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001faa:	4413      	add	r3, r2
 8001fac:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d854      	bhi.n	800206c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d30f      	bcc.n	8001ff6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4413      	add	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fc81 	bl	80038ea <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	441a      	add	r2, r3
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e054      	b.n	80020a0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	d34b      	bcc.n	800209e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	d90e      	bls.n	8002036 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4413      	add	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002024:	4618      	mov	r0, r3
 8002026:	f001 fc60 	bl	80038ea <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	441a      	add	r2, r3
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	e018      	b.n	8002068 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fc51 	bl	80038ea <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	6858      	ldr	r0, [r3, #4]
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	18d1      	adds	r1, r2, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	461a      	mov	r2, r3
 800205a:	f001 fc46 	bl	80038ea <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad2      	subs	r2, r2, r3
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002068:	2301      	movs	r3, #1
 800206a:	e019      	b.n	80020a0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d30f      	bcc.n	800209e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4413      	add	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fc2d 	bl	80038ea <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	441a      	add	r2, r3
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20017338 	.word	0x20017338

080020ac <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80020c2:	f7ff fe8f 	bl	8001de4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d24c      	bcs.n	800216c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80020d2:	f3ef 8311 	mrs	r3, BASEPRI
 80020d6:	f04f 0120 	mov.w	r1, #32
 80020da:	f381 8811 	msr	BASEPRI, r1
 80020de:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d032      	beq.n	800214c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80020e6:	4925      	ldr	r1, [pc, #148]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80020fa:	4920      	ldr	r1, [pc, #128]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3304      	adds	r3, #4
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002110:	491a      	ldr	r1, [pc, #104]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	3320      	adds	r3, #32
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002124:	4915      	ldr	r1, [pc, #84]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	3328      	adds	r3, #40	; 0x28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002138:	4910      	ldr	r1, [pc, #64]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	3324      	adds	r3, #36	; 0x24
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800214c:	490b      	ldr	r1, [pc, #44]	; (800217c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	332c      	adds	r3, #44	; 0x2c
 800215c:	6a3a      	ldr	r2, [r7, #32]
 800215e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e002      	b.n	8002172 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
 8002170:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002172:	697b      	ldr	r3, [r7, #20]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20017338 	.word	0x20017338

08002180 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002196:	f7ff fe25 	bl	8001de4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d24b      	bcs.n	800223e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80021a6:	f3ef 8311 	mrs	r3, BASEPRI
 80021aa:	f04f 0120 	mov.w	r1, #32
 80021ae:	f381 8811 	msr	BASEPRI, r1
 80021b2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d031      	beq.n	800221e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80021ba:	4925      	ldr	r1, [pc, #148]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80021ce:	4920      	ldr	r1, [pc, #128]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3364      	adds	r3, #100	; 0x64
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80021e2:	491b      	ldr	r1, [pc, #108]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	3368      	adds	r3, #104	; 0x68
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80021f6:	4916      	ldr	r1, [pc, #88]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3370      	adds	r3, #112	; 0x70
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800220a:	4911      	ldr	r1, [pc, #68]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	336c      	adds	r3, #108	; 0x6c
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800221e:	490c      	ldr	r1, [pc, #48]	; (8002250 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	3374      	adds	r3, #116	; 0x74
 800222e:	6a3a      	ldr	r2, [r7, #32]
 8002230:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e002      	b.n	8002244 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002244:	697b      	ldr	r3, [r7, #20]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20017338 	.word	0x20017338

08002254 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002264:	e002      	b.n	800226c <_EncodeStr+0x18>
    Len++;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	3301      	adds	r3, #1
 800226a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f6      	bne.n	8002266 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d901      	bls.n	8002284 <_EncodeStr+0x30>
    Len = Limit;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2bfe      	cmp	r3, #254	; 0xfe
 8002288:	d806      	bhi.n	8002298 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	60fa      	str	r2, [r7, #12]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e011      	b.n	80022bc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	60fa      	str	r2, [r7, #12]
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	60fa      	str	r2, [r7, #12]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	0a19      	lsrs	r1, r3, #8
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	60fa      	str	r2, [r7, #12]
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80022c0:	e00a      	b.n	80022d8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	1c53      	adds	r3, r2, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1c59      	adds	r1, r3, #1
 80022cc:	60f9      	str	r1, [r7, #12]
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	701a      	strb	r2, [r3, #0]
    n++;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3f0      	bcc.n	80022c2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800230c:	1cfb      	adds	r3, r7, #3
 800230e:	2201      	movs	r2, #1
 8002310:	4619      	mov	r1, r3
 8002312:	2001      	movs	r0, #1
 8002314:	f7ff fdb8 	bl	8001e88 <SEGGER_RTT_ReadNoLock>
 8002318:	4603      	mov	r3, r0
 800231a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	dd44      	ble.n	80023ac <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d01a      	beq.n	800235e <_HandleIncomingPacket+0x58>
 8002328:	2b04      	cmp	r3, #4
 800232a:	dc06      	bgt.n	800233a <_HandleIncomingPacket+0x34>
 800232c:	2b02      	cmp	r3, #2
 800232e:	d010      	beq.n	8002352 <_HandleIncomingPacket+0x4c>
 8002330:	2b02      	cmp	r3, #2
 8002332:	dc11      	bgt.n	8002358 <_HandleIncomingPacket+0x52>
 8002334:	2b01      	cmp	r3, #1
 8002336:	d009      	beq.n	800234c <_HandleIncomingPacket+0x46>
 8002338:	e02d      	b.n	8002396 <_HandleIncomingPacket+0x90>
 800233a:	2b06      	cmp	r3, #6
 800233c:	d015      	beq.n	800236a <_HandleIncomingPacket+0x64>
 800233e:	2b06      	cmp	r3, #6
 8002340:	db10      	blt.n	8002364 <_HandleIncomingPacket+0x5e>
 8002342:	2b07      	cmp	r3, #7
 8002344:	d014      	beq.n	8002370 <_HandleIncomingPacket+0x6a>
 8002346:	2b80      	cmp	r3, #128	; 0x80
 8002348:	d015      	beq.n	8002376 <_HandleIncomingPacket+0x70>
 800234a:	e024      	b.n	8002396 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800234c:	f000 fa7e 	bl	800284c <SEGGER_SYSVIEW_Start>
      break;
 8002350:	e031      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002352:	f000 fb37 	bl	80029c4 <SEGGER_SYSVIEW_Stop>
      break;
 8002356:	e02e      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002358:	f000 fd12 	bl	8002d80 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800235c:	e02b      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800235e:	f000 fcd7 	bl	8002d10 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002362:	e028      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002364:	f000 fb54 	bl	8002a10 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002368:	e025      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800236a:	f000 ff39 	bl	80031e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800236e:	e022      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002370:	f000 ff18 	bl	80031a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002374:	e01f      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002376:	1cfb      	adds	r3, r7, #3
 8002378:	2201      	movs	r2, #1
 800237a:	4619      	mov	r1, r3
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff fd83 	bl	8001e88 <SEGGER_RTT_ReadNoLock>
 8002382:	4603      	mov	r3, r0
 8002384:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	dd11      	ble.n	80023b0 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fe88 	bl	80030a4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002394:	e00c      	b.n	80023b0 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	b25b      	sxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	da0a      	bge.n	80023b4 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800239e:	1cfb      	adds	r3, r7, #3
 80023a0:	2201      	movs	r2, #1
 80023a2:	4619      	mov	r1, r3
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7ff fd6f 	bl	8001e88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80023aa:	e003      	b.n	80023b4 <_HandleIncomingPacket+0xae>
    }
  }
 80023ac:	bf00      	nop
 80023ae:	e002      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
      break;
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <_HandleIncomingPacket+0xb0>
      break;
 80023b4:	bf00      	nop
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80023c6:	2301      	movs	r3, #1
 80023c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <_TrySendOverflowPacket+0xd8>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023da:	e00b      	b.n	80023f4 <_TrySendOverflowPacket+0x34>
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	1c59      	adds	r1, r3, #1
 80023e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80023e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	09db      	lsrs	r3, r3, #7
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	2b7f      	cmp	r3, #127	; 0x7f
 80023f8:	d8f0      	bhi.n	80023dc <_TrySendOverflowPacket+0x1c>
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <_TrySendOverflowPacket+0xdc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <_TrySendOverflowPacket+0xd8>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	e00b      	b.n	800243c <_TrySendOverflowPacket+0x7c>
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	6279      	str	r1, [r7, #36]	; 0x24
 800242e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	09db      	lsrs	r3, r3, #7
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b7f      	cmp	r3, #127	; 0x7f
 8002440:	d8f0      	bhi.n	8002424 <_TrySendOverflowPacket+0x64>
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	627a      	str	r2, [r7, #36]	; 0x24
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	461a      	mov	r2, r3
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	4619      	mov	r1, r3
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff fd94 	bl	8001f8c <SEGGER_RTT_WriteSkipNoLock>
 8002464:	4603      	mov	r3, r0
 8002466:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <_TrySendOverflowPacket+0xd8>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <_TrySendOverflowPacket+0xd8>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	3b01      	subs	r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <_TrySendOverflowPacket+0xd8>)
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e004      	b.n	800248c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <_TrySendOverflowPacket+0xd8>)
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	4a03      	ldr	r2, [pc, #12]	; (8002498 <_TrySendOverflowPacket+0xd8>)
 800248a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800248c:	693b      	ldr	r3, [r7, #16]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3730      	adds	r7, #48	; 0x30
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20017224 	.word	0x20017224
 800249c:	e0001004 	.word	0xe0001004

080024a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80024ac:	4b63      	ldr	r3, [pc, #396]	; (800263c <_SendPacket+0x19c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d010      	beq.n	80024d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <_SendPacket+0x19c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a1 	beq.w	8002600 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80024be:	4b5f      	ldr	r3, [pc, #380]	; (800263c <_SendPacket+0x19c>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d109      	bne.n	80024da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80024c6:	f7ff ff7b 	bl	80023c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80024ca:	4b5c      	ldr	r3, [pc, #368]	; (800263c <_SendPacket+0x19c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 8098 	bne.w	8002604 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80024d4:	e001      	b.n	80024da <_SendPacket+0x3a>
    goto Send;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <_SendPacket+0x3c>
Send:
 80024da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b1f      	cmp	r3, #31
 80024e0:	d809      	bhi.n	80024f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80024e2:	4b56      	ldr	r3, [pc, #344]	; (800263c <_SendPacket+0x19c>)
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 8089 	bne.w	8002608 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b17      	cmp	r3, #23
 80024fa:	d807      	bhi.n	800250c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3b01      	subs	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e03d      	b.n	8002588 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b7f      	cmp	r3, #127	; 0x7f
 8002518:	d912      	bls.n	8002540 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	09da      	lsrs	r2, r3, #7
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b01      	subs	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	3a01      	subs	r2, #1
 8002532:	60fa      	str	r2, [r7, #12]
 8002534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e006      	b.n	800254e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3b01      	subs	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b7f      	cmp	r3, #127	; 0x7f
 8002552:	d912      	bls.n	800257a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	09da      	lsrs	r2, r3, #7
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3b01      	subs	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	3a01      	subs	r2, #1
 800256c:	60fa      	str	r2, [r7, #12]
 800256e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e006      	b.n	8002588 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3b01      	subs	r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <_SendPacket+0x1a0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <_SendPacket+0x19c>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	e00b      	b.n	80025ba <_SendPacket+0x11a>
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	1c59      	adds	r1, r3, #1
 80025aa:	6279      	str	r1, [r7, #36]	; 0x24
 80025ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	09db      	lsrs	r3, r3, #7
 80025b8:	623b      	str	r3, [r7, #32]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2b7f      	cmp	r3, #127	; 0x7f
 80025be:	d8f0      	bhi.n	80025a2 <_SendPacket+0x102>
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	627a      	str	r2, [r7, #36]	; 0x24
 80025c6:	6a3a      	ldr	r2, [r7, #32]
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff fcd6 	bl	8001f8c <SEGGER_RTT_WriteSkipNoLock>
 80025e0:	4603      	mov	r3, r0
 80025e2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <_SendPacket+0x19c>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	60d3      	str	r3, [r2, #12]
 80025f0:	e00b      	b.n	800260a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <_SendPacket+0x19c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <_SendPacket+0x19c>)
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e004      	b.n	800260a <_SendPacket+0x16a>
    goto SendDone;
 8002600:	bf00      	nop
 8002602:	e002      	b.n	800260a <_SendPacket+0x16a>
      goto SendDone;
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <_SendPacket+0x16a>
      goto SendDone;
 8002608:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <_SendPacket+0x1a4>)
 800260c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <_SendPacket+0x1a4>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	429a      	cmp	r2, r3
 8002618:	d00b      	beq.n	8002632 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <_SendPacket+0x19c>)
 800261c:	789b      	ldrb	r3, [r3, #2]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <_SendPacket+0x19c>)
 8002624:	2201      	movs	r2, #1
 8002626:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002628:	f7ff fe6d 	bl	8002306 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <_SendPacket+0x19c>)
 800262e:	2200      	movs	r2, #0
 8002630:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20017224 	.word	0x20017224
 8002640:	e0001004 	.word	0xe0001004
 8002644:	20017338 	.word	0x20017338

08002648 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002656:	2300      	movs	r3, #0
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800265e:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <SEGGER_SYSVIEW_Init+0x68>)
 8002660:	4914      	ldr	r1, [pc, #80]	; (80026b4 <SEGGER_SYSVIEW_Init+0x6c>)
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff fd22 	bl	80020ac <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2308      	movs	r3, #8
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <SEGGER_SYSVIEW_Init+0x70>)
 8002670:	4910      	ldr	r1, [pc, #64]	; (80026b4 <SEGGER_SYSVIEW_Init+0x6c>)
 8002672:	2001      	movs	r0, #1
 8002674:	f7ff fd84 	bl	8002180 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <SEGGER_SYSVIEW_Init+0x74>)
 800267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <SEGGER_SYSVIEW_Init+0x78>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <SEGGER_SYSVIEW_Init+0x74>)
 8002686:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002688:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <SEGGER_SYSVIEW_Init+0x74>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800268e:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <SEGGER_SYSVIEW_Init+0x74>)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002694:	4a09      	ldr	r2, [pc, #36]	; (80026bc <SEGGER_SYSVIEW_Init+0x74>)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <SEGGER_SYSVIEW_Init+0x74>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <SEGGER_SYSVIEW_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2001321c 	.word	0x2001321c
 80026b4:	080039f8 	.word	0x080039f8
 80026b8:	2001721c 	.word	0x2001721c
 80026bc:	20017224 	.word	0x20017224
 80026c0:	e0001004 	.word	0xe0001004

080026c4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6113      	str	r3, [r2, #16]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20017224 	.word	0x20017224

080026e4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80026ec:	f3ef 8311 	mrs	r3, BASEPRI
 80026f0:	f04f 0120 	mov.w	r1, #32
 80026f4:	f381 8811 	msr	BASEPRI, r1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80026fc:	f7ff fdf7 	bl	80022ee <_PreparePacket>
 8002700:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68b8      	ldr	r0, [r7, #8]
 8002708:	f7ff feca 	bl	80024a0 <_SendPacket>
  RECORD_END();
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f383 8811 	msr	BASEPRI, r3
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20017254 	.word	0x20017254

08002720 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800272a:	f3ef 8311 	mrs	r3, BASEPRI
 800272e:	f04f 0120 	mov.w	r1, #32
 8002732:	f381 8811 	msr	BASEPRI, r1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	4816      	ldr	r0, [pc, #88]	; (8002794 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800273a:	f7ff fdd8 	bl	80022ee <_PreparePacket>
 800273e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e00b      	b.n	8002766 <SEGGER_SYSVIEW_RecordU32+0x46>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	61f9      	str	r1, [r7, #28]
 8002758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	09db      	lsrs	r3, r3, #7
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b7f      	cmp	r3, #127	; 0x7f
 800276a:	d8f0      	bhi.n	800274e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	61fa      	str	r2, [r7, #28]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68f9      	ldr	r1, [r7, #12]
 8002780:	6938      	ldr	r0, [r7, #16]
 8002782:	f7ff fe8d 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f383 8811 	msr	BASEPRI, r3
}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20017254 	.word	0x20017254

08002798 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80027a4:	f3ef 8311 	mrs	r3, BASEPRI
 80027a8:	f04f 0120 	mov.w	r1, #32
 80027ac:	f381 8811 	msr	BASEPRI, r1
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	4825      	ldr	r0, [pc, #148]	; (8002848 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80027b4:	f7ff fd9b 	bl	80022ee <_PreparePacket>
 80027b8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c6:	e00b      	b.n	80027e0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	09db      	lsrs	r3, r3, #7
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	2b7f      	cmp	r3, #127	; 0x7f
 80027e4:	d8f0      	bhi.n	80027c8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	e00b      	b.n	8002818 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1c59      	adds	r1, r3, #1
 8002808:	6279      	str	r1, [r7, #36]	; 0x24
 800280a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	09db      	lsrs	r3, r3, #7
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b7f      	cmp	r3, #127	; 0x7f
 800281c:	d8f0      	bhi.n	8002800 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	627a      	str	r2, [r7, #36]	; 0x24
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6979      	ldr	r1, [r7, #20]
 8002832:	69b8      	ldr	r0, [r7, #24]
 8002834:	f7ff fe34 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f383 8811 	msr	BASEPRI, r3
}
 800283e:	bf00      	nop
 8002840:	3730      	adds	r7, #48	; 0x30
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20017254 	.word	0x20017254

0800284c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002852:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 80aa 	bne.w	80029b0 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800285c:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <SEGGER_SYSVIEW_Start+0x16c>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002862:	f3ef 8311 	mrs	r3, BASEPRI
 8002866:	f04f 0120 	mov.w	r1, #32
 800286a:	f381 8811 	msr	BASEPRI, r1
 800286e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002870:	220a      	movs	r2, #10
 8002872:	4952      	ldr	r1, [pc, #328]	; (80029bc <SEGGER_SYSVIEW_Start+0x170>)
 8002874:	2001      	movs	r0, #1
 8002876:	f7ff fb89 	bl	8001f8c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002880:	200a      	movs	r0, #10
 8002882:	f7ff ff2f 	bl	80026e4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002886:	f3ef 8311 	mrs	r3, BASEPRI
 800288a:	f04f 0120 	mov.w	r1, #32
 800288e:	f381 8811 	msr	BASEPRI, r1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	484a      	ldr	r0, [pc, #296]	; (80029c0 <SEGGER_SYSVIEW_Start+0x174>)
 8002896:	f7ff fd2a 	bl	80022ee <_PreparePacket>
 800289a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a4:	4b44      	ldr	r3, [pc, #272]	; (80029b8 <SEGGER_SYSVIEW_Start+0x16c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028aa:	e00b      	b.n	80028c4 <SEGGER_SYSVIEW_Start+0x78>
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80028b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	09db      	lsrs	r3, r3, #7
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2b7f      	cmp	r3, #127	; 0x7f
 80028c8:	d8f0      	bhi.n	80028ac <SEGGER_SYSVIEW_Start+0x60>
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <SEGGER_SYSVIEW_Start+0x16c>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	e00b      	b.n	80028fe <SEGGER_SYSVIEW_Start+0xb2>
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	6279      	str	r1, [r7, #36]	; 0x24
 80028f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	09db      	lsrs	r3, r3, #7
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2b7f      	cmp	r3, #127	; 0x7f
 8002902:	d8f0      	bhi.n	80028e6 <SEGGER_SYSVIEW_Start+0x9a>
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	627a      	str	r2, [r7, #36]	; 0x24
 800290a:	6a3a      	ldr	r2, [r7, #32]
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <SEGGER_SYSVIEW_Start+0x16c>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e00b      	b.n	8002938 <SEGGER_SYSVIEW_Start+0xec>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	1c59      	adds	r1, r3, #1
 8002928:	61f9      	str	r1, [r7, #28]
 800292a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	09db      	lsrs	r3, r3, #7
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b7f      	cmp	r3, #127	; 0x7f
 800293c:	d8f0      	bhi.n	8002920 <SEGGER_SYSVIEW_Start+0xd4>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	61fa      	str	r2, [r7, #28]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	2302      	movs	r3, #2
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	e00b      	b.n	8002970 <SEGGER_SYSVIEW_Start+0x124>
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	6179      	str	r1, [r7, #20]
 8002962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	09db      	lsrs	r3, r3, #7
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b7f      	cmp	r3, #127	; 0x7f
 8002974:	d8f0      	bhi.n	8002958 <SEGGER_SYSVIEW_Start+0x10c>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	617a      	str	r2, [r7, #20]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002986:	2218      	movs	r2, #24
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fd88 	bl	80024a0 <_SendPacket>
      RECORD_END();
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <SEGGER_SYSVIEW_Start+0x16c>)
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80029a4:	f000 f9ec 	bl	8002d80 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80029a8:	f000 f9b2 	bl	8002d10 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80029ac:	f000 fc18 	bl	80031e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80029b0:	bf00      	nop
 80029b2:	3730      	adds	r7, #48	; 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20017224 	.word	0x20017224
 80029bc:	08003a14 	.word	0x08003a14
 80029c0:	20017254 	.word	0x20017254

080029c4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80029ca:	f3ef 8311 	mrs	r3, BASEPRI
 80029ce:	f04f 0120 	mov.w	r1, #32
 80029d2:	f381 8811 	msr	BASEPRI, r1
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <SEGGER_SYSVIEW_Stop+0x44>)
 80029da:	f7ff fc88 	bl	80022ee <_PreparePacket>
 80029de:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <SEGGER_SYSVIEW_Stop+0x48>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80029e8:	220b      	movs	r2, #11
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	6838      	ldr	r0, [r7, #0]
 80029ee:	f7ff fd57 	bl	80024a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <SEGGER_SYSVIEW_Stop+0x48>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f383 8811 	msr	BASEPRI, r3
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20017254 	.word	0x20017254
 8002a0c:	20017224 	.word	0x20017224

08002a10 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002a16:	f3ef 8311 	mrs	r3, BASEPRI
 8002a1a:	f04f 0120 	mov.w	r1, #32
 8002a1e:	f381 8811 	msr	BASEPRI, r1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4845      	ldr	r0, [pc, #276]	; (8002b3c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002a26:	f7ff fc62 	bl	80022ee <_PreparePacket>
 8002a2a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a34:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3a:	e00b      	b.n	8002a54 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	09db      	lsrs	r3, r3, #7
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	2b7f      	cmp	r3, #127	; 0x7f
 8002a58:	d8f0      	bhi.n	8002a3c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	e00b      	b.n	8002a8e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	1c59      	adds	r1, r3, #1
 8002a7e:	6279      	str	r1, [r7, #36]	; 0x24
 8002a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	09db      	lsrs	r3, r3, #7
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2b7f      	cmp	r3, #127	; 0x7f
 8002a92:	d8f0      	bhi.n	8002a76 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	627a      	str	r2, [r7, #36]	; 0x24
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e00b      	b.n	8002ac8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	61f9      	str	r1, [r7, #28]
 8002aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	09db      	lsrs	r3, r3, #7
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b7f      	cmp	r3, #127	; 0x7f
 8002acc:	d8f0      	bhi.n	8002ab0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	61fa      	str	r2, [r7, #28]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	e00b      	b.n	8002b00 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	1c59      	adds	r1, r3, #1
 8002af0:	6179      	str	r1, [r7, #20]
 8002af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	09db      	lsrs	r3, r3, #7
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b7f      	cmp	r3, #127	; 0x7f
 8002b04:	d8f0      	bhi.n	8002ae8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	617a      	str	r2, [r7, #20]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002b16:	2218      	movs	r2, #24
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	68b8      	ldr	r0, [r7, #8]
 8002b1c:	f7ff fcc0 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	4798      	blx	r3
  }
}
 8002b34:	bf00      	nop
 8002b36:	3730      	adds	r7, #48	; 0x30
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20017254 	.word	0x20017254
 8002b40:	20017224 	.word	0x20017224

08002b44 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b092      	sub	sp, #72	; 0x48
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8002b50:	f04f 0120 	mov.w	r1, #32
 8002b54:	f381 8811 	msr	BASEPRI, r1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	486b      	ldr	r0, [pc, #428]	; (8002d08 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002b5c:	f7ff fbc7 	bl	80022ee <_PreparePacket>
 8002b60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	643b      	str	r3, [r7, #64]	; 0x40
 8002b78:	e00b      	b.n	8002b92 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b80:	1c59      	adds	r1, r3, #1
 8002b82:	6479      	str	r1, [r7, #68]	; 0x44
 8002b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8e:	09db      	lsrs	r3, r3, #7
 8002b90:	643b      	str	r3, [r7, #64]	; 0x40
 8002b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b94:	2b7f      	cmp	r3, #127	; 0x7f
 8002b96:	d8f0      	bhi.n	8002b7a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	647a      	str	r2, [r7, #68]	; 0x44
 8002b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb2:	e00b      	b.n	8002bcc <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	09db      	lsrs	r3, r3, #7
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd0:	d8f0      	bhi.n	8002bb4 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	4619      	mov	r1, r3
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fb32 	bl	8002254 <_EncodeStr>
 8002bf0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002bf2:	2209      	movs	r2, #9
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	6938      	ldr	r0, [r7, #16]
 8002bf8:	f7ff fc52 	bl	80024a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b40      	ldr	r3, [pc, #256]	; (8002d0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
 8002c12:	e00b      	b.n	8002c2c <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	6379      	str	r1, [r7, #52]	; 0x34
 8002c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	09db      	lsrs	r3, r3, #7
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c30:	d8f0      	bhi.n	8002c14 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	637a      	str	r2, [r7, #52]	; 0x34
 8002c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4c:	e00b      	b.n	8002c66 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	1c59      	adds	r1, r3, #1
 8002c56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	09db      	lsrs	r3, r3, #7
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	2b7f      	cmp	r3, #127	; 0x7f
 8002c6a:	d8f0      	bhi.n	8002c4e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	e00b      	b.n	8002ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	6279      	str	r1, [r7, #36]	; 0x24
 8002c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	09db      	lsrs	r3, r3, #7
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ca4:	d8f0      	bhi.n	8002c88 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	627a      	str	r2, [r7, #36]	; 0x24
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e00b      	b.n	8002cd8 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	61f9      	str	r1, [r7, #28]
 8002cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	09db      	lsrs	r3, r3, #7
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b7f      	cmp	r3, #127	; 0x7f
 8002cdc:	d8f0      	bhi.n	8002cc0 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	61fa      	str	r2, [r7, #28]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002cee:	2215      	movs	r2, #21
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	6938      	ldr	r0, [r7, #16]
 8002cf4:	f7ff fbd4 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f383 8811 	msr	BASEPRI, r3
}
 8002cfe:	bf00      	nop
 8002d00:	3748      	adds	r7, #72	; 0x48
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20017254 	.word	0x20017254
 8002d0c:	20017224 	.word	0x20017224

08002d10 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002d26:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4798      	blx	r3
  }
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20017224 	.word	0x20017224

08002d38 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002d40:	f3ef 8311 	mrs	r3, BASEPRI
 8002d44:	f04f 0120 	mov.w	r1, #32
 8002d48:	f381 8811 	msr	BASEPRI, r1
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	480b      	ldr	r0, [pc, #44]	; (8002d7c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002d50:	f7ff facd 	bl	80022ee <_PreparePacket>
 8002d54:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	6938      	ldr	r0, [r7, #16]
 8002d5c:	f7ff fa7a 	bl	8002254 <_EncodeStr>
 8002d60:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002d62:	220e      	movs	r2, #14
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	6938      	ldr	r0, [r7, #16]
 8002d68:	f7ff fb9a 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f383 8811 	msr	BASEPRI, r3
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20017254 	.word	0x20017254

08002d80 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d014      	beq.n	8002dc2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4798      	blx	r3
 8002da0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002da4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002da6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	f04f 0400 	mov.w	r4, #0
 8002db2:	0013      	movs	r3, r2
 8002db4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002db6:	461a      	mov	r2, r3
 8002db8:	4601      	mov	r1, r0
 8002dba:	200d      	movs	r0, #13
 8002dbc:	f7ff fcec 	bl	8002798 <SEGGER_SYSVIEW_RecordU32x2>
 8002dc0:	e005      	b.n	8002dce <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	200c      	movs	r0, #12
 8002dca:	f7ff fca9 	bl	8002720 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd90      	pop	{r4, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20017224 	.word	0x20017224
 8002ddc:	e0001004 	.word	0xe0001004

08002de0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002de6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dea:	f04f 0120 	mov.w	r1, #32
 8002dee:	f381 8811 	msr	BASEPRI, r1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	4819      	ldr	r0, [pc, #100]	; (8002e5c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002df6:	f7ff fa7a 	bl	80022ee <_PreparePacket>
 8002dfa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e08:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e00b      	b.n	8002e2c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	6179      	str	r1, [r7, #20]
 8002e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	09db      	lsrs	r3, r3, #7
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e30:	d8f0      	bhi.n	8002e14 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	617a      	str	r2, [r7, #20]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002e42:	2202      	movs	r2, #2
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68b8      	ldr	r0, [r7, #8]
 8002e48:	f7ff fb2a 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f383 8811 	msr	BASEPRI, r3
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20017254 	.word	0x20017254
 8002e60:	e000ed04 	.word	0xe000ed04

08002e64 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e6e:	f04f 0120 	mov.w	r1, #32
 8002e72:	f381 8811 	msr	BASEPRI, r1
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	4807      	ldr	r0, [pc, #28]	; (8002e98 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002e7a:	f7ff fa38 	bl	80022ee <_PreparePacket>
 8002e7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002e80:	2203      	movs	r2, #3
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	6838      	ldr	r0, [r7, #0]
 8002e86:	f7ff fb0b 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f383 8811 	msr	BASEPRI, r3
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20017254 	.word	0x20017254

08002e9c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ea6:	f04f 0120 	mov.w	r1, #32
 8002eaa:	f381 8811 	msr	BASEPRI, r1
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002eb2:	f7ff fa1c 	bl	80022ee <_PreparePacket>
 8002eb6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002eb8:	2212      	movs	r2, #18
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	6838      	ldr	r0, [r7, #0]
 8002ebe:	f7ff faef 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f383 8811 	msr	BASEPRI, r3
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20017254 	.word	0x20017254

08002ed4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002eda:	f3ef 8311 	mrs	r3, BASEPRI
 8002ede:	f04f 0120 	mov.w	r1, #32
 8002ee2:	f381 8811 	msr	BASEPRI, r1
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	4807      	ldr	r0, [pc, #28]	; (8002f08 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002eea:	f7ff fa00 	bl	80022ee <_PreparePacket>
 8002eee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002ef0:	2211      	movs	r2, #17
 8002ef2:	6839      	ldr	r1, [r7, #0]
 8002ef4:	6838      	ldr	r0, [r7, #0]
 8002ef6:	f7ff fad3 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f383 8811 	msr	BASEPRI, r3
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20017254 	.word	0x20017254

08002f0c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002f14:	f3ef 8311 	mrs	r3, BASEPRI
 8002f18:	f04f 0120 	mov.w	r1, #32
 8002f1c:	f381 8811 	msr	BASEPRI, r1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	481a      	ldr	r0, [pc, #104]	; (8002f8c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002f24:	f7ff f9e3 	bl	80022ee <_PreparePacket>
 8002f28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	e00b      	b.n	8002f5c <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	61f9      	str	r1, [r7, #28]
 8002f4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	09db      	lsrs	r3, r3, #7
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f60:	d8f0      	bhi.n	8002f44 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	61fa      	str	r2, [r7, #28]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8002f72:	2208      	movs	r2, #8
 8002f74:	68f9      	ldr	r1, [r7, #12]
 8002f76:	6938      	ldr	r0, [r7, #16]
 8002f78:	f7ff fa92 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f383 8811 	msr	BASEPRI, r3
}
 8002f82:	bf00      	nop
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20017254 	.word	0x20017254
 8002f90:	20017224 	.word	0x20017224

08002f94 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8002fa0:	f04f 0120 	mov.w	r1, #32
 8002fa4:	f381 8811 	msr	BASEPRI, r1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	481a      	ldr	r0, [pc, #104]	; (8003014 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002fac:	f7ff f99f 	bl	80022ee <_PreparePacket>
 8002fb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e00b      	b.n	8002fe4 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	61f9      	str	r1, [r7, #28]
 8002fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	09db      	lsrs	r3, r3, #7
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe8:	d8f0      	bhi.n	8002fcc <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	68f9      	ldr	r1, [r7, #12]
 8002ffe:	6938      	ldr	r0, [r7, #16]
 8003000:	f7ff fa4e 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f383 8811 	msr	BASEPRI, r3
}
 800300a:	bf00      	nop
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20017254 	.word	0x20017254
 8003018:	20017224 	.word	0x20017224

0800301c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003024:	f3ef 8311 	mrs	r3, BASEPRI
 8003028:	f04f 0120 	mov.w	r1, #32
 800302c:	f381 8811 	msr	BASEPRI, r1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	481a      	ldr	r0, [pc, #104]	; (800309c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003034:	f7ff f95b 	bl	80022ee <_PreparePacket>
 8003038:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e00b      	b.n	800306c <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	61f9      	str	r1, [r7, #28]
 800305e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	09db      	lsrs	r3, r3, #7
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b7f      	cmp	r3, #127	; 0x7f
 8003070:	d8f0      	bhi.n	8003054 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	61fa      	str	r2, [r7, #28]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003082:	2206      	movs	r2, #6
 8003084:	68f9      	ldr	r1, [r7, #12]
 8003086:	6938      	ldr	r0, [r7, #16]
 8003088:	f7ff fa0a 	bl	80024a0 <_SendPacket>
  RECORD_END();
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f383 8811 	msr	BASEPRI, r3
}
 8003092:	bf00      	nop
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20017254 	.word	0x20017254
 80030a0:	20017224 	.word	0x20017224

080030a4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80030ae:	4b3b      	ldr	r3, [pc, #236]	; (800319c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d06d      	beq.n	8003192 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80030bc:	2300      	movs	r3, #0
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c0:	e008      	b.n	80030d4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	3301      	adds	r3, #1
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3f2      	bcc.n	80030c2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80030dc:	e000      	b.n	80030e0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80030de:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d055      	beq.n	8003192 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80030e6:	f3ef 8311 	mrs	r3, BASEPRI
 80030ea:	f04f 0120 	mov.w	r1, #32
 80030ee:	f381 8811 	msr	BASEPRI, r1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	482a      	ldr	r0, [pc, #168]	; (80031a0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80030f6:	f7ff f8fa 	bl	80022ee <_PreparePacket>
 80030fa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	623b      	str	r3, [r7, #32]
 8003108:	e00b      	b.n	8003122 <SEGGER_SYSVIEW_SendModule+0x7e>
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1c59      	adds	r1, r3, #1
 8003112:	6279      	str	r1, [r7, #36]	; 0x24
 8003114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	09db      	lsrs	r3, r3, #7
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	2b7f      	cmp	r3, #127	; 0x7f
 8003126:	d8f0      	bhi.n	800310a <SEGGER_SYSVIEW_SendModule+0x66>
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	627a      	str	r2, [r7, #36]	; 0x24
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e00b      	b.n	800315c <SEGGER_SYSVIEW_SendModule+0xb8>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	61f9      	str	r1, [r7, #28]
 800314e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	09db      	lsrs	r3, r3, #7
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b7f      	cmp	r3, #127	; 0x7f
 8003160:	d8f0      	bhi.n	8003144 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	61fa      	str	r2, [r7, #28]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	4619      	mov	r1, r3
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff f86a 	bl	8002254 <_EncodeStr>
 8003180:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003182:	2216      	movs	r2, #22
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	6938      	ldr	r0, [r7, #16]
 8003188:	f7ff f98a 	bl	80024a0 <_SendPacket>
      RECORD_END();
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003192:	bf00      	nop
 8003194:	3730      	adds	r7, #48	; 0x30
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2001724c 	.word	0x2001724c
 80031a0:	20017254 	.word	0x20017254

080031a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00f      	beq.n	80031d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f2      	bne.n	80031b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	2001724c 	.word	0x2001724c

080031e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80031e6:	f3ef 8311 	mrs	r3, BASEPRI
 80031ea:	f04f 0120 	mov.w	r1, #32
 80031ee:	f381 8811 	msr	BASEPRI, r1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	4817      	ldr	r0, [pc, #92]	; (8003254 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80031f6:	f7ff f87a 	bl	80022ee <_PreparePacket>
 80031fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e00b      	b.n	8003224 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	b2da      	uxtb	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	6179      	str	r1, [r7, #20]
 8003216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	09db      	lsrs	r3, r3, #7
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b7f      	cmp	r3, #127	; 0x7f
 8003228:	d8f0      	bhi.n	800320c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	617a      	str	r2, [r7, #20]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800323a:	221b      	movs	r2, #27
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68b8      	ldr	r0, [r7, #8]
 8003240:	f7ff f92e 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f383 8811 	msr	BASEPRI, r3
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20017254 	.word	0x20017254
 8003258:	20017250 	.word	0x20017250

0800325c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003264:	f3ef 8311 	mrs	r3, BASEPRI
 8003268:	f04f 0120 	mov.w	r1, #32
 800326c:	f381 8811 	msr	BASEPRI, r1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	4827      	ldr	r0, [pc, #156]	; (8003310 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003274:	f7ff f83b 	bl	80022ee <_PreparePacket>
 8003278:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	6938      	ldr	r0, [r7, #16]
 8003280:	f7fe ffe8 	bl	8002254 <_EncodeStr>
 8003284:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
 800328a:	2301      	movs	r3, #1
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	e00b      	b.n	80032a8 <SEGGER_SYSVIEW_Warn+0x4c>
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	6279      	str	r1, [r7, #36]	; 0x24
 800329a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	09db      	lsrs	r3, r3, #7
 80032a6:	623b      	str	r3, [r7, #32]
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2b7f      	cmp	r3, #127	; 0x7f
 80032ac:	d8f0      	bhi.n	8003290 <SEGGER_SYSVIEW_Warn+0x34>
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	627a      	str	r2, [r7, #36]	; 0x24
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e00b      	b.n	80032e0 <SEGGER_SYSVIEW_Warn+0x84>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	1c59      	adds	r1, r3, #1
 80032d0:	61f9      	str	r1, [r7, #28]
 80032d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	09db      	lsrs	r3, r3, #7
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b7f      	cmp	r3, #127	; 0x7f
 80032e4:	d8f0      	bhi.n	80032c8 <SEGGER_SYSVIEW_Warn+0x6c>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	61fa      	str	r2, [r7, #28]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80032f6:	221a      	movs	r2, #26
 80032f8:	68f9      	ldr	r1, [r7, #12]
 80032fa:	6938      	ldr	r0, [r7, #16]
 80032fc:	f7ff f8d0 	bl	80024a0 <_SendPacket>
  RECORD_END();
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f383 8811 	msr	BASEPRI, r3
}
 8003306:	bf00      	nop
 8003308:	3728      	adds	r7, #40	; 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20017254 	.word	0x20017254

08003314 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <NVIC_EnableIRQ+0x30>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da0b      	bge.n	8003374 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	; (8003394 <NVIC_SetPriority+0x4c>)
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	3b04      	subs	r3, #4
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003372:	e009      	b.n	8003388 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	4907      	ldr	r1, [pc, #28]	; (8003398 <NVIC_SetPriority+0x50>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00
 8003398:	e000e100 	.word	0xe000e100

0800339c <main>:

//global variables
uint8_t button_status_flag = NOT_PRESSED;

int main(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af02      	add	r7, sp, #8
	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL for SEGGER Systemview Timestamp maintaining
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <main+0x40>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <main+0x40>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6013      	str	r3, [r2, #0]

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 80033ae:	f7fd f8a1 	bl	80004f4 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 80033b2:	f000 f92b 	bl	800360c <SystemCoreClockUpdate>

	prvSetupHardware();
 80033b6:	f000 f83f 	bl	8003438 <prvSetupHardware>

	//start recording
	SEGGER_SYSVIEW_Conf();
 80033ba:	f7fe fbef 	bl	8001b9c <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80033be:	f7ff fa45 	bl	800284c <SEGGER_SYSVIEW_Start>

	//let's create led_task
	xTaskCreate(led_task_handler, "LED-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80033c2:	2300      	movs	r3, #0
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2301      	movs	r3, #1
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	2282      	movs	r2, #130	; 0x82
 80033ce:	4904      	ldr	r1, [pc, #16]	; (80033e0 <main+0x44>)
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <main+0x48>)
 80033d2:	f7fd fb66 	bl	8000aa2 <xTaskCreate>

	//start the scheduler
	vTaskStartScheduler();
 80033d6:	f7fd fcc5 	bl	8000d64 <vTaskStartScheduler>

	for(;;);
 80033da:	e7fe      	b.n	80033da <main+0x3e>
 80033dc:	e0001000 	.word	0xe0001000
 80033e0:	08003a00 	.word	0x08003a00
 80033e4:	080033e9 	.word	0x080033e9

080033e8 <led_task_handler>:
}

void led_task_handler(void *params)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	while(1){
		if(button_status_flag == PRESSED)
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <led_task_handler+0x28>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <led_task_handler+0x1c>
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);		//turn on led
 80033f8:	2201      	movs	r2, #1
 80033fa:	2101      	movs	r1, #1
 80033fc:	4805      	ldr	r0, [pc, #20]	; (8003414 <led_task_handler+0x2c>)
 80033fe:	f7fd f817 	bl	8000430 <GPIO_WriteBit>
 8003402:	e7f5      	b.n	80033f0 <led_task_handler+0x8>
		else
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);	//turn off led
 8003404:	2200      	movs	r2, #0
 8003406:	2101      	movs	r1, #1
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <led_task_handler+0x2c>)
 800340a:	f7fd f811 	bl	8000430 <GPIO_WriteBit>
		if(button_status_flag == PRESSED)
 800340e:	e7ef      	b.n	80033f0 <led_task_handler+0x8>
 8003410:	20017337 	.word	0x20017337
 8003414:	40020400 	.word	0x40020400

08003418 <button_handler>:
	}

}

void button_handler(void )
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
	button_status_flag ^= 1;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <button_handler+0x1c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	f083 0301 	eor.w	r3, r3, #1
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b03      	ldr	r3, [pc, #12]	; (8003434 <button_handler+0x1c>)
 8003428:	701a      	strb	r2, [r3, #0]
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	20017337 	.word	0x20017337

08003438 <prvSetupHardware>:

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	//Setup led and button
	prvSetupGpio();
 800343c:	f000 f852 	bl	80034e4 <prvSetupGpio>

	//Setup UART3
	prvSetupUart();
 8003440:	f000 f802 	bl	8003448 <prvSetupUart>

}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvSetupUart>:
	}

}

static void prvSetupUart(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 800344e:	2101      	movs	r1, #1
 8003450:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003454:	f7fd f94e 	bl	80006f4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8003458:	2101      	movs	r1, #1
 800345a:	2008      	movs	r0, #8
 800345c:	f7fd f92a 	bl	80006b4 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 8003460:	f107 0310 	add.w	r3, r7, #16
 8003464:	2208      	movs	r2, #8
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fa49 	bl	8003900 <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 800346e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003472:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 8003474:	2302      	movs	r3, #2
 8003476:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 800347c:	f107 0310 	add.w	r3, r7, #16
 8003480:	4619      	mov	r1, r3
 8003482:	4816      	ldr	r0, [pc, #88]	; (80034dc <prvSetupUart+0x94>)
 8003484:	f7fc ff46 	bl	8000314 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 8003488:	2207      	movs	r2, #7
 800348a:	2108      	movs	r1, #8
 800348c:	4813      	ldr	r0, [pc, #76]	; (80034dc <prvSetupUart+0x94>)
 800348e:	f7fc ffe7 	bl	8000460 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 8003492:	2207      	movs	r2, #7
 8003494:	2109      	movs	r1, #9
 8003496:	4811      	ldr	r0, [pc, #68]	; (80034dc <prvSetupUart+0x94>)
 8003498:	f7fc ffe2 	bl	8000460 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 800349c:	463b      	mov	r3, r7
 800349e:	2210      	movs	r2, #16
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fa2c 	bl	8003900 <memset>

	uart3_init.USART_BaudRate = 115200;
 80034a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80034ac:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80034ae:	2300      	movs	r3, #0
 80034b0:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80034b2:	230c      	movs	r3, #12
 80034b4:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 80034b6:	2300      	movs	r3, #0
 80034b8:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 80034be:	2300      	movs	r3, #0
 80034c0:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 80034c2:	463b      	mov	r3, r7
 80034c4:	4619      	mov	r1, r3
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <prvSetupUart+0x98>)
 80034c8:	f7fd f996 	bl	80007f8 <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 80034cc:	2101      	movs	r1, #1
 80034ce:	4804      	ldr	r0, [pc, #16]	; (80034e0 <prvSetupUart+0x98>)
 80034d0:	f7fd fa4c 	bl	800096c <USART_Cmd>

}
 80034d4:	bf00      	nop
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40020c00 	.word	0x40020c00
 80034e0:	40004800 	.word	0x40004800

080034e4 <prvSetupGpio>:

void prvSetupGpio(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80034ea:	2101      	movs	r1, #1
 80034ec:	2002      	movs	r0, #2
 80034ee:	f7fd f8e1 	bl	80006b4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80034f2:	2101      	movs	r1, #1
 80034f4:	2004      	movs	r0, #4
 80034f6:	f7fd f8dd 	bl	80006b4 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80034fa:	2101      	movs	r1, #1
 80034fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003500:	f7fd f918 	bl	8000734 <RCC_APB2PeriphClockCmd>

	led_init.GPIO_Pin = GPIO_Pin_0;
 8003504:	2301      	movs	r3, #1
 8003506:	613b      	str	r3, [r7, #16]
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 8003508:	2301      	movs	r3, #1
 800350a:	753b      	strb	r3, [r7, #20]
	led_init.GPIO_OType = GPIO_OType_PP;
 800350c:	2300      	movs	r3, #0
 800350e:	75bb      	strb	r3, [r7, #22]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8003514:	2300      	movs	r3, #0
 8003516:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &led_init);
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	4619      	mov	r1, r3
 800351e:	4817      	ldr	r0, [pc, #92]	; (800357c <prvSetupGpio+0x98>)
 8003520:	f7fc fef8 	bl	8000314 <GPIO_Init>

	button_init.GPIO_Pin = GPIO_Pin_13;
 8003524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003528:	60bb      	str	r3, [r7, #8]
	button_init.GPIO_Mode = GPIO_Mode_IN;
 800352a:	2300      	movs	r3, #0
 800352c:	733b      	strb	r3, [r7, #12]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 8003532:	2300      	movs	r3, #0
 8003534:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOC, &button_init);
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	4619      	mov	r1, r3
 800353c:	4810      	ldr	r0, [pc, #64]	; (8003580 <prvSetupGpio+0x9c>)
 800353e:	f7fc fee9 	bl	8000314 <GPIO_Init>

	// interrupt configuration for the button (PC13)
	//1. system configuration for exti line (SYSCFG settings)
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 8003542:	210d      	movs	r1, #13
 8003544:	2002      	movs	r0, #2
 8003546:	f7fd f915 	bl	8000774 <SYSCFG_EXTILineConfig>

	//2. EXTI line configuration
	EXTI_InitTypeDef exti_init;

	exti_init.EXTI_Line = EXTI_Line13;
 800354a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800354e:	603b      	str	r3, [r7, #0]
	exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
 8003550:	2300      	movs	r3, #0
 8003552:	713b      	strb	r3, [r7, #4]
	exti_init.EXTI_Trigger = EXTI_Trigger_Rising;
 8003554:	2308      	movs	r3, #8
 8003556:	717b      	strb	r3, [r7, #5]
	exti_init.EXTI_LineCmd = ENABLE;
 8003558:	2301      	movs	r3, #1
 800355a:	71bb      	strb	r3, [r7, #6]

	EXTI_Init(&exti_init);
 800355c:	463b      	mov	r3, r7
 800355e:	4618      	mov	r0, r3
 8003560:	f7fc fe56 	bl	8000210 <EXTI_Init>

	//3. NVIC settings (IRQ settings for the selected line(13))
	NVIC_SetPriority(EXTI15_10_IRQn, 5);
 8003564:	2105      	movs	r1, #5
 8003566:	2028      	movs	r0, #40	; 0x28
 8003568:	f7ff feee 	bl	8003348 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800356c:	2028      	movs	r0, #40	; 0x28
 800356e:	f7ff fed1 	bl	8003314 <NVIC_EnableIRQ>

}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40020400 	.word	0x40020400
 8003580:	40020800 	.word	0x40020800

08003584 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8003588:	f7ff fc2a 	bl	8002de0 <SEGGER_SYSVIEW_RecordEnterISR>

	//1. clear the interrupt pending bit of the EXTI line(13)
	EXTI_ClearITPendingBit(EXTI_Line13);
 800358c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003590:	f7fc feb0 	bl	80002f4 <EXTI_ClearITPendingBit>

	button_handler();
 8003594:	f7ff ff40 	bl	8003418 <button_handler>

	traceISR_EXIT();
 8003598:	f7ff fc64 	bl	8002e64 <SEGGER_SYSVIEW_RecordExitISR>

}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}

080035a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <SystemInit+0x60>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <SystemInit+0x60>)
 80035ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <SystemInit+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <SystemInit+0x64>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <SystemInit+0x64>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <SystemInit+0x64>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <SystemInit+0x64>)
 80035cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <SystemInit+0x64>)
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <SystemInit+0x68>)
 80035da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <SystemInit+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <SystemInit+0x64>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <SystemInit+0x64>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80035ee:	f000 f889 	bl	8003704 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035f2:	4b03      	ldr	r3, [pc, #12]	; (8003600 <SystemInit+0x60>)
 80035f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035f8:	609a      	str	r2, [r3, #8]
#endif
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	e000ed00 	.word	0xe000ed00
 8003604:	40023800 	.word	0x40023800
 8003608:	24003010 	.word	0x24003010

0800360c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	2302      	movs	r3, #2
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	2302      	movs	r3, #2
 8003624:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003626:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <SystemCoreClockUpdate+0xe4>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b04      	cmp	r3, #4
 8003634:	d007      	beq.n	8003646 <SystemCoreClockUpdate+0x3a>
 8003636:	2b08      	cmp	r3, #8
 8003638:	d009      	beq.n	800364e <SystemCoreClockUpdate+0x42>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d13d      	bne.n	80036ba <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <SystemCoreClockUpdate+0xe8>)
 8003640:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <SystemCoreClockUpdate+0xec>)
 8003642:	601a      	str	r2, [r3, #0]
      break;
 8003644:	e03d      	b.n	80036c2 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003646:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <SystemCoreClockUpdate+0xe8>)
 8003648:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <SystemCoreClockUpdate+0xf0>)
 800364a:	601a      	str	r2, [r3, #0]
      break;
 800364c:	e039      	b.n	80036c2 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800364e:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <SystemCoreClockUpdate+0xe4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0d9b      	lsrs	r3, r3, #22
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800365a:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <SystemCoreClockUpdate+0xe4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003662:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800366a:	4a24      	ldr	r2, [pc, #144]	; (80036fc <SystemCoreClockUpdate+0xf0>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <SystemCoreClockUpdate+0xe4>)
 8003674:	6852      	ldr	r2, [r2, #4]
 8003676:	0992      	lsrs	r2, r2, #6
 8003678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367c:	fb02 f303 	mul.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	e00b      	b.n	800369c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <SystemCoreClockUpdate+0xec>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <SystemCoreClockUpdate+0xe4>)
 800368e:	6852      	ldr	r2, [r2, #4]
 8003690:	0992      	lsrs	r2, r2, #6
 8003692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <SystemCoreClockUpdate+0xe4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <SystemCoreClockUpdate+0xe8>)
 80036b6:	6013      	str	r3, [r2, #0]
      break;
 80036b8:	e003      	b.n	80036c2 <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <SystemCoreClockUpdate+0xe8>)
 80036bc:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <SystemCoreClockUpdate+0xec>)
 80036be:	601a      	str	r2, [r3, #0]
      break;
 80036c0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <SystemCoreClockUpdate+0xe4>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <SystemCoreClockUpdate+0xf4>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <SystemCoreClockUpdate+0xe8>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <SystemCoreClockUpdate+0xe8>)
 80036e0:	6013      	str	r3, [r2, #0]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	20000014 	.word	0x20000014
 80036f8:	00f42400 	.word	0x00f42400
 80036fc:	017d7840 	.word	0x017d7840
 8003700:	20000018 	.word	0x20000018

08003704 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	2300      	movs	r3, #0
 8003710:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003712:	4b43      	ldr	r3, [pc, #268]	; (8003820 <SetSysClock+0x11c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a42      	ldr	r2, [pc, #264]	; (8003820 <SetSysClock+0x11c>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800371e:	4b40      	ldr	r3, [pc, #256]	; (8003820 <SetSysClock+0x11c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3301      	adds	r3, #1
 800372c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <SetSysClock+0x38>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800373a:	d1f0      	bne.n	800371e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800373c:	4b38      	ldr	r3, [pc, #224]	; (8003820 <SetSysClock+0x11c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003748:	2301      	movs	r3, #1
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	e001      	b.n	8003752 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800374e:	2300      	movs	r3, #0
 8003750:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d15c      	bne.n	8003812 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <SetSysClock+0x11c>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4a30      	ldr	r2, [pc, #192]	; (8003820 <SetSysClock+0x11c>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003764:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <SetSysClock+0x120>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <SetSysClock+0x120>)
 800376a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <SetSysClock+0x11c>)
 8003772:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <SetSysClock+0x11c>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <SetSysClock+0x11c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a28      	ldr	r2, [pc, #160]	; (8003820 <SetSysClock+0x11c>)
 800377e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003782:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <SetSysClock+0x11c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a25      	ldr	r2, [pc, #148]	; (8003820 <SetSysClock+0x11c>)
 800378a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800378e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003790:	4b23      	ldr	r3, [pc, #140]	; (8003820 <SetSysClock+0x11c>)
 8003792:	4a25      	ldr	r2, [pc, #148]	; (8003828 <SetSysClock+0x124>)
 8003794:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <SetSysClock+0x11c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <SetSysClock+0x11c>)
 800379c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80037a2:	bf00      	nop
 80037a4:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <SetSysClock+0x11c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80037b0:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <SetSysClock+0x120>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <SetSysClock+0x120>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80037bc:	bf00      	nop
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <SetSysClock+0x120>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f9      	beq.n	80037be <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <SetSysClock+0x120>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <SetSysClock+0x120>)
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80037d6:	bf00      	nop
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <SetSysClock+0x120>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f9      	beq.n	80037d8 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <SetSysClock+0x128>)
 80037e6:	f240 7205 	movw	r2, #1797	; 0x705
 80037ea:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <SetSysClock+0x11c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <SetSysClock+0x11c>)
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <SetSysClock+0x11c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a08      	ldr	r2, [pc, #32]	; (8003820 <SetSysClock+0x11c>)
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003804:	bf00      	nop
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <SetSysClock+0x11c>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b08      	cmp	r3, #8
 8003810:	d1f9      	bne.n	8003806 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40007000 	.word	0x40007000
 8003828:	07405a19 	.word	0x07405a19
 800382c:	40023c00 	.word	0x40023c00

08003830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003830:	480d      	ldr	r0, [pc, #52]	; (8003868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003832:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <LoopForever+0x6>)
  ldr r1, =_edata
 8003836:	490e      	ldr	r1, [pc, #56]	; (8003870 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003838:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <LoopForever+0xe>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800383c:	e002      	b.n	8003844 <LoopCopyDataInit>

0800383e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003842:	3304      	adds	r3, #4

08003844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003848:	d3f9      	bcc.n	800383e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <LoopForever+0x12>)
  ldr r4, =_ebss
 800384c:	4c0b      	ldr	r4, [pc, #44]	; (800387c <LoopForever+0x16>)
  movs r3, #0
 800384e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003850:	e001      	b.n	8003856 <LoopFillZerobss>

08003852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003854:	3204      	adds	r2, #4

08003856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003858:	d3fb      	bcc.n	8003852 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800385a:	f7ff fea1 	bl	80035a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800385e:	f000 f811 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003862:	f7ff fd9b 	bl	800339c <main>

08003866 <LoopForever>:

LoopForever:
    b LoopForever
 8003866:	e7fe      	b.n	8003866 <LoopForever>
  ldr   r0, =_estack
 8003868:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800386c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003870:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003874:	08003a28 	.word	0x08003a28
  ldr r2, =_sbss
 8003878:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800387c:	200173e0 	.word	0x200173e0

08003880 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003880:	e7fe      	b.n	8003880 <ADC_IRQHandler>
	...

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4e0d      	ldr	r6, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1ba4      	subs	r4, r4, r6
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2500      	movs	r5, #0
 8003890:	42a5      	cmp	r5, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4e0b      	ldr	r6, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f000 f83a 	bl	8003910 <_init>
 800389c:	1ba4      	subs	r4, r4, r6
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2500      	movs	r5, #0
 80038a2:	42a5      	cmp	r5, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ac:	4798      	blx	r3
 80038ae:	3501      	adds	r5, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038b6:	4798      	blx	r3
 80038b8:	3501      	adds	r5, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	08003a20 	.word	0x08003a20
 80038c0:	08003a20 	.word	0x08003a20
 80038c4:	08003a20 	.word	0x08003a20
 80038c8:	08003a24 	.word	0x08003a24

080038cc <memcmp>:
 80038cc:	b530      	push	{r4, r5, lr}
 80038ce:	2400      	movs	r4, #0
 80038d0:	42a2      	cmp	r2, r4
 80038d2:	d101      	bne.n	80038d8 <memcmp+0xc>
 80038d4:	2000      	movs	r0, #0
 80038d6:	e007      	b.n	80038e8 <memcmp+0x1c>
 80038d8:	5d03      	ldrb	r3, [r0, r4]
 80038da:	3401      	adds	r4, #1
 80038dc:	190d      	adds	r5, r1, r4
 80038de:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80038e2:	42ab      	cmp	r3, r5
 80038e4:	d0f4      	beq.n	80038d0 <memcmp+0x4>
 80038e6:	1b58      	subs	r0, r3, r5
 80038e8:	bd30      	pop	{r4, r5, pc}

080038ea <memcpy>:
 80038ea:	b510      	push	{r4, lr}
 80038ec:	1e43      	subs	r3, r0, #1
 80038ee:	440a      	add	r2, r1
 80038f0:	4291      	cmp	r1, r2
 80038f2:	d100      	bne.n	80038f6 <memcpy+0xc>
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038fe:	e7f7      	b.n	80038f0 <memcpy+0x6>

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <_init>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr

0800391c <_fini>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr
