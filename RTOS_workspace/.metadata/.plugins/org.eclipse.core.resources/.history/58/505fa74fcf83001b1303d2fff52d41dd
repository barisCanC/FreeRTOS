/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/
#include<stdio.h>
#include<string.h>
#include<stdint.h>
#include "stm32f4xx.h"

#include"FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"			//sw timers in order to toggle LED with a fixed interval


#define TRUE 1
#define FALSE 0

#define NOT_PRESSED  FALSE
#define PRESSED  TRUE

//global space for some variables
char usr_msg[250] = {0};

//task handles
TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;
TaskHandle_t xTaskHandle3 = NULL;
TaskHandle_t xTaskHandle4 = NULL;

//queue handles
QueueHandle_t command_queue = NULL;
QueueHandle_t uart_write_queue = NULL;

//sw timer handler
TimerHandle_t led_timer_handle = NULL;

//prototypes of command helper functions
void make_led_on(void);
void make_led_off(void);
void led_toggle_start(uint32_t);
void led_toggle_stop(void);
void read_led_status(char *task_msg);
void read_rtc_info(char *task_msg);
void print_error_message(char *task_msg);

//Tasks prototypes
void vTask1_menu_display (void *params);
void vTask2_cmd_handling (void *params);
void vTask3_cmd_processing (void *params);
void vTask4_uart_write (void *params);

//sw timer callback func prototype
void led_toggle(TimerHandle_t xTimer);

//function prototypes
static void prvSetupHardware(void);
static void prvSetupUart(void);
void prvSetupGpio(void);
void printmsg(char *msg); 	//msg: message
void rtos_delay(uint32_t );
uint8_t getCommandCode(void);
void getArguments(uint8_t *);


//command structure
typedef struct APP_CMD{
	uint8_t COMMAND_NUM;
	uint8_t COMMAND_ARGS[10];
}APP_CMD_t;

uint8_t command_buffer[20];
uint8_t command_len = 0;

char menu[]={"\
\r\nLED_ON             ----> 1 \
\r\nLED_OFF            ----> 2 \
\r\nLED_TOGGLE         ----> 3 \
\r\nLED_TOGGLE_OFF     ----> 4 \
\r\nLED_READ_STATUS    ----> 5 \
\r\nRTC_PRINT_DATETIME ----> 6 \
\r\nEXIT_APP           ----> 0 \
\r\nType your option here : "};


#define LED_ON_COMMAND 					1
#define LED_OFF_COMMAND 				2
#define LED_TOGGLE_COMMAND 				3
#define LED_TOGGLE_STOP_COMMAND 		4
#define LED_READ_STATUS_COMMAND 		5
#define RTC_READ_DATE_TIME_COMMAND		6

int main(void)
{
	DWT ->CTRL |= (1 << 0); 	// Enable the cycle counting(CYCCNT) in DWT_CTRL for SEGGER Systemview Timestamp maintaining

	// Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();

	// Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();

	prvSetupHardware();

	sprintf(usr_msg, "\r\nThis is Queue Command Processing Demo\r\n");
	printmsg(usr_msg);

	// start recording
	SEGGER_SYSVIEW_Conf();
	SEGGER_SYSVIEW_Start();

	//lets create command and write queues
	command_queue = xQueueCreate(10, sizeof(APP_CMD_t *));
	uart_write_queue = xQueueCreate(10, sizeof(char *));

	if(command_queue && uart_write_queue){
		// lets create 4 tasks
		xTaskCreate(vTask1_menu_display, "TASK1-MENU", 500, NULL, 1, &xTaskHandle1 );

		xTaskCreate(vTask2_cmd_handling, "TASK2-CMD-HANDLING", 500, NULL, 2, &xTaskHandle2 );

		xTaskCreate(vTask3_cmd_processing, "TASK3-CMD-PROCESSING", 500, NULL, 2, &xTaskHandle3 );

		xTaskCreate(vTask4_uart_write, "TASK4-UART-WRITE", 500, NULL, 2, &xTaskHandle4 );

		// start the scheduler
		vTaskStartScheduler();

	}
	else{
		sprintf(usr_msg, "Queue creation failed\r\n");
		printmsg(usr_msg);
	}
	for(;;);
}

//Task handler implementations
void vTask1_menu_display(void *params)
{
	char * pData = menu;

	while(1){
		xQueueSend(uart_write_queue, &pData, portMAX_DELAY);

		//wait here until smn notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
	}
}

void vTask2_cmd_handling(void *params)
{
	uint8_t command_code = 0;
	APP_CMD_t * new_cmd;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);		// should be blocked

		command_code = getCommandCode();

		new_cmd = (APP_CMD_t *)pvPortMalloc(sizeof(APP_CMD_t));
		new_cmd->COMMAND_NUM = command_code;
		getArguments(new_cmd->COMMAND_ARGS);

		//send the command to the command queue
		xQueueSend(command_queue, &new_cmd, portMAX_DELAY);
	}
}

void vTask3_cmd_processing(void *params)
{
	APP_CMD_t * new_cmd;
	char task_msg[50];

	uint32_t toggle_duration = pdMS_TO_TICKS(500);

	while(1){
		xQueueReceive(command_queue, (void *)&new_cmd, portMAX_DELAY);		//blocked

		/*switch(new_cmd->COMMAND_NUM){
			case LED_ON_COMMAND:
				make_led_on();
				break;
			case LED_OFF_COMMAND:
				make_led_off();
				break;
			case LED_TOGGLE_COMMAND:
				led_toggle_start();		//by taking the help of sw timers
				break;
			case LED_TOGGLE_STOP_COMMAND:
				led_toggle_stop();
				break;
			case LED_READ_STATUS_COMMAND:
				read_led_status(task_msg);
				break;
			case RTC_READ_DATE_TIME_COMMAND:
				read_rtc_info(task_msg);
				break;
			default:
				print_error_message(task_msg);*/
		if(new_cmd->COMMAND_NUM == LED_ON_COMMAND)
				{
					make_led_on();
				}
				else if(new_cmd->COMMAND_NUM == LED_OFF_COMMAND)
				{
					make_led_off();
				}
				else if(new_cmd->COMMAND_NUM == LED_TOGGLE_COMMAND)
				{
					led_toggle_start(toggle_duration);		//by taking the help of sw timers
				}
				else if(new_cmd->COMMAND_NUM == LED_TOGGLE_STOP_COMMAND)
				{
					led_toggle_stop();
				}
				else if(new_cmd->COMMAND_NUM == LED_READ_STATUS_COMMAND)
				{
					read_led_status(task_msg);
				}
				else if(new_cmd->COMMAND_NUM == RTC_READ_DATE_TIME_COMMAND )
				{
					read_rtc_info(task_msg);
				}else
				{
					print_error_message(task_msg);
				}




	}
}

void vTask4_uart_write(void *params)
{
	char *pData = NULL;
	while(1){
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
		printmsg(pData);
	}
}

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
	//Setup led and button
	prvSetupGpio();

	//Setup UART3
	prvSetupUart();

}

void printmsg(char *msg)
{
	for(uint32_t i = 0; i < strlen(msg); i++){
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != SET);
		USART_SendData(USART3, msg[i]);
	}

}

static void prvSetupUart(void)
{
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;

	GPIO_Init(GPIOD, &gpio_uart_pins);

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));

	uart3_init.USART_BaudRate = 115200;
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	uart3_init.USART_Parity = USART_Parity_No;
	uart3_init.USART_StopBits = USART_StopBits_1;
	uart3_init.USART_WordLength = USART_WordLength_8b;

	USART_Init(USART3 , &uart3_init);

	//lets enable the UART byte  reception interrupt
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);

	//set the priority in NVIC for the UART3 interrupt
	NVIC_SetPriority(USART3_IRQn, 5);

	//enable the UART3 IRQ in the NVIC
	NVIC_EnableIRQ(USART3_IRQn);

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);

}

void prvSetupGpio(void)
{
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	led_init.GPIO_Pin = GPIO_Pin_0;
	led_init.GPIO_Mode = GPIO_Mode_OUT;
	led_init.GPIO_OType = GPIO_OType_PP;
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	led_init.GPIO_Speed = GPIO_Low_Speed;

	GPIO_Init(GPIOB, &led_init);

	button_init.GPIO_Pin = GPIO_Pin_13;
	button_init.GPIO_Mode = GPIO_Mode_IN;
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	button_init.GPIO_Speed = GPIO_Low_Speed;

	GPIO_Init(GPIOC, &button_init);

}

void rtos_delay(uint32_t delay_in_ms)
{
	uint32_t current_tick_count = xTaskGetTickCount();

	//convertion ms to # of ticks
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;

	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));

}

void USART3_IRQHandler(void)
{
	uint16_t data_byte;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	if(USART_GetFlagStatus(USART3, USART_FLAG_RXNE)){
		//a data byte is received from the user
		data_byte = USART_ReceiveData(USART3);

		command_buffer[command_len++] = data_byte & 0x0ff;

		if(data_byte == '\r'){
			//user finished entering data

			//reset command_len variable
			command_len = 0;

			//lets notify command handling task
			xTaskNotifyFromISR(xTaskHandle2, 0, eNoAction, &xHigherPriorityTaskWoken);

			xTaskNotifyFromISR(xTaskHandle1, 0, eNoAction, &xHigherPriorityTaskWoken);
		}

		// if the above freertos apis wake up any higher priority task, then yield the processor to the
		//higher priority task which is just woken up.

		if(xHigherPriorityTaskWoken)
		{
			taskYIELD();
		}
	}
}

uint8_t getCommandCode(void)
{
	return command_buffer[0] - 48;
}

void getArguments(uint8_t *buffer)
{

}

void make_led_on(void)
{
	GPIO_SetBits(GPIOB, GPIO_Pin_0);
}

void make_led_off(void)
{
	GPIO_ResetBits(GPIOB, GPIO_Pin_0);
}

void led_toggle(TimerHandle_t xTimer)
{
	GPIO_ToggleBits(GPIOB, GPIO_Pin_0);
}

void led_toggle_start(uint32_t duration)			//by taking the help of sw timers
{
	//lets create sw timer
	led_timer_handle = xTimerCreate("LED-TIMER", duration, pdTRUE, NULL, pxCallbackFunction, led_toggle);

	//start the sw timer
	xTimerStart(led_timer_handle, portMAX_DELAY);
}

void led_toggle_stop(void)
{
	xTimerStop(led_timer_handle, portMAX_DELAY);
}


void read_led_status(char *task_msg)
{
	sprintf(task_msg, "\r\nLED status is : %d\r\n", GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0));
	xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
}

void read_rtc_info(char *task_msg)
{


}

void print_error_message(char *task_msg)
{
	sprintf(task_msg, "\r\nInvalid command received.\r\n");
	xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
}











