
STM32_FreeRTOS_Led_and_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bf4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001dc4  08001dc4  00011dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de4  08001de4  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08001de4  08001de4  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de4  08001de4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de4  08001de4  00011de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001de8  08001de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08001dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d44  20000028  08001e14  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d6c  08001e14  00022d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074ff  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c1  00000000  00000000  00027557  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  00028818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  00028f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000018c1  00000000  00000000  00029550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005cdb  00000000  00000000  0002ae11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f270  00000000  00000000  00030aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009fd5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca8  00000000  00000000  0009fdd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001dac 	.word	0x08001dac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08001dac 	.word	0x08001dac

08000210 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	e076      	b.n	800031a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800022c:	2201      	movs	r2, #1
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	fa02 f303 	lsl.w	r3, r2, r3
 8000234:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	693a      	ldr	r2, [r7, #16]
 800023c:	4013      	ands	r3, r2
 800023e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	429a      	cmp	r2, r3
 8000246:	d165      	bne.n	8000314 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	2103      	movs	r1, #3
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43db      	mvns	r3, r3
 8000258:	401a      	ands	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	791b      	ldrb	r3, [r3, #4]
 8000266:	4619      	mov	r1, r3
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	431a      	orrs	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	791b      	ldrb	r3, [r3, #4]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d003      	beq.n	8000286 <GPIO_Init+0x76>
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	d12e      	bne.n	80002e4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	689a      	ldr	r2, [r3, #8]
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	2103      	movs	r1, #3
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	401a      	ands	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	795b      	ldrb	r3, [r3, #5]
 80002a4:	4619      	mov	r1, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	685a      	ldr	r2, [r3, #4]
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	2301      	movs	r3, #1
 80002c0:	408b      	lsls	r3, r1
 80002c2:	43db      	mvns	r3, r3
 80002c4:	401a      	ands	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	7992      	ldrb	r2, [r2, #6]
 80002d2:	4611      	mov	r1, r2
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	b292      	uxth	r2, r2
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	b292      	uxth	r2, r2
 80002de:	431a      	orrs	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	2103      	movs	r1, #3
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	43db      	mvns	r3, r3
 80002f6:	401a      	ands	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	68da      	ldr	r2, [r3, #12]
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	79db      	ldrb	r3, [r3, #7]
 8000304:	4619      	mov	r1, r3
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	431a      	orrs	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	3301      	adds	r3, #1
 8000318:	617b      	str	r3, [r7, #20]
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	d985      	bls.n	800022c <GPIO_Init+0x1c>
    }
  }
}
 8000320:	bf00      	nop
 8000322:	371c      	adds	r7, #28
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	691a      	ldr	r2, [r3, #16]
 8000340:	887b      	ldrh	r3, [r7, #2]
 8000342:	4013      	ands	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	d002      	beq.n	800034e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000348:	2301      	movs	r3, #1
 800034a:	73fb      	strb	r3, [r7, #15]
 800034c:	e001      	b.n	8000352 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800034e:	2300      	movs	r3, #0
 8000350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000352:	7bfb      	ldrb	r3, [r7, #15]
}
 8000354:	4618      	mov	r0, r3
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	807b      	strh	r3, [r7, #2]
 800036c:	4613      	mov	r3, r2
 800036e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000370:	787b      	ldrb	r3, [r7, #1]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d003      	beq.n	800037e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	887a      	ldrh	r2, [r7, #2]
 800037a:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800037c:	e002      	b.n	8000384 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	887a      	ldrh	r2, [r7, #2]
 8000382:	835a      	strh	r2, [r3, #26]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	807b      	strh	r3, [r7, #2]
 800039c:	4613      	mov	r3, r2
 800039e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003a8:	787a      	ldrb	r2, [r7, #1]
 80003aa:	887b      	ldrh	r3, [r7, #2]
 80003ac:	f003 0307 	and.w	r3, r3, #7
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	fa02 f303 	lsl.w	r3, r2, r3
 80003b6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003b8:	887b      	ldrh	r3, [r7, #2]
 80003ba:	08db      	lsrs	r3, r3, #3
 80003bc:	b29b      	uxth	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3208      	adds	r2, #8
 80003c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003c8:	887b      	ldrh	r3, [r7, #2]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	210f      	movs	r1, #15
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	43db      	mvns	r3, r3
 80003d8:	8879      	ldrh	r1, [r7, #2]
 80003da:	08c9      	lsrs	r1, r1, #3
 80003dc:	b289      	uxth	r1, r1
 80003de:	4608      	mov	r0, r1
 80003e0:	ea02 0103 	and.w	r1, r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f100 0208 	add.w	r2, r0, #8
 80003ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003ee:	887b      	ldrh	r3, [r7, #2]
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	461a      	mov	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3208      	adds	r2, #8
 80003fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fe:	68fa      	ldr	r2, [r7, #12]
 8000400:	4313      	orrs	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	b29b      	uxth	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3208      	adds	r2, #8
 8000410:	68b9      	ldr	r1, [r7, #8]
 8000412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <RCC_DeInit+0x60>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <RCC_DeInit+0x60>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <RCC_DeInit+0x60>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <RCC_DeInit+0x60>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <RCC_DeInit+0x60>)
 8000440:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000444:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000448:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <RCC_DeInit+0x60>)
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <RCC_DeInit+0x64>)
 800044e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <RCC_DeInit+0x60>)
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <RCC_DeInit+0x68>)
 8000454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <RCC_DeInit+0x60>)
 800045a:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <RCC_DeInit+0x6c>)
 800045c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <RCC_DeInit+0x60>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <RCC_DeInit+0x60>)
 8000466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800046a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <RCC_DeInit+0x60>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <RCC_DeInit+0x60>)
 8000474:	2200      	movs	r2, #0
 8000476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800
 8000488:	24003010 	.word	0x24003010
 800048c:	20003000 	.word	0x20003000
 8000490:	24003000 	.word	0x24003000

08000494 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000494:	b480      	push	{r7}
 8000496:	b089      	sub	sp, #36	; 0x24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
 80004a8:	2302      	movs	r3, #2
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004b4:	4b47      	ldr	r3, [pc, #284]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	f003 030c 	and.w	r3, r3, #12
 80004bc:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 80004be:	69bb      	ldr	r3, [r7, #24]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d007      	beq.n	80004d4 <RCC_GetClocksFreq+0x40>
 80004c4:	2b08      	cmp	r3, #8
 80004c6:	d009      	beq.n	80004dc <RCC_GetClocksFreq+0x48>
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d13d      	bne.n	8000548 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a42      	ldr	r2, [pc, #264]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 80004d0:	601a      	str	r2, [r3, #0]
    break;
 80004d2:	e03d      	b.n	8000550 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a41      	ldr	r2, [pc, #260]	; (80005dc <RCC_GetClocksFreq+0x148>)
 80004d8:	601a      	str	r2, [r3, #0]
    break;
 80004da:	e039      	b.n	8000550 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004dc:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	0d9b      	lsrs	r3, r3, #22
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004e8:	4b3a      	ldr	r3, [pc, #232]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004f0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00c      	beq.n	8000512 <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004f8:	4a38      	ldr	r2, [pc, #224]	; (80005dc <RCC_GetClocksFreq+0x148>)
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000500:	4a34      	ldr	r2, [pc, #208]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 8000502:	6852      	ldr	r2, [r2, #4]
 8000504:	0992      	lsrs	r2, r2, #6
 8000506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800050a:	fb02 f303 	mul.w	r3, r2, r3
 800050e:	61fb      	str	r3, [r7, #28]
 8000510:	e00b      	b.n	800052a <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000512:	4a31      	ldr	r2, [pc, #196]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 800051c:	6852      	ldr	r2, [r2, #4]
 800051e:	0992      	lsrs	r2, r2, #6
 8000520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000524:	fb02 f303 	mul.w	r3, r2, r3
 8000528:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	0c1b      	lsrs	r3, r3, #16
 8000530:	f003 0303 	and.w	r3, r3, #3
 8000534:	3301      	adds	r3, #1
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
    break;
 8000546:	e003      	b.n	8000550 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 800054c:	601a      	str	r2, [r3, #0]
    break;
 800054e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000558:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000560:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	40da      	lsrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000580:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	0a9b      	lsrs	r3, r3, #10
 8000586:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000588:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	40da      	lsrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <RCC_GetClocksFreq+0x140>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005a8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	0b5b      	lsrs	r3, r3, #13
 80005ae:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3724      	adds	r7, #36	; 0x24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40023800 	.word	0x40023800
 80005d8:	00f42400 	.word	0x00f42400
 80005dc:	017d7840 	.word	0x017d7840
 80005e0:	20000000 	.word	0x20000000

080005e4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	4909      	ldr	r1, [pc, #36]	; (8000620 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4313      	orrs	r3, r2
 8000600:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000602:	e006      	b.n	8000612 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	43db      	mvns	r3, r3
 800060c:	4904      	ldr	r1, [pc, #16]	; (8000620 <RCC_AHB1PeriphClockCmd+0x3c>)
 800060e:	4013      	ands	r3, r2
 8000610:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <RCC_APB1PeriphClockCmd+0x3c>)
 8000638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063a:	4909      	ldr	r1, [pc, #36]	; (8000660 <RCC_APB1PeriphClockCmd+0x3c>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000642:	e006      	b.n	8000652 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <RCC_APB1PeriphClockCmd+0x3c>)
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	43db      	mvns	r3, r3
 800064c:	4904      	ldr	r1, [pc, #16]	; (8000660 <RCC_APB1PeriphClockCmd+0x3c>)
 800064e:	4013      	ands	r3, r2
 8000650:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	8a1b      	ldrh	r3, [r3, #16]
 8000682:	b29b      	uxth	r3, r3
 8000684:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	88db      	ldrh	r3, [r3, #6]
 8000692:	461a      	mov	r2, r3
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	4313      	orrs	r3, r2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	b29a      	uxth	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	899b      	ldrh	r3, [r3, #12]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80006b0:	f023 030c 	bic.w	r3, r3, #12
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	889a      	ldrh	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	891b      	ldrh	r3, [r3, #8]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ce:	4313      	orrs	r3, r2
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	8a9b      	ldrh	r3, [r3, #20]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	899b      	ldrh	r3, [r3, #12]
 80006ee:	461a      	mov	r2, r3
 80006f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f2:	4313      	orrs	r3, r2
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80006f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fec6 	bl	8000494 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a30      	ldr	r2, [pc, #192]	; (80007cc <USART_Init+0x168>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d003      	beq.n	8000718 <USART_Init+0xb4>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a2f      	ldr	r2, [pc, #188]	; (80007d0 <USART_Init+0x16c>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d102      	bne.n	800071e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	623b      	str	r3, [r7, #32]
 800071c:	e001      	b.n	8000722 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	899b      	ldrh	r3, [r3, #12]
 8000726:	b29b      	uxth	r3, r3
 8000728:	b21b      	sxth	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	da0c      	bge.n	8000748 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800072e:	6a3a      	ldr	r2, [r7, #32]
 8000730:	4613      	mov	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	009a      	lsls	r2, r3, #2
 8000738:	441a      	add	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	fbb2 f3f3 	udiv	r3, r2, r3
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	e00b      	b.n	8000760 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000748:	6a3a      	ldr	r2, [r7, #32]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	009a      	lsls	r2, r3, #2
 8000752:	441a      	add	r2, r3
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <USART_Init+0x170>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	095b      	lsrs	r3, r3, #5
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	091b      	lsrs	r3, r3, #4
 8000772:	2264      	movs	r2, #100	; 0x64
 8000774:	fb02 f303 	mul.w	r3, r2, r3
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	899b      	ldrh	r3, [r3, #12]
 8000782:	b29b      	uxth	r3, r3
 8000784:	b21b      	sxth	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	da0c      	bge.n	80007a4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	3332      	adds	r3, #50	; 0x32
 8000790:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <USART_Init+0x170>)
 8000792:	fba2 2303 	umull	r2, r3, r2, r3
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800079e:	4313      	orrs	r3, r2
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	e00b      	b.n	80007bc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	3332      	adds	r3, #50	; 0x32
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <USART_Init+0x170>)
 80007ac:	fba2 2303 	umull	r2, r3, r2, r3
 80007b0:	095b      	lsrs	r3, r3, #5
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007b8:	4313      	orrs	r3, r2
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	b29a      	uxth	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	811a      	strh	r2, [r3, #8]
}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40011000 	.word	0x40011000
 80007d0:	40011400 	.word	0x40011400
 80007d4:	51eb851f 	.word	0x51eb851f

080007d8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	899b      	ldrh	r3, [r3, #12]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80007fa:	e007      	b.n	800080c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	899b      	ldrh	r3, [r3, #12]
 8000800:	b29b      	uxth	r3, r3
 8000802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000806:	b29a      	uxth	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	819a      	strh	r2, [r3, #12]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f103 0208 	add.w	r2, r3, #8
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0208 	add.w	r2, r3, #8
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f103 0208 	add.w	r2, r3, #8
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000872:	b480      	push	{r7}
 8000874:	b085      	sub	sp, #20
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008ba:	b480      	push	{r7}
 80008bc:	b085      	sub	sp, #20
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	6892      	ldr	r2, [r2, #8]
 80008d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	6852      	ldr	r2, [r2, #4]
 80008da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d103      	bne.n	80008ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800090e:	b580      	push	{r7, lr}
 8000910:	b08c      	sub	sp, #48	; 0x30
 8000912:	af04      	add	r7, sp, #16
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4613      	mov	r3, r2
 800091c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fdee 	bl	8001504 <pvPortMalloc>
 8000928:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00e      	beq.n	800094e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000930:	2058      	movs	r0, #88	; 0x58
 8000932:	f000 fde7 	bl	8001504 <pvPortMalloc>
 8000936:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
 8000944:	e005      	b.n	8000952 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f000 fe9e 	bl	8001688 <vPortFree>
 800094c:	e001      	b.n	8000952 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d013      	beq.n	8000980 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	2300      	movs	r3, #0
 800095c:	9303      	str	r3, [sp, #12]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f000 f80e 	bl	8000990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000974:	69f8      	ldr	r0, [r7, #28]
 8000976:	f000 f89f 	bl	8000ab8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	e002      	b.n	8000986 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000986:	69bb      	ldr	r3, [r7, #24]
	}
 8000988:	4618      	mov	r0, r3
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d109      	bne.n	80009b8 <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a8:	f383 8811 	msr	BASEPRI, r3
 80009ac:	f3bf 8f6f 	isb	sy
 80009b0:	f3bf 8f4f 	dsb	sy
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e7fe      	b.n	80009b6 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80009b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	21a5      	movs	r1, #165	; 0xa5
 80009c4:	f001 f9ea 	bl	8001d9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80009c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009d2:	3b01      	subs	r3, #1
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	f023 0307 	bic.w	r3, r3, #7
 80009e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d009      	beq.n	8000a00 <prvInitialiseNewTask+0x70>
 80009ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f0:	f383 8811 	msr	BASEPRI, r3
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	e7fe      	b.n	80009fe <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	e012      	b.n	8000a2c <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	7819      	ldrb	r1, [r3, #0]
 8000a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	4413      	add	r3, r2
 8000a14:	3334      	adds	r3, #52	; 0x34
 8000a16:	460a      	mov	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d006      	beq.n	8000a34 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	2b09      	cmp	r3, #9
 8000a30:	d9e9      	bls.n	8000a06 <prvInitialiseNewTask+0x76>
 8000a32:	e000      	b.n	8000a36 <prvInitialiseNewTask+0xa6>
		{
			break;
 8000a34:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d901      	bls.n	8000a48 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a44:	2304      	movs	r3, #4
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a52:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2200      	movs	r2, #0
 8000a58:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fefa 	bl	8000858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a66:	3318      	adds	r3, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fef5 	bl	8000858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	f1c3 0205 	rsb	r2, r3, #5
 8000a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a86:	2200      	movs	r2, #0
 8000a88:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	68f9      	ldr	r1, [r7, #12]
 8000a96:	69b8      	ldr	r0, [r7, #24]
 8000a98:	f000 fb32 	bl	8001100 <pxPortInitialiseStack>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000ac0:	f000 fc44 	bl	800134c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <prvAddNewTaskToReadyList+0xc0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <prvAddNewTaskToReadyList+0xc0>)
 8000acc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <prvAddNewTaskToReadyList+0xc4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d109      	bne.n	8000aea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000ad6:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <prvAddNewTaskToReadyList+0xc4>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <prvAddNewTaskToReadyList+0xc0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d110      	bne.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ae4:	f000 fa70 	bl	8000fc8 <prvInitialiseTaskLists>
 8000ae8:	e00d      	b.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <prvAddNewTaskToReadyList+0xc8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d109      	bne.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <prvAddNewTaskToReadyList+0xc4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d802      	bhi.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000b00:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <prvAddNewTaskToReadyList+0xc4>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <prvAddNewTaskToReadyList+0xcc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <prvAddNewTaskToReadyList+0xcc>)
 8000b0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <prvAddNewTaskToReadyList+0xcc>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <prvAddNewTaskToReadyList+0xd0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <prvAddNewTaskToReadyList+0xd0>)
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <prvAddNewTaskToReadyList+0xd4>)
 8000b38:	441a      	add	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4610      	mov	r0, r2
 8000b42:	f7ff fe96 	bl	8000872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000b46:	f000 fc2f 	bl	80013a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <prvAddNewTaskToReadyList+0xc8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00e      	beq.n	8000b70 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <prvAddNewTaskToReadyList+0xc4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <prvAddNewTaskToReadyList+0xd8>)
 8000b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000011c 	.word	0x2000011c
 8000b7c:	20000044 	.word	0x20000044
 8000b80:	20000128 	.word	0x20000128
 8000b84:	20000138 	.word	0x20000138
 8000b88:	20000124 	.word	0x20000124
 8000b8c:	20000048 	.word	0x20000048
 8000b90:	e000ed04 	.word	0xe000ed04

08000b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <vTaskStartScheduler+0x74>)
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2282      	movs	r2, #130	; 0x82
 8000ba6:	4919      	ldr	r1, [pc, #100]	; (8000c0c <vTaskStartScheduler+0x78>)
 8000ba8:	4819      	ldr	r0, [pc, #100]	; (8000c10 <vTaskStartScheduler+0x7c>)
 8000baa:	f7ff feb0 	bl	800090e <xTaskCreate>
 8000bae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d115      	bne.n	8000be2 <vTaskStartScheduler+0x4e>
 8000bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bba:	f383 8811 	msr	BASEPRI, r3
 8000bbe:	f3bf 8f6f 	isb	sy
 8000bc2:	f3bf 8f4f 	dsb	sy
 8000bc6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <vTaskStartScheduler+0x80>)
 8000bca:	f04f 32ff 	mov.w	r2, #4294967295
 8000bce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <vTaskStartScheduler+0x84>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <vTaskStartScheduler+0x88>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000bdc:	f000 fb18 	bl	8001210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000be0:	e00d      	b.n	8000bfe <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d109      	bne.n	8000bfe <vTaskStartScheduler+0x6a>
 8000bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bee:	f383 8811 	msr	BASEPRI, r3
 8000bf2:	f3bf 8f6f 	isb	sy
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	e7fe      	b.n	8000bfc <vTaskStartScheduler+0x68>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000140 	.word	0x20000140
 8000c0c:	08001dc4 	.word	0x08001dc4
 8000c10:	08000f99 	.word	0x08000f99
 8000c14:	2000013c 	.word	0x2000013c
 8000c18:	20000128 	.word	0x20000128
 8000c1c:	20000120 	.word	0x20000120

08000c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <vTaskSuspendAll+0x18>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <vTaskSuspendAll+0x18>)
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20000144 	.word	0x20000144

08000c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <xTaskResumeAll+0x114>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d109      	bne.n	8000c66 <xTaskResumeAll+0x2a>
 8000c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c56:	f383 8811 	msr	BASEPRI, r3
 8000c5a:	f3bf 8f6f 	isb	sy
 8000c5e:	f3bf 8f4f 	dsb	sy
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	e7fe      	b.n	8000c64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000c66:	f000 fb71 	bl	800134c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <xTaskResumeAll+0x114>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <xTaskResumeAll+0x114>)
 8000c72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <xTaskResumeAll+0x114>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d161      	bne.n	8000d40 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <xTaskResumeAll+0x118>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d05d      	beq.n	8000d40 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c84:	e02e      	b.n	8000ce4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c86:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <xTaskResumeAll+0x11c>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3318      	adds	r3, #24
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fe11 	bl	80008ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe0c 	bl	80008ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <xTaskResumeAll+0x120>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <xTaskResumeAll+0x120>)
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <xTaskResumeAll+0x124>)
 8000cc2:	441a      	add	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4610      	mov	r0, r2
 8000ccc:	f7ff fdd1 	bl	8000872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <xTaskResumeAll+0x128>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d302      	bcc.n	8000ce4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <xTaskResumeAll+0x12c>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <xTaskResumeAll+0x11c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1cc      	bne.n	8000c86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000cf2:	f000 f9e5 	bl	80010c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <xTaskResumeAll+0x130>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d010      	beq.n	8000d24 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000d02:	f000 f837 	bl	8000d74 <xTaskIncrementTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <xTaskResumeAll+0x12c>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f1      	bne.n	8000d02 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <xTaskResumeAll+0x130>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <xTaskResumeAll+0x12c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d009      	beq.n	8000d40 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <xTaskResumeAll+0x134>)
 8000d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000d40:	f000 fb32 	bl	80013a8 <vPortExitCritical>

	return xAlreadyYielded;
 8000d44:	68bb      	ldr	r3, [r7, #8]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000144 	.word	0x20000144
 8000d54:	2000011c 	.word	0x2000011c
 8000d58:	200000dc 	.word	0x200000dc
 8000d5c:	20000124 	.word	0x20000124
 8000d60:	20000048 	.word	0x20000048
 8000d64:	20000044 	.word	0x20000044
 8000d68:	20000130 	.word	0x20000130
 8000d6c:	2000012c 	.word	0x2000012c
 8000d70:	e000ed04 	.word	0xe000ed04

08000d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d7e:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <xTaskIncrementTick+0x144>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8087 	bne.w	8000e96 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d88:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <xTaskIncrementTick+0x148>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000d90:	4a4a      	ldr	r2, [pc, #296]	; (8000ebc <xTaskIncrementTick+0x148>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d11f      	bne.n	8000ddc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000d9c:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <xTaskIncrementTick+0x14c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <xTaskIncrementTick+0x46>
 8000da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000daa:	f383 8811 	msr	BASEPRI, r3
 8000dae:	f3bf 8f6f 	isb	sy
 8000db2:	f3bf 8f4f 	dsb	sy
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	e7fe      	b.n	8000db8 <xTaskIncrementTick+0x44>
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <xTaskIncrementTick+0x14c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <xTaskIncrementTick+0x150>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a3e      	ldr	r2, [pc, #248]	; (8000ec0 <xTaskIncrementTick+0x14c>)
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4a3e      	ldr	r2, [pc, #248]	; (8000ec4 <xTaskIncrementTick+0x150>)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <xTaskIncrementTick+0x154>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a3c      	ldr	r2, [pc, #240]	; (8000ec8 <xTaskIncrementTick+0x154>)
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	f000 f972 	bl	80010c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <xTaskIncrementTick+0x158>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d348      	bcc.n	8000e78 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000de6:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <xTaskIncrementTick+0x14c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d104      	bne.n	8000dfa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000df0:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <xTaskIncrementTick+0x158>)
 8000df2:	f04f 32ff 	mov.w	r2, #4294967295
 8000df6:	601a      	str	r2, [r3, #0]
					break;
 8000df8:	e03e      	b.n	8000e78 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <xTaskIncrementTick+0x14c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d203      	bcs.n	8000e1a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000e12:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <xTaskIncrementTick+0x158>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000e18:	e02e      	b.n	8000e78 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fd4b 	bl	80008ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3318      	adds	r3, #24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fd42 	bl	80008ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <xTaskIncrementTick+0x15c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <xTaskIncrementTick+0x15c>)
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <xTaskIncrementTick+0x160>)
 8000e56:	441a      	add	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4610      	mov	r0, r2
 8000e60:	f7ff fd07 	bl	8000872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <xTaskIncrementTick+0x164>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3b9      	bcc.n	8000de6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8000e72:	2301      	movs	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e76:	e7b6      	b.n	8000de6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <xTaskIncrementTick+0x164>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7e:	4915      	ldr	r1, [pc, #84]	; (8000ed4 <xTaskIncrementTick+0x160>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d907      	bls.n	8000ea0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	e004      	b.n	8000ea0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <xTaskIncrementTick+0x168>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <xTaskIncrementTick+0x168>)
 8000e9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <xTaskIncrementTick+0x16c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000eac:	697b      	ldr	r3, [r7, #20]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000144 	.word	0x20000144
 8000ebc:	20000120 	.word	0x20000120
 8000ec0:	200000d4 	.word	0x200000d4
 8000ec4:	200000d8 	.word	0x200000d8
 8000ec8:	20000134 	.word	0x20000134
 8000ecc:	2000013c 	.word	0x2000013c
 8000ed0:	20000124 	.word	0x20000124
 8000ed4:	20000048 	.word	0x20000048
 8000ed8:	20000044 	.word	0x20000044
 8000edc:	2000012c 	.word	0x2000012c
 8000ee0:	20000130 	.word	0x20000130

08000ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <vTaskSwitchContext+0xa0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <vTaskSwitchContext+0xa4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000ef8:	e03e      	b.n	8000f78 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <vTaskSwitchContext+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <vTaskSwitchContext+0xa8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	fab3 f383 	clz	r3, r3
 8000f0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	f1c3 031f 	rsb	r3, r3, #31
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	491e      	ldr	r1, [pc, #120]	; (8000f90 <vTaskSwitchContext+0xac>)
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d109      	bne.n	8000f3e <vTaskSwitchContext+0x5a>
	__asm volatile
 8000f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	f3bf 8f6f 	isb	sy
 8000f36:	f3bf 8f4f 	dsb	sy
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	e7fe      	b.n	8000f3c <vTaskSwitchContext+0x58>
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <vTaskSwitchContext+0xac>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d104      	bne.n	8000f6e <vTaskSwitchContext+0x8a>
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <vTaskSwitchContext+0xb0>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000144 	.word	0x20000144
 8000f88:	20000130 	.word	0x20000130
 8000f8c:	20000124 	.word	0x20000124
 8000f90:	20000048 	.word	0x20000048
 8000f94:	20000044 	.word	0x20000044

08000f98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000fa0:	f000 f852 	bl	8001048 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <prvIdleTask+0x28>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d9f9      	bls.n	8000fa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <prvIdleTask+0x2c>)
 8000fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	f3bf 8f4f 	dsb	sy
 8000fb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000fbc:	e7f0      	b.n	8000fa0 <prvIdleTask+0x8>
 8000fbe:	bf00      	nop
 8000fc0:	20000048 	.word	0x20000048
 8000fc4:	e000ed04 	.word	0xe000ed04

08000fc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	e00c      	b.n	8000fee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <prvInitialiseTaskLists+0x60>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fc18 	bl	8000818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d9ef      	bls.n	8000fd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <prvInitialiseTaskLists+0x64>)
 8000ff6:	f7ff fc0f 	bl	8000818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <prvInitialiseTaskLists+0x68>)
 8000ffc:	f7ff fc0c 	bl	8000818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <prvInitialiseTaskLists+0x6c>)
 8001002:	f7ff fc09 	bl	8000818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001006:	480c      	ldr	r0, [pc, #48]	; (8001038 <prvInitialiseTaskLists+0x70>)
 8001008:	f7ff fc06 	bl	8000818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <prvInitialiseTaskLists+0x74>)
 800100e:	f7ff fc03 	bl	8000818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <prvInitialiseTaskLists+0x78>)
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <prvInitialiseTaskLists+0x64>)
 8001016:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <prvInitialiseTaskLists+0x7c>)
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <prvInitialiseTaskLists+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000048 	.word	0x20000048
 800102c:	200000ac 	.word	0x200000ac
 8001030:	200000c0 	.word	0x200000c0
 8001034:	200000dc 	.word	0x200000dc
 8001038:	200000f0 	.word	0x200000f0
 800103c:	20000108 	.word	0x20000108
 8001040:	200000d4 	.word	0x200000d4
 8001044:	200000d8 	.word	0x200000d8

08001048 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800104e:	e019      	b.n	8001084 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001050:	f000 f97c 	bl	800134c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <prvCheckTasksWaitingTermination+0x4c>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3304      	adds	r3, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fc2a 	bl	80008ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <prvCheckTasksWaitingTermination+0x50>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <prvCheckTasksWaitingTermination+0x50>)
 800106e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <prvCheckTasksWaitingTermination+0x54>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <prvCheckTasksWaitingTermination+0x54>)
 8001078:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800107a:	f000 f995 	bl	80013a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f80e 	bl	80010a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <prvCheckTasksWaitingTermination+0x54>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e1      	bne.n	8001050 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200000f0 	.word	0x200000f0
 8001098:	2000011c 	.word	0x2000011c
 800109c:	20000104 	.word	0x20000104

080010a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 faeb 	bl	8001688 <vPortFree>
			vPortFree( pxTCB );
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fae8 	bl	8001688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <prvResetNextTaskUnblockTime+0x38>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d104      	bne.n	80010da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <prvResetNextTaskUnblockTime+0x3c>)
 80010d2:	f04f 32ff 	mov.w	r2, #4294967295
 80010d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80010d8:	e008      	b.n	80010ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <prvResetNextTaskUnblockTime+0x38>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <prvResetNextTaskUnblockTime+0x3c>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	200000d4 	.word	0x200000d4
 80010fc:	2000013c 	.word	0x2000013c

08001100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3b04      	subs	r3, #4
 8001110:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b04      	subs	r3, #4
 800111e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f023 0201 	bic.w	r2, r3, #1
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b04      	subs	r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <pxPortInitialiseStack+0x64>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3b14      	subs	r3, #20
 800113a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3b04      	subs	r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f06f 0202 	mvn.w	r2, #2
 800114e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3b20      	subs	r3, #32
 8001154:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	08001169 	.word	0x08001169

08001168 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <prvTaskExitError+0x50>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117a:	d009      	beq.n	8001190 <prvTaskExitError+0x28>
 800117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001180:	f383 8811 	msr	BASEPRI, r3
 8001184:	f3bf 8f6f 	isb	sy
 8001188:	f3bf 8f4f 	dsb	sy
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	e7fe      	b.n	800118e <prvTaskExitError+0x26>
 8001190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001194:	f383 8811 	msr	BASEPRI, r3
 8001198:	f3bf 8f6f 	isb	sy
 800119c:	f3bf 8f4f 	dsb	sy
 80011a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80011a2:	bf00      	nop
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0fc      	beq.n	80011a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000010 	.word	0x20000010
 80011bc:	00000000 	.word	0x00000000

080011c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <pxCurrentTCBConst2>)
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	6808      	ldr	r0, [r1, #0]
 80011c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ca:	f380 8809 	msr	PSP, r0
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	f380 8811 	msr	BASEPRI, r0
 80011da:	4770      	bx	lr
 80011dc:	f3af 8000 	nop.w

080011e0 <pxCurrentTCBConst2>:
 80011e0:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop

080011e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <prvPortStartFirstTask+0x24>)
 80011ea:	6800      	ldr	r0, [r0, #0]
 80011ec:	6800      	ldr	r0, [r0, #0]
 80011ee:	f380 8808 	msr	MSP, r0
 80011f2:	f04f 0000 	mov.w	r0, #0
 80011f6:	f380 8814 	msr	CONTROL, r0
 80011fa:	b662      	cpsie	i
 80011fc:	b661      	cpsie	f
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	df00      	svc	0
 8001208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800120a:	bf00      	nop
 800120c:	e000ed08 	.word	0xe000ed08

08001210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <xPortStartScheduler+0x118>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a44      	ldr	r2, [pc, #272]	; (800132c <xPortStartScheduler+0x11c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d109      	bne.n	8001234 <xPortStartScheduler+0x24>
 8001220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	e7fe      	b.n	8001232 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001234:	4b3c      	ldr	r3, [pc, #240]	; (8001328 <xPortStartScheduler+0x118>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <xPortStartScheduler+0x120>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d109      	bne.n	8001252 <xPortStartScheduler+0x42>
 800123e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e7fe      	b.n	8001250 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <xPortStartScheduler+0x124>)
 8001254:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	22ff      	movs	r2, #255	; 0xff
 8001262:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <xPortStartScheduler+0x128>)
 8001278:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800127a:	4b30      	ldr	r3, [pc, #192]	; (800133c <xPortStartScheduler+0x12c>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001280:	e009      	b.n	8001296 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001282:	4b2e      	ldr	r3, [pc, #184]	; (800133c <xPortStartScheduler+0x12c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	4a2c      	ldr	r2, [pc, #176]	; (800133c <xPortStartScheduler+0x12c>)
 800128a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	2b80      	cmp	r3, #128	; 0x80
 80012a0:	d0ef      	beq.n	8001282 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <xPortStartScheduler+0x12c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d009      	beq.n	80012c2 <xPortStartScheduler+0xb2>
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	e7fe      	b.n	80012c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <xPortStartScheduler+0x12c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <xPortStartScheduler+0x12c>)
 80012ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <xPortStartScheduler+0x12c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <xPortStartScheduler+0x12c>)
 80012d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <xPortStartScheduler+0x130>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a16      	ldr	r2, [pc, #88]	; (8001340 <xPortStartScheduler+0x130>)
 80012e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <xPortStartScheduler+0x130>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <xPortStartScheduler+0x130>)
 80012f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80012f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80012f8:	f000 f8d6 	bl	80014a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <xPortStartScheduler+0x134>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001302:	f000 f8f5 	bl	80014f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <xPortStartScheduler+0x138>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <xPortStartScheduler+0x138>)
 800130c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001310:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001312:	f7ff ff69 	bl	80011e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001316:	f7ff fde5 	bl	8000ee4 <vTaskSwitchContext>
	prvTaskExitError();
 800131a:	f7ff ff25 	bl	8001168 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	e000ed00 	.word	0xe000ed00
 800132c:	410fc271 	.word	0x410fc271
 8001330:	410fc270 	.word	0x410fc270
 8001334:	e000e400 	.word	0xe000e400
 8001338:	20000148 	.word	0x20000148
 800133c:	2000014c 	.word	0x2000014c
 8001340:	e000ed20 	.word	0xe000ed20
 8001344:	20000010 	.word	0x20000010
 8001348:	e000ef34 	.word	0xe000ef34

0800134c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001356:	f383 8811 	msr	BASEPRI, r3
 800135a:	f3bf 8f6f 	isb	sy
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <vPortEnterCritical+0x54>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <vPortEnterCritical+0x54>)
 800136c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <vPortEnterCritical+0x54>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10e      	bne.n	8001394 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <vPortEnterCritical+0x58>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d009      	beq.n	8001394 <vPortEnterCritical+0x48>
 8001380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001384:	f383 8811 	msr	BASEPRI, r3
 8001388:	f3bf 8f6f 	isb	sy
 800138c:	f3bf 8f4f 	dsb	sy
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	e7fe      	b.n	8001392 <vPortEnterCritical+0x46>
	}
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	20000010 	.word	0x20000010
 80013a4:	e000ed04 	.word	0xe000ed04

080013a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <vPortExitCritical+0x4c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <vPortExitCritical+0x22>
 80013b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ba:	f383 8811 	msr	BASEPRI, r3
 80013be:	f3bf 8f6f 	isb	sy
 80013c2:	f3bf 8f4f 	dsb	sy
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	e7fe      	b.n	80013c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <vPortExitCritical+0x4c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <vPortExitCritical+0x4c>)
 80013d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <vPortExitCritical+0x4c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d104      	bne.n	80013e6 <vPortExitCritical+0x3e>
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000010 	.word	0x20000010
	...

08001400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001400:	f3ef 8009 	mrs	r0, PSP
 8001404:	f3bf 8f6f 	isb	sy
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <pxCurrentTCBConst>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f01e 0f10 	tst.w	lr, #16
 8001410:	bf08      	it	eq
 8001412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800141a:	6010      	str	r0, [r2, #0]
 800141c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001424:	f380 8811 	msr	BASEPRI, r0
 8001428:	f3bf 8f4f 	dsb	sy
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f7ff fd58 	bl	8000ee4 <vTaskSwitchContext>
 8001434:	f04f 0000 	mov.w	r0, #0
 8001438:	f380 8811 	msr	BASEPRI, r0
 800143c:	bc09      	pop	{r0, r3}
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	6808      	ldr	r0, [r1, #0]
 8001442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001446:	f01e 0f10 	tst.w	lr, #16
 800144a:	bf08      	it	eq
 800144c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001450:	f380 8809 	msr	PSP, r0
 8001454:	f3bf 8f6f 	isb	sy
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w

08001460 <pxCurrentTCBConst>:
 8001460:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop

08001468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	__asm volatile
 800146e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001472:	f383 8811 	msr	BASEPRI, r3
 8001476:	f3bf 8f6f 	isb	sy
 800147a:	f3bf 8f4f 	dsb	sy
 800147e:	607b      	str	r3, [r7, #4]
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001480:	f7ff fc78 	bl	8000d74 <xTaskIncrementTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <SysTick_Handler+0x2a>
		{
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SysTick_Handler+0x3c>)
 800148c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	e000ed04 	.word	0xe000ed04

080014a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <vPortSetupTimerInterrupt+0x34>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <vPortSetupTimerInterrupt+0x38>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <vPortSetupTimerInterrupt+0x3c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <vPortSetupTimerInterrupt+0x40>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	099b      	lsrs	r3, r3, #6
 80014c4:	4a09      	ldr	r2, [pc, #36]	; (80014ec <vPortSetupTimerInterrupt+0x44>)
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <vPortSetupTimerInterrupt+0x34>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010
 80014e0:	e000e018 	.word	0xe000e018
 80014e4:	20000014 	.word	0x20000014
 80014e8:	10624dd3 	.word	0x10624dd3
 80014ec:	e000e014 	.word	0xe000e014

080014f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80014f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001500 <vPortEnableVFP+0x10>
 80014f4:	6801      	ldr	r1, [r0, #0]
 80014f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014fa:	6001      	str	r1, [r0, #0]
 80014fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80014fe:	bf00      	nop
 8001500:	e000ed88 	.word	0xe000ed88

08001504 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001510:	f7ff fb86 	bl	8000c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001514:	4b57      	ldr	r3, [pc, #348]	; (8001674 <pvPortMalloc+0x170>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800151c:	f000 f90c 	bl	8001738 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001520:	4b55      	ldr	r3, [pc, #340]	; (8001678 <pvPortMalloc+0x174>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 808c 	bne.w	8001646 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01c      	beq.n	800156e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001534:	2208      	movs	r2, #8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	2b00      	cmp	r3, #0
 8001544:	d013      	beq.n	800156e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f023 0307 	bic.w	r3, r3, #7
 800154c:	3308      	adds	r3, #8
 800154e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <pvPortMalloc+0x6a>
	__asm volatile
 800155a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155e:	f383 8811 	msr	BASEPRI, r3
 8001562:	f3bf 8f6f 	isb	sy
 8001566:	f3bf 8f4f 	dsb	sy
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e7fe      	b.n	800156c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d068      	beq.n	8001646 <pvPortMalloc+0x142>
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <pvPortMalloc+0x178>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	d863      	bhi.n	8001646 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800157e:	4b40      	ldr	r3, [pc, #256]	; (8001680 <pvPortMalloc+0x17c>)
 8001580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <pvPortMalloc+0x17c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001588:	e004      	b.n	8001594 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	d903      	bls.n	80015a6 <pvPortMalloc+0xa2>
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f1      	bne.n	800158a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <pvPortMalloc+0x170>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d04a      	beq.n	8001646 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2208      	movs	r2, #8
 80015b6:	4413      	add	r3, r2
 80015b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	1ad2      	subs	r2, r2, r3
 80015ca:	2308      	movs	r3, #8
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d91e      	bls.n	8001610 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <pvPortMalloc+0xf4>
 80015e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e8:	f383 8811 	msr	BASEPRI, r3
 80015ec:	f3bf 8f6f 	isb	sy
 80015f0:	f3bf 8f4f 	dsb	sy
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	e7fe      	b.n	80015f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800160a:	69b8      	ldr	r0, [r7, #24]
 800160c:	f000 f8f6 	bl	80017fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <pvPortMalloc+0x178>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <pvPortMalloc+0x178>)
 800161c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <pvPortMalloc+0x178>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <pvPortMalloc+0x180>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d203      	bcs.n	8001632 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <pvPortMalloc+0x178>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <pvPortMalloc+0x180>)
 8001630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <pvPortMalloc+0x174>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	431a      	orrs	r2, r3
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001646:	f7ff faf9 	bl	8000c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	2b00      	cmp	r3, #0
 8001652:	d009      	beq.n	8001668 <pvPortMalloc+0x164>
 8001654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001658:	f383 8811 	msr	BASEPRI, r3
 800165c:	f3bf 8f6f 	isb	sy
 8001660:	f3bf 8f4f 	dsb	sy
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e7fe      	b.n	8001666 <pvPortMalloc+0x162>
	return pvReturn;
 8001668:	69fb      	ldr	r3, [r7, #28]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20012d58 	.word	0x20012d58
 8001678:	20012d64 	.word	0x20012d64
 800167c:	20012d5c 	.word	0x20012d5c
 8001680:	20012d50 	.word	0x20012d50
 8001684:	20012d60 	.word	0x20012d60

08001688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d046      	beq.n	8001728 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800169a:	2308      	movs	r3, #8
 800169c:	425b      	negs	r3, r3
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4413      	add	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <vPortFree+0xa8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <vPortFree+0x42>
 80016b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ba:	f383 8811 	msr	BASEPRI, r3
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e7fe      	b.n	80016c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <vPortFree+0x5e>
 80016d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d6:	f383 8811 	msr	BASEPRI, r3
 80016da:	f3bf 8f6f 	isb	sy
 80016de:	f3bf 8f4f 	dsb	sy
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	e7fe      	b.n	80016e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <vPortFree+0xa8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d019      	beq.n	8001728 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d115      	bne.n	8001728 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <vPortFree+0xa8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800170c:	f7ff fa88 	bl	8000c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <vPortFree+0xac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4413      	add	r3, r2
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <vPortFree+0xac>)
 800171c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800171e:	6938      	ldr	r0, [r7, #16]
 8001720:	f000 f86c 	bl	80017fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001724:	f7ff fa8a 	bl	8000c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20012d64 	.word	0x20012d64
 8001734:	20012d5c 	.word	0x20012d5c

08001738 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800173e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001742:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <prvHeapInit+0xac>)
 8001746:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3307      	adds	r3, #7
 8001756:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f023 0307 	bic.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <prvHeapInit+0xac>)
 8001768:	4413      	add	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <prvHeapInit+0xb0>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <prvHeapInit+0xb0>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001784:	2208      	movs	r2, #8
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 0307 	bic.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4a15      	ldr	r2, [pc, #84]	; (80017ec <prvHeapInit+0xb4>)
 8001798:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <prvHeapInit+0xb4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <prvHeapInit+0xb4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	1ad2      	subs	r2, r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <prvHeapInit+0xb4>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <prvHeapInit+0xb8>)
 80017c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <prvHeapInit+0xbc>)
 80017ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <prvHeapInit+0xc0>)
 80017d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000150 	.word	0x20000150
 80017e8:	20012d50 	.word	0x20012d50
 80017ec:	20012d58 	.word	0x20012d58
 80017f0:	20012d60 	.word	0x20012d60
 80017f4:	20012d5c 	.word	0x20012d5c
 80017f8:	20012d64 	.word	0x20012d64

080017fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <prvInsertBlockIntoFreeList+0xac>)
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e002      	b.n	8001810 <prvInsertBlockIntoFreeList+0x14>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	d8f7      	bhi.n	800180a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d108      	bne.n	800183e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	441a      	add	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	441a      	add	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d118      	bne.n	8001884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <prvInsertBlockIntoFreeList+0xb0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d00d      	beq.n	800187a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	441a      	add	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e008      	b.n	800188c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <prvInsertBlockIntoFreeList+0xb0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e003      	b.n	800188c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	d002      	beq.n	800189a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20012d50 	.word	0x20012d50
 80018ac:	20012d58 	.word	0x20012d58

080018b0 <main>:

//global variables
uint8_t button_status_flag = NOT_PRESSED;

int main(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af02      	add	r7, sp, #8

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 80018b6:	f7fe fdb5 	bl	8000424 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 80018ba:	f000 f90f 	bl	8001adc <SystemCoreClockUpdate>

	prvSetupHardware();
 80018be:	f000 f84f 	bl	8001960 <prvSetupHardware>

	//let's create led_task
	xTaskCreate(led_task_handler, "LED-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80018c2:	2300      	movs	r3, #0
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	2301      	movs	r3, #1
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	2282      	movs	r2, #130	; 0x82
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <main+0x40>)
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <main+0x44>)
 80018d2:	f7ff f81c 	bl	800090e <xTaskCreate>

	//let's create button_task
	xTaskCreate(button_task_handler, "BUTTON-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80018d6:	2300      	movs	r3, #0
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2301      	movs	r3, #1
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	2282      	movs	r2, #130	; 0x82
 80018e2:	4905      	ldr	r1, [pc, #20]	; (80018f8 <main+0x48>)
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <main+0x4c>)
 80018e6:	f7ff f812 	bl	800090e <xTaskCreate>

	//start the scheduler
	vTaskStartScheduler();
 80018ea:	f7ff f953 	bl	8000b94 <vTaskStartScheduler>

	for(;;);
 80018ee:	e7fe      	b.n	80018ee <main+0x3e>
 80018f0:	08001dcc 	.word	0x08001dcc
 80018f4:	08001901 	.word	0x08001901
 80018f8:	08001dd8 	.word	0x08001dd8
 80018fc:	08001931 	.word	0x08001931

08001900 <led_task_handler>:
}

void led_task_handler(void *params)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	while(1){
		if(button_status_flag == PRESSED) //turn on led
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <led_task_handler+0x28>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <led_task_handler+0x1c>
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	2101      	movs	r1, #1
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <led_task_handler+0x2c>)
 8001916:	f7fe fd23 	bl	8000360 <GPIO_WriteBit>
 800191a:	e7f5      	b.n	8001908 <led_task_handler+0x8>
		else							  //turn off led
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2101      	movs	r1, #1
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <led_task_handler+0x2c>)
 8001922:	f7fe fd1d 	bl	8000360 <GPIO_WriteBit>
		if(button_status_flag == PRESSED) //turn on led
 8001926:	e7ef      	b.n	8001908 <led_task_handler+0x8>
 8001928:	20012d68 	.word	0x20012d68
 800192c:	40020400 	.word	0x40020400

08001930 <button_task_handler>:
	}

}

void button_task_handler(void *params)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	while(1){
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)) // button is pressed
 8001938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193c:	4806      	ldr	r0, [pc, #24]	; (8001958 <button_task_handler+0x28>)
 800193e:	f7fe fcf5 	bl	800032c <GPIO_ReadInputDataBit>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <button_task_handler+0x20>
			button_status_flag = PRESSED;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <button_task_handler+0x2c>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e7f3      	b.n	8001938 <button_task_handler+0x8>
		else										  // button is not pressed
			button_status_flag = NOT_PRESSED;
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <button_task_handler+0x2c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)) // button is pressed
 8001956:	e7ef      	b.n	8001938 <button_task_handler+0x8>
 8001958:	40020800 	.word	0x40020800
 800195c:	20012d68 	.word	0x20012d68

08001960 <prvSetupHardware>:

	}
}

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	//Setup led and button
	prvSetupGpio();
 8001964:	f000 f852 	bl	8001a0c <prvSetupGpio>

	//Setup UART3
	prvSetupUart();
 8001968:	f000 f802 	bl	8001970 <prvSetupUart>

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <prvSetupUart>:
	}

}

static void prvSetupUart(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8001976:	2101      	movs	r1, #1
 8001978:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800197c:	f7fe fe52 	bl	8000624 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001980:	2101      	movs	r1, #1
 8001982:	2008      	movs	r0, #8
 8001984:	f7fe fe2e 	bl	80005e4 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2208      	movs	r2, #8
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fa03 	bl	8001d9c <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199a:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 800199c:	2302      	movs	r3, #2
 800199e:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	4619      	mov	r1, r3
 80019aa:	4816      	ldr	r0, [pc, #88]	; (8001a04 <prvSetupUart+0x94>)
 80019ac:	f7fe fc30 	bl	8000210 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 80019b0:	2207      	movs	r2, #7
 80019b2:	2108      	movs	r1, #8
 80019b4:	4813      	ldr	r0, [pc, #76]	; (8001a04 <prvSetupUart+0x94>)
 80019b6:	f7fe fceb 	bl	8000390 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 80019ba:	2207      	movs	r2, #7
 80019bc:	2109      	movs	r1, #9
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <prvSetupUart+0x94>)
 80019c0:	f7fe fce6 	bl	8000390 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 80019c4:	463b      	mov	r3, r7
 80019c6:	2210      	movs	r2, #16
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f9e6 	bl	8001d9c <memset>

	uart3_init.USART_BaudRate = 115200;
 80019d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019d4:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80019d6:	2300      	movs	r3, #0
 80019d8:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80019da:	230c      	movs	r3, #12
 80019dc:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 80019de:	2300      	movs	r3, #0
 80019e0:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 80019e6:	2300      	movs	r3, #0
 80019e8:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 80019ea:	463b      	mov	r3, r7
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <prvSetupUart+0x98>)
 80019f0:	f7fe fe38 	bl	8000664 <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 80019f4:	2101      	movs	r1, #1
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <prvSetupUart+0x98>)
 80019f8:	f7fe feee 	bl	80007d8 <USART_Cmd>

}
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40004800 	.word	0x40004800

08001a0c <prvSetupGpio>:

void prvSetupGpio(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001a12:	2101      	movs	r1, #1
 8001a14:	2002      	movs	r0, #2
 8001a16:	f7fe fde5 	bl	80005e4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f7fe fde1 	bl	80005e4 <RCC_AHB1PeriphClockCmd>

	led_init.GPIO_Pin = GPIO_Pin_0;
 8001a22:	2301      	movs	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 8001a26:	2301      	movs	r3, #1
 8001a28:	733b      	strb	r3, [r7, #12]
	led_init.GPIO_OType = GPIO_OType_PP;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8001a32:	2300      	movs	r3, #0
 8001a34:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &led_init);
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <prvSetupGpio+0x5c>)
 8001a3e:	f7fe fbe7 	bl	8000210 <GPIO_Init>

	button_init.GPIO_Pin = GPIO_Pin_13;
 8001a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a46:	603b      	str	r3, [r7, #0]
	button_init.GPIO_Mode = GPIO_Mode_IN;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	713b      	strb	r3, [r7, #4]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	71fb      	strb	r3, [r7, #7]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 8001a50:	2300      	movs	r3, #0
 8001a52:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOC, &button_init);
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <prvSetupGpio+0x60>)
 8001a5a:	f7fe fbd9 	bl	8000210 <GPIO_Init>

}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800

08001a70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <SystemInit+0x60>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <SystemInit+0x60>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <SystemInit+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <SystemInit+0x64>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <SystemInit+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <SystemInit+0x64>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <SystemInit+0x64>)
 8001a9c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <SystemInit+0x64>)
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <SystemInit+0x68>)
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <SystemInit+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <SystemInit+0x64>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <SystemInit+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001abe:	f000 f889 	bl	8001bd4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <SystemInit+0x60>)
 8001ac4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac8:	609a      	str	r2, [r3, #8]
#endif
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	24003010 	.word	0x24003010

08001adc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	2302      	movs	r3, #2
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	2302      	movs	r3, #2
 8001af4:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001af6:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <SystemCoreClockUpdate+0xe4>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d007      	beq.n	8001b16 <SystemCoreClockUpdate+0x3a>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d009      	beq.n	8001b1e <SystemCoreClockUpdate+0x42>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d13d      	bne.n	8001b8a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <SystemCoreClockUpdate+0xe8>)
 8001b10:	4a2d      	ldr	r2, [pc, #180]	; (8001bc8 <SystemCoreClockUpdate+0xec>)
 8001b12:	601a      	str	r2, [r3, #0]
      break;
 8001b14:	e03d      	b.n	8001b92 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <SystemCoreClockUpdate+0xe8>)
 8001b18:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <SystemCoreClockUpdate+0xf0>)
 8001b1a:	601a      	str	r2, [r3, #0]
      break;
 8001b1c:	e039      	b.n	8001b92 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <SystemCoreClockUpdate+0xe4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0d9b      	lsrs	r3, r3, #22
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <SystemCoreClockUpdate+0xe4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b32:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00c      	beq.n	8001b54 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <SystemCoreClockUpdate+0xf0>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <SystemCoreClockUpdate+0xe4>)
 8001b44:	6852      	ldr	r2, [r2, #4]
 8001b46:	0992      	lsrs	r2, r2, #6
 8001b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00b      	b.n	8001b6c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <SystemCoreClockUpdate+0xec>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <SystemCoreClockUpdate+0xe4>)
 8001b5e:	6852      	ldr	r2, [r2, #4]
 8001b60:	0992      	lsrs	r2, r2, #6
 8001b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <SystemCoreClockUpdate+0xe4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <SystemCoreClockUpdate+0xe8>)
 8001b86:	6013      	str	r3, [r2, #0]
      break;
 8001b88:	e003      	b.n	8001b92 <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <SystemCoreClockUpdate+0xe8>)
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <SystemCoreClockUpdate+0xec>)
 8001b8e:	601a      	str	r2, [r3, #0]
      break;
 8001b90:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <SystemCoreClockUpdate+0xe4>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <SystemCoreClockUpdate+0xf4>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <SystemCoreClockUpdate+0xe8>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemCoreClockUpdate+0xe8>)
 8001bb0:	6013      	str	r3, [r2, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	00f42400 	.word	0x00f42400
 8001bcc:	017d7840 	.word	0x017d7840
 8001bd0:	20000018 	.word	0x20000018

08001bd4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <SetSysClock+0x11c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <SetSysClock+0x11c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <SetSysClock+0x11c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <SetSysClock+0x38>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001c0a:	d1f0      	bne.n	8001bee <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <SetSysClock+0x11c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	e001      	b.n	8001c22 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d15c      	bne.n	8001ce2 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <SetSysClock+0x11c>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <SetSysClock+0x11c>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001c34:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <SetSysClock+0x120>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <SetSysClock+0x120>)
 8001c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c3e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <SetSysClock+0x11c>)
 8001c42:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <SetSysClock+0x11c>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <SetSysClock+0x11c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <SetSysClock+0x11c>)
 8001c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c52:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <SetSysClock+0x11c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <SetSysClock+0x11c>)
 8001c5a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001c5e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <SetSysClock+0x11c>)
 8001c62:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <SetSysClock+0x124>)
 8001c64:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <SetSysClock+0x11c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <SetSysClock+0x11c>)
 8001c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001c72:	bf00      	nop
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <SetSysClock+0x11c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f9      	beq.n	8001c74 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <SetSysClock+0x120>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <SetSysClock+0x120>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8001c8c:	bf00      	nop
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <SetSysClock+0x120>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f9      	beq.n	8001c8e <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <SetSysClock+0x120>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <SetSysClock+0x120>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8001ca6:	bf00      	nop
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <SetSysClock+0x120>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f9      	beq.n	8001ca8 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <SetSysClock+0x128>)
 8001cb6:	f240 7205 	movw	r2, #1797	; 0x705
 8001cba:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <SetSysClock+0x11c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <SetSysClock+0x11c>)
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <SetSysClock+0x11c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <SetSysClock+0x11c>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001cd4:	bf00      	nop
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <SetSysClock+0x11c>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d1f9      	bne.n	8001cd6 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	07405a19 	.word	0x07405a19
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d06:	490e      	ldr	r1, [pc, #56]	; (8001d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <LoopForever+0xe>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d1c:	4c0b      	ldr	r4, [pc, #44]	; (8001d4c <LoopForever+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d2a:	f7ff fea1 	bl	8001a70 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d2e:	f000 f811 	bl	8001d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d32:	f7ff fdbd 	bl	80018b0 <main>

08001d36 <LoopForever>:

LoopForever:
    b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   r0, =_estack
 8001d38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001d44:	08001dec 	.word	0x08001dec
  ldr r2, =_sbss
 8001d48:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001d4c:	20012d6c 	.word	0x20012d6c

08001d50 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <__libc_init_array>:
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	4e0d      	ldr	r6, [pc, #52]	; (8001d8c <__libc_init_array+0x38>)
 8001d58:	4c0d      	ldr	r4, [pc, #52]	; (8001d90 <__libc_init_array+0x3c>)
 8001d5a:	1ba4      	subs	r4, r4, r6
 8001d5c:	10a4      	asrs	r4, r4, #2
 8001d5e:	2500      	movs	r5, #0
 8001d60:	42a5      	cmp	r5, r4
 8001d62:	d109      	bne.n	8001d78 <__libc_init_array+0x24>
 8001d64:	4e0b      	ldr	r6, [pc, #44]	; (8001d94 <__libc_init_array+0x40>)
 8001d66:	4c0c      	ldr	r4, [pc, #48]	; (8001d98 <__libc_init_array+0x44>)
 8001d68:	f000 f820 	bl	8001dac <_init>
 8001d6c:	1ba4      	subs	r4, r4, r6
 8001d6e:	10a4      	asrs	r4, r4, #2
 8001d70:	2500      	movs	r5, #0
 8001d72:	42a5      	cmp	r5, r4
 8001d74:	d105      	bne.n	8001d82 <__libc_init_array+0x2e>
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
 8001d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d7c:	4798      	blx	r3
 8001d7e:	3501      	adds	r5, #1
 8001d80:	e7ee      	b.n	8001d60 <__libc_init_array+0xc>
 8001d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d86:	4798      	blx	r3
 8001d88:	3501      	adds	r5, #1
 8001d8a:	e7f2      	b.n	8001d72 <__libc_init_array+0x1e>
 8001d8c:	08001de4 	.word	0x08001de4
 8001d90:	08001de4 	.word	0x08001de4
 8001d94:	08001de4 	.word	0x08001de4
 8001d98:	08001de8 	.word	0x08001de8

08001d9c <memset>:
 8001d9c:	4402      	add	r2, r0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d100      	bne.n	8001da6 <memset+0xa>
 8001da4:	4770      	bx	lr
 8001da6:	f803 1b01 	strb.w	r1, [r3], #1
 8001daa:	e7f9      	b.n	8001da0 <memset+0x4>

08001dac <_init>:
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dae:	bf00      	nop
 8001db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001db2:	bc08      	pop	{r3}
 8001db4:	469e      	mov	lr, r3
 8001db6:	4770      	bx	lr

08001db8 <_fini>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	bf00      	nop
 8001dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dbe:	bc08      	pop	{r3}
 8001dc0:	469e      	mov	lr, r3
 8001dc2:	4770      	bx	lr
