
STM32_FreeRTOS_Led_and_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001e0c  08001e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08001e2c  08001e2c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e2c  08001e2c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08001e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d44  20000028  08001e5c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d6c  08001e5c  00022d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007940  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001455  00000000  00000000  00027998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00028df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  000294d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000018f5  00000000  00000000  00029b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000725f  00000000  00000000  0002b41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f5c5  00000000  00000000  0003267c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a1c41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca8  00000000  00000000  000a1c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001df4 	.word	0x08001df4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08001df4 	.word	0x08001df4

08000210 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	e076      	b.n	800031a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800022c:	2201      	movs	r2, #1
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	fa02 f303 	lsl.w	r3, r2, r3
 8000234:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	693a      	ldr	r2, [r7, #16]
 800023c:	4013      	ands	r3, r2
 800023e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	429a      	cmp	r2, r3
 8000246:	d165      	bne.n	8000314 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	2103      	movs	r1, #3
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43db      	mvns	r3, r3
 8000258:	401a      	ands	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	791b      	ldrb	r3, [r3, #4]
 8000266:	4619      	mov	r1, r3
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	431a      	orrs	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	791b      	ldrb	r3, [r3, #4]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d003      	beq.n	8000286 <GPIO_Init+0x76>
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	d12e      	bne.n	80002e4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	689a      	ldr	r2, [r3, #8]
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	2103      	movs	r1, #3
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	401a      	ands	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	795b      	ldrb	r3, [r3, #5]
 80002a4:	4619      	mov	r1, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	685a      	ldr	r2, [r3, #4]
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	2301      	movs	r3, #1
 80002c0:	408b      	lsls	r3, r1
 80002c2:	43db      	mvns	r3, r3
 80002c4:	401a      	ands	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	7992      	ldrb	r2, [r2, #6]
 80002d2:	4611      	mov	r1, r2
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	b292      	uxth	r2, r2
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	b292      	uxth	r2, r2
 80002de:	431a      	orrs	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	2103      	movs	r1, #3
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	43db      	mvns	r3, r3
 80002f6:	401a      	ands	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	68da      	ldr	r2, [r3, #12]
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	79db      	ldrb	r3, [r3, #7]
 8000304:	4619      	mov	r1, r3
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	431a      	orrs	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	3301      	adds	r3, #1
 8000318:	617b      	str	r3, [r7, #20]
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	d985      	bls.n	800022c <GPIO_Init+0x1c>
    }
  }
}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800032e:	b480      	push	{r7}
 8000330:	b085      	sub	sp, #20
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	460b      	mov	r3, r1
 8000338:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800033a:	2300      	movs	r3, #0
 800033c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	691a      	ldr	r2, [r3, #16]
 8000342:	887b      	ldrh	r3, [r7, #2]
 8000344:	4013      	ands	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800034a:	2301      	movs	r3, #1
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e001      	b.n	8000354 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000350:	2300      	movs	r3, #0
 8000352:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000354:	7bfb      	ldrb	r3, [r7, #15]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	460b      	mov	r3, r1
 800036c:	807b      	strh	r3, [r7, #2]
 800036e:	4613      	mov	r3, r2
 8000370:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000372:	787b      	ldrb	r3, [r7, #1]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d003      	beq.n	8000380 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	887a      	ldrh	r2, [r7, #2]
 800037c:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800037e:	e002      	b.n	8000386 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	887a      	ldrh	r2, [r7, #2]
 8000384:	835a      	strh	r2, [r3, #26]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000392:	b480      	push	{r7}
 8000394:	b085      	sub	sp, #20
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	807b      	strh	r3, [r7, #2]
 800039e:	4613      	mov	r3, r2
 80003a0:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003aa:	787a      	ldrb	r2, [r7, #1]
 80003ac:	887b      	ldrh	r3, [r7, #2]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	fa02 f303 	lsl.w	r3, r2, r3
 80003b8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003ba:	887b      	ldrh	r3, [r7, #2]
 80003bc:	08db      	lsrs	r3, r3, #3
 80003be:	b29b      	uxth	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3208      	adds	r2, #8
 80003c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ca:	887b      	ldrh	r3, [r7, #2]
 80003cc:	f003 0307 	and.w	r3, r3, #7
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	210f      	movs	r1, #15
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	8879      	ldrh	r1, [r7, #2]
 80003dc:	08c9      	lsrs	r1, r1, #3
 80003de:	b289      	uxth	r1, r1
 80003e0:	4608      	mov	r0, r1
 80003e2:	ea02 0103 	and.w	r1, r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f100 0208 	add.w	r2, r0, #8
 80003ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	08db      	lsrs	r3, r3, #3
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3208      	adds	r2, #8
 80003fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	4313      	orrs	r3, r2
 8000404:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000406:	887b      	ldrh	r3, [r7, #2]
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b29b      	uxth	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3208      	adds	r2, #8
 8000412:	68b9      	ldr	r1, [r7, #8]
 8000414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000418:	bf00      	nop
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <RCC_DeInit+0x60>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <RCC_DeInit+0x60>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <RCC_DeInit+0x60>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <RCC_DeInit+0x60>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <RCC_DeInit+0x60>)
 8000440:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000444:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000448:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <RCC_DeInit+0x60>)
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <RCC_DeInit+0x64>)
 800044e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <RCC_DeInit+0x60>)
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <RCC_DeInit+0x68>)
 8000454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <RCC_DeInit+0x60>)
 800045a:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <RCC_DeInit+0x6c>)
 800045c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <RCC_DeInit+0x60>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <RCC_DeInit+0x60>)
 8000466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800046a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <RCC_DeInit+0x60>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <RCC_DeInit+0x60>)
 8000474:	2200      	movs	r2, #0
 8000476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800
 8000488:	24003010 	.word	0x24003010
 800048c:	20003000 	.word	0x20003000
 8000490:	24003000 	.word	0x24003000

08000494 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000494:	b480      	push	{r7}
 8000496:	b089      	sub	sp, #36	; 0x24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
 80004a8:	2302      	movs	r3, #2
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004b4:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	f003 030c 	and.w	r3, r3, #12
 80004bc:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 80004be:	69bb      	ldr	r3, [r7, #24]
 80004c0:	2b08      	cmp	r3, #8
 80004c2:	d011      	beq.n	80004e8 <RCC_GetClocksFreq+0x54>
 80004c4:	69bb      	ldr	r3, [r7, #24]
 80004c6:	2b08      	cmp	r3, #8
 80004c8:	d844      	bhi.n	8000554 <RCC_GetClocksFreq+0xc0>
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <RCC_GetClocksFreq+0x44>
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d004      	beq.n	80004e0 <RCC_GetClocksFreq+0x4c>
 80004d6:	e03d      	b.n	8000554 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a42      	ldr	r2, [pc, #264]	; (80005e4 <RCC_GetClocksFreq+0x150>)
 80004dc:	601a      	str	r2, [r3, #0]
    break;
 80004de:	e03d      	b.n	800055c <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a41      	ldr	r2, [pc, #260]	; (80005e8 <RCC_GetClocksFreq+0x154>)
 80004e4:	601a      	str	r2, [r3, #0]
    break;
 80004e6:	e039      	b.n	800055c <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004e8:	4b3d      	ldr	r3, [pc, #244]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	0d9b      	lsrs	r3, r3, #22
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004fc:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00c      	beq.n	800051e <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000504:	4a38      	ldr	r2, [pc, #224]	; (80005e8 <RCC_GetClocksFreq+0x154>)
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	fbb2 f3f3 	udiv	r3, r2, r3
 800050c:	4a34      	ldr	r2, [pc, #208]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 800050e:	6852      	ldr	r2, [r2, #4]
 8000510:	0992      	lsrs	r2, r2, #6
 8000512:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	61fb      	str	r3, [r7, #28]
 800051c:	e00b      	b.n	8000536 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800051e:	4a31      	ldr	r2, [pc, #196]	; (80005e4 <RCC_GetClocksFreq+0x150>)
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	4a2e      	ldr	r2, [pc, #184]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 8000528:	6852      	ldr	r2, [r2, #4]
 800052a:	0992      	lsrs	r2, r2, #6
 800052c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000530:	fb02 f303 	mul.w	r3, r2, r3
 8000534:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000536:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	f003 0303 	and.w	r3, r3, #3
 8000540:	3301      	adds	r3, #1
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	fbb2 f2f3 	udiv	r2, r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
    break;
 8000552:	e003      	b.n	800055c <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <RCC_GetClocksFreq+0x150>)
 8000558:	601a      	str	r2, [r3, #0]
    break;
 800055a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000564:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	091b      	lsrs	r3, r3, #4
 800056a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800056c:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <RCC_GetClocksFreq+0x158>)
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	40da      	lsrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800058c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	0a9b      	lsrs	r3, r3, #10
 8000592:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000594:	4a15      	ldr	r2, [pc, #84]	; (80005ec <RCC_GetClocksFreq+0x158>)
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	4413      	add	r3, r2
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	40da      	lsrs	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005b4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	0b5b      	lsrs	r3, r3, #13
 80005ba:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <RCC_GetClocksFreq+0x158>)
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60da      	str	r2, [r3, #12]
}
 80005d4:	bf00      	nop
 80005d6:	3724      	adds	r7, #36	; 0x24
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40023800 	.word	0x40023800
 80005e4:	00f42400 	.word	0x00f42400
 80005e8:	017d7840 	.word	0x017d7840
 80005ec:	20000000 	.word	0x20000000

080005f0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d006      	beq.n	8000610 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	4909      	ldr	r1, [pc, #36]	; (800062c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800060e:	e006      	b.n	800061e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	43db      	mvns	r3, r3
 8000618:	4904      	ldr	r1, [pc, #16]	; (800062c <RCC_AHB1PeriphClockCmd+0x3c>)
 800061a:	4013      	ands	r3, r2
 800061c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <RCC_APB1PeriphClockCmd+0x3c>)
 8000644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000646:	4909      	ldr	r1, [pc, #36]	; (800066c <RCC_APB1PeriphClockCmd+0x3c>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4313      	orrs	r3, r2
 800064c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800064e:	e006      	b.n	800065e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <RCC_APB1PeriphClockCmd+0x3c>)
 8000652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	43db      	mvns	r3, r3
 8000658:	4904      	ldr	r1, [pc, #16]	; (800066c <RCC_APB1PeriphClockCmd+0x3c>)
 800065a:	4013      	ands	r3, r2
 800065c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	8a1b      	ldrh	r3, [r3, #16]
 800068e:	b29b      	uxth	r3, r3
 8000690:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	88db      	ldrh	r3, [r3, #6]
 800069e:	461a      	mov	r2, r3
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	4313      	orrs	r3, r2
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	899b      	ldrh	r3, [r3, #12]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80006b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80006bc:	f023 030c 	bic.w	r3, r3, #12
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	889a      	ldrh	r2, [r3, #4]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	891b      	ldrh	r3, [r3, #8]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	4313      	orrs	r3, r2
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	8a9b      	ldrh	r3, [r3, #20]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	899b      	ldrh	r3, [r3, #12]
 80006fa:	461a      	mov	r2, r3
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	4313      	orrs	r3, r2
 8000700:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	b29a      	uxth	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fec0 	bl	8000494 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a30      	ldr	r2, [pc, #192]	; (80007d8 <USART_Init+0x168>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d003      	beq.n	8000724 <USART_Init+0xb4>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a2f      	ldr	r2, [pc, #188]	; (80007dc <USART_Init+0x16c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d102      	bne.n	800072a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	e001      	b.n	800072e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	899b      	ldrh	r3, [r3, #12]
 8000732:	b29b      	uxth	r3, r3
 8000734:	b21b      	sxth	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	da0c      	bge.n	8000754 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800073a:	6a3a      	ldr	r2, [r7, #32]
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	009a      	lsls	r2, r3, #2
 8000744:	441a      	add	r2, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	e00b      	b.n	800076c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000754:	6a3a      	ldr	r2, [r7, #32]
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	009a      	lsls	r2, r3, #2
 800075e:	441a      	add	r2, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <USART_Init+0x170>)
 8000770:	fba2 2303 	umull	r2, r3, r2, r3
 8000774:	095b      	lsrs	r3, r3, #5
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	fb02 f303 	mul.w	r3, r2, r3
 8000784:	69fa      	ldr	r2, [r7, #28]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	b29b      	uxth	r3, r3
 8000790:	b21b      	sxth	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	da0c      	bge.n	80007b0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	3332      	adds	r3, #50	; 0x32
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <USART_Init+0x170>)
 800079e:	fba2 2303 	umull	r2, r3, r2, r3
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	f003 0307 	and.w	r3, r3, #7
 80007a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007aa:	4313      	orrs	r3, r2
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
 80007ae:	e00b      	b.n	80007c8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	3332      	adds	r3, #50	; 0x32
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <USART_Init+0x170>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	095b      	lsrs	r3, r3, #5
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007c4:	4313      	orrs	r3, r2
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	811a      	strh	r2, [r3, #8]
}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40011000 	.word	0x40011000
 80007dc:	40011400 	.word	0x40011400
 80007e0:	51eb851f 	.word	0x51eb851f

080007e4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	899b      	ldrh	r3, [r3, #12]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000800:	b29a      	uxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000806:	e007      	b.n	8000818 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	899b      	ldrh	r3, [r3, #12]
 800080c:	b29b      	uxth	r3, r3
 800080e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000812:	b29a      	uxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	819a      	strh	r2, [r3, #12]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f103 0208 	add.w	r2, r3, #8
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f103 0208 	add.w	r2, r3, #8
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f103 0208 	add.w	r2, r3, #8
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	6892      	ldr	r2, [r2, #8]
 80008dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	6852      	ldr	r2, [r2, #4]
 80008e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d103      	bne.n	80008fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800091a:	b580      	push	{r7, lr}
 800091c:	b08c      	sub	sp, #48	; 0x30
 800091e:	af04      	add	r7, sp, #16
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4613      	mov	r3, r2
 8000928:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fe02 	bl	8001538 <pvPortMalloc>
 8000934:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00e      	beq.n	800095a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800093c:	2058      	movs	r0, #88	; 0x58
 800093e:	f000 fdfb 	bl	8001538 <pvPortMalloc>
 8000942:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	631a      	str	r2, [r3, #48]	; 0x30
 8000950:	e005      	b.n	800095e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f000 feb4 	bl	80016c0 <vPortFree>
 8000958:	e001      	b.n	800095e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d013      	beq.n	800098c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	2300      	movs	r3, #0
 8000968:	9303      	str	r3, [sp, #12]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	9302      	str	r3, [sp, #8]
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f80e 	bl	800099c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000980:	69f8      	ldr	r0, [r7, #28]
 8000982:	f000 f8a1 	bl	8000ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	e002      	b.n	8000992 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000992:	69bb      	ldr	r3, [r7, #24]
	}
 8000994:	4618      	mov	r0, r3
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10a      	bne.n	80009c6 <prvInitialiseNewTask+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b4:	f383 8811 	msr	BASEPRI, r3
 80009b8:	f3bf 8f6f 	isb	sy
 80009bc:	f3bf 8f4f 	dsb	sy
 80009c0:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80009c2:	bf00      	nop
 80009c4:	e7fe      	b.n	80009c4 <prvInitialiseNewTask+0x28>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80009c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	461a      	mov	r2, r3
 80009d0:	21a5      	movs	r1, #165	; 0xa5
 80009d2:	f001 fa07 	bl	8001de4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009e0:	3b01      	subs	r3, #1
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	f023 0307 	bic.w	r3, r3, #7
 80009ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00a      	beq.n	8000a10 <prvInitialiseNewTask+0x74>
	__asm volatile
 80009fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009fe:	f383 8811 	msr	BASEPRI, r3
 8000a02:	f3bf 8f6f 	isb	sy
 8000a06:	f3bf 8f4f 	dsb	sy
 8000a0a:	613b      	str	r3, [r7, #16]
}
 8000a0c:	bf00      	nop
 8000a0e:	e7fe      	b.n	8000a0e <prvInitialiseNewTask+0x72>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	e012      	b.n	8000a3c <prvInitialiseNewTask+0xa0>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	7819      	ldrb	r1, [r3, #0]
 8000a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	4413      	add	r3, r2
 8000a24:	3334      	adds	r3, #52	; 0x34
 8000a26:	460a      	mov	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <prvInitialiseNewTask+0xa8>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	2b09      	cmp	r3, #9
 8000a40:	d9e9      	bls.n	8000a16 <prvInitialiseNewTask+0x7a>
 8000a42:	e000      	b.n	8000a46 <prvInitialiseNewTask+0xaa>
		{
			break;
 8000a44:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d901      	bls.n	8000a58 <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a54:	2304      	movs	r3, #4
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a62:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a66:	2200      	movs	r2, #0
 8000a68:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fef8 	bl	8000864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a76:	3318      	adds	r3, #24
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fef3 	bl	8000864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	f1c3 0205 	rsb	r2, r3, #5
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a96:	2200      	movs	r2, #0
 8000a98:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	68f9      	ldr	r1, [r7, #12]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f000 fb38 	bl	800111c <pxPortInitialiseStack>
 8000aac:	4602      	mov	r2, r0
 8000aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000ad0:	f000 fc50 	bl	8001374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <prvAddNewTaskToReadyList+0xc0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <prvAddNewTaskToReadyList+0xc0>)
 8000adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <prvAddNewTaskToReadyList+0xc4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d109      	bne.n	8000afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000ae6:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <prvAddNewTaskToReadyList+0xc4>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <prvAddNewTaskToReadyList+0xc0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d110      	bne.n	8000b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000af4:	f000 fa74 	bl	8000fe0 <prvInitialiseTaskLists>
 8000af8:	e00d      	b.n	8000b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000afa:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <prvAddNewTaskToReadyList+0xc8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d109      	bne.n	8000b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <prvAddNewTaskToReadyList+0xc4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d802      	bhi.n	8000b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <prvAddNewTaskToReadyList+0xc4>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <prvAddNewTaskToReadyList+0xcc>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <prvAddNewTaskToReadyList+0xcc>)
 8000b1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <prvAddNewTaskToReadyList+0xcc>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <prvAddNewTaskToReadyList+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <prvAddNewTaskToReadyList+0xd0>)
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <prvAddNewTaskToReadyList+0xd4>)
 8000b48:	441a      	add	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4610      	mov	r0, r2
 8000b52:	f7ff fe94 	bl	800087e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000b56:	f000 fc3d 	bl	80013d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <prvAddNewTaskToReadyList+0xc8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00e      	beq.n	8000b80 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <prvAddNewTaskToReadyList+0xc4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <prvAddNewTaskToReadyList+0xd8>)
 8000b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	f3bf 8f4f 	dsb	sy
 8000b7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000011c 	.word	0x2000011c
 8000b8c:	20000044 	.word	0x20000044
 8000b90:	20000128 	.word	0x20000128
 8000b94:	20000138 	.word	0x20000138
 8000b98:	20000124 	.word	0x20000124
 8000b9c:	20000048 	.word	0x20000048
 8000ba0:	e000ed04 	.word	0xe000ed04

08000ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <vTaskStartScheduler+0x78>)
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2282      	movs	r2, #130	; 0x82
 8000bb6:	491a      	ldr	r1, [pc, #104]	; (8000c20 <vTaskStartScheduler+0x7c>)
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <vTaskStartScheduler+0x80>)
 8000bba:	f7ff feae 	bl	800091a <xTaskCreate>
 8000bbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d116      	bne.n	8000bf4 <vTaskStartScheduler+0x50>
	__asm volatile
 8000bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bca:	f383 8811 	msr	BASEPRI, r3
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f3bf 8f4f 	dsb	sy
 8000bd6:	60bb      	str	r3, [r7, #8]
}
 8000bd8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <vTaskStartScheduler+0x84>)
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <vTaskStartScheduler+0x88>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <vTaskStartScheduler+0x8c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000bee:	f000 fb1f 	bl	8001230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000bf2:	e00e      	b.n	8000c12 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfa:	d10a      	bne.n	8000c12 <vTaskStartScheduler+0x6e>
	__asm volatile
 8000bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c00:	f383 8811 	msr	BASEPRI, r3
 8000c04:	f3bf 8f6f 	isb	sy
 8000c08:	f3bf 8f4f 	dsb	sy
 8000c0c:	607b      	str	r3, [r7, #4]
}
 8000c0e:	bf00      	nop
 8000c10:	e7fe      	b.n	8000c10 <vTaskStartScheduler+0x6c>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000140 	.word	0x20000140
 8000c20:	08001e0c 	.word	0x08001e0c
 8000c24:	08000fb1 	.word	0x08000fb1
 8000c28:	2000013c 	.word	0x2000013c
 8000c2c:	20000128 	.word	0x20000128
 8000c30:	20000120 	.word	0x20000120

08000c34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <vTaskSuspendAll+0x18>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <vTaskSuspendAll+0x18>)
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	20000144 	.word	0x20000144

08000c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <xTaskResumeAll+0x114>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10a      	bne.n	8000c7c <xTaskResumeAll+0x2c>
	__asm volatile
 8000c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	603b      	str	r3, [r7, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	e7fe      	b.n	8000c7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000c7c:	f000 fb7a 	bl	8001374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000c80:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <xTaskResumeAll+0x114>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	4a37      	ldr	r2, [pc, #220]	; (8000d64 <xTaskResumeAll+0x114>)
 8000c88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <xTaskResumeAll+0x114>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d161      	bne.n	8000d56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <xTaskResumeAll+0x118>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d05d      	beq.n	8000d56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c9a:	e02e      	b.n	8000cfa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <xTaskResumeAll+0x11c>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe0c 	bl	80008c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fe07 	bl	80008c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <xTaskResumeAll+0x120>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	4a2a      	ldr	r2, [pc, #168]	; (8000d70 <xTaskResumeAll+0x120>)
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <xTaskResumeAll+0x124>)
 8000cd8:	441a      	add	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	f7ff fdcc 	bl	800087e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <xTaskResumeAll+0x128>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d302      	bcc.n	8000cfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <xTaskResumeAll+0x12c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <xTaskResumeAll+0x11c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1cc      	bne.n	8000c9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000d08:	f000 f9e8 	bl	80010dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <xTaskResumeAll+0x130>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d010      	beq.n	8000d3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000d18:	f000 f836 	bl	8000d88 <xTaskIncrementTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <xTaskResumeAll+0x12c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f1      	bne.n	8000d18 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <xTaskResumeAll+0x130>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <xTaskResumeAll+0x12c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d009      	beq.n	8000d56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <xTaskResumeAll+0x134>)
 8000d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000d56:	f000 fb3d 	bl	80013d4 <vPortExitCritical>

	return xAlreadyYielded;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000144 	.word	0x20000144
 8000d68:	2000011c 	.word	0x2000011c
 8000d6c:	200000dc 	.word	0x200000dc
 8000d70:	20000124 	.word	0x20000124
 8000d74:	20000048 	.word	0x20000048
 8000d78:	20000044 	.word	0x20000044
 8000d7c:	20000130 	.word	0x20000130
 8000d80:	2000012c 	.word	0x2000012c
 8000d84:	e000ed04 	.word	0xe000ed04

08000d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d92:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <xTaskIncrementTick+0x144>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8088 	bne.w	8000eac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d9c:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <xTaskIncrementTick+0x148>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000da4:	4a4a      	ldr	r2, [pc, #296]	; (8000ed0 <xTaskIncrementTick+0x148>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d120      	bne.n	8000df2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8000db0:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <xTaskIncrementTick+0x14c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8000dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dbe:	f383 8811 	msr	BASEPRI, r3
 8000dc2:	f3bf 8f6f 	isb	sy
 8000dc6:	f3bf 8f4f 	dsb	sy
 8000dca:	603b      	str	r3, [r7, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	e7fe      	b.n	8000dce <xTaskIncrementTick+0x46>
 8000dd0:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <xTaskIncrementTick+0x14c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <xTaskIncrementTick+0x150>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <xTaskIncrementTick+0x14c>)
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <xTaskIncrementTick+0x150>)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <xTaskIncrementTick+0x154>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <xTaskIncrementTick+0x154>)
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	f000 f975 	bl	80010dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000df2:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <xTaskIncrementTick+0x158>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d348      	bcc.n	8000e8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <xTaskIncrementTick+0x14c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d104      	bne.n	8000e10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <xTaskIncrementTick+0x158>)
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	601a      	str	r2, [r3, #0]
					break;
 8000e0e:	e03e      	b.n	8000e8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <xTaskIncrementTick+0x14c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d203      	bcs.n	8000e30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <xTaskIncrementTick+0x158>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000e2e:	e02e      	b.n	8000e8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3304      	adds	r3, #4
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd46 	bl	80008c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d004      	beq.n	8000e4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3318      	adds	r3, #24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fd3d 	bl	80008c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2201      	movs	r2, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <xTaskIncrementTick+0x15c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <xTaskIncrementTick+0x15c>)
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <xTaskIncrementTick+0x160>)
 8000e6c:	441a      	add	r2, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	3304      	adds	r3, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4610      	mov	r0, r2
 8000e76:	f7ff fd02 	bl	800087e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <xTaskIncrementTick+0x164>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3b9      	bcc.n	8000dfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e8c:	e7b6      	b.n	8000dfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <xTaskIncrementTick+0x164>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e94:	4914      	ldr	r1, [pc, #80]	; (8000ee8 <xTaskIncrementTick+0x160>)
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d907      	bls.n	8000eb6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e004      	b.n	8000eb6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <xTaskIncrementTick+0x168>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <xTaskIncrementTick+0x168>)
 8000eb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <xTaskIncrementTick+0x16c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000ec2:	697b      	ldr	r3, [r7, #20]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000144 	.word	0x20000144
 8000ed0:	20000120 	.word	0x20000120
 8000ed4:	200000d4 	.word	0x200000d4
 8000ed8:	200000d8 	.word	0x200000d8
 8000edc:	20000134 	.word	0x20000134
 8000ee0:	2000013c 	.word	0x2000013c
 8000ee4:	20000124 	.word	0x20000124
 8000ee8:	20000048 	.word	0x20000048
 8000eec:	20000044 	.word	0x20000044
 8000ef0:	2000012c 	.word	0x2000012c
 8000ef4:	20000130 	.word	0x20000130

08000ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <vTaskSwitchContext+0xa4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <vTaskSwitchContext+0xa8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000f0c:	e03f      	b.n	8000f8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <vTaskSwitchContext+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <vTaskSwitchContext+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	fab3 f383 	clz	r3, r3
 8000f20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	f1c3 031f 	rsb	r3, r3, #31
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	491f      	ldr	r1, [pc, #124]	; (8000fa8 <vTaskSwitchContext+0xb0>)
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10a      	bne.n	8000f54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8000f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f42:	f383 8811 	msr	BASEPRI, r3
 8000f46:	f3bf 8f6f 	isb	sy
 8000f4a:	f3bf 8f4f 	dsb	sy
 8000f4e:	607b      	str	r3, [r7, #4]
}
 8000f50:	bf00      	nop
 8000f52:	e7fe      	b.n	8000f52 <vTaskSwitchContext+0x5a>
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <vTaskSwitchContext+0xb0>)
 8000f60:	4413      	add	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3308      	adds	r3, #8
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d104      	bne.n	8000f84 <vTaskSwitchContext+0x8c>
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <vTaskSwitchContext+0xb4>)
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000144 	.word	0x20000144
 8000fa0:	20000130 	.word	0x20000130
 8000fa4:	20000124 	.word	0x20000124
 8000fa8:	20000048 	.word	0x20000048
 8000fac:	20000044 	.word	0x20000044

08000fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000fb8:	f000 f852 	bl	8001060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <prvIdleTask+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d9f9      	bls.n	8000fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <prvIdleTask+0x2c>)
 8000fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000fd4:	e7f0      	b.n	8000fb8 <prvIdleTask+0x8>
 8000fd6:	bf00      	nop
 8000fd8:	20000048 	.word	0x20000048
 8000fdc:	e000ed04 	.word	0xe000ed04

08000fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e00c      	b.n	8001006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <prvInitialiseTaskLists+0x60>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fc12 	bl	8000824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d9ef      	bls.n	8000fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <prvInitialiseTaskLists+0x64>)
 800100e:	f7ff fc09 	bl	8000824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <prvInitialiseTaskLists+0x68>)
 8001014:	f7ff fc06 	bl	8000824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <prvInitialiseTaskLists+0x6c>)
 800101a:	f7ff fc03 	bl	8000824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <prvInitialiseTaskLists+0x70>)
 8001020:	f7ff fc00 	bl	8000824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <prvInitialiseTaskLists+0x74>)
 8001026:	f7ff fbfd 	bl	8000824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <prvInitialiseTaskLists+0x78>)
 800102c:	4a05      	ldr	r2, [pc, #20]	; (8001044 <prvInitialiseTaskLists+0x64>)
 800102e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <prvInitialiseTaskLists+0x7c>)
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <prvInitialiseTaskLists+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000048 	.word	0x20000048
 8001044:	200000ac 	.word	0x200000ac
 8001048:	200000c0 	.word	0x200000c0
 800104c:	200000dc 	.word	0x200000dc
 8001050:	200000f0 	.word	0x200000f0
 8001054:	20000108 	.word	0x20000108
 8001058:	200000d4 	.word	0x200000d4
 800105c:	200000d8 	.word	0x200000d8

08001060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001066:	e019      	b.n	800109c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001068:	f000 f984 	bl	8001374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <prvCheckTasksWaitingTermination+0x50>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3304      	adds	r3, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fc24 	bl	80008c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <prvCheckTasksWaitingTermination+0x54>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3b01      	subs	r3, #1
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <prvCheckTasksWaitingTermination+0x54>)
 8001086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <prvCheckTasksWaitingTermination+0x58>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <prvCheckTasksWaitingTermination+0x58>)
 8001090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001092:	f000 f99f 	bl	80013d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f810 	bl	80010bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <prvCheckTasksWaitingTermination+0x58>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e1      	bne.n	8001068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000f0 	.word	0x200000f0
 80010b4:	2000011c 	.word	0x2000011c
 80010b8:	20000104 	.word	0x20000104

080010bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 faf9 	bl	80016c0 <vPortFree>
			vPortFree( pxTCB );
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 faf6 	bl	80016c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <prvResetNextTaskUnblockTime+0x38>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <prvResetNextTaskUnblockTime+0x3c>)
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295
 80010f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80010f4:	e008      	b.n	8001108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <prvResetNextTaskUnblockTime+0x38>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <prvResetNextTaskUnblockTime+0x3c>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	200000d4 	.word	0x200000d4
 8001118:	2000013c 	.word	0x2000013c

0800111c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3b04      	subs	r3, #4
 800112c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3b04      	subs	r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f023 0201 	bic.w	r2, r3, #1
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3b04      	subs	r3, #4
 800114a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <pxPortInitialiseStack+0x64>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3b14      	subs	r3, #20
 8001156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3b04      	subs	r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f06f 0202 	mvn.w	r2, #2
 800116a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3b20      	subs	r3, #32
 8001170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	08001185 	.word	0x08001185

08001184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <prvTaskExitError+0x54>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001196:	d00a      	beq.n	80011ae <prvTaskExitError+0x2a>
	__asm volatile
 8001198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800119c:	f383 8811 	msr	BASEPRI, r3
 80011a0:	f3bf 8f6f 	isb	sy
 80011a4:	f3bf 8f4f 	dsb	sy
 80011a8:	60fb      	str	r3, [r7, #12]
}
 80011aa:	bf00      	nop
 80011ac:	e7fe      	b.n	80011ac <prvTaskExitError+0x28>
	__asm volatile
 80011ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b2:	f383 8811 	msr	BASEPRI, r3
 80011b6:	f3bf 8f6f 	isb	sy
 80011ba:	f3bf 8f4f 	dsb	sy
 80011be:	60bb      	str	r3, [r7, #8]
}
 80011c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80011c2:	bf00      	nop
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0fc      	beq.n	80011c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000010 	.word	0x20000010
 80011dc:	00000000 	.word	0x00000000

080011e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <pxCurrentTCBConst2>)
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	6808      	ldr	r0, [r1, #0]
 80011e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ea:	f380 8809 	msr	PSP, r0
 80011ee:	f3bf 8f6f 	isb	sy
 80011f2:	f04f 0000 	mov.w	r0, #0
 80011f6:	f380 8811 	msr	BASEPRI, r0
 80011fa:	4770      	bx	lr
 80011fc:	f3af 8000 	nop.w

08001200 <pxCurrentTCBConst2>:
 8001200:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop

08001208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <prvPortStartFirstTask+0x24>)
 800120a:	6800      	ldr	r0, [r0, #0]
 800120c:	6800      	ldr	r0, [r0, #0]
 800120e:	f380 8808 	msr	MSP, r0
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	f380 8814 	msr	CONTROL, r0
 800121a:	b662      	cpsie	i
 800121c:	b661      	cpsie	f
 800121e:	f3bf 8f4f 	dsb	sy
 8001222:	f3bf 8f6f 	isb	sy
 8001226:	df00      	svc	0
 8001228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800122a:	bf00      	nop
 800122c:	e000ed08 	.word	0xe000ed08

08001230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <xPortStartScheduler+0x120>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <xPortStartScheduler+0x124>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d10a      	bne.n	8001256 <xPortStartScheduler+0x26>
	__asm volatile
 8001240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001244:	f383 8811 	msr	BASEPRI, r3
 8001248:	f3bf 8f6f 	isb	sy
 800124c:	f3bf 8f4f 	dsb	sy
 8001250:	613b      	str	r3, [r7, #16]
}
 8001252:	bf00      	nop
 8001254:	e7fe      	b.n	8001254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <xPortStartScheduler+0x120>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <xPortStartScheduler+0x128>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d10a      	bne.n	8001276 <xPortStartScheduler+0x46>
	__asm volatile
 8001260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001264:	f383 8811 	msr	BASEPRI, r3
 8001268:	f3bf 8f6f 	isb	sy
 800126c:	f3bf 8f4f 	dsb	sy
 8001270:	60fb      	str	r3, [r7, #12]
}
 8001272:	bf00      	nop
 8001274:	e7fe      	b.n	8001274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001276:	4b39      	ldr	r3, [pc, #228]	; (800135c <xPortStartScheduler+0x12c>)
 8001278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	22ff      	movs	r2, #255	; 0xff
 8001286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <xPortStartScheduler+0x130>)
 800129c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <xPortStartScheduler+0x134>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012a4:	e009      	b.n	80012ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <xPortStartScheduler+0x134>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <xPortStartScheduler+0x134>)
 80012ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	2b80      	cmp	r3, #128	; 0x80
 80012c4:	d0ef      	beq.n	80012a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <xPortStartScheduler+0x134>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00a      	beq.n	80012e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80012d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d6:	f383 8811 	msr	BASEPRI, r3
 80012da:	f3bf 8f6f 	isb	sy
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	60bb      	str	r3, [r7, #8]
}
 80012e4:	bf00      	nop
 80012e6:	e7fe      	b.n	80012e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <xPortStartScheduler+0x134>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <xPortStartScheduler+0x134>)
 80012f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <xPortStartScheduler+0x134>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012fa:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <xPortStartScheduler+0x134>)
 80012fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <xPortStartScheduler+0x138>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <xPortStartScheduler+0x138>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <xPortStartScheduler+0x138>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <xPortStartScheduler+0x138>)
 8001318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800131c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800131e:	f000 f8dd 	bl	80014dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <xPortStartScheduler+0x13c>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001328:	f000 f8fc 	bl	8001524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <xPortStartScheduler+0x140>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <xPortStartScheduler+0x140>)
 8001332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001338:	f7ff ff66 	bl	8001208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800133c:	f7ff fddc 	bl	8000ef8 <vTaskSwitchContext>
	prvTaskExitError();
 8001340:	f7ff ff20 	bl	8001184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00
 8001354:	410fc271 	.word	0x410fc271
 8001358:	410fc270 	.word	0x410fc270
 800135c:	e000e400 	.word	0xe000e400
 8001360:	20000148 	.word	0x20000148
 8001364:	2000014c 	.word	0x2000014c
 8001368:	e000ed20 	.word	0xe000ed20
 800136c:	20000010 	.word	0x20000010
 8001370:	e000ef34 	.word	0xe000ef34

08001374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
	__asm volatile
 800137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137e:	f383 8811 	msr	BASEPRI, r3
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	607b      	str	r3, [r7, #4]
}
 800138c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <vPortEnterCritical+0x58>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <vPortEnterCritical+0x58>)
 8001396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <vPortEnterCritical+0x58>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10f      	bne.n	80013c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <vPortEnterCritical+0x5c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00a      	beq.n	80013c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80013aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ae:	f383 8811 	msr	BASEPRI, r3
 80013b2:	f3bf 8f6f 	isb	sy
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	603b      	str	r3, [r7, #0]
}
 80013bc:	bf00      	nop
 80013be:	e7fe      	b.n	80013be <vPortEnterCritical+0x4a>
	}
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000010 	.word	0x20000010
 80013d0:	e000ed04 	.word	0xe000ed04

080013d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <vPortExitCritical+0x50>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <vPortExitCritical+0x24>
	__asm volatile
 80013e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e6:	f383 8811 	msr	BASEPRI, r3
 80013ea:	f3bf 8f6f 	isb	sy
 80013ee:	f3bf 8f4f 	dsb	sy
 80013f2:	607b      	str	r3, [r7, #4]
}
 80013f4:	bf00      	nop
 80013f6:	e7fe      	b.n	80013f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <vPortExitCritical+0x50>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <vPortExitCritical+0x50>)
 8001400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <vPortExitCritical+0x50>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <vPortExitCritical+0x42>
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000010 	.word	0x20000010
	...

08001430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001430:	f3ef 8009 	mrs	r0, PSP
 8001434:	f3bf 8f6f 	isb	sy
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <pxCurrentTCBConst>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f01e 0f10 	tst.w	lr, #16
 8001440:	bf08      	it	eq
 8001442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800144a:	6010      	str	r0, [r2, #0]
 800144c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001454:	f380 8811 	msr	BASEPRI, r0
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	f3bf 8f6f 	isb	sy
 8001460:	f7ff fd4a 	bl	8000ef8 <vTaskSwitchContext>
 8001464:	f04f 0000 	mov.w	r0, #0
 8001468:	f380 8811 	msr	BASEPRI, r0
 800146c:	bc09      	pop	{r0, r3}
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	6808      	ldr	r0, [r1, #0]
 8001472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001476:	f01e 0f10 	tst.w	lr, #16
 800147a:	bf08      	it	eq
 800147c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001480:	f380 8809 	msr	PSP, r0
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w

08001490 <pxCurrentTCBConst>:
 8001490:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop

08001498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	__asm volatile
 800149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a2:	f383 8811 	msr	BASEPRI, r3
 80014a6:	f3bf 8f6f 	isb	sy
 80014aa:	f3bf 8f4f 	dsb	sy
 80014ae:	607b      	str	r3, [r7, #4]
}
 80014b0:	bf00      	nop
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80014b2:	f7ff fc69 	bl	8000d88 <xTaskIncrementTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <SysTick_Handler+0x2c>
		{
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SysTick_Handler+0x40>)
 80014be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f383 8811 	msr	BASEPRI, r3
}
 80014ce:	bf00      	nop
		{
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	e000ed04 	.word	0xe000ed04

080014dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <vPortSetupTimerInterrupt+0x34>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <vPortSetupTimerInterrupt+0x38>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <vPortSetupTimerInterrupt+0x3c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <vPortSetupTimerInterrupt+0x40>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	099b      	lsrs	r3, r3, #6
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <vPortSetupTimerInterrupt+0x44>)
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <vPortSetupTimerInterrupt+0x34>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010
 8001514:	e000e018 	.word	0xe000e018
 8001518:	20000014 	.word	0x20000014
 800151c:	10624dd3 	.word	0x10624dd3
 8001520:	e000e014 	.word	0xe000e014

08001524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001534 <vPortEnableVFP+0x10>
 8001528:	6801      	ldr	r1, [r0, #0]
 800152a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800152e:	6001      	str	r1, [r0, #0]
 8001530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001532:	bf00      	nop
 8001534:	e000ed88 	.word	0xe000ed88

08001538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001544:	f7ff fb76 	bl	8000c34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <pvPortMalloc+0x174>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001550:	f000 f910 	bl	8001774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001554:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <pvPortMalloc+0x178>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	f040 808e 	bne.w	800167e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01d      	beq.n	80015a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001568:	2208      	movs	r2, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	2b00      	cmp	r3, #0
 8001578:	d014      	beq.n	80015a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f023 0307 	bic.w	r3, r3, #7
 8001580:	3308      	adds	r3, #8
 8001582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00a      	beq.n	80015a4 <pvPortMalloc+0x6c>
	__asm volatile
 800158e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001592:	f383 8811 	msr	BASEPRI, r3
 8001596:	f3bf 8f6f 	isb	sy
 800159a:	f3bf 8f4f 	dsb	sy
 800159e:	617b      	str	r3, [r7, #20]
}
 80015a0:	bf00      	nop
 80015a2:	e7fe      	b.n	80015a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d069      	beq.n	800167e <pvPortMalloc+0x146>
 80015aa:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <pvPortMalloc+0x17c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d864      	bhi.n	800167e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <pvPortMalloc+0x180>)
 80015b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <pvPortMalloc+0x180>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015be:	e004      	b.n	80015ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d903      	bls.n	80015dc <pvPortMalloc+0xa4>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f1      	bne.n	80015c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <pvPortMalloc+0x174>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d04b      	beq.n	800167e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2208      	movs	r2, #8
 80015ec:	4413      	add	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	2308      	movs	r3, #8
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	429a      	cmp	r2, r3
 8001606:	d91f      	bls.n	8001648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00a      	beq.n	8001630 <pvPortMalloc+0xf8>
	__asm volatile
 800161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	613b      	str	r3, [r7, #16]
}
 800162c:	bf00      	nop
 800162e:	e7fe      	b.n	800162e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1ad2      	subs	r2, r2, r3
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001642:	69b8      	ldr	r0, [r7, #24]
 8001644:	f000 f8f8 	bl	8001838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <pvPortMalloc+0x17c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <pvPortMalloc+0x17c>)
 8001654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <pvPortMalloc+0x17c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <pvPortMalloc+0x184>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d203      	bcs.n	800166a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <pvPortMalloc+0x17c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <pvPortMalloc+0x184>)
 8001668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <pvPortMalloc+0x178>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	431a      	orrs	r2, r3
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800167e:	f7ff fae7 	bl	8000c50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <pvPortMalloc+0x16a>
	__asm volatile
 800168c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001690:	f383 8811 	msr	BASEPRI, r3
 8001694:	f3bf 8f6f 	isb	sy
 8001698:	f3bf 8f4f 	dsb	sy
 800169c:	60fb      	str	r3, [r7, #12]
}
 800169e:	bf00      	nop
 80016a0:	e7fe      	b.n	80016a0 <pvPortMalloc+0x168>
	return pvReturn;
 80016a2:	69fb      	ldr	r3, [r7, #28]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20012d58 	.word	0x20012d58
 80016b0:	20012d64 	.word	0x20012d64
 80016b4:	20012d5c 	.word	0x20012d5c
 80016b8:	20012d50 	.word	0x20012d50
 80016bc:	20012d60 	.word	0x20012d60

080016c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d048      	beq.n	8001764 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80016d2:	2308      	movs	r3, #8
 80016d4:	425b      	negs	r3, r3
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4413      	add	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <vPortFree+0xac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <vPortFree+0x44>
	__asm volatile
 80016ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f2:	f383 8811 	msr	BASEPRI, r3
 80016f6:	f3bf 8f6f 	isb	sy
 80016fa:	f3bf 8f4f 	dsb	sy
 80016fe:	60fb      	str	r3, [r7, #12]
}
 8001700:	bf00      	nop
 8001702:	e7fe      	b.n	8001702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00a      	beq.n	8001722 <vPortFree+0x62>
	__asm volatile
 800170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001710:	f383 8811 	msr	BASEPRI, r3
 8001714:	f3bf 8f6f 	isb	sy
 8001718:	f3bf 8f4f 	dsb	sy
 800171c:	60bb      	str	r3, [r7, #8]
}
 800171e:	bf00      	nop
 8001720:	e7fe      	b.n	8001720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <vPortFree+0xac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d019      	beq.n	8001764 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d115      	bne.n	8001764 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <vPortFree+0xac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	43db      	mvns	r3, r3
 8001742:	401a      	ands	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001748:	f7ff fa74 	bl	8000c34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <vPortFree+0xb0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4413      	add	r3, r2
 8001756:	4a06      	ldr	r2, [pc, #24]	; (8001770 <vPortFree+0xb0>)
 8001758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800175a:	6938      	ldr	r0, [r7, #16]
 800175c:	f000 f86c 	bl	8001838 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001760:	f7ff fa76 	bl	8000c50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20012d64 	.word	0x20012d64
 8001770:	20012d5c 	.word	0x20012d5c

08001774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800177a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800177e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <prvHeapInit+0xac>)
 8001782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00c      	beq.n	80017a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3307      	adds	r3, #7
 8001792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f023 0307 	bic.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <prvHeapInit+0xac>)
 80017a4:	4413      	add	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017ac:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <prvHeapInit+0xb0>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <prvHeapInit+0xb0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80017c0:	2208      	movs	r2, #8
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0307 	bic.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <prvHeapInit+0xb4>)
 80017d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <prvHeapInit+0xb4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <prvHeapInit+0xb4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	1ad2      	subs	r2, r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <prvHeapInit+0xb4>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <prvHeapInit+0xb8>)
 8001802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <prvHeapInit+0xbc>)
 800180a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <prvHeapInit+0xc0>)
 800180e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001812:	601a      	str	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000150 	.word	0x20000150
 8001824:	20012d50 	.word	0x20012d50
 8001828:	20012d58 	.word	0x20012d58
 800182c:	20012d60 	.word	0x20012d60
 8001830:	20012d5c 	.word	0x20012d5c
 8001834:	20012d64 	.word	0x20012d64

08001838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <prvInsertBlockIntoFreeList+0xac>)
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e002      	b.n	800184c <prvInsertBlockIntoFreeList+0x14>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d8f7      	bhi.n	8001846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	4413      	add	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	d108      	bne.n	800187a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	441a      	add	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	441a      	add	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d118      	bne.n	80018c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <prvInsertBlockIntoFreeList+0xb0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d00d      	beq.n	80018b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	441a      	add	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e008      	b.n	80018c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <prvInsertBlockIntoFreeList+0xb0>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e003      	b.n	80018c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d002      	beq.n	80018d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20012d50 	.word	0x20012d50
 80018e8:	20012d58 	.word	0x20012d58

080018ec <main>:

//global variables
uint8_t button_status_flag = NOT_PRESSED;

int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af02      	add	r7, sp, #8

	//1. Reset the RCC Clock configuration to the default reset state
	//HSI ON, HSE, PLL OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();
 80018f2:	f7fe fd97 	bl	8000424 <RCC_DeInit>

	//2. Update the systemcoreclock variable
	//SystemCoreClock = 16000000;
	SystemCoreClockUpdate();
 80018f6:	f000 f90f 	bl	8001b18 <SystemCoreClockUpdate>

	prvSetupHardware();
 80018fa:	f000 f84f 	bl	800199c <prvSetupHardware>

	//let's create led_task
	xTaskCreate(led_task_handler, "LED-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80018fe:	2300      	movs	r3, #0
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	2301      	movs	r3, #1
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	2282      	movs	r2, #130	; 0x82
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <main+0x40>)
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <main+0x44>)
 800190e:	f7ff f804 	bl	800091a <xTaskCreate>

	//let's create button_task
	xTaskCreate(button_task_handler, "BUTTON-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8001912:	2300      	movs	r3, #0
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	2301      	movs	r3, #1
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	2282      	movs	r2, #130	; 0x82
 800191e:	4905      	ldr	r1, [pc, #20]	; (8001934 <main+0x48>)
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <main+0x4c>)
 8001922:	f7fe fffa 	bl	800091a <xTaskCreate>

	//start the scheduler
	vTaskStartScheduler();
 8001926:	f7ff f93d 	bl	8000ba4 <vTaskStartScheduler>

	for(;;);
 800192a:	e7fe      	b.n	800192a <main+0x3e>
 800192c:	08001e14 	.word	0x08001e14
 8001930:	0800193d 	.word	0x0800193d
 8001934:	08001e20 	.word	0x08001e20
 8001938:	0800196d 	.word	0x0800196d

0800193c <led_task_handler>:
}

void led_task_handler(void *params)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	while(1){
		if(button_status_flag == PRESSED) //turn on led
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <led_task_handler+0x28>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <led_task_handler+0x1c>
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2101      	movs	r1, #1
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <led_task_handler+0x2c>)
 8001952:	f7fe fd06 	bl	8000362 <GPIO_WriteBit>
 8001956:	e7f5      	b.n	8001944 <led_task_handler+0x8>
		else							  //turn off led
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2101      	movs	r1, #1
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <led_task_handler+0x2c>)
 800195e:	f7fe fd00 	bl	8000362 <GPIO_WriteBit>
		if(button_status_flag == PRESSED) //turn on led
 8001962:	e7ef      	b.n	8001944 <led_task_handler+0x8>
 8001964:	20012d68 	.word	0x20012d68
 8001968:	40020400 	.word	0x40020400

0800196c <button_task_handler>:
	}

}

void button_task_handler(void *params)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	while(1){
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)) // button is pressed
 8001974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001978:	4806      	ldr	r0, [pc, #24]	; (8001994 <button_task_handler+0x28>)
 800197a:	f7fe fcd8 	bl	800032e <GPIO_ReadInputDataBit>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <button_task_handler+0x20>
			button_status_flag = PRESSED;
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <button_task_handler+0x2c>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e7f3      	b.n	8001974 <button_task_handler+0x8>
		else										  // button is not pressed
			button_status_flag = NOT_PRESSED;
 800198c:	4b02      	ldr	r3, [pc, #8]	; (8001998 <button_task_handler+0x2c>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)) // button is pressed
 8001992:	e7ef      	b.n	8001974 <button_task_handler+0x8>
 8001994:	40020800 	.word	0x40020800
 8001998:	20012d68 	.word	0x20012d68

0800199c <prvSetupHardware>:

	}
}

static void prvSetupHardware(void)	//prv : private, board or any perip related init
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	//Setup led and button
	prvSetupGpio();
 80019a0:	f000 f852 	bl	8001a48 <prvSetupGpio>

	//Setup UART3
	prvSetupUart();
 80019a4:	f000 f802 	bl	80019ac <prvSetupUart>

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <prvSetupUart>:
	}

}

static void prvSetupUart(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart3_init;

	//1. enable the UART3 and GPIOD perip clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80019b2:	2101      	movs	r1, #1
 80019b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80019b8:	f7fe fe3a 	bl	8000630 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80019bc:	2101      	movs	r1, #1
 80019be:	2008      	movs	r0, #8
 80019c0:	f7fe fe16 	bl	80005f0 <RCC_AHB1PeriphClockCmd>

	//PD8 is UART3_TX, PD9 is UART3_RX,

	//2. Alternate func conf of MCU pins to behave as UART3 TX and RX
	//making zero each member element of the structure
	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	2208      	movs	r2, #8
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fa09 	bl	8001de4 <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80019d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019d6:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 80019d8:	2302      	movs	r3, #2
 80019da:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 80019dc:	2301      	movs	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(GPIOD, &gpio_uart_pins);
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4619      	mov	r1, r3
 80019e6:	4816      	ldr	r0, [pc, #88]	; (8001a40 <prvSetupUart+0x94>)
 80019e8:	f7fe fc12 	bl	8000210 <GPIO_Init>

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3); //PD8
 80019ec:	2207      	movs	r2, #7
 80019ee:	2108      	movs	r1, #8
 80019f0:	4813      	ldr	r0, [pc, #76]	; (8001a40 <prvSetupUart+0x94>)
 80019f2:	f7fe fcce 	bl	8000392 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3); //PD9
 80019f6:	2207      	movs	r2, #7
 80019f8:	2109      	movs	r1, #9
 80019fa:	4811      	ldr	r0, [pc, #68]	; (8001a40 <prvSetupUart+0x94>)
 80019fc:	f7fe fcc9 	bl	8000392 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//making zero each member element of the structure
	memset(&uart3_init, 0, sizeof(uart3_init));
 8001a00:	463b      	mov	r3, r7
 8001a02:	2210      	movs	r2, #16
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f9ec 	bl	8001de4 <memset>

	uart3_init.USART_BaudRate = 115200;
 8001a0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a10:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001a12:	2300      	movs	r3, #0
 8001a14:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001a16:	230c      	movs	r3, #12
 8001a18:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 8001a22:	2300      	movs	r3, #0
 8001a24:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3 , &uart3_init);
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <prvSetupUart+0x98>)
 8001a2c:	f7fe fe20 	bl	8000670 <USART_Init>

	//5. Enable the uart3 perip
	USART_Cmd(USART3, ENABLE);
 8001a30:	2101      	movs	r1, #1
 8001a32:	4804      	ldr	r0, [pc, #16]	; (8001a44 <prvSetupUart+0x98>)
 8001a34:	f7fe fed6 	bl	80007e4 <USART_Cmd>

}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40004800 	.word	0x40004800

08001a48 <prvSetupGpio>:

void prvSetupGpio(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
	//this func is board specific
	GPIO_InitTypeDef led_init, button_init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	2002      	movs	r0, #2
 8001a52:	f7fe fdcd 	bl	80005f0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001a56:	2101      	movs	r1, #1
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f7fe fdc9 	bl	80005f0 <RCC_AHB1PeriphClockCmd>

	led_init.GPIO_Pin = GPIO_Pin_0;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 8001a62:	2301      	movs	r3, #1
 8001a64:	733b      	strb	r3, [r7, #12]
	led_init.GPIO_OType = GPIO_OType_PP;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73bb      	strb	r3, [r7, #14]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &led_init);
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	4619      	mov	r1, r3
 8001a78:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <prvSetupGpio+0x5c>)
 8001a7a:	f7fe fbc9 	bl	8000210 <GPIO_Init>

	button_init.GPIO_Pin = GPIO_Pin_13;
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	603b      	str	r3, [r7, #0]
	button_init.GPIO_Mode = GPIO_Mode_IN;
 8001a84:	2300      	movs	r3, #0
 8001a86:	713b      	strb	r3, [r7, #4]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71fb      	strb	r3, [r7, #7]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOC, &button_init);
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <prvSetupGpio+0x60>)
 8001a96:	f7fe fbbb 	bl	8000210 <GPIO_Init>

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <SystemInit+0x60>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <SystemInit+0x60>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <SystemInit+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <SystemInit+0x64>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <SystemInit+0x64>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <SystemInit+0x64>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <SystemInit+0x64>)
 8001ad8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <SystemInit+0x64>)
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <SystemInit+0x68>)
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <SystemInit+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <SystemInit+0x64>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <SystemInit+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001afa:	f000 f88f 	bl	8001c1c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <SystemInit+0x60>)
 8001b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b04:	609a      	str	r2, [r3, #8]
#endif
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	24003010 	.word	0x24003010

08001b18 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	2302      	movs	r3, #2
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <SystemCoreClockUpdate+0xf0>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d011      	beq.n	8001b66 <SystemCoreClockUpdate+0x4e>
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d844      	bhi.n	8001bd2 <SystemCoreClockUpdate+0xba>
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <SystemCoreClockUpdate+0x3e>
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d004      	beq.n	8001b5e <SystemCoreClockUpdate+0x46>
 8001b54:	e03d      	b.n	8001bd2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <SystemCoreClockUpdate+0xf4>)
 8001b58:	4a2d      	ldr	r2, [pc, #180]	; (8001c10 <SystemCoreClockUpdate+0xf8>)
 8001b5a:	601a      	str	r2, [r3, #0]
      break;
 8001b5c:	e03d      	b.n	8001bda <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <SystemCoreClockUpdate+0xf4>)
 8001b60:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <SystemCoreClockUpdate+0xfc>)
 8001b62:	601a      	str	r2, [r3, #0]
      break;
 8001b64:	e039      	b.n	8001bda <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <SystemCoreClockUpdate+0xf0>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0d9b      	lsrs	r3, r3, #22
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <SystemCoreClockUpdate+0xf0>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b7a:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00c      	beq.n	8001b9c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b82:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <SystemCoreClockUpdate+0xfc>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <SystemCoreClockUpdate+0xf0>)
 8001b8c:	6852      	ldr	r2, [r2, #4]
 8001b8e:	0992      	lsrs	r2, r2, #6
 8001b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e00b      	b.n	8001bb4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <SystemCoreClockUpdate+0xf8>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <SystemCoreClockUpdate+0xf0>)
 8001ba6:	6852      	ldr	r2, [r2, #4]
 8001ba8:	0992      	lsrs	r2, r2, #6
 8001baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <SystemCoreClockUpdate+0xf0>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <SystemCoreClockUpdate+0xf4>)
 8001bce:	6013      	str	r3, [r2, #0]
      break;
 8001bd0:	e003      	b.n	8001bda <SystemCoreClockUpdate+0xc2>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <SystemCoreClockUpdate+0xf4>)
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <SystemCoreClockUpdate+0xf8>)
 8001bd6:	601a      	str	r2, [r3, #0]
      break;
 8001bd8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <SystemCoreClockUpdate+0xf0>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <SystemCoreClockUpdate+0x100>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <SystemCoreClockUpdate+0xf4>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <SystemCoreClockUpdate+0xf4>)
 8001bf8:	6013      	str	r3, [r2, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	20000014 	.word	0x20000014
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	017d7840 	.word	0x017d7840
 8001c18:	20000018 	.word	0x20000018

08001c1c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <SetSysClock+0x11c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a42      	ldr	r2, [pc, #264]	; (8001d38 <SetSysClock+0x11c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001c36:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <SetSysClock+0x11c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <SetSysClock+0x38>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001c52:	d1f0      	bne.n	8001c36 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <SetSysClock+0x11c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001c60:	2301      	movs	r3, #1
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	e001      	b.n	8001c6a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d15c      	bne.n	8001d2a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <SetSysClock+0x11c>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <SetSysClock+0x11c>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <SetSysClock+0x120>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <SetSysClock+0x120>)
 8001c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c86:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <SetSysClock+0x11c>)
 8001c8a:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <SetSysClock+0x11c>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <SetSysClock+0x11c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <SetSysClock+0x11c>)
 8001c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <SetSysClock+0x11c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <SetSysClock+0x11c>)
 8001ca2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001ca6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001ca8:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <SetSysClock+0x11c>)
 8001caa:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <SetSysClock+0x124>)
 8001cac:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <SetSysClock+0x11c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <SetSysClock+0x11c>)
 8001cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001cba:	bf00      	nop
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <SetSysClock+0x11c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f9      	beq.n	8001cbc <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <SetSysClock+0x120>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <SetSysClock+0x120>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8001cd4:	bf00      	nop
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <SetSysClock+0x120>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f9      	beq.n	8001cd6 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <SetSysClock+0x120>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <SetSysClock+0x120>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8001cee:	bf00      	nop
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <SetSysClock+0x120>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f9      	beq.n	8001cf0 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <SetSysClock+0x128>)
 8001cfe:	f240 7205 	movw	r2, #1797	; 0x705
 8001d02:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <SetSysClock+0x11c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <SetSysClock+0x11c>)
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <SetSysClock+0x11c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <SetSysClock+0x11c>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001d1c:	bf00      	nop
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SetSysClock+0x11c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d1f9      	bne.n	8001d1e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	07405a19 	.word	0x07405a19
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d4e:	490e      	ldr	r1, [pc, #56]	; (8001d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <LoopForever+0xe>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d64:	4c0b      	ldr	r4, [pc, #44]	; (8001d94 <LoopForever+0x16>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d72:	f7ff fe9b 	bl	8001aac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d76:	f000 f811 	bl	8001d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7a:	f7ff fdb7 	bl	80018ec <main>

08001d7e <LoopForever>:

LoopForever:
    b LoopForever
 8001d7e:	e7fe      	b.n	8001d7e <LoopForever>
  ldr   r0, =_estack
 8001d80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d88:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001d8c:	08001e34 	.word	0x08001e34
  ldr r2, =_sbss
 8001d90:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001d94:	20012d6c 	.word	0x20012d6c

08001d98 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>
	...

08001d9c <__libc_init_array>:
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	4d0d      	ldr	r5, [pc, #52]	; (8001dd4 <__libc_init_array+0x38>)
 8001da0:	4c0d      	ldr	r4, [pc, #52]	; (8001dd8 <__libc_init_array+0x3c>)
 8001da2:	1b64      	subs	r4, r4, r5
 8001da4:	10a4      	asrs	r4, r4, #2
 8001da6:	2600      	movs	r6, #0
 8001da8:	42a6      	cmp	r6, r4
 8001daa:	d109      	bne.n	8001dc0 <__libc_init_array+0x24>
 8001dac:	4d0b      	ldr	r5, [pc, #44]	; (8001ddc <__libc_init_array+0x40>)
 8001dae:	4c0c      	ldr	r4, [pc, #48]	; (8001de0 <__libc_init_array+0x44>)
 8001db0:	f000 f820 	bl	8001df4 <_init>
 8001db4:	1b64      	subs	r4, r4, r5
 8001db6:	10a4      	asrs	r4, r4, #2
 8001db8:	2600      	movs	r6, #0
 8001dba:	42a6      	cmp	r6, r4
 8001dbc:	d105      	bne.n	8001dca <__libc_init_array+0x2e>
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
 8001dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc4:	4798      	blx	r3
 8001dc6:	3601      	adds	r6, #1
 8001dc8:	e7ee      	b.n	8001da8 <__libc_init_array+0xc>
 8001dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dce:	4798      	blx	r3
 8001dd0:	3601      	adds	r6, #1
 8001dd2:	e7f2      	b.n	8001dba <__libc_init_array+0x1e>
 8001dd4:	08001e2c 	.word	0x08001e2c
 8001dd8:	08001e2c 	.word	0x08001e2c
 8001ddc:	08001e2c 	.word	0x08001e2c
 8001de0:	08001e30 	.word	0x08001e30

08001de4 <memset>:
 8001de4:	4402      	add	r2, r0
 8001de6:	4603      	mov	r3, r0
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d100      	bne.n	8001dee <memset+0xa>
 8001dec:	4770      	bx	lr
 8001dee:	f803 1b01 	strb.w	r1, [r3], #1
 8001df2:	e7f9      	b.n	8001de8 <memset+0x4>

08001df4 <_init>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr

08001e00 <_fini>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr
